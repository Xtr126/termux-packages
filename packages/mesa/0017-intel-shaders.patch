From 79d868303813875b37acb069c4689b865af4848f Mon Sep 17 00:00:00 2001
From: Mauro Rossi <issor.oruam@gmail.com>
Date: Fri, 26 Apr 2024 21:52:17 +0200
Subject: [PATCH] Intel: use runtime generated shaders code at build time

On android platform, it is complicated to deploy libclc. So we build src/intel/shaders on linux
and copy linux generated shaders code (intel_gfx*_shaders_code.h) to src/intel/shaders
src/intel/shaders/meson.build is modified to avoid using "prog_intel_clc" and to compile shaders code
---
 meson.build                                   |    1 -
 .../shaders/intel_gfx110_shaders_binding.cpp  | 3513 +++++++++++++++
 .../shaders/intel_gfx110_shaders_binding.h    |   53 +
 .../shaders/intel_gfx120_shaders_binding.cpp  | 3850 ++++++++++++++++
 .../shaders/intel_gfx120_shaders_binding.h    |   53 +
 .../shaders/intel_gfx125_shaders_binding.cpp  | 3898 +++++++++++++++++
 .../shaders/intel_gfx125_shaders_binding.h    |   53 +
 .../shaders/intel_gfx200_shaders_binding.cpp  | 3844 ++++++++++++++++
 .../shaders/intel_gfx200_shaders_binding.h    |   53 +
 .../shaders/intel_gfx300_shaders_binding.cpp  | 3844 ++++++++++++++++
 .../shaders/intel_gfx300_shaders_binding.h    |   53 +
 .../shaders/intel_gfx80_shaders_binding.cpp   | 3743 ++++++++++++++++
 .../shaders/intel_gfx80_shaders_binding.h     |   50 +
 .../shaders/intel_gfx90_shaders_binding.cpp   | 3733 ++++++++++++++++
 .../shaders/intel_gfx90_shaders_binding.h     |   50 +
 src/intel/shaders/meson.build                 |   31 +-
 16 files changed, 26793 insertions(+), 29 deletions(-)
 create mode 100644 src/intel/shaders/intel_gfx110_shaders_binding.cpp
 create mode 100644 src/intel/shaders/intel_gfx110_shaders_binding.h
 create mode 100644 src/intel/shaders/intel_gfx120_shaders_binding.cpp
 create mode 100644 src/intel/shaders/intel_gfx120_shaders_binding.h
 create mode 100644 src/intel/shaders/intel_gfx125_shaders_binding.cpp
 create mode 100644 src/intel/shaders/intel_gfx125_shaders_binding.h
 create mode 100644 src/intel/shaders/intel_gfx200_shaders_binding.cpp
 create mode 100644 src/intel/shaders/intel_gfx200_shaders_binding.h
 create mode 100644 src/intel/shaders/intel_gfx300_shaders_binding.cpp
 create mode 100644 src/intel/shaders/intel_gfx300_shaders_binding.h
 create mode 100644 src/intel/shaders/intel_gfx80_shaders_binding.cpp
 create mode 100644 src/intel/shaders/intel_gfx80_shaders_binding.h
 create mode 100644 src/intel/shaders/intel_gfx90_shaders_binding.cpp
 create mode 100644 src/intel/shaders/intel_gfx90_shaders_binding.h

diff --git a/meson.build b/meson.build
index 3bb527a5672..e71ecb6379e 100644
--- a/meson.build
+++ b/meson.build
@@ -811,7 +811,6 @@ else
 endif
 
 with_driver_using_cl = [
-  with_gallium_iris, with_intel_vk,
   with_gallium_asahi, with_asahi_vk,
   with_gallium_panfrost, with_panfrost_vk,
   with_nouveau_vk,
diff --git a/src/intel/shaders/intel_gfx110_shaders_binding.cpp b/src/intel/shaders/intel_gfx110_shaders_binding.cpp
new file mode 100644
index 00000000000..f907c0e4efe
--- /dev/null
+++ b/src/intel/shaders/intel_gfx110_shaders_binding.cpp
@@ -0,0 +1,3513 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx11_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx11_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count)
+{
+   /*
+    block b0:  // preds:
+    64    %0 = @load_param (param_idx=0)
+    32    %1 = @load_param (param_idx=1)
+    32    %2 = load_const (0x00000002)
+    32    %3 = ishl %1, %2 (0x2)
+    32    %4 = load_const (0xffffffff = -1 = 4294967295)
+    32    %5 = iadd %4 (0xffffffff), %3
+    32    %6 = load_const (0x78080000 = 2013790208)
+    32    %7 = ior %6 (0x78080000), %5
+               @store_global (%7, %0) (wrmask=x, access=none, align_mul=4, align_offset=0)
+               // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[37] = {
+    0x0000000a, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000009, 0xe4001744,
+    0xc4011744, 0x00005605, 0xc4351000, 0x00000000,
+    0x00040003, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00050006, 0x78080e05, 0xc434e000, 0x00000000,
+    0x00070008, 0x00006894, 0x00000024, 0x00000008,
+    0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, buffer_count };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx11_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx11_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    64     %2 = @load_param (param_idx=0)
+    32     %3 = @load_param (param_idx=1)
+    32     %4 = @load_param (param_idx=2)
+    64     %5 = @load_param (param_idx=3)
+    32     %6 = @load_param (param_idx=4)
+    32     %7 = @load_param (param_idx=5)
+    64     %8 = load_const (0x0000000000000004)
+    64     %9 = load_const (0x0000000000000000)
+    1     %10 = ieq %5, %9 (0x0)
+    8     %11 = load_const (0x00)
+    8     %12 = load_const (0x01)
+    32    %13 = load_const (0x00000000)
+    32    %14 = b2i32 %10
+    32    %15 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %16 = iand %1, %15 (0xffffff00)
+    32    %17 = ior %16, %14
+    32    %18 = load_const (0x00000100 = 256)
+    32    %19 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %20 = iand %17, %19 (0xffff00ff)
+    32    %21 = ior %20, %18 (0x100)
+    16x2  %22 = unpack_32_2x16 %0
+    32    %23 = u2u32 %22.x
+    32    %24 = load_const (0x00000010 = 16)
+    32    %25 = ishl %23, %24 (0x10)
+    32    %26 = extract_u16 %21, %13 (0x0)
+    32    %27 = ior %26, %25
+    64    %28 = load_const (0x0000000000000008)
+    64    %29 = load_const (0x000000000000000c = 12)
+    32x2  %30 = unpack_64_2x32 %5
+    64    %31 = u2u64 %7
+    8x4   %32 = unpack_32_4x8 %27
+    8     %33 = iand %32.x, %12 (0x1)
+    1     %34 = ine %33, %11 (0x0)
+    64    %35 = b2i64 %34
+    32    %36 = load_const (0x0000000d = 13)
+    64    %37 = ishl %35, %36 (0xd)
+    64    %38 = ior %31, %37
+    8     %39 = iand %32.y, %12 (0x1)
+    1     %40 = ine %39, %11 (0x0)
+    64    %41 = b2i64 %40
+    32    %42 = load_const (0x0000000e = 14)
+    64    %43 = ishl %41, %42 (0xe)
+    64    %44 = ior %38, %43
+    64    %45 = u2u64 %3
+    64    %46 = ishl %45, %24 (0x10)
+    64    %47 = ior %44, %46
+    64    %48 = u2u64 %4
+    32    %49 = load_const (0x0000001a = 26)
+    64    %50 = ishl %48, %49 (0x1a)
+    64    %51 = ior %47, %50
+    32    %52 = u2u32 %51
+                @store_global (%52, %2) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %53 = u2u32 %5
+    64    %54 = iadd %2, %8 (0x4)
+                @store_global (%53, %54) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %55 = mov %30.y
+    64    %56 = iadd %2, %28 (0x8)
+                @store_global (%55, %56) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %57 = iadd %2, %29 (0xc)
+                @store_global (%6, %57) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[181] = {
+    0x0000003c, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000006, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000003e, 0x00000607,
+    0x00000607, 0xe4001744, 0xc4011744, 0xc4021744,
+    0xe4031744, 0xc4041744, 0xc4051744, 0x00009705,
+    0x00000f05, 0x24327000, 0x00000000, 0x000b0007,
+    0x00001405, 0x00003405, 0x00000e05, 0xc4225000,
+    0x00000000, 0x0000000c, 0xffe01605, 0xc4322000,
+    0x00000000, 0x00110003, 0xc434e000, 0x00000000,
+    0x00100012, 0x00201605, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00150013, 0xc434e000, 0x00000000,
+    0x00140016, 0xa83b8000, 0x00000000, 0x00000002,
+    0xc438e000, 0x00000000, 0x00000018, 0x00021605,
+    0xc4351000, 0x00000000, 0x001a0019, 0xc4287000,
+    0x00000000, 0x000f0017, 0xc434e000, 0x00000000,
+    0x001b001c, 0x00011705, 0x00019705, 0xc83bc000,
+    0x00000000, 0x00000007, 0xe438f000, 0x00000000,
+    0x00000009, 0x903bb000, 0x00000000, 0x0000001d,
+    0x84322000, 0x00000000, 0x000e0022, 0x24345000,
+    0x00000000, 0x000d0023, 0xe4226000, 0x00000000,
+    0x00000024, 0x0001b605, 0xe4351000, 0x00000000,
+    0x00260025, 0xe434e000, 0x00000000, 0x00270021,
+    0x84322100, 0x00000000, 0x000e0022, 0x24345000,
+    0x00000000, 0x000d0029, 0xe4226000, 0x00000000,
+    0x0000002a, 0x0001d605, 0xe4351000, 0x00000000,
+    0x002c002b, 0xe434e000, 0x00000000, 0x002d0028,
+    0xe438f000, 0x00000000, 0x00000005, 0xe4351000,
+    0x00000000, 0x001a002f, 0xe434e000, 0x00000000,
+    0x0030002e, 0xe438f000, 0x00000000, 0x00000006,
+    0x00035605, 0xe4351000, 0x00000000, 0x00330032,
+    0xe434e000, 0x00000000, 0x00340031, 0xc438e000,
+    0x00000000, 0x00000035, 0x00006894, 0x000000d8,
+    0x00000010, 0x00040001, 0xc438e000, 0x00000000,
+    0x00000007, 0xe431f000, 0x00000000, 0x000a0004,
+    0x00006894, 0x000000dc, 0x000000e0, 0x00040001,
+    0xc435a100, 0x00000000, 0x00000020, 0xe431f000,
+    0x00000000, 0x001e0004, 0x00006894, 0x000000e4,
+    0x000000e8, 0x00040001, 0xe431f000, 0x00000000,
+    0x001f0004, 0x00006894, 0x00000020, 0x000000ec,
+    0x00040001,
+};
+   nir_def *args[6] = { dst_ptr, mocs, buffer_idx, address, size, stride };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx11_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx11_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    32     %2 = undefined
+    64     %3 = @load_param (param_idx=0)
+    1      %4 = @load_param (param_idx=1)
+    1      %5 = @load_param (param_idx=2)
+    32     %6 = @load_param (param_idx=4)
+    32     %7 = @load_param (param_idx=5)
+    32     %8 = @load_param (param_idx=6)
+    32     %9 = @load_param (param_idx=7)
+    32    %10 = @load_param (param_idx=8)
+    8     %11 = load_const (0x00)
+    8     %12 = load_const (0x01)
+    64    %13 = load_const (0x0000000000000004)
+    32    %14 = b2i32 %4
+    32    %15 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %16 = iand %2, %15 (0xffffff00)
+    32    %17 = ior %16, %14
+    32    %18 = load_const (0x00000008)
+    32    %19 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %20 = iand %17, %19 (0xffff00ff)
+    32    %21 = load_const (0x00000010 = 16)
+    32    %22 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32    %23 = load_const (0x00000018 = 24)
+    32    %24 = load_const (0x00ffffff = 16777215)
+    32    %25 = load_const (0x00000000)
+    32    %26 = extract_u16 %20, %25 (0x0)
+    64    %27 = load_const (0x0000000000000008)
+    64    %28 = load_const (0x000000000000000c = 12)
+    64    %29 = load_const (0x0000000000000010 = 16)
+    64    %30 = load_const (0x0000000000000014 = 20)
+    64    %31 = load_const (0x0000000000000018 = 24)
+    16x2  %32 = unpack_32_2x16 %0
+    8     %33 = u2u8 %32.x
+    16    %34 = load_const (0x0001)
+    16    %35 = extract_u8 %32.x, %34 (0x1)
+    8     %36 = u2u8 %35
+    32    %37 = u2u32 %33
+    32    %38 = ishl %37, %18 (0x8)
+    32    %39 = load_const (0xffff0000 = -65536 = 4294901760)
+    32    %40 = iand %39 (0xffff0000), %1
+    32    %41 = ior %40, %38
+    32    %42 = u2u32 %36
+    32    %43 = ishl %42, %21 (0x10)
+    32    %44 = iand %41, %22 (0xff00ffff)
+    32    %45 = ior %44, %43
+    8x4   %46 = unpack_32_4x8 %0
+    32    %47 = u2u32 %46.z
+    32    %48 = ishl %47, %23 (0x18)
+    32    %49 = iand %45, %24 (0xffffff)
+    32    %50 = ior %49, %48
+    8x4   %51 = unpack_32_4x8 %26
+    8     %52 = iand %51.x, %12 (0x1)
+    1     %53 = ine %52, %11 (0x0)
+    64    %54 = b2i64 %53
+    64    %55 = ishl %54, %18 (0x8)
+    32    %56 = unpack_64_2x32_split_x %55
+    32    %57 = load_const (0x00000005)
+    32    %58 = ior %56, %57 (0x5)
+    32    %59 = unpack_64_2x32_split_y %55
+    64    %60 = pack_64_2x32_split %58, %59
+    8     %61 = iand %51.y, %12 (0x1)
+    1     %62 = ine %61, %11 (0x0)
+    64    %63 = b2i64 %62
+    32    %64 = load_const (0x00000009)
+    64    %65 = ishl %63, %64 (0x9)
+    64    %66 = ior %60, %65
+    8     %67 = iand %51.z, %12 (0x1)
+    1     %68 = ine %67, %11 (0x0)
+    64    %69 = b2i64 %68
+    32    %70 = load_const (0x0000000a = 10)
+    64    %71 = ishl %69, %70 (0xa)
+    64    %72 = ior %66, %71
+    8     %73 = iand %51.w, %12 (0x1)
+    1     %74 = ine %73, %11 (0x0)
+    64    %75 = b2i64 %74
+    32    %76 = load_const (0x0000000b = 11)
+    64    %77 = ishl %75, %76 (0xb)
+    64    %78 = ior %72, %77
+    32    %79 = unpack_64_2x32_split_x %78
+    32    %80 = load_const (0x7b000000 = 2063597568)
+    32    %81 = ior %80 (0x7b000000), %79
+                @store_global (%81, %3) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %82 = b2i64 %5
+    64    %83 = ishl %82, %18 (0x8)
+    8x4   %84 = unpack_32_4x8 %50
+    8     %85 = iand %84.x, %12 (0x1)
+    1     %86 = ine %85, %11 (0x0)
+    64    %87 = b2i64 %86
+    64    %88 = ishl %87, %64 (0x9)
+    64    %89 = ior %83, %88
+    32    %90 = u2u32 %89
+    64    %91 = iadd %3, %13 (0x4)
+                @store_global (%90, %91) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %92 = iadd %3, %27 (0x8)
+                @store_global (%6, %92) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %93 = iadd %3, %28 (0xc)
+                @store_global (%7, %93) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %94 = iadd %3, %29 (0x10)
+                @store_global (%8, %94) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %95 = iadd %3, %30 (0x14)
+                @store_global (%9, %95) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %96 = iadd %3, %31 (0x18)
+                @store_global (%10, %96) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[300] = {
+    0x00000063, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000068, 0x00000607,
+    0x00000607, 0x00000607, 0xe4001744, 0x24011744,
+    0x24021744, 0xc4041744, 0xc4051744, 0xc4061744,
+    0xc4071744, 0xc4081744, 0x00001405, 0x00003405,
+    0x00009705, 0xc4225000, 0x00000000, 0x00000006,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00110004,
+    0xc434e000, 0x00000000, 0x00100012, 0x00011605,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00150013,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x00000605, 0x00ffffff, 0x00000e05, 0xc4287000,
+    0x00000000, 0x001b0016, 0x00011705, 0x00019705,
+    0x00021705, 0x00029705, 0x00031705, 0xa83b8000,
+    0x00000000, 0x00000002, 0x84390000, 0x00000000,
+    0x00000022, 0x00003505, 0xa4288000, 0x00000000,
+    0x00240022, 0x84390000, 0x00000000, 0x00000025,
+    0xc438e000, 0x00000000, 0x00000023, 0xc4351000,
+    0x00000000, 0x00140027, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00030029, 0xc434e000, 0x00000000,
+    0x0028002a, 0xc438e000, 0x00000000, 0x00000026,
+    0xc4351000, 0x00000000, 0x0017002c, 0xc4322000,
+    0x00000000, 0x0018002b, 0xc434e000, 0x00000000,
+    0x002d002e, 0x903bb000, 0x00000000, 0x00000002,
+    0xc438e200, 0x00000000, 0x00000030, 0xc4351000,
+    0x00000000, 0x00190031, 0xc4322000, 0x00000000,
+    0x001a002f, 0xc434e000, 0x00000000, 0x00320033,
+    0x903bb000, 0x00000000, 0x0000001c, 0x84322000,
+    0x00000000, 0x000e0035, 0x24345000, 0x00000000,
+    0x000d0036, 0xe4226000, 0x00000000, 0x00000037,
+    0xe4351000, 0x00000000, 0x00140038, 0xc43bd000,
+    0x00000000, 0x00000039, 0x0000b605, 0xc434e000,
+    0x00000000, 0x003b003a, 0xc43be000, 0x00000000,
+    0x00000039, 0xe4369000, 0x00000000, 0x003d003c,
+    0x84322100, 0x00000000, 0x000e0035, 0x24345000,
+    0x00000000, 0x000d003f, 0xe4226000, 0x00000000,
+    0x00000040, 0x00013605, 0xe4351000, 0x00000000,
+    0x00420041, 0xe434e000, 0x00000000, 0x0043003e,
+    0x84322200, 0x00000000, 0x000e0035, 0x24345000,
+    0x00000000, 0x000d0045, 0xe4226000, 0x00000000,
+    0x00000046, 0x00015605, 0xe4351000, 0x00000000,
+    0x00480047, 0xe434e000, 0x00000000, 0x00490044,
+    0x84322300, 0x00000000, 0x000e0035, 0x24345000,
+    0x00000000, 0x000d004b, 0xe4226000, 0x00000000,
+    0x0000004c, 0x00017605, 0xe4351000, 0x00000000,
+    0x004e004d, 0xe434e000, 0x00000000, 0x004f004a,
+    0xc43bd000, 0x00000000, 0x00000050, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x00510052, 0x00006894,
+    0x0000014c, 0x00000014, 0x00040001, 0xe4226000,
+    0x00000000, 0x00000007, 0xe4351000, 0x00000000,
+    0x00140054, 0x903bb000, 0x00000000, 0x00000034,
+    0x84322000, 0x00000000, 0x000e0056, 0x24345000,
+    0x00000000, 0x000d0057, 0xe4226000, 0x00000000,
+    0x00000058, 0xe4351000, 0x00000000, 0x00420059,
+    0xe434e000, 0x00000000, 0x005a0055, 0xc438e000,
+    0x00000000, 0x0000005b, 0xe431f000, 0x00000000,
+    0x000f0005, 0x00006894, 0x00000170, 0x00000174,
+    0x00040001, 0xe431f000, 0x00000000, 0x001d0005,
+    0x00006894, 0x00000020, 0x00000178, 0x00040001,
+    0xe431f000, 0x00000000, 0x001e0005, 0x00006894,
+    0x00000024, 0x0000017c, 0x00040001, 0xe431f000,
+    0x00000000, 0x001f0005, 0x00006894, 0x00000028,
+    0x00000180, 0x00040001, 0xe431f000, 0x00000000,
+    0x00200005, 0x00006894, 0x0000002c, 0x00000184,
+    0x00040001, 0xe431f000, 0x00000000, 0x00210005,
+    0x00006894, 0x00000030, 0x00000188, 0x00040001,
+};
+   nir_def *args[9] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx11_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id);
+
+void
+gfx11_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    64      %4 = @load_param (param_idx=0)
+    1       %5 = @load_param (param_idx=1)
+    1       %6 = @load_param (param_idx=2)
+    32      %7 = @load_param (param_idx=4)
+    32      %8 = @load_param (param_idx=5)
+    32      %9 = @load_param (param_idx=6)
+    32     %10 = @load_param (param_idx=7)
+    32     %11 = @load_param (param_idx=8)
+    32     %12 = @load_param (param_idx=9)
+    32     %13 = @load_param (param_idx=10)
+    32     %14 = @load_param (param_idx=11)
+    8      %15 = load_const (0x00)
+    8      %16 = load_const (0x01)
+    32     %17 = load_const (0x00000008)
+    64     %18 = load_const (0x0000000000000004)
+    32     %19 = b2i32 %5
+    32     %20 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %21 = iand %3, %20 (0xffffff00)
+    32     %22 = ior %21, %19
+    32     %23 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %24 = iand %22, %23 (0xffff00ff)
+    32     %25 = load_const (0x00000010 = 16)
+    32     %26 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32     %27 = load_const (0x00000018 = 24)
+    32     %28 = load_const (0x01000000 = 16777216)
+    32     %29 = load_const (0x00ffffff = 16777215)
+    32     %30 = load_const (0x00000000)
+    32     %31 = extract_u16 %24, %30 (0x0)
+    32     %32 = ior %31, %28 (0x1000000)
+    64     %33 = load_const (0x0000000000000008)
+    64     %34 = load_const (0x000000000000000c = 12)
+    64     %35 = load_const (0x0000000000000010 = 16)
+    64     %36 = load_const (0x0000000000000014 = 20)
+    64     %37 = load_const (0x0000000000000018 = 24)
+    64     %38 = load_const (0x000000000000001c = 28)
+    64     %39 = load_const (0x0000000000000020 = 32)
+    8x4    %40 = unpack_32_4x8 %1
+    8x4    %41 = unpack_32_4x8 %0
+    16     %42 = u2u16 %40.w
+    16     %43 = u2u16 %41.x
+    16     %44 = ishl %43, %17 (0x8)
+    16     %45 = ior %42, %44
+    8      %46 = u2u8 %45
+    16     %47 = load_const (0x0001)
+    16     %48 = extract_u8 %45, %47 (0x1)
+    8      %49 = u2u8 %48
+    32     %50 = u2u32 %46
+    32     %51 = ishl %50, %17 (0x8)
+    32     %52 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %53 = iand %52 (0xffff0000), %2
+    32     %54 = ior %53, %51
+    32     %55 = u2u32 %49
+    32     %56 = ishl %55, %25 (0x10)
+    32     %57 = iand %54, %26 (0xff00ffff)
+    32     %58 = ior %57, %56
+    32     %59 = u2u32 %41.y
+    32     %60 = ishl %59, %27 (0x18)
+    32     %61 = iand %58, %29 (0xffffff)
+    32     %62 = ior %61, %60
+    64     %63 = load_const (0x0000000000000024 = 36)
+    8x4    %64 = unpack_32_4x8 %32
+    8      %65 = iand %64.x, %16 (0x1)
+    1      %66 = ine %65, %15 (0x0)
+    64     %67 = b2i64 %66
+    64     %68 = ishl %67, %17 (0x8)
+    32     %69 = unpack_64_2x32_split_x %68
+    32     %70 = ior %69, %17 (0x8)
+    32     %71 = unpack_64_2x32_split_y %68
+    64     %72 = pack_64_2x32_split %70, %71
+    8      %73 = iand %64.y, %16 (0x1)
+    1      %74 = ine %73, %15 (0x0)
+    64     %75 = b2i64 %74
+    32     %76 = load_const (0x00000009)
+    64     %77 = ishl %75, %76 (0x9)
+    64     %78 = ior %72, %77
+    8      %79 = iand %64.z, %16 (0x1)
+    1      %80 = ine %79, %15 (0x0)
+    64     %81 = b2i64 %80
+    32     %82 = load_const (0x0000000a = 10)
+    64     %83 = ishl %81, %82 (0xa)
+    64     %84 = ior %78, %83
+    8      %85 = iand %64.w, %16 (0x1)
+    1      %86 = ine %85, %15 (0x0)
+    64     %87 = b2i64 %86
+    32     %88 = load_const (0x0000000b = 11)
+    64     %89 = ishl %87, %88 (0xb)
+    64     %90 = ior %84, %89
+    32     %91 = unpack_64_2x32_split_x %90
+    32     %92 = load_const (0x7b000000 = 2063597568)
+    32     %93 = ior %92 (0x7b000000), %91
+                 @store_global (%93, %4) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %94 = b2i64 %6
+    64     %95 = ishl %94, %17 (0x8)
+    8x4    %96 = unpack_32_4x8 %62
+    8      %97 = iand %96.x, %16 (0x1)
+    1      %98 = ine %97, %15 (0x0)
+    64     %99 = b2i64 %98
+    64    %100 = ishl %99, %76 (0x9)
+    64    %101 = ior %95, %100
+    32    %102 = u2u32 %101
+    64    %103 = iadd %4, %18 (0x4)
+                 @store_global (%102, %103) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %104 = iadd %4, %33 (0x8)
+                 @store_global (%7, %104) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %105 = iadd %4, %34 (0xc)
+                 @store_global (%8, %105) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %106 = iadd %4, %35 (0x10)
+                 @store_global (%9, %106) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %107 = iadd %4, %36 (0x14)
+                 @store_global (%10, %107) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %108 = iadd %4, %37 (0x18)
+                 @store_global (%11, %108) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %109 = iadd %4, %38 (0x1c)
+                 @store_global (%12, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %110 = iadd %4, %39 (0x20)
+                 @store_global (%13, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %111 = iadd %4, %63 (0x24)
+                 @store_global (%14, %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                 // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[354] = {
+    0x00000072, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000007a, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0xe4001744,
+    0x24011744, 0x24021744, 0xc4041744, 0xc4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0xc40a1744, 0xc40b1744, 0x00001405, 0x00003405,
+    0x00011605, 0x00009705, 0xc4225000, 0x00000000,
+    0x00000007, 0xffe01605, 0xc4322000, 0x00000000,
+    0x00160005, 0xc434e000, 0x00000000, 0x00150017,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00190018,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0x00000e05,
+    0xc4287000, 0x00000000, 0x0020001a, 0xc434e000,
+    0x00000000, 0x001e0021, 0x00011705, 0x00019705,
+    0x00021705, 0x00029705, 0x00031705, 0x00039705,
+    0x00041705, 0x907bb000, 0x00000000, 0x00000003,
+    0x00000000, 0x00000002, 0xa438d300, 0x00000000,
+    0x0000002a, 0xa438d000, 0x00000000, 0x0000002b,
+    0xa4351000, 0x00000000, 0x0013002d, 0xa434e000,
+    0x00000000, 0x002e002c, 0x84390000, 0x00000000,
+    0x0000002f, 0x00003505, 0xa4288000, 0x00000000,
+    0x0031002f, 0x84390000, 0x00000000, 0x00000032,
+    0xc438e000, 0x00000000, 0x00000030, 0xc4351000,
+    0x00000000, 0x00130034, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00040036, 0xc434e000, 0x00000000,
+    0x00350037, 0xc438e000, 0x00000000, 0x00000033,
+    0xc4351000, 0x00000000, 0x001b0039, 0xc4322000,
+    0x00000000, 0x001c0038, 0xc434e000, 0x00000000,
+    0x003a003b, 0xc438e100, 0x00000000, 0x0000002b,
+    0xc4351000, 0x00000000, 0x001d003d, 0xc4322000,
+    0x00000000, 0x001f003c, 0xc434e000, 0x00000000,
+    0x003e003f, 0x00049705, 0x903bb000, 0x00000000,
+    0x00000022, 0x84322000, 0x00000000, 0x00120042,
+    0x24345000, 0x00000000, 0x00110043, 0xe4226000,
+    0x00000000, 0x00000044, 0xe4351000, 0x00000000,
+    0x00130045, 0xc43bd000, 0x00000000, 0x00000046,
+    0xc434e000, 0x00000000, 0x00130047, 0xc43be000,
+    0x00000000, 0x00000046, 0xe4369000, 0x00000000,
+    0x00490048, 0x84322100, 0x00000000, 0x00120042,
+    0x24345000, 0x00000000, 0x0011004b, 0xe4226000,
+    0x00000000, 0x0000004c, 0x00013605, 0xe4351000,
+    0x00000000, 0x004e004d, 0xe434e000, 0x00000000,
+    0x004f004a, 0x84322200, 0x00000000, 0x00120042,
+    0x24345000, 0x00000000, 0x00110051, 0xe4226000,
+    0x00000000, 0x00000052, 0x00015605, 0xe4351000,
+    0x00000000, 0x00540053, 0xe434e000, 0x00000000,
+    0x00550050, 0x84322300, 0x00000000, 0x00120042,
+    0x24345000, 0x00000000, 0x00110057, 0xe4226000,
+    0x00000000, 0x00000058, 0x00017605, 0xe4351000,
+    0x00000000, 0x005a0059, 0xe434e000, 0x00000000,
+    0x005b0056, 0xc43bd000, 0x00000000, 0x0000005c,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x005d005e,
+    0x00006894, 0x0000017c, 0x00000018, 0x00040001,
+    0xe4226000, 0x00000000, 0x00000008, 0xe4351000,
+    0x00000000, 0x00130060, 0x903bb000, 0x00000000,
+    0x00000040, 0x84322000, 0x00000000, 0x00120062,
+    0x24345000, 0x00000000, 0x00110063, 0xe4226000,
+    0x00000000, 0x00000064, 0xe4351000, 0x00000000,
+    0x004e0065, 0xe434e000, 0x00000000, 0x00660061,
+    0xc438e000, 0x00000000, 0x00000067, 0xe431f000,
+    0x00000000, 0x00140006, 0x00006894, 0x000001a0,
+    0x000001a4, 0x00040001, 0xe431f000, 0x00000000,
+    0x00230006, 0x00006894, 0x00000024, 0x000001a8,
+    0x00040001, 0xe431f000, 0x00000000, 0x00240006,
+    0x00006894, 0x00000028, 0x000001ac, 0x00040001,
+    0xe431f000, 0x00000000, 0x00250006, 0x00006894,
+    0x0000002c, 0x000001b0, 0x00040001, 0xe431f000,
+    0x00000000, 0x00260006, 0x00006894, 0x00000030,
+    0x000001b4, 0x00040001, 0xe431f000, 0x00000000,
+    0x00270006, 0x00006894, 0x00000034, 0x000001b8,
+    0x00040001, 0xe431f000, 0x00000000, 0x00280006,
+    0x00006894, 0x00000038, 0x000001bc, 0x00040001,
+    0xe431f000, 0x00000000, 0x00290006, 0x00006894,
+    0x0000003c, 0x000001c0, 0x00040001, 0xe431f000,
+    0x00000000, 0x00410006, 0x00006894, 0x00000040,
+    0x000001c4, 0x00040001,
+};
+   nir_def *args[12] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location, param_base_vertex, param_base_instance, param_draw_id };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx11_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx11_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    64     %2 = @load_param (param_idx=0)
+    64     %3 = @load_param (param_idx=1)
+    64     %4 = load_const (0x0000000000000004)
+    64     %5 = load_const (0x0000000000000008)
+    8      %6 = load_const (0x00)
+    32     %7 = load_const (0x00000000)
+    32     %8 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %9 = iand %8 (0xffff0000), %1
+    32    %10 = load_const (0x0000000a = 10)
+    16x2  %11 = unpack_32_2x16 %0
+    32    %12 = u2u32 %11.y
+    32    %13 = load_const (0x00000010 = 16)
+    32    %14 = ishl %12, %13 (0x10)
+    32    %15 = extract_u16 %9, %7 (0x0)
+    32    %16 = ior %15, %14
+    8x4   %17 = unpack_32_4x8 %16
+    8     %18 = load_const (0x01)
+    8     %19 = iand %17.x, %18 (0x1)
+    1     %20 = ine %19, %6 (0x0)
+    64    %21 = b2i64 %20
+    64    %22 = ishl %21, %10 (0xa)
+    32    %23 = unpack_64_2x32_split_x %22
+    32    %24 = load_const (0x00000101 = 257)
+    32    %25 = ior %23, %24 (0x101)
+    32    %26 = unpack_64_2x32_split_y %22
+    64    %27 = pack_64_2x32_split %25, %26
+    8     %28 = iand %17.y, %18 (0x1)
+    1     %29 = ine %28, %6 (0x0)
+    64    %30 = b2i64 %29
+    32    %31 = load_const (0x0000000f = 15)
+    64    %32 = ishl %30, %31 (0xf)
+    64    %33 = ior %27, %32
+    32    %34 = unpack_64_2x32_split_x %33
+    32    %35 = load_const (0x18800000 = 411041792)
+    32    %36 = ior %34, %35 (0x18800000)
+                @store_global (%36, %2) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %37 = u2u32 %3
+    64    %38 = iadd %2, %4 (0x4)
+                @store_global (%37, %38) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %39 = unpack_64_2x32_split_y %3
+    64    %40 = iadd %2, %5 (0x8)
+                @store_global (%39, %40) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[124] = {
+    0x0000002b, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002c, 0x00000607,
+    0x00000607, 0xe4001744, 0xe4011744, 0x00009705,
+    0x00011705, 0x00001405, 0x00000e05, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0003000a, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000002, 0xc438e100,
+    0x00000000, 0x0000000d, 0x00021605, 0xc4351000,
+    0x00000000, 0x000f000e, 0xc4287000, 0x00000000,
+    0x0009000b, 0xc434e000, 0x00000000, 0x00100011,
+    0x903bb000, 0x00000000, 0x00000012, 0x00003405,
+    0x84322000, 0x00000000, 0x00140013, 0x24345000,
+    0x00000000, 0x00080015, 0xe4226000, 0x00000000,
+    0x00000016, 0xe4351000, 0x00000000, 0x000c0017,
+    0xc43bd000, 0x00000000, 0x00000018, 0x00203605,
+    0xc434e000, 0x00000000, 0x001a0019, 0xc43be000,
+    0x00000000, 0x00000018, 0xe4369000, 0x00000000,
+    0x001c001b, 0x84322100, 0x00000000, 0x00140013,
+    0x24345000, 0x00000000, 0x0008001e, 0xe4226000,
+    0x00000000, 0x0000001f, 0x0001f605, 0xe4351000,
+    0x00000000, 0x00210020, 0xe434e000, 0x00000000,
+    0x0022001d, 0xc43bd000, 0x00000000, 0x00000023,
+    0x18800e05, 0xc434e000, 0x00000000, 0x00250024,
+    0x00006894, 0x00000098, 0x00000010, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000005, 0xe431f000,
+    0x00000000, 0x00060004, 0x00006894, 0x0000009c,
+    0x000000a0, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x00070004,
+    0x00006894, 0x000000a4, 0x000000a8, 0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, addr };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx11_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx11_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    64      %6 = @load_param (param_idx=0)
+    64      %7 = @load_param (param_idx=1)
+    32      %8 = @load_param (param_idx=3)
+    32      %9 = @load_param (param_idx=4)
+    1      %10 = @load_param (param_idx=5)
+    1      %11 = @load_param (param_idx=6)
+    8      %12 = load_const (0x00)
+    8      %13 = load_const (0x01)
+    1      %14 = inot %10
+                 // succs: b1 b2
+    if %14 {
+        block b1:    // preds: b0
+        32x4   %15 = @load_global (%7) (access=none, align_mul=4, align_offset=0)
+        32     %16 = load_const (0x00000008)
+        32     %17 = mov %15.x
+        64     %18 = load_const (0x0000000000000008)
+        32     %19 = mov %15.z
+        64     %20 = load_const (0x0000000000000004)
+        32     %21 = imul %15.y, %9
+        64     %22 = load_const (0x000000000000000c = 12)
+        32     %23 = mov %15.w
+        32     %24 = load_const (0x00000000)
+        32     %25 = b2i32 %11
+        32     %26 = load_const (0xffffff00 = -256 = 4294967040)
+        32     %27 = iand %5, %26 (0xffffff00)
+        32     %28 = ior %27, %25
+        32     %29 = load_const (0xffff00ff = -65281 = 4294902015)
+        32     %30 = iand %28, %29 (0xffff00ff)
+        32     %31 = load_const (0x00000010 = 16)
+        32     %32 = load_const (0xff00ffff = -16711681 = 4278255615)
+        32     %33 = load_const (0x00000018 = 24)
+        32     %34 = load_const (0x01000000 = 16777216)
+        32     %35 = load_const (0x00ffffff = 16777215)
+        32     %36 = extract_u16 %30, %24 (0x0)
+        32     %37 = ior %36, %34 (0x1000000)
+        64     %38 = load_const (0x0000000000000010 = 16)
+        64     %39 = load_const (0x0000000000000014 = 20)
+        64     %40 = load_const (0x0000000000000018 = 24)
+        64     %41 = load_const (0x000000000000001c = 28)
+        64     %42 = load_const (0x0000000000000020 = 32)
+        8x4    %43 = unpack_32_4x8 %3
+        8x4    %44 = unpack_32_4x8 %2
+        16     %45 = u2u16 %43.w
+        16     %46 = u2u16 %44.x
+        16     %47 = ishl %46, %16 (0x8)
+        16     %48 = ior %45, %47
+        8      %49 = u2u8 %48
+        16     %50 = load_const (0x0001)
+        16     %51 = extract_u8 %48, %50 (0x1)
+        8      %52 = u2u8 %51
+        32     %53 = u2u32 %49
+        32     %54 = ishl %53, %16 (0x8)
+        32     %55 = load_const (0xffff0000 = -65536 = 4294901760)
+        32     %56 = iand %55 (0xffff0000), %4
+        32     %57 = ior %56, %54
+        32     %58 = u2u32 %52
+        32     %59 = ishl %58, %31 (0x10)
+        32     %60 = iand %57, %32 (0xff00ffff)
+        32     %61 = ior %60, %59
+        32     %62 = u2u32 %44.y
+        32     %63 = ishl %62, %33 (0x18)
+        32     %64 = iand %61, %35 (0xffffff)
+        32     %65 = ior %64, %63
+        64     %66 = load_const (0x0000000000000024 = 36)
+        8x4    %67 = unpack_32_4x8 %37
+        8      %68 = iand %67.x, %13 (0x1)
+        1      %69 = ine %68, %12 (0x0)
+        64     %70 = b2i64 %69
+        64     %71 = ishl %70, %16 (0x8)
+        32     %72 = unpack_64_2x32_split_x %71
+        32     %73 = ior %72, %16 (0x8)
+        32     %74 = unpack_64_2x32_split_y %71
+        64     %75 = pack_64_2x32_split %73, %74
+        8      %76 = iand %67.y, %13 (0x1)
+        1      %77 = ine %76, %12 (0x0)
+        64     %78 = b2i64 %77
+        32     %79 = load_const (0x00000009)
+        64     %80 = ishl %78, %79 (0x9)
+        64     %81 = ior %75, %80
+        8      %82 = iand %67.z, %13 (0x1)
+        1      %83 = ine %82, %12 (0x0)
+        64     %84 = b2i64 %83
+        32     %85 = load_const (0x0000000a = 10)
+        64     %86 = ishl %84, %85 (0xa)
+        64     %87 = ior %81, %86
+        8      %88 = iand %67.w, %13 (0x1)
+        1      %89 = ine %88, %12 (0x0)
+        64     %90 = b2i64 %89
+        32     %91 = load_const (0x0000000b = 11)
+        64     %92 = ishl %90, %91 (0xb)
+        64     %93 = ior %87, %92
+        32     %94 = unpack_64_2x32_split_x %93
+        32     %95 = load_const (0x7b000000 = 2063597568)
+        32     %96 = ior %95 (0x7b000000), %94
+                     @store_global (%96, %6) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64     %97 = b2i64 %10
+        64     %98 = ishl %97, %16 (0x8)
+        8x4    %99 = unpack_32_4x8 %65
+        8     %100 = iand %99.x, %13 (0x1)
+        1     %101 = ine %100, %12 (0x0)
+        64    %102 = b2i64 %101
+        64    %103 = ishl %102, %79 (0x9)
+        64    %104 = ior %98, %103
+        32    %105 = u2u32 %104
+        64    %106 = iadd %6, %20 (0x4)
+                     @store_global (%105, %106) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %107 = iadd %6, %18 (0x8)
+                     @store_global (%17, %107) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %108 = iadd %6, %22 (0xc)
+                     @store_global (%19, %108) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %109 = iadd %6, %38 (0x10)
+                     @store_global (%21, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %110 = iadd %6, %39 (0x14)
+                     @store_global (%23, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %111 = iadd %6, %40 (0x18)
+                     @store_global (%24 (0x0), %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %112 = iadd %6, %41 (0x1c)
+                     @store_global (%19, %112) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %113 = iadd %6, %42 (0x20)
+                     @store_global (%23, %113) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %114 = iadd %6, %66 (0x24)
+                     @store_global (%8, %114) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b3
+    } else {
+        block b2:    // preds: b0
+        32x4  %115 = @load_global (%7) (access=none, align_mul=4, align_offset=0)
+        32    %116 = load_const (0x00000008)
+        64    %117 = load_const (0x0000000000000004)
+        64    %118 = load_const (0x0000000000000010 = 16)
+        64    %119 = iadd %7, %118 (0x10)
+        32    %120 = @load_global (%119) (access=none, align_mul=4, align_offset=0)
+        32    %121 = load_const (0x00000010 = 16)
+        32    %122 = mov %115.x
+        64    %123 = load_const (0x0000000000000008)
+        32    %124 = mov %115.z
+        32    %125 = imul %115.y, %9
+        64    %126 = load_const (0x000000000000000c = 12)
+        32    %127 = mov %115.w
+        32    %128 = b2i32 %11
+        32    %129 = load_const (0xffffff00 = -256 = 4294967040)
+        32    %130 = iand %1, %129 (0xffffff00)
+        32    %131 = ior %130, %128
+        32    %132 = load_const (0xffff00ff = -65281 = 4294902015)
+        32    %133 = iand %131, %132 (0xffff00ff)
+        32    %134 = load_const (0xff00ffff = -16711681 = 4278255615)
+        32    %135 = load_const (0x00000018 = 24)
+        32    %136 = load_const (0x01000000 = 16777216)
+        32    %137 = load_const (0x00ffffff = 16777215)
+        32    %138 = load_const (0x00000000)
+        32    %139 = extract_u16 %133, %138 (0x0)
+        32    %140 = ior %139, %136 (0x1000000)
+        64    %141 = load_const (0x0000000000000014 = 20)
+        64    %142 = load_const (0x0000000000000018 = 24)
+        64    %143 = load_const (0x000000000000001c = 28)
+        64    %144 = load_const (0x0000000000000020 = 32)
+        8x4   %145 = unpack_32_4x8 %3
+        8x4   %146 = unpack_32_4x8 %2
+        16    %147 = u2u16 %145.w
+        16    %148 = u2u16 %146.x
+        16    %149 = ishl %148, %116 (0x8)
+        16    %150 = ior %147, %149
+        8     %151 = u2u8 %150
+        16    %152 = load_const (0x0001)
+        16    %153 = extract_u8 %150, %152 (0x1)
+        8     %154 = u2u8 %153
+        32    %155 = u2u32 %151
+        32    %156 = ishl %155, %116 (0x8)
+        32    %157 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %158 = iand %157 (0xffff0000), %0
+        32    %159 = ior %158, %156
+        32    %160 = u2u32 %154
+        32    %161 = ishl %160, %121 (0x10)
+        32    %162 = iand %159, %134 (0xff00ffff)
+        32    %163 = ior %162, %161
+        32    %164 = u2u32 %146.y
+        32    %165 = ishl %164, %135 (0x18)
+        32    %166 = iand %163, %137 (0xffffff)
+        32    %167 = ior %166, %165
+        64    %168 = load_const (0x0000000000000024 = 36)
+        8x4   %169 = unpack_32_4x8 %140
+        8     %170 = iand %169.x, %13 (0x1)
+        1     %171 = ine %170, %12 (0x0)
+        64    %172 = b2i64 %171
+        64    %173 = ishl %172, %116 (0x8)
+        32    %174 = unpack_64_2x32_split_x %173
+        32    %175 = ior %174, %116 (0x8)
+        32    %176 = unpack_64_2x32_split_y %173
+        64    %177 = pack_64_2x32_split %175, %176
+        8     %178 = iand %169.y, %13 (0x1)
+        1     %179 = ine %178, %12 (0x0)
+        64    %180 = b2i64 %179
+        32    %181 = load_const (0x00000009)
+        64    %182 = ishl %180, %181 (0x9)
+        64    %183 = ior %177, %182
+        8     %184 = iand %169.z, %13 (0x1)
+        1     %185 = ine %184, %12 (0x0)
+        64    %186 = b2i64 %185
+        32    %187 = load_const (0x0000000a = 10)
+        64    %188 = ishl %186, %187 (0xa)
+        64    %189 = ior %183, %188
+        8     %190 = iand %169.w, %13 (0x1)
+        1     %191 = ine %190, %12 (0x0)
+        64    %192 = b2i64 %191
+        32    %193 = load_const (0x0000000b = 11)
+        64    %194 = ishl %192, %193 (0xb)
+        64    %195 = ior %189, %194
+        32    %196 = unpack_64_2x32_split_x %195
+        32    %197 = load_const (0x7b000000 = 2063597568)
+        32    %198 = ior %197 (0x7b000000), %196
+                     @store_global (%198, %6) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %199 = b2i64 %10
+        64    %200 = ishl %199, %116 (0x8)
+        8x4   %201 = unpack_32_4x8 %167
+        8     %202 = iand %201.x, %13 (0x1)
+        1     %203 = ine %202, %12 (0x0)
+        64    %204 = b2i64 %203
+        64    %205 = ishl %204, %181 (0x9)
+        64    %206 = ior %200, %205
+        32    %207 = u2u32 %206
+        64    %208 = iadd %6, %117 (0x4)
+                     @store_global (%207, %208) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %209 = iadd %6, %123 (0x8)
+                     @store_global (%122, %209) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %210 = iadd %6, %126 (0xc)
+                     @store_global (%124, %210) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %211 = iadd %6, %118 (0x10)
+                     @store_global (%125, %211) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %212 = iadd %6, %141 (0x14)
+                     @store_global (%120, %212) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %213 = iadd %6, %142 (0x18)
+                     @store_global (%127, %213) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %214 = iadd %6, %143 (0x1c)
+                     @store_global (%127, %214) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %215 = iadd %6, %144 (0x20)
+                     @store_global (%120, %215) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %216 = iadd %6, %168 (0x24)
+                     @store_global (%8, %216) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b3
+    }
+    block b3:  // preds: b1 b2, succs: b4
+    block b4:
+   */
+   static const uint32_t impl_0_nir[675] = {
+    0x000000de, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000b, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0xe4001744, 0xe4011744, 0xc4031744,
+    0xc4041744, 0x24051744, 0x24061744, 0x00001405,
+    0x00003405, 0x2434a000, 0x00000000, 0x0000000c,
+    0x00000001, 0x00000040, 0x00000000, 0x00000001,
+    0x00000000, 0x0000006e, 0xd0005354, 0x00000024,
+    0x00000400, 0x00011605, 0xc435a000, 0x00000000,
+    0x00000012, 0x00011705, 0xc435a200, 0x00000000,
+    0x00000012, 0x00009705, 0xc433f100, 0x00000000,
+    0x000b0012, 0x00019705, 0xc435a300, 0x00000000,
+    0x00000012, 0x00000e05, 0xc4225000, 0x00000000,
+    0x0000000d, 0xffe01605, 0xc4322000, 0x00000000,
+    0x001d0007, 0xc434e000, 0x00000000, 0x001c001e,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x0020001f,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x001b0021, 0xc434e000, 0x00000000,
+    0x00250027, 0x00021705, 0x00029705, 0x00031705,
+    0x00039705, 0x00041705, 0x907bb000, 0x00000000,
+    0x00000005, 0x00000000, 0x00000004, 0xa438d300,
+    0x00000000, 0x0000002e, 0xa438d000, 0x00000000,
+    0x0000002f, 0xa4351000, 0x00000000, 0x00130031,
+    0xa434e000, 0x00000000, 0x00320030, 0x84390000,
+    0x00000000, 0x00000033, 0x00003505, 0xa4288000,
+    0x00000000, 0x00350033, 0x84390000, 0x00000000,
+    0x00000036, 0xc438e000, 0x00000000, 0x00000034,
+    0xc4351000, 0x00000000, 0x00130038, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0006003a, 0xc434e000,
+    0x00000000, 0x0039003b, 0xc438e000, 0x00000000,
+    0x00000037, 0xc4351000, 0x00000000, 0x0022003d,
+    0xc4322000, 0x00000000, 0x0023003c, 0xc434e000,
+    0x00000000, 0x003e003f, 0xc438e100, 0x00000000,
+    0x0000002f, 0xc4351000, 0x00000000, 0x00240041,
+    0xc4322000, 0x00000000, 0x00260040, 0xc434e000,
+    0x00000000, 0x00420043, 0x00049705, 0x903bb000,
+    0x00000000, 0x00000028, 0x84322000, 0x00000000,
+    0x000f0046, 0x24345000, 0x00000000, 0x000e0047,
+    0xe4226000, 0x00000000, 0x00000048, 0xe4351000,
+    0x00000000, 0x00130049, 0xc43bd000, 0x00000000,
+    0x0000004a, 0xc434e000, 0x00000000, 0x0013004b,
+    0xc43be000, 0x00000000, 0x0000004a, 0xe4369000,
+    0x00000000, 0x004d004c, 0x84322100, 0x00000000,
+    0x000f0046, 0x24345000, 0x00000000, 0x000e004f,
+    0xe4226000, 0x00000000, 0x00000050, 0x00013605,
+    0xe4351000, 0x00000000, 0x00520051, 0xe434e000,
+    0x00000000, 0x0053004e, 0x84322200, 0x00000000,
+    0x000f0046, 0x24345000, 0x00000000, 0x000e0055,
+    0xe4226000, 0x00000000, 0x00000056, 0x00015605,
+    0xe4351000, 0x00000000, 0x00580057, 0xe434e000,
+    0x00000000, 0x00590054, 0x84322300, 0x00000000,
+    0x000f0046, 0x24345000, 0x00000000, 0x000e005b,
+    0xe4226000, 0x00000000, 0x0000005c, 0x00017605,
+    0xe4351000, 0x00000000, 0x005e005d, 0xe434e000,
+    0x00000000, 0x005f005a, 0xc43bd000, 0x00000000,
+    0x00000060, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00610062, 0x00006894, 0x0000018c, 0x00000020,
+    0x00040001, 0xe4226000, 0x00000000, 0x0000000c,
+    0xe4351000, 0x00000000, 0x00130064, 0x903bb000,
+    0x00000000, 0x00000044, 0x84322000, 0x00000000,
+    0x000f0066, 0x24345000, 0x00000000, 0x000e0067,
+    0xe4226000, 0x00000000, 0x00000068, 0xe4351000,
+    0x00000000, 0x00520069, 0xe434e000, 0x00000000,
+    0x006a0065, 0xc438e000, 0x00000000, 0x0000006b,
+    0xe431f000, 0x00000000, 0x00170008, 0x00006894,
+    0x000001b0, 0x000001b4, 0x00040001, 0xe431f000,
+    0x00000000, 0x00150008, 0x00006894, 0x00000050,
+    0x000001b8, 0x00040001, 0xe431f000, 0x00000000,
+    0x00190008, 0x00006894, 0x00000058, 0x000001bc,
+    0x00040001, 0xe431f000, 0x00000000, 0x00290008,
+    0x00006894, 0x00000060, 0x000001c0, 0x00040001,
+    0xe431f000, 0x00000000, 0x002a0008, 0x00006894,
+    0x00000068, 0x000001c4, 0x00040001, 0xe431f000,
+    0x00000000, 0x002b0008, 0x00006894, 0x0000006c,
+    0x000001c8, 0x00040001, 0xe431f000, 0x00000000,
+    0x002c0008, 0x00006894, 0x00000058, 0x000001cc,
+    0x00040001, 0xe431f000, 0x00000000, 0x002d0008,
+    0x00006894, 0x00000068, 0x000001d0, 0x00040001,
+    0xe431f000, 0x00000000, 0x00450008, 0x00006894,
+    0x00000028, 0x000001d4, 0x00040001, 0x00000001,
+    0x00000000, 0x00000070, 0xd0005354, 0x00000024,
+    0x00000400, 0x00011605, 0x00009705, 0x00021705,
+    0xe431f000, 0x00000000, 0x007a0009, 0xc4005354,
+    0x000001ec, 0x00000400, 0x00021605, 0xc435a000,
+    0x00000000, 0x00000077, 0x00011705, 0xc435a200,
+    0x00000000, 0x00000077, 0xc433f100, 0x00000000,
+    0x000b0077, 0x00019705, 0xc435a300, 0x00000000,
+    0x00000077, 0xc4225000, 0x00000000, 0x0000000d,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00850003,
+    0xc434e000, 0x00000000, 0x00840086, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00880087, 0x00000605,
+    0xff00ffff, 0x00031605, 0x01000e05, 0x00000605,
+    0x00ffffff, 0x00000e05, 0xc4287000, 0x00000000,
+    0x008e0089, 0xc434e000, 0x00000000, 0x008c008f,
+    0x00029705, 0x00031705, 0x00039705, 0x00041705,
+    0x907bb000, 0x00000000, 0x00000005, 0x00000000,
+    0x00000004, 0xa438d300, 0x00000000, 0x00000095,
+    0xa438d000, 0x00000000, 0x00000096, 0xa4351000,
+    0x00000000, 0x00780098, 0xa434e000, 0x00000000,
+    0x00990097, 0x84390000, 0x00000000, 0x0000009a,
+    0x00003505, 0xa4288000, 0x00000000, 0x009c009a,
+    0x84390000, 0x00000000, 0x0000009d, 0xc438e000,
+    0x00000000, 0x0000009b, 0xc4351000, 0x00000000,
+    0x0078009f, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x000200a1, 0xc434e000, 0x00000000, 0x00a000a2,
+    0xc438e000, 0x00000000, 0x0000009e, 0xc4351000,
+    0x00000000, 0x007d00a4, 0xc4322000, 0x00000000,
+    0x008a00a3, 0xc434e000, 0x00000000, 0x00a500a6,
+    0xc438e100, 0x00000000, 0x00000096, 0xc4351000,
+    0x00000000, 0x008b00a8, 0xc4322000, 0x00000000,
+    0x008d00a7, 0xc434e000, 0x00000000, 0x00a900aa,
+    0x00049705, 0x903bb000, 0x00000000, 0x00000090,
+    0x84322000, 0x00000000, 0x000f00ad, 0x24345000,
+    0x00000000, 0x000e00ae, 0xe4226000, 0x00000000,
+    0x000000af, 0xe4351000, 0x00000000, 0x007800b0,
+    0xc43bd000, 0x00000000, 0x000000b1, 0xc434e000,
+    0x00000000, 0x007800b2, 0xc43be000, 0x00000000,
+    0x000000b1, 0xe4369000, 0x00000000, 0x00b400b3,
+    0x84322100, 0x00000000, 0x000f00ad, 0x24345000,
+    0x00000000, 0x000e00b6, 0xe4226000, 0x00000000,
+    0x000000b7, 0x00013605, 0xe4351000, 0x00000000,
+    0x00b900b8, 0xe434e000, 0x00000000, 0x00ba00b5,
+    0x84322200, 0x00000000, 0x000f00ad, 0x24345000,
+    0x00000000, 0x000e00bc, 0xe4226000, 0x00000000,
+    0x000000bd, 0x00015605, 0xe4351000, 0x00000000,
+    0x00bf00be, 0xe434e000, 0x00000000, 0x00c000bb,
+    0x84322300, 0x00000000, 0x000f00ad, 0x24345000,
+    0x00000000, 0x000e00c2, 0xe4226000, 0x00000000,
+    0x000000c3, 0x00017605, 0xe4351000, 0x00000000,
+    0x00c500c4, 0xe434e000, 0x00000000, 0x00c600c1,
+    0xc43bd000, 0x00000000, 0x000000c7, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x00c800c9, 0x00006894,
+    0x00000328, 0x00000020, 0x00040001, 0xe4226000,
+    0x00000000, 0x0000000c, 0xe4351000, 0x00000000,
+    0x007800cb, 0x903bb000, 0x00000000, 0x000000ab,
+    0x84322000, 0x00000000, 0x000f00cd, 0x24345000,
+    0x00000000, 0x000e00ce, 0xe4226000, 0x00000000,
+    0x000000cf, 0xe4351000, 0x00000000, 0x00b900d0,
+    0xe434e000, 0x00000000, 0x00d100cc, 0xc438e000,
+    0x00000000, 0x000000d2, 0xe431f000, 0x00000000,
+    0x00790008, 0x00006894, 0x0000034c, 0x00000350,
+    0x00040001, 0xe431f000, 0x00000000, 0x007f0008,
+    0x00006894, 0x000001f8, 0x00000354, 0x00040001,
+    0xe431f000, 0x00000000, 0x00820008, 0x00006894,
+    0x00000200, 0x00000358, 0x00040001, 0xe431f000,
+    0x00000000, 0x007a0008, 0x00006894, 0x00000204,
+    0x0000035c, 0x00040001, 0xe431f000, 0x00000000,
+    0x00910008, 0x00006894, 0x000001f0, 0x00000360,
+    0x00040001, 0xe431f000, 0x00000000, 0x00920008,
+    0x00006894, 0x0000020c, 0x00000364, 0x00040001,
+    0xe431f000, 0x00000000, 0x00930008, 0x00006894,
+    0x0000020c, 0x00000368, 0x00040001, 0xe431f000,
+    0x00000000, 0x00940008, 0x00006894, 0x000001f0,
+    0x0000036c, 0x00040001, 0xe431f000, 0x00000000,
+    0x00ac0008, 0x00006894, 0x00000028, 0x00000370,
+    0x00040001, 0x00000000, 0x00000000,
+};
+   nir_def *args[11] = { dst_ptr, indirect_ptr, draw_id_ptr, draw_id, instance_multiplier, is_indexed, is_predicated, uses_tbimr, uses_base, uses_drawid, mocs };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx11_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx11_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    64      %9 = @load_param (param_idx=0)
+    64     %10 = @load_param (param_idx=2)
+    32     %11 = @load_param (param_idx=4)
+    64     %12 = @load_param (param_idx=5)
+    32     %13 = @load_param (param_idx=6)
+    32     %14 = @load_param (param_idx=7)
+    32     %15 = @load_param (param_idx=8)
+    32     %16 = @load_param (param_idx=9)
+    32     %17 = @load_param (param_idx=11)
+    32     %18 = @load_param (param_idx=12)
+    64     %19 = @load_param (param_idx=13)
+    64     %20 = @load_param (param_idx=14)
+    32     %21 = @load_param (param_idx=15)
+    32     %22 = iadd %13, %21
+    32     %23 = @load_global (%12) (access=none, align_mul=4, align_offset=0)
+    32     %24 = imul %21, %17
+    64     %25 = u2u64 %24
+    32     %26 = imul %22, %11
+    64     %27 = u2u64 %26
+    32     %28 = umin %23, %15
+    1      %29 = ult %22, %28
+                 // succs: b1 b5
+    if %29 {
+        block b1:    // preds: b0
+        32     %30 = load_const (0x00000001)
+        32     %31 = iand %16, %30 (0x1)
+        32     %32 = load_const (0x00000000)
+        1      %33 = ieq %31, %32 (0x0)
+        8      %34 = load_const (0x00)
+        8      %35 = load_const (0x01)
+        32     %36 = load_const (0x00000002)
+        32     %37 = iand %16, %36 (0x2)
+                     // succs: b2 b3
+        if %33 {
+            block b2:    // preds: b1
+            64     %38 = iadd %10, %27
+            32x4   %39 = @load_global (%38) (access=none, align_mul=4, align_offset=0)
+            32     %40 = load_const (0x00000008)
+            32     %41 = mov %39.x
+            64     %42 = load_const (0x0000000000000008)
+            32     %43 = mov %39.z
+            64     %44 = load_const (0x0000000000000004)
+            32     %45 = imul %39.y, %14
+            64     %46 = load_const (0x000000000000000c = 12)
+            32     %47 = mov %39.w
+            64     %48 = iadd %9, %25
+            32     %49 = ushr %37, %30 (0x1)
+            32     %50 = load_const (0xffffff00 = -256 = 4294967040)
+            32     %51 = iand %8, %50 (0xffffff00)
+            32     %52 = ior %51, %49
+            32     %53 = load_const (0xffff00ff = -65281 = 4294902015)
+            32     %54 = iand %52, %53 (0xffff00ff)
+            32     %55 = load_const (0x00000010 = 16)
+            32     %56 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32     %57 = load_const (0x00000018 = 24)
+            32     %58 = load_const (0x01000000 = 16777216)
+            32     %59 = load_const (0x00ffffff = 16777215)
+            32     %60 = extract_u16 %54, %32 (0x0)
+            32     %61 = ior %60, %58 (0x1000000)
+            64     %62 = load_const (0x0000000000000010 = 16)
+            64     %63 = load_const (0x0000000000000014 = 20)
+            64     %64 = load_const (0x0000000000000018 = 24)
+            64     %65 = load_const (0x000000000000001c = 28)
+            64     %66 = load_const (0x0000000000000020 = 32)
+            8x4    %67 = unpack_32_4x8 %6
+            8x4    %68 = unpack_32_4x8 %5
+            16     %69 = u2u16 %67.w
+            16     %70 = u2u16 %68.x
+            16     %71 = ishl %70, %40 (0x8)
+            16     %72 = ior %69, %71
+            8      %73 = u2u8 %72
+            16     %74 = load_const (0x0001)
+            16     %75 = extract_u8 %72, %74 (0x1)
+            8      %76 = u2u8 %75
+            32     %77 = u2u32 %73
+            32     %78 = ishl %77, %40 (0x8)
+            32     %79 = load_const (0xffff0000 = -65536 = 4294901760)
+            32     %80 = iand %79 (0xffff0000), %7
+            32     %81 = ior %80, %78
+            32     %82 = u2u32 %76
+            32     %83 = ishl %82, %55 (0x10)
+            32     %84 = iand %81, %56 (0xff00ffff)
+            32     %85 = ior %84, %83
+            32     %86 = u2u32 %68.y
+            32     %87 = ishl %86, %57 (0x18)
+            32     %88 = iand %85, %59 (0xffffff)
+            32     %89 = ior %88, %87
+            64     %90 = load_const (0x0000000000000024 = 36)
+            8x4    %91 = unpack_32_4x8 %61
+            8      %92 = iand %91.x, %35 (0x1)
+            1      %93 = ine %92, %34 (0x0)
+            64     %94 = b2i64 %93
+            64     %95 = ishl %94, %40 (0x8)
+            32     %96 = unpack_64_2x32_split_x %95
+            32     %97 = ior %96, %40 (0x8)
+            32     %98 = unpack_64_2x32_split_y %95
+            64     %99 = pack_64_2x32_split %97, %98
+            8     %100 = iand %91.y, %35 (0x1)
+            1     %101 = ine %100, %34 (0x0)
+            64    %102 = b2i64 %101
+            32    %103 = load_const (0x00000009)
+            64    %104 = ishl %102, %103 (0x9)
+            64    %105 = ior %99, %104
+            8     %106 = iand %91.z, %35 (0x1)
+            1     %107 = ine %106, %34 (0x0)
+            64    %108 = b2i64 %107
+            32    %109 = load_const (0x0000000a = 10)
+            64    %110 = ishl %108, %109 (0xa)
+            64    %111 = ior %105, %110
+            8     %112 = iand %91.w, %35 (0x1)
+            1     %113 = ine %112, %34 (0x0)
+            64    %114 = b2i64 %113
+            32    %115 = load_const (0x0000000b = 11)
+            64    %116 = ishl %114, %115 (0xb)
+            64    %117 = ior %111, %116
+            32    %118 = unpack_64_2x32_split_x %117
+            32    %119 = load_const (0x7b000000 = 2063597568)
+            32    %120 = ior %119 (0x7b000000), %118
+                         @store_global (%120, %48) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %121 = u2u64 %31
+            64    %122 = ishl %121, %40 (0x8)
+            8x4   %123 = unpack_32_4x8 %89
+            8     %124 = iand %123.x, %35 (0x1)
+            1     %125 = ine %124, %34 (0x0)
+            64    %126 = b2i64 %125
+            64    %127 = ishl %126, %103 (0x9)
+            64    %128 = ior %122, %127
+            32    %129 = u2u32 %128
+            64    %130 = iadd %48, %44 (0x4)
+                         @store_global (%129, %130) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %131 = iadd %48, %42 (0x8)
+                         @store_global (%41, %131) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %132 = iadd %48, %46 (0xc)
+                         @store_global (%43, %132) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %133 = iadd %48, %62 (0x10)
+                         @store_global (%45, %133) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %134 = iadd %48, %63 (0x14)
+                         @store_global (%47, %134) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %135 = iadd %48, %64 (0x18)
+                         @store_global (%32 (0x0), %135) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %136 = iadd %48, %65 (0x1c)
+                         @store_global (%43, %136) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %137 = iadd %48, %66 (0x20)
+                         @store_global (%47, %137) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %138 = iadd %48, %90 (0x24)
+                         @store_global (%22, %138) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b4
+        } else {
+            block b3:    // preds: b1
+            64    %139 = iadd %10, %27
+            32x4  %140 = @load_global (%139) (access=none, align_mul=4, align_offset=0)
+            32    %141 = load_const (0x00000008)
+            64    %142 = load_const (0x0000000000000004)
+            64    %143 = load_const (0x0000000000000010 = 16)
+            64    %144 = iadd %139, %143 (0x10)
+            32    %145 = @load_global (%144) (access=none, align_mul=4, align_offset=0)
+            32    %146 = load_const (0x00000010 = 16)
+            32    %147 = mov %140.x
+            64    %148 = load_const (0x0000000000000008)
+            32    %149 = mov %140.z
+            32    %150 = imul %140.y, %14
+            64    %151 = load_const (0x000000000000000c = 12)
+            32    %152 = mov %140.w
+            64    %153 = iadd %9, %25
+            32    %154 = ushr %37, %30 (0x1)
+            32    %155 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %156 = iand %4, %155 (0xffffff00)
+            32    %157 = ior %156, %154
+            32    %158 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %159 = iand %157, %158 (0xffff00ff)
+            32    %160 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32    %161 = load_const (0x00000018 = 24)
+            32    %162 = load_const (0x01000000 = 16777216)
+            32    %163 = load_const (0x00ffffff = 16777215)
+            32    %164 = extract_u16 %159, %32 (0x0)
+            32    %165 = ior %164, %162 (0x1000000)
+            64    %166 = load_const (0x0000000000000014 = 20)
+            64    %167 = load_const (0x0000000000000018 = 24)
+            64    %168 = load_const (0x000000000000001c = 28)
+            64    %169 = load_const (0x0000000000000020 = 32)
+            8x4   %170 = unpack_32_4x8 %6
+            8x4   %171 = unpack_32_4x8 %5
+            16    %172 = u2u16 %170.w
+            16    %173 = u2u16 %171.x
+            16    %174 = ishl %173, %141 (0x8)
+            16    %175 = ior %172, %174
+            8     %176 = u2u8 %175
+            16    %177 = load_const (0x0001)
+            16    %178 = extract_u8 %175, %177 (0x1)
+            8     %179 = u2u8 %178
+            32    %180 = u2u32 %176
+            32    %181 = ishl %180, %141 (0x8)
+            32    %182 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %183 = iand %182 (0xffff0000), %3
+            32    %184 = ior %183, %181
+            32    %185 = u2u32 %179
+            32    %186 = ishl %185, %146 (0x10)
+            32    %187 = iand %184, %160 (0xff00ffff)
+            32    %188 = ior %187, %186
+            32    %189 = u2u32 %171.y
+            32    %190 = ishl %189, %161 (0x18)
+            32    %191 = iand %188, %163 (0xffffff)
+            32    %192 = ior %191, %190
+            64    %193 = load_const (0x0000000000000024 = 36)
+            8x4   %194 = unpack_32_4x8 %165
+            8     %195 = iand %194.x, %35 (0x1)
+            1     %196 = ine %195, %34 (0x0)
+            64    %197 = b2i64 %196
+            64    %198 = ishl %197, %141 (0x8)
+            32    %199 = unpack_64_2x32_split_x %198
+            32    %200 = ior %199, %141 (0x8)
+            32    %201 = unpack_64_2x32_split_y %198
+            64    %202 = pack_64_2x32_split %200, %201
+            8     %203 = iand %194.y, %35 (0x1)
+            1     %204 = ine %203, %34 (0x0)
+            64    %205 = b2i64 %204
+            32    %206 = load_const (0x00000009)
+            64    %207 = ishl %205, %206 (0x9)
+            64    %208 = ior %202, %207
+            8     %209 = iand %194.z, %35 (0x1)
+            1     %210 = ine %209, %34 (0x0)
+            64    %211 = b2i64 %210
+            32    %212 = load_const (0x0000000a = 10)
+            64    %213 = ishl %211, %212 (0xa)
+            64    %214 = ior %208, %213
+            8     %215 = iand %194.w, %35 (0x1)
+            1     %216 = ine %215, %34 (0x0)
+            64    %217 = b2i64 %216
+            32    %218 = load_const (0x0000000b = 11)
+            64    %219 = ishl %217, %218 (0xb)
+            64    %220 = ior %214, %219
+            32    %221 = unpack_64_2x32_split_x %220
+            32    %222 = load_const (0x7b000000 = 2063597568)
+            32    %223 = ior %222 (0x7b000000), %221
+                         @store_global (%223, %153) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %224 = u2u64 %31
+            64    %225 = ishl %224, %141 (0x8)
+            8x4   %226 = unpack_32_4x8 %192
+            8     %227 = iand %226.x, %35 (0x1)
+            1     %228 = ine %227, %34 (0x0)
+            64    %229 = b2i64 %228
+            64    %230 = ishl %229, %206 (0x9)
+            64    %231 = ior %225, %230
+            32    %232 = u2u32 %231
+            64    %233 = iadd %153, %142 (0x4)
+                         @store_global (%232, %233) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %234 = iadd %153, %148 (0x8)
+                         @store_global (%147, %234) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %235 = iadd %153, %151 (0xc)
+                         @store_global (%149, %235) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %236 = iadd %153, %143 (0x10)
+                         @store_global (%150, %236) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %237 = iadd %153, %166 (0x14)
+                         @store_global (%145, %237) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %238 = iadd %153, %167 (0x18)
+                         @store_global (%152, %238) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %239 = iadd %153, %168 (0x1c)
+                         @store_global (%152, %239) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %240 = iadd %153, %169 (0x20)
+                         @store_global (%145, %240) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %241 = iadd %153, %193 (0x24)
+                         @store_global (%22, %241) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b4
+        }
+        block b4:  // preds: b2 b3, succs: b6
+    } else {
+        block b5:  // preds: b0, succs: b6
+    }
+    block b6:    // preds: b4 b5
+    32    %242 = load_const (0x00000020 = 32)
+    32    %243 = iand %16, %242 (0x20)
+    32    %244 = load_const (0x00000000)
+    1     %245 = ieq %243, %244 (0x0)
+    8     %246 = load_const (0x00)
+    8     %247 = load_const (0x01)
+    1     %248 = ieq %23, %244 (0x0)
+    32    %249 = load_const (0xffffffff = -1 = 4294967295)
+    32    %250 = iadd %28, %249 (0xffffffff)
+    32    %251 = bcsel %248, %244 (0x0), %250
+    64    %252 = u2u64 %17
+    64    %253 = iadd %25, %252
+    64    %254 = bcsel %248, %25, %253
+    64    %255 = iadd %9, %254
+                 // succs: b7 b11
+    if %245 {
+        block b7:    // preds: b6
+        1     %256 = ieq %22, %251
+        1     %257 = ult %23, %15
+        1     %258 = iand %257, %256
+                     // succs: b8 b9
+        if %258 {
+            block b8:    // preds: b7
+            64    %259 = load_const (0x0000000000000004)
+            64    %260 = load_const (0x0000000000000008)
+            32    %261 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %262 = iand %261 (0xffff0000), %2
+            32    %263 = load_const (0x0000000a = 10)
+            16x2  %264 = unpack_32_2x16 %5
+            32    %265 = u2u32 %264.y
+            32    %266 = load_const (0x00000010 = 16)
+            32    %267 = ishl %265, %266 (0x10)
+            32    %268 = extract_u16 %262, %244 (0x0)
+            32    %269 = ior %268, %267
+            8x4   %270 = unpack_32_4x8 %269
+            8     %271 = iand %270.x, %247 (0x1)
+            1     %272 = ine %271, %246 (0x0)
+            64    %273 = b2i64 %272
+            64    %274 = ishl %273, %263 (0xa)
+            32    %275 = unpack_64_2x32_split_x %274
+            32    %276 = load_const (0x00000101 = 257)
+            32    %277 = ior %275, %276 (0x101)
+            32    %278 = unpack_64_2x32_split_y %274
+            64    %279 = pack_64_2x32_split %277, %278
+            8     %280 = iand %270.y, %247 (0x1)
+            1     %281 = ine %280, %246 (0x0)
+            64    %282 = b2i64 %281
+            32    %283 = load_const (0x0000000f = 15)
+            64    %284 = ishl %282, %283 (0xf)
+            64    %285 = ior %279, %284
+            32    %286 = unpack_64_2x32_split_x %285
+            32    %287 = load_const (0x18800000 = 411041792)
+            32    %288 = ior %286, %287 (0x18800000)
+                         @store_global (%288, %255) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %289 = u2u32 %20
+            64    %290 = iadd %255, %259 (0x4)
+                         @store_global (%289, %290) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %291 = unpack_64_2x32_split_y %20
+            64    %292 = iadd %255, %260 (0x8)
+                         @store_global (%291, %292) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b10
+        } else {
+            block b9:  // preds: b7, succs: b10
+        }
+        block b10:  // preds: b8 b9, succs: b18
+    } else {
+        block b11:   // preds: b6
+        1     %293 = ine %22, %251
+                     // succs: b12 b16
+        if %293 {
+            block b12:   // preds: b11
+            32    %294 = iadd %18, %249 (0xffffffff)
+            1     %295 = ieq %21, %294
+                         // succs: b13 b14
+            if %295 {
+                block b13:   // preds: b12
+                64    %296 = load_const (0x0000000000000004)
+                64    %297 = load_const (0x0000000000000008)
+                32    %298 = load_const (0xffff0000 = -65536 = 4294901760)
+                32    %299 = iand %298 (0xffff0000), %1
+                32    %300 = load_const (0x0000000a = 10)
+                16x2  %301 = unpack_32_2x16 %5
+                32    %302 = u2u32 %301.y
+                32    %303 = load_const (0x00000010 = 16)
+                32    %304 = ishl %302, %303 (0x10)
+                32    %305 = extract_u16 %299, %244 (0x0)
+                32    %306 = ior %305, %304
+                8x4   %307 = unpack_32_4x8 %306
+                8     %308 = iand %307.x, %247 (0x1)
+                1     %309 = ine %308, %246 (0x0)
+                64    %310 = b2i64 %309
+                64    %311 = ishl %310, %300 (0xa)
+                32    %312 = unpack_64_2x32_split_x %311
+                32    %313 = load_const (0x00000101 = 257)
+                32    %314 = ior %312, %313 (0x101)
+                32    %315 = unpack_64_2x32_split_y %311
+                64    %316 = pack_64_2x32_split %314, %315
+                8     %317 = iand %307.y, %247 (0x1)
+                1     %318 = ine %317, %246 (0x0)
+                64    %319 = b2i64 %318
+                32    %320 = load_const (0x0000000f = 15)
+                64    %321 = ishl %319, %320 (0xf)
+                64    %322 = ior %316, %321
+                32    %323 = unpack_64_2x32_split_x %322
+                32    %324 = load_const (0x18800000 = 411041792)
+                32    %325 = ior %323, %324 (0x18800000)
+                             @store_global (%325, %255) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %326 = u2u32 %19
+                64    %327 = iadd %255, %296 (0x4)
+                             @store_global (%326, %327) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %328 = unpack_64_2x32_split_y %19
+                64    %329 = iadd %255, %297 (0x8)
+                             @store_global (%328, %329) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                             // succs: b15
+            } else {
+                block b14:  // preds: b12, succs: b15
+            }
+            block b15:  // preds: b13 b14, succs: b17
+        } else {
+            block b16:   // preds: b11
+            64    %330 = load_const (0x0000000000000004)
+            64    %331 = load_const (0x0000000000000008)
+            32    %332 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %333 = iand %332 (0xffff0000), %0
+            32    %334 = load_const (0x0000000a = 10)
+            16x2  %335 = unpack_32_2x16 %5
+            32    %336 = u2u32 %335.y
+            32    %337 = load_const (0x00000010 = 16)
+            32    %338 = ishl %336, %337 (0x10)
+            32    %339 = extract_u16 %333, %244 (0x0)
+            32    %340 = ior %339, %338
+            8x4   %341 = unpack_32_4x8 %340
+            8     %342 = iand %341.x, %247 (0x1)
+            1     %343 = ine %342, %246 (0x0)
+            64    %344 = b2i64 %343
+            64    %345 = ishl %344, %334 (0xa)
+            32    %346 = unpack_64_2x32_split_x %345
+            32    %347 = load_const (0x00000101 = 257)
+            32    %348 = ior %346, %347 (0x101)
+            32    %349 = unpack_64_2x32_split_y %345
+            64    %350 = pack_64_2x32_split %348, %349
+            8     %351 = iand %341.y, %247 (0x1)
+            1     %352 = ine %351, %246 (0x0)
+            64    %353 = b2i64 %352
+            32    %354 = load_const (0x0000000f = 15)
+            64    %355 = ishl %353, %354 (0xf)
+            64    %356 = ior %350, %355
+            32    %357 = unpack_64_2x32_split_x %356
+            32    %358 = load_const (0x18800000 = 411041792)
+            32    %359 = ior %357, %358 (0x18800000)
+                         @store_global (%359, %255) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %360 = u2u32 %20
+            64    %361 = iadd %255, %330 (0x4)
+                         @store_global (%360, %361) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %362 = unpack_64_2x32_split_y %20
+            64    %363 = iadd %255, %331 (0x8)
+                         @store_global (%362, %363) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b17
+        }
+        block b17:  // preds: b15 b16, succs: b18
+    }
+    block b18:  // preds: b10 b17, succs: b19
+    block b19:
+   */
+   static const uint32_t impl_0_nir[1149] = {
+    0x00000180, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000010, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0x00000000, 0x0000001e, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4021744, 0xc4041744, 0xe4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0xc40b1744, 0xc40c1744, 0xe40d1744, 0xe40e1744,
+    0xc40f1744, 0xc431f000, 0x00000000, 0x0017000f,
+    0xc4005354, 0x00000038, 0x00000400, 0xc433f000,
+    0x00000000, 0x00130017, 0xe438f000, 0x00000000,
+    0x0000001a, 0xc433f000, 0x00000000, 0x000d0018,
+    0xe438f000, 0x00000000, 0x0000001c, 0xc43ae000,
+    0x00000000, 0x00110019, 0x243a6000, 0x00000000,
+    0x001e0018, 0x00000001, 0x0000007c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000008, 0x00003605,
+    0xc4322000, 0x00000000, 0x00210012, 0x00000e05,
+    0x24327000, 0x00000000, 0x00230022, 0x00001405,
+    0x00003405, 0x00005605, 0xc4322000, 0x00000000,
+    0x00270012, 0x00000001, 0x00000090, 0x00000000,
+    0x00000001, 0x00000000, 0x0000006f, 0xe431f000,
+    0x00000000, 0x001d000c, 0xd0005354, 0x000000a8,
+    0x00000400, 0x00011605, 0xc435a000, 0x00000000,
+    0x0000002b, 0x00011705, 0xc435a200, 0x00000000,
+    0x0000002b, 0x00009705, 0xc433f100, 0x00000000,
+    0x0010002b, 0x00019705, 0xc435a300, 0x00000000,
+    0x0000002b, 0xe431f000, 0x00000000, 0x001b000b,
+    0xc43cc000, 0x00000000, 0x00210028, 0xffe01605,
+    0xc4322000, 0x00000000, 0x0036000a, 0xc434e000,
+    0x00000000, 0x00350037, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00390038, 0x00021605, 0x00000605,
+    0xff00ffff, 0x00031605, 0x01000e05, 0x00000605,
+    0x00ffffff, 0xc4287000, 0x00000000, 0x0023003a,
+    0xc434e000, 0x00000000, 0x003e0040, 0x00021705,
+    0x00029705, 0x00031705, 0x00039705, 0x00041705,
+    0x907bb000, 0x00000000, 0x00000008, 0x00000000,
+    0x00000007, 0xa438d300, 0x00000000, 0x00000047,
+    0xa438d000, 0x00000000, 0x00000048, 0xa4351000,
+    0x00000000, 0x002c004a, 0xa434e000, 0x00000000,
+    0x004b0049, 0x84390000, 0x00000000, 0x0000004c,
+    0x00003505, 0xa4288000, 0x00000000, 0x004e004c,
+    0x84390000, 0x00000000, 0x0000004f, 0xc438e000,
+    0x00000000, 0x0000004d, 0xc4351000, 0x00000000,
+    0x002c0051, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x00090053, 0xc434e000, 0x00000000, 0x00520054,
+    0xc438e000, 0x00000000, 0x00000050, 0xc4351000,
+    0x00000000, 0x003b0056, 0xc4322000, 0x00000000,
+    0x003c0055, 0xc434e000, 0x00000000, 0x00570058,
+    0xc438e100, 0x00000000, 0x00000048, 0xc4351000,
+    0x00000000, 0x003d005a, 0xc4322000, 0x00000000,
+    0x003f0059, 0xc434e000, 0x00000000, 0x005b005c,
+    0x00049705, 0x903bb000, 0x00000000, 0x00000041,
+    0x84322000, 0x00000000, 0x0026005f, 0x24345000,
+    0x00000000, 0x00250060, 0xe4226000, 0x00000000,
+    0x00000061, 0xe4351000, 0x00000000, 0x002c0062,
+    0xc43bd000, 0x00000000, 0x00000063, 0xc434e000,
+    0x00000000, 0x002c0064, 0xc43be000, 0x00000000,
+    0x00000063, 0xe4369000, 0x00000000, 0x00660065,
+    0x84322100, 0x00000000, 0x0026005f, 0x24345000,
+    0x00000000, 0x00250068, 0xe4226000, 0x00000000,
+    0x00000069, 0x00013605, 0xe4351000, 0x00000000,
+    0x006b006a, 0xe434e000, 0x00000000, 0x006c0067,
+    0x84322200, 0x00000000, 0x0026005f, 0x24345000,
+    0x00000000, 0x0025006e, 0xe4226000, 0x00000000,
+    0x0000006f, 0x00015605, 0xe4351000, 0x00000000,
+    0x00710070, 0xe434e000, 0x00000000, 0x0072006d,
+    0x84322300, 0x00000000, 0x0026005f, 0x24345000,
+    0x00000000, 0x00250074, 0xe4226000, 0x00000000,
+    0x00000075, 0x00017605, 0xe4351000, 0x00000000,
+    0x00770076, 0xe434e000, 0x00000000, 0x00780073,
+    0xc43bd000, 0x00000000, 0x00000079, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x007a007b, 0x00006894,
+    0x000001f0, 0x000000d0, 0x00040001, 0xe438f000,
+    0x00000000, 0x00000022, 0xe4351000, 0x00000000,
+    0x002c007d, 0x903bb000, 0x00000000, 0x0000005d,
+    0x84322000, 0x00000000, 0x0026007f, 0x24345000,
+    0x00000000, 0x00250080, 0xe4226000, 0x00000000,
+    0x00000081, 0xe4351000, 0x00000000, 0x006b0082,
+    0xe434e000, 0x00000000, 0x0083007e, 0xc438e000,
+    0x00000000, 0x00000084, 0xe431f000, 0x00000000,
+    0x00300034, 0x00006894, 0x00000214, 0x00000218,
+    0x00040001, 0xe431f000, 0x00000000, 0x002e0034,
+    0x00006894, 0x000000b4, 0x0000021c, 0x00040001,
+    0xe431f000, 0x00000000, 0x00320034, 0x00006894,
+    0x000000bc, 0x00000220, 0x00040001, 0xe431f000,
+    0x00000000, 0x00420034, 0x00006894, 0x000000c4,
+    0x00000224, 0x00040001, 0xe431f000, 0x00000000,
+    0x00430034, 0x00006894, 0x000000cc, 0x00000228,
+    0x00040001, 0xe431f000, 0x00000000, 0x00440034,
+    0x00006894, 0x0000008c, 0x0000022c, 0x00040001,
+    0xe431f000, 0x00000000, 0x00450034, 0x00006894,
+    0x000000bc, 0x00000230, 0x00040001, 0xe431f000,
+    0x00000000, 0x00460034, 0x00006894, 0x000000cc,
+    0x00000234, 0x00040001, 0xe431f000, 0x00000000,
+    0x005e0034, 0x00006894, 0x00000060, 0x00000238,
+    0x00040001, 0x00000001, 0x00000000, 0x00000071,
+    0xe431f000, 0x00000000, 0x001d000c, 0xd0005354,
+    0x00000240, 0x00000400, 0x00011605, 0x00009705,
+    0x00021705, 0xe431f000, 0x00000000, 0x00940090,
+    0xc4005354, 0x00000254, 0x00000400, 0x00021605,
+    0xc435a000, 0x00000000, 0x00000091, 0x00011705,
+    0xc435a200, 0x00000000, 0x00000091, 0xc433f100,
+    0x00000000, 0x00100091, 0x00019705, 0xc435a300,
+    0x00000000, 0x00000091, 0xe431f000, 0x00000000,
+    0x001b000b, 0xc43cc000, 0x00000000, 0x00210028,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00a00006,
+    0xc434e000, 0x00000000, 0x009f00a1, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00a300a2, 0x00000605,
+    0xff00ffff, 0x00031605, 0x01000e05, 0x00000605,
+    0x00ffffff, 0xc4287000, 0x00000000, 0x002300a4,
+    0xc434e000, 0x00000000, 0x00a700a9, 0x00029705,
+    0x00031705, 0x00039705, 0x00041705, 0x907bb000,
+    0x00000000, 0x00000008, 0x00000000, 0x00000007,
+    0xa438d300, 0x00000000, 0x000000af, 0xa438d000,
+    0x00000000, 0x000000b0, 0xa4351000, 0x00000000,
+    0x009200b2, 0xa434e000, 0x00000000, 0x00b300b1,
+    0x84390000, 0x00000000, 0x000000b4, 0x00003505,
+    0xa4288000, 0x00000000, 0x00b600b4, 0x84390000,
+    0x00000000, 0x000000b7, 0xc438e000, 0x00000000,
+    0x000000b5, 0xc4351000, 0x00000000, 0x009200b9,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x000500bb,
+    0xc434e000, 0x00000000, 0x00ba00bc, 0xc438e000,
+    0x00000000, 0x000000b8, 0xc4351000, 0x00000000,
+    0x009700be, 0xc4322000, 0x00000000, 0x00a500bd,
+    0xc434e000, 0x00000000, 0x00bf00c0, 0xc438e100,
+    0x00000000, 0x000000b0, 0xc4351000, 0x00000000,
+    0x00a600c2, 0xc4322000, 0x00000000, 0x00a800c1,
+    0xc434e000, 0x00000000, 0x00c300c4, 0x00049705,
+    0x903bb000, 0x00000000, 0x000000aa, 0x84322000,
+    0x00000000, 0x002600c7, 0x24345000, 0x00000000,
+    0x002500c8, 0xe4226000, 0x00000000, 0x000000c9,
+    0xe4351000, 0x00000000, 0x009200ca, 0xc43bd000,
+    0x00000000, 0x000000cb, 0xc434e000, 0x00000000,
+    0x009200cc, 0xc43be000, 0x00000000, 0x000000cb,
+    0xe4369000, 0x00000000, 0x00ce00cd, 0x84322100,
+    0x00000000, 0x002600c7, 0x24345000, 0x00000000,
+    0x002500d0, 0xe4226000, 0x00000000, 0x000000d1,
+    0x00013605, 0xe4351000, 0x00000000, 0x00d300d2,
+    0xe434e000, 0x00000000, 0x00d400cf, 0x84322200,
+    0x00000000, 0x002600c7, 0x24345000, 0x00000000,
+    0x002500d6, 0xe4226000, 0x00000000, 0x000000d7,
+    0x00015605, 0xe4351000, 0x00000000, 0x00d900d8,
+    0xe434e000, 0x00000000, 0x00da00d5, 0x84322300,
+    0x00000000, 0x002600c7, 0x24345000, 0x00000000,
+    0x002500dc, 0xe4226000, 0x00000000, 0x000000dd,
+    0x00017605, 0xe4351000, 0x00000000, 0x00df00de,
+    0xe434e000, 0x00000000, 0x00e000db, 0xc43bd000,
+    0x00000000, 0x000000e1, 0x7b000e05, 0xc434e000,
+    0x00000000, 0x00e200e3, 0x00006894, 0x00000390,
+    0x00000278, 0x00040001, 0xe438f000, 0x00000000,
+    0x00000022, 0xe4351000, 0x00000000, 0x009200e5,
+    0x903bb000, 0x00000000, 0x000000c5, 0x84322000,
+    0x00000000, 0x002600e7, 0x24345000, 0x00000000,
+    0x002500e8, 0xe4226000, 0x00000000, 0x000000e9,
+    0xe4351000, 0x00000000, 0x00d300ea, 0xe434e000,
+    0x00000000, 0x00eb00e6, 0xc438e000, 0x00000000,
+    0x000000ec, 0xe431f000, 0x00000000, 0x0093009e,
+    0x00006894, 0x000003b4, 0x000003b8, 0x00040001,
+    0xe431f000, 0x00000000, 0x0099009e, 0x00006894,
+    0x00000260, 0x000003bc, 0x00040001, 0xe431f000,
+    0x00000000, 0x009c009e, 0x00006894, 0x00000268,
+    0x000003c0, 0x00040001, 0xe431f000, 0x00000000,
+    0x0094009e, 0x00006894, 0x0000026c, 0x000003c4,
+    0x00040001, 0xe431f000, 0x00000000, 0x00ab009e,
+    0x00006894, 0x00000258, 0x000003c8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00ac009e, 0x00006894,
+    0x00000274, 0x000003cc, 0x00040001, 0xe431f000,
+    0x00000000, 0x00ad009e, 0x00006894, 0x00000274,
+    0x000003d0, 0x00040001, 0xe431f000, 0x00000000,
+    0x00ae009e, 0x00006894, 0x00000258, 0x000003d4,
+    0x00040001, 0xe431f000, 0x00000000, 0x00c6009e,
+    0x00006894, 0x00000060, 0x000003d8, 0x00040001,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x0000000e, 0x00041605,
+    0xc4322000, 0x00000000, 0x00fa0012, 0x00000e05,
+    0x24327000, 0x00000000, 0x00fc00fb, 0x00001405,
+    0x00003405, 0x24327000, 0x00000000, 0x00fc0019,
+    0xfffff605, 0xc431f000, 0x00000000, 0x0101001e,
+    0xc4273000, 0x00000000, 0x00fc0100, 0x00000102,
+    0xe438f000, 0x00000000, 0x00000013, 0xe431f000,
+    0x00000000, 0x0104001b, 0xe4273000, 0x00000000,
+    0x001b0100, 0x00000105, 0xe431f000, 0x00000000,
+    0x0106000b, 0x00000001, 0x000003f4, 0x00000000,
+    0x00000003, 0x00000000, 0x00000003, 0x24327000,
+    0x00000000, 0x01030018, 0x243a6000, 0x00000000,
+    0x00110019, 0x24322000, 0x00000000, 0x0109010a,
+    0x00000001, 0x0000042c, 0x00000000, 0x00000001,
+    0x00000000, 0x00000025, 0x00009705, 0x00011705,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x0004010f,
+    0x00015605, 0xa83b8000, 0x00000000, 0x00000007,
+    0xc438e100, 0x00000000, 0x00000112, 0x00021605,
+    0xc4351000, 0x00000000, 0x01140113, 0xc4287000,
+    0x00000000, 0x00fc0110, 0xc434e000, 0x00000000,
+    0x01150116, 0x903bb000, 0x00000000, 0x00000117,
+    0x84322000, 0x00000000, 0x00ff0118, 0x24345000,
+    0x00000000, 0x00fe0119, 0xe4226000, 0x00000000,
+    0x0000011a, 0xe4351000, 0x00000000, 0x0111011b,
+    0xc43bd000, 0x00000000, 0x0000011c, 0x00203605,
+    0xc434e000, 0x00000000, 0x011e011d, 0xc43be000,
+    0x00000000, 0x0000011c, 0xe4369000, 0x00000000,
+    0x0120011f, 0x84322100, 0x00000000, 0x00ff0118,
+    0x24345000, 0x00000000, 0x00fe0122, 0xe4226000,
+    0x00000000, 0x00000123, 0x0001f605, 0xe4351000,
+    0x00000000, 0x01250124, 0xe434e000, 0x00000000,
+    0x01260121, 0xc43bd000, 0x00000000, 0x00000127,
+    0x18800e05, 0xc434e000, 0x00000000, 0x01290128,
+    0x00006894, 0x000004a8, 0x0000041c, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000016, 0xe431f000,
+    0x00000000, 0x010d0107, 0x00006894, 0x000004ac,
+    0x000004b0, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000016, 0xe431f000, 0x00000000, 0x010e0107,
+    0x00006894, 0x000004b4, 0x000004b8, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000003, 0x00000000, 0x00000001,
+    0x24345000, 0x00000000, 0x01030018, 0x00000001,
+    0x000004c8, 0x00000000, 0x00000003, 0x00000000,
+    0x00000002, 0xc431f000, 0x00000000, 0x01010014,
+    0x24327000, 0x00000000, 0x01340017, 0x00000001,
+    0x000004d4, 0x00000000, 0x00000001, 0x00000000,
+    0x00000025, 0x00009705, 0x00011705, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x00030139, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000007, 0xc438e100,
+    0x00000000, 0x0000013c, 0x00021605, 0xc4351000,
+    0x00000000, 0x013e013d, 0xc4287000, 0x00000000,
+    0x00fc013a, 0xc434e000, 0x00000000, 0x013f0140,
+    0x903bb000, 0x00000000, 0x00000141, 0x84322000,
+    0x00000000, 0x00ff0142, 0x24345000, 0x00000000,
+    0x00fe0143, 0xe4226000, 0x00000000, 0x00000144,
+    0xe4351000, 0x00000000, 0x013b0145, 0xc43bd000,
+    0x00000000, 0x00000146, 0x00203605, 0xc434e000,
+    0x00000000, 0x01480147, 0xc43be000, 0x00000000,
+    0x00000146, 0xe4369000, 0x00000000, 0x014a0149,
+    0x84322100, 0x00000000, 0x00ff0142, 0x24345000,
+    0x00000000, 0x00fe014c, 0xe4226000, 0x00000000,
+    0x0000014d, 0x0001f605, 0xe4351000, 0x00000000,
+    0x014f014e, 0xe434e000, 0x00000000, 0x0150014b,
+    0xc43bd000, 0x00000000, 0x00000151, 0x18800e05,
+    0xc434e000, 0x00000000, 0x01530152, 0x00006894,
+    0x00000550, 0x0000041c, 0x00040001, 0xc438e000,
+    0x00000000, 0x00000015, 0xe431f000, 0x00000000,
+    0x01370107, 0x00006894, 0x00000554, 0x00000558,
+    0x00040001, 0xc43be000, 0x00000000, 0x00000015,
+    0xe431f000, 0x00000000, 0x01380107, 0x00006894,
+    0x0000055c, 0x00000560, 0x00040001, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x00000025, 0x00009705,
+    0x00011705, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x0002015e, 0x00015605, 0xa83b8000, 0x00000000,
+    0x00000007, 0xc438e100, 0x00000000, 0x00000161,
+    0x00021605, 0xc4351000, 0x00000000, 0x01630162,
+    0xc4287000, 0x00000000, 0x00fc015f, 0xc434e000,
+    0x00000000, 0x01640165, 0x903bb000, 0x00000000,
+    0x00000166, 0x84322000, 0x00000000, 0x00ff0167,
+    0x24345000, 0x00000000, 0x00fe0168, 0xe4226000,
+    0x00000000, 0x00000169, 0xe4351000, 0x00000000,
+    0x0160016a, 0xc43bd000, 0x00000000, 0x0000016b,
+    0x00203605, 0xc434e000, 0x00000000, 0x016d016c,
+    0xc43be000, 0x00000000, 0x0000016b, 0xe4369000,
+    0x00000000, 0x016f016e, 0x84322100, 0x00000000,
+    0x00ff0167, 0x24345000, 0x00000000, 0x00fe0171,
+    0xe4226000, 0x00000000, 0x00000172, 0x0001f605,
+    0xe4351000, 0x00000000, 0x01740173, 0xe434e000,
+    0x00000000, 0x01750170, 0xc43bd000, 0x00000000,
+    0x00000176, 0x18800e05, 0xc434e000, 0x00000000,
+    0x01780177, 0x00006894, 0x000005e4, 0x0000041c,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000016,
+    0xe431f000, 0x00000000, 0x015c0107, 0x00006894,
+    0x000005e8, 0x000005ec, 0x00040001, 0xc43be000,
+    0x00000000, 0x00000016, 0xe431f000, 0x00000000,
+    0x015d0107, 0x00006894, 0x000005f0, 0x000005f4,
+    0x00040001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[16] = { dst_base, wa_insts_ptr, indirect_base, draw_id_base, indirect_stride, _draw_count, draw_base, instance_multiplier, max_draw_count, flags, mocs, _3dprim_size_B, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx11_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx11_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    32      %9 = undefined
+    32     %10 = undefined
+    32     %11 = undefined
+    32     %12 = undefined
+    64     %13 = @load_param (param_idx=0)
+    64     %14 = @load_param (param_idx=1)
+    64     %15 = @load_param (param_idx=2)
+    32     %16 = @load_param (param_idx=3)
+    64     %17 = @load_param (param_idx=4)
+    32     %18 = @load_param (param_idx=5)
+    32     %19 = @load_param (param_idx=6)
+    32     %20 = @load_param (param_idx=7)
+    32     %21 = @load_param (param_idx=8)
+    64     %22 = @load_param (param_idx=9)
+    64     %23 = @load_param (param_idx=10)
+    32     %24 = @load_param (param_idx=11)
+    32     %25 = load_const (0x00000002)
+    32     %26 = extract_u8 %20, %25 (0x2)
+    32     %27 = load_const (0x00000004)
+    32     %28 = ishl %26, %25 (0x2)
+    32     %29 = load_const (0x00000003)
+    32     %30 = extract_u8 %20, %29 (0x3)
+    32     %31 = iadd %18, %24
+    32     %32 = imul %24, %28
+    64     %33 = u2u64 %32
+    32     %34 = imul %31, %16
+    64     %35 = u2u64 %34
+    32     %36 = load_const (0x00000008)
+    32     %37 = ishl %24, %29 (0x3)
+    64     %38 = u2u64 %37
+    64     %39 = load_const (0x0000000000000000)
+    1      %40 = ine %17, %39 (0x0)
+                 // succs: b1 b2
+    if %40 {
+        block b1:    // preds: b0
+        32     %41 = @load_global (%17) (access=none, align_mul=4, align_offset=0)
+        32     %42 = umin %19, %41
+                     // succs: b3
+    } else {
+        block b2:  // preds: b0, succs: b3
+    }
+    block b3:    // preds: b1 b2
+    32     %43 = phi b1: %42, b2: %19
+    1      %44 = ult %31, %43
+                 // succs: b4 b26
+    if %44 {
+        block b4:    // preds: b3
+        32     %45 = load_const (0x00000001)
+        32     %46 = iand %20, %45 (0x1)
+        32     %47 = load_const (0x00000000)
+        1      %48 = ieq %46, %47 (0x0)
+        8      %49 = load_const (0x00)
+        8      %50 = load_const (0x01)
+        32     %51 = iand %20, %25 (0x2)
+        32     %52 = iand %20, %36 (0x8)
+        1      %53 = ine %52, %47 (0x0)
+        32     %54 = iand %20, %27 (0x4)
+        1      %55 = ine %54, %47 (0x0)
+        32     %56 = extract_u8 %20, %45 (0x1)
+                     // succs: b5 b15
+        if %48 {
+            block b5:    // preds: b4
+            64     %57 = load_const (0x0000000000000008)
+            32     %58 = umax %54, %52
+            1      %59 = ine %58, %47 (0x0)
+            64     %60 = iadd %13, %33
+                         // succs: b6 b13
+            if %59 {
+                block b6:    // preds: b5
+                32     %61 = ushr %52, %29 (0x3)
+                32     %62 = ushr %54, %25 (0x2)
+                32     %63 = iadd.nsw %61, %62
+                32     %64 = ishl %63, %25 (0x2)
+                32     %65 = load_const (0xffffffff = -1 = 4294967295)
+                32     %66 = iadd %65 (0xffffffff), %64
+                64     %67 = load_const (0x0000000000000004)
+                64     %68 = load_const (0x000000000000000c = 12)
+                64     %69 = load_const (0x0000000000000010 = 16)
+                32     %70 = load_const (0x00000010 = 16)
+                32     %71 = load_const (0x78080000 = 2013790208)
+                32     %72 = ior %71 (0x78080000), %66
+                             @store_global (%72, %60) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64     %73 = iadd %60, %67 (0x4)
+                             // succs: b7 b8
+                if %53 {
+                    block b7:    // preds: b6
+                    32     %74 = iadd %30, %45 (0x1)
+                    64     %75 = iadd %35, %57 (0x8)
+                    64     %76 = iadd %14, %75
+                    1      %77 = ieq %76, %39 (0x0)
+                    32     %78 = b2i32 %77
+                    32     %79 = load_const (0xffffff00 = -256 = 4294967040)
+                    32     %80 = iand %12, %79 (0xffffff00)
+                    32     %81 = ior %80, %78
+                    32     %82 = load_const (0x00000100 = 256)
+                    32     %83 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32     %84 = iand %81, %83 (0xffff00ff)
+                    32     %85 = ior %84, %82 (0x100)
+                    16x2   %86 = unpack_32_2x16 %11
+                    32     %87 = u2u32 %86.x
+                    32     %88 = ishl %87, %70 (0x10)
+                    32     %89 = extract_u16 %85, %47 (0x0)
+                    32     %90 = ior %89, %88
+                    32x2   %91 = unpack_64_2x32 %76
+                    8x4    %92 = unpack_32_4x8 %90
+                    8      %93 = iand %92.x, %50 (0x1)
+                    1      %94 = ine %93, %49 (0x0)
+                    64     %95 = b2i64 %94
+                    32     %96 = load_const (0x0000000d = 13)
+                    64     %97 = ishl %95, %96 (0xd)
+                    8      %98 = iand %92.y, %50 (0x1)
+                    1      %99 = ine %98, %49 (0x0)
+                    64    %100 = b2i64 %99
+                    32    %101 = load_const (0x0000000e = 14)
+                    64    %102 = ishl %100, %101 (0xe)
+                    64    %103 = ior %97, %102
+                    64    %104 = u2u64 %56
+                    64    %105 = ishl %104, %70 (0x10)
+                    64    %106 = ior %103, %105
+                    64    %107 = u2u64 %30
+                    32    %108 = load_const (0x0000001a = 26)
+                    64    %109 = ishl %107, %108 (0x1a)
+                    64    %110 = ior %106, %109
+                    32    %111 = u2u32 %110
+                                 @store_global (%111, %73) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %112 = u2u32 %76
+                    64    %113 = iadd %60, %57 (0x8)
+                                 @store_global (%112, %113) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %114 = mov %91.y
+                    64    %115 = iadd %60, %68 (0xc)
+                                 @store_global (%114, %115) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %116 = iadd %60, %69 (0x10)
+                                 @store_global (%36 (0x8), %116) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %117 = load_const (0x0000000000000014 = 20)
+                    64    %118 = iadd %60, %117 (0x14)
+                                 // succs: b9
+                } else {
+                    block b8:  // preds: b6, succs: b9
+                }
+                block b9:    // preds: b7 b8
+                32    %119 = phi b7: %74, b8: %30
+                64    %120 = phi b7: %118, b8: %73
+                             // succs: b10 b11
+                if %55 {
+                    block b10:   // preds: b9
+                    64    %121 = iadd %15, %38
+                                 @store_global (%31, %121) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %122 = ineg %46
+                    64    %123 = iadd %121, %67 (0x4)
+                                 @store_global (%122, %123) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %124 = ieq %121, %39 (0x0)
+                    32    %125 = b2i32 %124
+                    32    %126 = load_const (0xffffff00 = -256 = 4294967040)
+                    32    %127 = iand %10, %126 (0xffffff00)
+                    32    %128 = ior %127, %125
+                    32    %129 = load_const (0x00000100 = 256)
+                    32    %130 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32    %131 = iand %128, %130 (0xffff00ff)
+                    32    %132 = ior %131, %129 (0x100)
+                    16x2  %133 = unpack_32_2x16 %11
+                    32    %134 = u2u32 %133.x
+                    32    %135 = ishl %134, %70 (0x10)
+                    32    %136 = extract_u16 %132, %47 (0x0)
+                    32    %137 = ior %136, %135
+                    32x2  %138 = unpack_64_2x32 %121
+                    8x4   %139 = unpack_32_4x8 %137
+                    8     %140 = iand %139.x, %50 (0x1)
+                    1     %141 = ine %140, %49 (0x0)
+                    64    %142 = b2i64 %141
+                    32    %143 = load_const (0x0000000d = 13)
+                    64    %144 = ishl %142, %143 (0xd)
+                    8     %145 = iand %139.y, %50 (0x1)
+                    1     %146 = ine %145, %49 (0x0)
+                    64    %147 = b2i64 %146
+                    32    %148 = load_const (0x0000000e = 14)
+                    64    %149 = ishl %147, %148 (0xe)
+                    64    %150 = ior %144, %149
+                    64    %151 = u2u64 %56
+                    64    %152 = ishl %151, %70 (0x10)
+                    64    %153 = ior %150, %152
+                    64    %154 = u2u64 %119
+                    32    %155 = load_const (0x0000001a = 26)
+                    64    %156 = ishl %154, %155 (0x1a)
+                    64    %157 = ior %153, %156
+                    32    %158 = u2u32 %157
+                                 @store_global (%158, %120) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %159 = u2u32 %121
+                    64    %160 = iadd %120, %67 (0x4)
+                                 @store_global (%159, %160) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %161 = mov %138.y
+                    64    %162 = iadd %120, %57 (0x8)
+                                 @store_global (%161, %162) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %163 = iadd %120, %68 (0xc)
+                                 @store_global (%36 (0x8), %163) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %164 = iadd %120, %69 (0x10)
+                                 // succs: b12
+                } else {
+                    block b11:  // preds: b9, succs: b12
+                }
+                block b12:   // preds: b10 b11
+                64    %165 = phi b10: %164, b11: %120
+                             // succs: b14
+            } else {
+                block b13:  // preds: b5, succs: b14
+            }
+            block b14:   // preds: b12 b13
+            64    %166 = phi b12: %165, b13: %60
+            64    %167 = iadd %14, %35
+            32x4  %168 = @load_global (%167) (access=none, align_mul=4, align_offset=0)
+            32    %169 = mov %168.x
+            32    %170 = mov %168.z
+            64    %171 = load_const (0x0000000000000004)
+            32    %172 = mov %168.y
+            64    %173 = load_const (0x000000000000000c = 12)
+            32    %174 = mov %168.w
+            32    %175 = ushr %51, %45 (0x1)
+            32    %176 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %177 = iand %9, %176 (0xffffff00)
+            32    %178 = ior %177, %175
+            32    %179 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %180 = iand %178, %179 (0xffff00ff)
+            32    %181 = load_const (0x00000010 = 16)
+            32    %182 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32    %183 = load_const (0x00000018 = 24)
+            32    %184 = load_const (0x00ffffff = 16777215)
+            32    %185 = extract_u16 %180, %47 (0x0)
+            64    %186 = load_const (0x0000000000000010 = 16)
+            64    %187 = load_const (0x0000000000000014 = 20)
+            64    %188 = load_const (0x0000000000000018 = 24)
+            16x2  %189 = unpack_32_2x16 %7
+            8     %190 = u2u8 %189.x
+            16    %191 = load_const (0x0001)
+            16    %192 = extract_u8 %189.x, %191 (0x1)
+            8     %193 = u2u8 %192
+            32    %194 = u2u32 %190
+            32    %195 = ishl %194, %36 (0x8)
+            32    %196 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %197 = iand %196 (0xffff0000), %8
+            32    %198 = ior %197, %195
+            32    %199 = u2u32 %193
+            32    %200 = ishl %199, %181 (0x10)
+            32    %201 = iand %198, %182 (0xff00ffff)
+            32    %202 = ior %201, %200
+            8x4   %203 = unpack_32_4x8 %7
+            32    %204 = u2u32 %203.z
+            32    %205 = ishl %204, %183 (0x18)
+            32    %206 = iand %202, %184 (0xffffff)
+            32    %207 = ior %206, %205
+            8x4   %208 = unpack_32_4x8 %185
+            8     %209 = iand %208.x, %50 (0x1)
+            1     %210 = ine %209, %49 (0x0)
+            64    %211 = b2i64 %210
+            64    %212 = ishl %211, %36 (0x8)
+            32    %213 = unpack_64_2x32_split_x %212
+            32    %214 = load_const (0x00000005)
+            32    %215 = ior %213, %214 (0x5)
+            32    %216 = unpack_64_2x32_split_y %212
+            64    %217 = pack_64_2x32_split %215, %216
+            8     %218 = iand %208.y, %50 (0x1)
+            1     %219 = ine %218, %49 (0x0)
+            64    %220 = b2i64 %219
+            32    %221 = load_const (0x00000009)
+            64    %222 = ishl %220, %221 (0x9)
+            64    %223 = ior %217, %222
+            8     %224 = iand %208.z, %50 (0x1)
+            1     %225 = ine %224, %49 (0x0)
+            64    %226 = b2i64 %225
+            32    %227 = load_const (0x0000000a = 10)
+            64    %228 = ishl %226, %227 (0xa)
+            64    %229 = ior %223, %228
+            8     %230 = iand %208.w, %50 (0x1)
+            1     %231 = ine %230, %49 (0x0)
+            64    %232 = b2i64 %231
+            32    %233 = load_const (0x0000000b = 11)
+            64    %234 = ishl %232, %233 (0xb)
+            64    %235 = ior %229, %234
+            32    %236 = unpack_64_2x32_split_x %235
+            32    %237 = load_const (0x7b000000 = 2063597568)
+            32    %238 = ior %237 (0x7b000000), %236
+                         @store_global (%238, %166) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %239 = u2u64 %46
+            64    %240 = ishl %239, %36 (0x8)
+            8x4   %241 = unpack_32_4x8 %207
+            8     %242 = iand %241.x, %50 (0x1)
+            1     %243 = ine %242, %49 (0x0)
+            64    %244 = b2i64 %243
+            64    %245 = ishl %244, %221 (0x9)
+            64    %246 = ior %240, %245
+            32    %247 = u2u32 %246
+            64    %248 = iadd %166, %171 (0x4)
+                         @store_global (%247, %248) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %249 = iadd %166, %57 (0x8)
+                         @store_global (%169, %249) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %250 = iadd %166, %173 (0xc)
+                         @store_global (%170, %250) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %251 = iadd %166, %186 (0x10)
+                         @store_global (%172, %251) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %252 = iadd %166, %187 (0x14)
+                         @store_global (%174, %252) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %253 = iadd %166, %188 (0x18)
+                         @store_global (%47 (0x0), %253) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b25
+        } else {
+            block b15:   // preds: b4
+            64    %254 = load_const (0x000000000000000c = 12)
+            32    %255 = umax %54, %52
+            1     %256 = ine %255, %47 (0x0)
+            64    %257 = iadd %13, %33
+                         // succs: b16 b23
+            if %256 {
+                block b16:   // preds: b15
+                32    %258 = ushr %52, %29 (0x3)
+                32    %259 = ushr %54, %25 (0x2)
+                32    %260 = iadd.nsw %258, %259
+                32    %261 = ishl %260, %25 (0x2)
+                32    %262 = load_const (0xffffffff = -1 = 4294967295)
+                32    %263 = iadd %262 (0xffffffff), %261
+                64    %264 = load_const (0x0000000000000004)
+                64    %265 = load_const (0x0000000000000008)
+                64    %266 = load_const (0x0000000000000010 = 16)
+                32    %267 = load_const (0x00000010 = 16)
+                32    %268 = load_const (0x78080000 = 2013790208)
+                32    %269 = ior %268 (0x78080000), %263
+                             @store_global (%269, %257) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %270 = iadd %257, %264 (0x4)
+                             // succs: b17 b18
+                if %53 {
+                    block b17:   // preds: b16
+                    32    %271 = iadd %30, %45 (0x1)
+                    64    %272 = iadd %35, %254 (0xc)
+                    64    %273 = iadd %14, %272
+                    1     %274 = ieq %273, %39 (0x0)
+                    32    %275 = b2i32 %274
+                    32    %276 = load_const (0xffffff00 = -256 = 4294967040)
+                    32    %277 = iand %6, %276 (0xffffff00)
+                    32    %278 = ior %277, %275
+                    32    %279 = load_const (0x00000100 = 256)
+                    32    %280 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32    %281 = iand %278, %280 (0xffff00ff)
+                    32    %282 = ior %281, %279 (0x100)
+                    16x2  %283 = unpack_32_2x16 %11
+                    32    %284 = u2u32 %283.x
+                    32    %285 = ishl %284, %267 (0x10)
+                    32    %286 = extract_u16 %282, %47 (0x0)
+                    32    %287 = ior %286, %285
+                    32x2  %288 = unpack_64_2x32 %273
+                    8x4   %289 = unpack_32_4x8 %287
+                    8     %290 = iand %289.x, %50 (0x1)
+                    1     %291 = ine %290, %49 (0x0)
+                    64    %292 = b2i64 %291
+                    32    %293 = load_const (0x0000000d = 13)
+                    64    %294 = ishl %292, %293 (0xd)
+                    8     %295 = iand %289.y, %50 (0x1)
+                    1     %296 = ine %295, %49 (0x0)
+                    64    %297 = b2i64 %296
+                    32    %298 = load_const (0x0000000e = 14)
+                    64    %299 = ishl %297, %298 (0xe)
+                    64    %300 = ior %294, %299
+                    64    %301 = u2u64 %56
+                    64    %302 = ishl %301, %267 (0x10)
+                    64    %303 = ior %300, %302
+                    64    %304 = u2u64 %30
+                    32    %305 = load_const (0x0000001a = 26)
+                    64    %306 = ishl %304, %305 (0x1a)
+                    64    %307 = ior %303, %306
+                    32    %308 = u2u32 %307
+                                 @store_global (%308, %270) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %309 = u2u32 %273
+                    64    %310 = iadd %257, %265 (0x8)
+                                 @store_global (%309, %310) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %311 = mov %288.y
+                    64    %312 = iadd %257, %254 (0xc)
+                                 @store_global (%311, %312) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %313 = iadd %257, %266 (0x10)
+                                 @store_global (%36 (0x8), %313) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %314 = load_const (0x0000000000000014 = 20)
+                    64    %315 = iadd %257, %314 (0x14)
+                                 // succs: b19
+                } else {
+                    block b18:  // preds: b16, succs: b19
+                }
+                block b19:   // preds: b17 b18
+                32    %316 = phi b17: %271, b18: %30
+                64    %317 = phi b17: %315, b18: %270
+                             // succs: b20 b21
+                if %55 {
+                    block b20:   // preds: b19
+                    64    %318 = iadd %15, %38
+                                 @store_global (%31, %318) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %319 = ineg %46
+                    64    %320 = iadd %318, %264 (0x4)
+                                 @store_global (%319, %320) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %321 = ieq %318, %39 (0x0)
+                    32    %322 = b2i32 %321
+                    32    %323 = load_const (0xffffff00 = -256 = 4294967040)
+                    32    %324 = iand %5, %323 (0xffffff00)
+                    32    %325 = ior %324, %322
+                    32    %326 = load_const (0x00000100 = 256)
+                    32    %327 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32    %328 = iand %325, %327 (0xffff00ff)
+                    32    %329 = ior %328, %326 (0x100)
+                    16x2  %330 = unpack_32_2x16 %11
+                    32    %331 = u2u32 %330.x
+                    32    %332 = ishl %331, %267 (0x10)
+                    32    %333 = extract_u16 %329, %47 (0x0)
+                    32    %334 = ior %333, %332
+                    32x2  %335 = unpack_64_2x32 %318
+                    8x4   %336 = unpack_32_4x8 %334
+                    8     %337 = iand %336.x, %50 (0x1)
+                    1     %338 = ine %337, %49 (0x0)
+                    64    %339 = b2i64 %338
+                    32    %340 = load_const (0x0000000d = 13)
+                    64    %341 = ishl %339, %340 (0xd)
+                    8     %342 = iand %336.y, %50 (0x1)
+                    1     %343 = ine %342, %49 (0x0)
+                    64    %344 = b2i64 %343
+                    32    %345 = load_const (0x0000000e = 14)
+                    64    %346 = ishl %344, %345 (0xe)
+                    64    %347 = ior %341, %346
+                    64    %348 = u2u64 %56
+                    64    %349 = ishl %348, %267 (0x10)
+                    64    %350 = ior %347, %349
+                    64    %351 = u2u64 %316
+                    32    %352 = load_const (0x0000001a = 26)
+                    64    %353 = ishl %351, %352 (0x1a)
+                    64    %354 = ior %350, %353
+                    32    %355 = u2u32 %354
+                                 @store_global (%355, %317) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %356 = u2u32 %318
+                    64    %357 = iadd %317, %264 (0x4)
+                                 @store_global (%356, %357) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %358 = mov %335.y
+                    64    %359 = iadd %317, %265 (0x8)
+                                 @store_global (%358, %359) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %360 = iadd %317, %254 (0xc)
+                                 @store_global (%36 (0x8), %360) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %361 = iadd %317, %266 (0x10)
+                                 // succs: b22
+                } else {
+                    block b21:  // preds: b19, succs: b22
+                }
+                block b22:   // preds: b20 b21
+                64    %362 = phi b20: %361, b21: %317
+                             // succs: b24
+            } else {
+                block b23:  // preds: b15, succs: b24
+            }
+            block b24:   // preds: b22 b23
+            64    %363 = phi b22: %362, b23: %257
+            64    %364 = iadd %14, %35
+            32x4  %365 = @load_global (%364) (access=none, align_mul=4, align_offset=0)
+            64    %366 = load_const (0x0000000000000004)
+            64    %367 = load_const (0x0000000000000010 = 16)
+            64    %368 = iadd %364, %367 (0x10)
+            32    %369 = @load_global (%368) (access=none, align_mul=4, align_offset=0)
+            32    %370 = load_const (0x00000010 = 16)
+            32    %371 = mov %365.x
+            64    %372 = load_const (0x0000000000000008)
+            32    %373 = mov %365.z
+            32    %374 = mov %365.y
+            32    %375 = mov %365.w
+            32    %376 = ushr %51, %45 (0x1)
+            32    %377 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %378 = iand %4, %377 (0xffffff00)
+            32    %379 = ior %378, %376
+            32    %380 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %381 = iand %379, %380 (0xffff00ff)
+            32    %382 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32    %383 = load_const (0x00000018 = 24)
+            32    %384 = load_const (0x00ffffff = 16777215)
+            32    %385 = extract_u16 %381, %47 (0x0)
+            64    %386 = load_const (0x0000000000000014 = 20)
+            64    %387 = load_const (0x0000000000000018 = 24)
+            16x2  %388 = unpack_32_2x16 %7
+            8     %389 = u2u8 %388.x
+            16    %390 = load_const (0x0001)
+            16    %391 = extract_u8 %388.x, %390 (0x1)
+            8     %392 = u2u8 %391
+            32    %393 = u2u32 %389
+            32    %394 = ishl %393, %36 (0x8)
+            32    %395 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %396 = iand %395 (0xffff0000), %3
+            32    %397 = ior %396, %394
+            32    %398 = u2u32 %392
+            32    %399 = ishl %398, %370 (0x10)
+            32    %400 = iand %397, %382 (0xff00ffff)
+            32    %401 = ior %400, %399
+            8x4   %402 = unpack_32_4x8 %7
+            32    %403 = u2u32 %402.z
+            32    %404 = ishl %403, %383 (0x18)
+            32    %405 = iand %401, %384 (0xffffff)
+            32    %406 = ior %405, %404
+            8x4   %407 = unpack_32_4x8 %385
+            8     %408 = iand %407.x, %50 (0x1)
+            1     %409 = ine %408, %49 (0x0)
+            64    %410 = b2i64 %409
+            64    %411 = ishl %410, %36 (0x8)
+            32    %412 = unpack_64_2x32_split_x %411
+            32    %413 = load_const (0x00000005)
+            32    %414 = ior %412, %413 (0x5)
+            32    %415 = unpack_64_2x32_split_y %411
+            64    %416 = pack_64_2x32_split %414, %415
+            8     %417 = iand %407.y, %50 (0x1)
+            1     %418 = ine %417, %49 (0x0)
+            64    %419 = b2i64 %418
+            32    %420 = load_const (0x00000009)
+            64    %421 = ishl %419, %420 (0x9)
+            64    %422 = ior %416, %421
+            8     %423 = iand %407.z, %50 (0x1)
+            1     %424 = ine %423, %49 (0x0)
+            64    %425 = b2i64 %424
+            32    %426 = load_const (0x0000000a = 10)
+            64    %427 = ishl %425, %426 (0xa)
+            64    %428 = ior %422, %427
+            8     %429 = iand %407.w, %50 (0x1)
+            1     %430 = ine %429, %49 (0x0)
+            64    %431 = b2i64 %430
+            32    %432 = load_const (0x0000000b = 11)
+            64    %433 = ishl %431, %432 (0xb)
+            64    %434 = ior %428, %433
+            32    %435 = unpack_64_2x32_split_x %434
+            32    %436 = load_const (0x7b000000 = 2063597568)
+            32    %437 = ior %436 (0x7b000000), %435
+                         @store_global (%437, %363) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %438 = u2u64 %46
+            64    %439 = ishl %438, %36 (0x8)
+            8x4   %440 = unpack_32_4x8 %406
+            8     %441 = iand %440.x, %50 (0x1)
+            1     %442 = ine %441, %49 (0x0)
+            64    %443 = b2i64 %442
+            64    %444 = ishl %443, %420 (0x9)
+            64    %445 = ior %439, %444
+            32    %446 = u2u32 %445
+            64    %447 = iadd %363, %366 (0x4)
+                         @store_global (%446, %447) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %448 = iadd %363, %372 (0x8)
+                         @store_global (%371, %448) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %449 = iadd %363, %254 (0xc)
+                         @store_global (%373, %449) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %450 = iadd %363, %367 (0x10)
+                         @store_global (%374, %450) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %451 = iadd %363, %386 (0x14)
+                         @store_global (%369, %451) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %452 = iadd %363, %387 (0x18)
+                         @store_global (%375, %452) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b25
+        }
+        block b25:  // preds: b14 b24, succs: b27
+    } else {
+        block b26:  // preds: b3, succs: b27
+    }
+    block b27:   // preds: b25 b26
+    32    %453 = load_const (0x00000000)
+    1     %454 = ieq %43, %453 (0x0)
+    32    %455 = load_const (0xffffffff = -1 = 4294967295)
+    32    %456 = iadd %43, %455 (0xffffffff)
+    32    %457 = bcsel %454, %453 (0x0), %456
+    64    %458 = u2u64 %28
+    64    %459 = iadd %33, %458
+    64    %460 = bcsel %454, %33, %459
+    64    %461 = iadd %13, %460
+    1     %462 = ine %31, %457
+                 // succs: b28 b32
+    if %462 {
+        block b28:   // preds: b27
+        32    %463 = iadd %21, %455 (0xffffffff)
+        1     %464 = ieq %24, %463
+                     // succs: b29 b30
+        if %464 {
+            block b29:   // preds: b28
+            64    %465 = load_const (0x0000000000000004)
+            64    %466 = load_const (0x0000000000000008)
+            8     %467 = load_const (0x00)
+            32    %468 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %469 = iand %468 (0xffff0000), %2
+            32    %470 = load_const (0x0000000a = 10)
+            16x2  %471 = unpack_32_2x16 %1
+            32    %472 = u2u32 %471.y
+            32    %473 = load_const (0x00000010 = 16)
+            32    %474 = ishl %472, %473 (0x10)
+            32    %475 = extract_u16 %469, %453 (0x0)
+            32    %476 = ior %475, %474
+            8x4   %477 = unpack_32_4x8 %476
+            8     %478 = load_const (0x01)
+            8     %479 = iand %477.x, %478 (0x1)
+            1     %480 = ine %479, %467 (0x0)
+            64    %481 = b2i64 %480
+            64    %482 = ishl %481, %470 (0xa)
+            32    %483 = unpack_64_2x32_split_x %482
+            32    %484 = load_const (0x00000101 = 257)
+            32    %485 = ior %483, %484 (0x101)
+            32    %486 = unpack_64_2x32_split_y %482
+            64    %487 = pack_64_2x32_split %485, %486
+            8     %488 = iand %477.y, %478 (0x1)
+            1     %489 = ine %488, %467 (0x0)
+            64    %490 = b2i64 %489
+            32    %491 = load_const (0x0000000f = 15)
+            64    %492 = ishl %490, %491 (0xf)
+            64    %493 = ior %487, %492
+            32    %494 = unpack_64_2x32_split_x %493
+            32    %495 = load_const (0x18800000 = 411041792)
+            32    %496 = ior %494, %495 (0x18800000)
+                         @store_global (%496, %461) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %497 = u2u32 %22
+            64    %498 = iadd %461, %465 (0x4)
+                         @store_global (%497, %498) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %499 = unpack_64_2x32_split_y %22
+            64    %500 = iadd %461, %466 (0x8)
+                         @store_global (%499, %500) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b31
+        } else {
+            block b30:  // preds: b28, succs: b31
+        }
+        block b31:  // preds: b29 b30, succs: b33
+    } else {
+        block b32:   // preds: b27
+        64    %501 = load_const (0x0000000000000004)
+        64    %502 = load_const (0x0000000000000008)
+        8     %503 = load_const (0x00)
+        32    %504 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %505 = iand %504 (0xffff0000), %0
+        32    %506 = load_const (0x0000000a = 10)
+        16x2  %507 = unpack_32_2x16 %1
+        32    %508 = u2u32 %507.y
+        32    %509 = load_const (0x00000010 = 16)
+        32    %510 = ishl %508, %509 (0x10)
+        32    %511 = extract_u16 %505, %453 (0x0)
+        32    %512 = ior %511, %510
+        8x4   %513 = unpack_32_4x8 %512
+        8     %514 = load_const (0x01)
+        8     %515 = iand %513.x, %514 (0x1)
+        1     %516 = ine %515, %503 (0x0)
+        64    %517 = b2i64 %516
+        64    %518 = ishl %517, %506 (0xa)
+        32    %519 = unpack_64_2x32_split_x %518
+        32    %520 = load_const (0x00000101 = 257)
+        32    %521 = ior %519, %520 (0x101)
+        32    %522 = unpack_64_2x32_split_y %518
+        64    %523 = pack_64_2x32_split %521, %522
+        8     %524 = iand %513.y, %514 (0x1)
+        1     %525 = ine %524, %503 (0x0)
+        64    %526 = b2i64 %525
+        32    %527 = load_const (0x0000000f = 15)
+        64    %528 = ishl %526, %527 (0xf)
+        64    %529 = ior %523, %528
+        32    %530 = unpack_64_2x32_split_x %529
+        32    %531 = load_const (0x18800000 = 411041792)
+        32    %532 = ior %530, %531 (0x18800000)
+                     @store_global (%532, %461) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %533 = u2u32 %23
+        64    %534 = iadd %461, %501 (0x4)
+                     @store_global (%533, %534) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %535 = unpack_64_2x32_split_y %23
+        64    %536 = iadd %461, %502 (0x8)
+                     @store_global (%535, %536) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b33
+    }
+    block b33:  // preds: b31 b32, succs: b34
+    block b34:
+   */
+   static const uint32_t impl_0_nir[1714] = {
+    0x0000023c, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000007, 0x00000000, 0x00000029, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4011744, 0xe4021744, 0xc4031744,
+    0xe4041744, 0xc4051744, 0xc4061744, 0xc4071744,
+    0xc4081744, 0xe4091744, 0xe40a1744, 0xc40b1744,
+    0x00005605, 0xc4288000, 0x00000000, 0x001b0016,
+    0x00009605, 0xc4351000, 0x00000000, 0x001b001c,
+    0x00007605, 0xc4288000, 0x00000000, 0x001f0016,
+    0xc431f000, 0x00000000, 0x001a0014, 0xc433f000,
+    0x00000000, 0x001e001a, 0xe438f000, 0x00000000,
+    0x00000022, 0xc433f000, 0x00000000, 0x00120021,
+    0xe438f000, 0x00000000, 0x00000024, 0x00011605,
+    0xc4351000, 0x00000000, 0x001f001a, 0xe438f000,
+    0x00000000, 0x00000027, 0x00000f05, 0x24345000,
+    0x00000000, 0x00290013, 0x00000001, 0x000000a8,
+    0x00000000, 0x00000001, 0x00000000, 0x00000002,
+    0xc4005354, 0x0000004c, 0x00000400, 0xc43ae000,
+    0x00000000, 0x002c0015, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000002d, 0x0000002b, 0x00000015, 0x0000002e,
+    0x243a6000, 0x00000000, 0x00300021, 0x00000001,
+    0x000000c4, 0x00000000, 0x00000003, 0x00000000,
+    0x0000000c, 0x00003605, 0xc4322000, 0x00000000,
+    0x00330016, 0x00000e05, 0x24327000, 0x00000000,
+    0x00350034, 0x00001405, 0x00003405, 0xc4722000,
+    0x00000000, 0x001b0016, 0x00000000, 0x00260016,
+    0x24345000, 0x00000000, 0x0035003a, 0xc4322000,
+    0x00000000, 0x001d0016, 0x24345000, 0x00000000,
+    0x0035003c, 0xc4288000, 0x00000000, 0x00330016,
+    0x00000001, 0x000000d8, 0x00000000, 0x00000003,
+    0x00000000, 0x00000004, 0x00011705, 0xc43ac000,
+    0x00000000, 0x003a003c, 0x24345000, 0x00000000,
+    0x00350041, 0xe431f000, 0x00000000, 0x0023000f,
+    0x00000001, 0x00000108, 0x00000000, 0x00000005,
+    0x00000000, 0x0000000e, 0xc47cc000, 0x00000000,
+    0x001f003a, 0x00000000, 0x001b003c, 0xc431f020,
+    0x00000000, 0x00460045, 0xc4351000, 0x00000000,
+    0x001b0047, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00480049, 0x00009705, 0x00019705, 0x00021705,
+    0x00021605, 0x78080e05, 0xc434e000, 0x00000000,
+    0x004a004f, 0x00006894, 0x00000140, 0x0000010c,
+    0x00040001, 0xe431f000, 0x00000000, 0x004b0043,
+    0x00000001, 0x000000ec, 0x00000000, 0x00000001,
+    0x00000000, 0x00000031, 0xc431f000, 0x00000000,
+    0x00330020, 0xe471f000, 0x00000000, 0x00400025,
+    0x00000000, 0x00540010, 0x24327000, 0x00000000,
+    0x00290055, 0xc4225000, 0x00000000, 0x00000056,
+    0xffe01605, 0xc4322000, 0x00000000, 0x0058000e,
+    0xc434e000, 0x00000000, 0x00570059, 0x00201605,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x005c005a,
+    0xc434e000, 0x00000000, 0x005b005d, 0xa83b8000,
+    0x00000000, 0x0000000d, 0xc438e000, 0x00000000,
+    0x0000005f, 0xc4351000, 0x00000000, 0x004e0060,
+    0xc4287000, 0x00000000, 0x0035005e, 0xc434e000,
+    0x00000000, 0x00610062, 0xc83bc000, 0x00000000,
+    0x00000055, 0x903bb000, 0x00000000, 0x00000063,
+    0x84322000, 0x00000000, 0x00380065, 0x24345000,
+    0x00000000, 0x00370066, 0xe4226000, 0x00000000,
+    0x00000067, 0x0001b605, 0xe4351000, 0x00000000,
+    0x00690068, 0x84322100, 0x00000000, 0x00380065,
+    0x24345000, 0x00000000, 0x0037006b, 0xe4226000,
+    0x00000000, 0x0000006c, 0x0001d605, 0xe4351000,
+    0x00000000, 0x006e006d, 0xe434e000, 0x00000000,
+    0x006f006a, 0xe438f000, 0x00000000, 0x0000003e,
+    0xe4351000, 0x00000000, 0x004e0071, 0xe434e000,
+    0x00000000, 0x00720070, 0xe438f000, 0x00000000,
+    0x00000020, 0x00035605, 0xe4351000, 0x00000000,
+    0x00750074, 0xe434e000, 0x00000000, 0x00760073,
+    0xc438e000, 0x00000000, 0x00000077, 0x00006894,
+    0x000001e0, 0x00000144, 0x00040001, 0xc438e000,
+    0x00000000, 0x00000055, 0xe431f000, 0x00000000,
+    0x00400043, 0x00006894, 0x000001e4, 0x000001e8,
+    0x00040001, 0xc435a100, 0x00000000, 0x00000064,
+    0xe431f000, 0x00000000, 0x004c0043, 0x00006894,
+    0x000001ec, 0x000001f0, 0x00040001, 0xe431f000,
+    0x00000000, 0x004d0043, 0x00006894, 0x00000098,
+    0x000001f4, 0x00040001, 0x00029705, 0xe431f000,
+    0x00000000, 0x007e0043, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x00000053, 0x00000052, 0x00000020, 0x00000080,
+    0xe4000028, 0x0000007f, 0x00000052, 0x00000051,
+    0x00000080, 0x00000001, 0x000000f4, 0x00000000,
+    0x00000001, 0x00000000, 0x00000032, 0xe431f000,
+    0x00000000, 0x00280011, 0x00006894, 0x00000084,
+    0x00000214, 0x00040001, 0xc4349000, 0x00000000,
+    0x00000034, 0xe431f000, 0x00000000, 0x004b0085,
+    0x00006894, 0x00000218, 0x0000021c, 0x00040001,
+    0x24327000, 0x00000000, 0x00290085, 0xc4225000,
+    0x00000000, 0x00000088, 0xffe01605, 0xc4322000,
+    0x00000000, 0x008a000c, 0xc434e000, 0x00000000,
+    0x0089008b, 0x00201605, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x008e008c, 0xc434e000, 0x00000000,
+    0x008d008f, 0xa83b8000, 0x00000000, 0x0000000d,
+    0xc438e000, 0x00000000, 0x00000091, 0xc4351000,
+    0x00000000, 0x004e0092, 0xc4287000, 0x00000000,
+    0x00350090, 0xc434e000, 0x00000000, 0x00930094,
+    0xc83bc000, 0x00000000, 0x00000085, 0x903bb000,
+    0x00000000, 0x00000095, 0x84322000, 0x00000000,
+    0x00380097, 0x24345000, 0x00000000, 0x00370098,
+    0xe4226000, 0x00000000, 0x00000099, 0x0001b605,
+    0xe4351000, 0x00000000, 0x009b009a, 0x84322100,
+    0x00000000, 0x00380097, 0x24345000, 0x00000000,
+    0x0037009d, 0xe4226000, 0x00000000, 0x0000009e,
+    0x0001d605, 0xe4351000, 0x00000000, 0x00a0009f,
+    0xe434e000, 0x00000000, 0x00a1009c, 0xe438f000,
+    0x00000000, 0x0000003e, 0xe4351000, 0x00000000,
+    0x004e00a3, 0xe434e000, 0x00000000, 0x00a400a2,
+    0xe438f000, 0x00000000, 0x00000082, 0x00035605,
+    0xe4351000, 0x00000000, 0x00a700a6, 0xe434e000,
+    0x00000000, 0x00a800a5, 0xc438e000, 0x00000000,
+    0x000000a9, 0x00006894, 0x000002a8, 0x0000020c,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000085,
+    0xe431f000, 0x00000000, 0x004b0083, 0x00006894,
+    0x000002ac, 0x000002b0, 0x00040001, 0xc435a100,
+    0x00000000, 0x00000096, 0xe431f000, 0x00000000,
+    0x00400083, 0x00006894, 0x000002b4, 0x000002b8,
+    0x00040001, 0xe431f000, 0x00000000, 0x004c0083,
+    0x00006894, 0x00000098, 0x000002bc, 0x00040001,
+    0xe431f000, 0x00000000, 0x004d0083, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x000000b0, 0x00000084, 0x00000083,
+    0x000000b1, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x0000005f, 0xe4000028, 0x000000b3,
+    0x000000b2, 0x00000043, 0x000000b4, 0xe431f000,
+    0x00000000, 0x00250010, 0xd0005354, 0x000002dc,
+    0x00000400, 0xc435a000, 0x00000000, 0x000000b8,
+    0xc435a200, 0x00000000, 0x000000b8, 0x00009705,
+    0xc435a100, 0x00000000, 0x000000b8, 0x00019705,
+    0xc435a300, 0x00000000, 0x000000b8, 0xc43cc000,
+    0x00000000, 0x00330039, 0xffe01605, 0xc4322000,
+    0x00000000, 0x00c0000b, 0xc434e000, 0x00000000,
+    0x00bf00c1, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x00c300c2, 0x00021605, 0x00000605, 0xff00ffff,
+    0x00031605, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x003500c4, 0x00021705, 0x00029705,
+    0x00031705, 0xa83b8000, 0x00000000, 0x00000009,
+    0x84390000, 0x00000000, 0x000000cd, 0x00003505,
+    0xa4288000, 0x00000000, 0x00cf00cd, 0x84390000,
+    0x00000000, 0x000000d0, 0xc438e000, 0x00000000,
+    0x000000ce, 0xc4351000, 0x00000000, 0x002600d2,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x000a00d4,
+    0xc434e000, 0x00000000, 0x00d300d5, 0xc438e000,
+    0x00000000, 0x000000d1, 0xc4351000, 0x00000000,
+    0x00c500d7, 0xc4322000, 0x00000000, 0x00c600d6,
+    0xc434e000, 0x00000000, 0x00d800d9, 0x903bb000,
+    0x00000000, 0x00000009, 0xc438e200, 0x00000000,
+    0x000000db, 0xc4351000, 0x00000000, 0x00c700dc,
+    0xc4322000, 0x00000000, 0x00c800da, 0xc434e000,
+    0x00000000, 0x00dd00de, 0x903bb000, 0x00000000,
+    0x000000c9, 0x84322000, 0x00000000, 0x003800e0,
+    0x24345000, 0x00000000, 0x003700e1, 0xe4226000,
+    0x00000000, 0x000000e2, 0xe4351000, 0x00000000,
+    0x002600e3, 0xc43bd000, 0x00000000, 0x000000e4,
+    0x0000b605, 0xc434e000, 0x00000000, 0x00e600e5,
+    0xc43be000, 0x00000000, 0x000000e4, 0xe4369000,
+    0x00000000, 0x00e800e7, 0x84322100, 0x00000000,
+    0x003800e0, 0x24345000, 0x00000000, 0x003700ea,
+    0xe4226000, 0x00000000, 0x000000eb, 0x00013605,
+    0xe4351000, 0x00000000, 0x00ed00ec, 0xe434e000,
+    0x00000000, 0x00ee00e9, 0x84322200, 0x00000000,
+    0x003800e0, 0x24345000, 0x00000000, 0x003700f0,
+    0xe4226000, 0x00000000, 0x000000f1, 0x00015605,
+    0xe4351000, 0x00000000, 0x00f300f2, 0xe434e000,
+    0x00000000, 0x00f400ef, 0x84322300, 0x00000000,
+    0x003800e0, 0x24345000, 0x00000000, 0x003700f6,
+    0xe4226000, 0x00000000, 0x000000f7, 0x00017605,
+    0xe4351000, 0x00000000, 0x00f900f8, 0xe434e000,
+    0x00000000, 0x00fa00f5, 0xc43bd000, 0x00000000,
+    0x000000fb, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00fc00fd, 0x00006894, 0x000003f8, 0x000002d8,
+    0x00040001, 0xe438f000, 0x00000000, 0x00000034,
+    0xe4351000, 0x00000000, 0x002600ff, 0x903bb000,
+    0x00000000, 0x000000df, 0x84322000, 0x00000000,
+    0x00380101, 0x24345000, 0x00000000, 0x00370102,
+    0xe4226000, 0x00000000, 0x00000103, 0xe4351000,
+    0x00000000, 0x00ed0104, 0xe434e000, 0x00000000,
+    0x01050100, 0xc438e000, 0x00000000, 0x00000106,
+    0xe431f000, 0x00000000, 0x00bb00b6, 0x00006894,
+    0x0000041c, 0x00000420, 0x00040001, 0xe431f000,
+    0x00000000, 0x004000b6, 0x00006894, 0x000002e4,
+    0x00000424, 0x00040001, 0xe431f000, 0x00000000,
+    0x00bd00b6, 0x00006894, 0x000002e8, 0x00000428,
+    0x00040001, 0xe431f000, 0x00000000, 0x00ca00b6,
+    0x00006894, 0x000002f0, 0x0000042c, 0x00040001,
+    0xe431f000, 0x00000000, 0x00cb00b6, 0x00006894,
+    0x000002f8, 0x00000430, 0x00040001, 0xe431f000,
+    0x00000000, 0x00cc00b6, 0x00006894, 0x000000d4,
+    0x00000434, 0x00040001, 0x00000003, 0x00000000,
+    0x00000004, 0x00019705, 0xc43ac000, 0x00000000,
+    0x003a003c, 0x24345000, 0x00000000, 0x00350110,
+    0xe431f000, 0x00000000, 0x0023000f, 0x00000001,
+    0x00000444, 0x00000000, 0x00000005, 0x00000000,
+    0x0000000e, 0xc47cc000, 0x00000000, 0x001f003a,
+    0x00000000, 0x001b003c, 0xc431f020, 0x00000000,
+    0x01150114, 0xc4351000, 0x00000000, 0x001b0116,
+    0xfffff605, 0xc431f000, 0x00000000, 0x01170118,
+    0x00009705, 0x00011705, 0x00021705, 0x00021605,
+    0x78080e05, 0xc434e000, 0x00000000, 0x0119011e,
+    0x00006894, 0x0000047c, 0x00000448, 0x00040001,
+    0xe431f000, 0x00000000, 0x011a0112, 0x00000001,
+    0x000000ec, 0x00000000, 0x00000001, 0x00000000,
+    0x00000031, 0xc431f000, 0x00000000, 0x00330020,
+    0xe471f000, 0x00000000, 0x010f0025, 0x00000000,
+    0x01230010, 0x24327000, 0x00000000, 0x00290124,
+    0xc4225000, 0x00000000, 0x00000125, 0xffe01605,
+    0xc4322000, 0x00000000, 0x01270008, 0xc434e000,
+    0x00000000, 0x01260128, 0x00201605, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x012b0129, 0xc434e000,
+    0x00000000, 0x012a012c, 0xa83b8000, 0x00000000,
+    0x0000000d, 0xc438e000, 0x00000000, 0x0000012e,
+    0xc4351000, 0x00000000, 0x011d012f, 0xc4287000,
+    0x00000000, 0x0035012d, 0xc434e000, 0x00000000,
+    0x01300131, 0xc83bc000, 0x00000000, 0x00000124,
+    0x903bb000, 0x00000000, 0x00000132, 0x84322000,
+    0x00000000, 0x00380134, 0x24345000, 0x00000000,
+    0x00370135, 0xe4226000, 0x00000000, 0x00000136,
+    0x0001b605, 0xe4351000, 0x00000000, 0x01380137,
+    0x84322100, 0x00000000, 0x00380134, 0x24345000,
+    0x00000000, 0x0037013a, 0xe4226000, 0x00000000,
+    0x0000013b, 0x0001d605, 0xe4351000, 0x00000000,
+    0x013d013c, 0xe434e000, 0x00000000, 0x013e0139,
+    0xe438f000, 0x00000000, 0x0000003e, 0xe4351000,
+    0x00000000, 0x011d0140, 0xe434e000, 0x00000000,
+    0x0141013f, 0xe438f000, 0x00000000, 0x00000020,
+    0x00035605, 0xe4351000, 0x00000000, 0x01440143,
+    0xe434e000, 0x00000000, 0x01450142, 0xc438e000,
+    0x00000000, 0x00000146, 0x00006894, 0x0000051c,
+    0x00000480, 0x00040001, 0xc438e000, 0x00000000,
+    0x00000124, 0xe431f000, 0x00000000, 0x011b0112,
+    0x00006894, 0x00000520, 0x00000524, 0x00040001,
+    0xc435a100, 0x00000000, 0x00000133, 0xe431f000,
+    0x00000000, 0x010f0112, 0x00006894, 0x00000528,
+    0x0000052c, 0x00040001, 0xe431f000, 0x00000000,
+    0x011c0112, 0x00006894, 0x00000098, 0x00000530,
+    0x00040001, 0x00029705, 0xe431f000, 0x00000000,
+    0x014d0112, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0xc4000028, 0x00000122,
+    0x00000121, 0x00000020, 0x0000014f, 0xe4000028,
+    0x0000014e, 0x00000121, 0x00000120, 0x0000014f,
+    0x00000001, 0x000000f4, 0x00000000, 0x00000001,
+    0x00000000, 0x00000032, 0xe431f000, 0x00000000,
+    0x00280011, 0x00006894, 0x00000084, 0x00000550,
+    0x00040001, 0xc4349000, 0x00000000, 0x00000034,
+    0xe431f000, 0x00000000, 0x011a0154, 0x00006894,
+    0x00000554, 0x00000558, 0x00040001, 0x24327000,
+    0x00000000, 0x00290154, 0xc4225000, 0x00000000,
+    0x00000157, 0xffe01605, 0xc4322000, 0x00000000,
+    0x01590007, 0xc434e000, 0x00000000, 0x0158015a,
+    0x00201605, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x015d015b, 0xc434e000, 0x00000000, 0x015c015e,
+    0xa83b8000, 0x00000000, 0x0000000d, 0xc438e000,
+    0x00000000, 0x00000160, 0xc4351000, 0x00000000,
+    0x011d0161, 0xc4287000, 0x00000000, 0x0035015f,
+    0xc434e000, 0x00000000, 0x01620163, 0xc83bc000,
+    0x00000000, 0x00000154, 0x903bb000, 0x00000000,
+    0x00000164, 0x84322000, 0x00000000, 0x00380166,
+    0x24345000, 0x00000000, 0x00370167, 0xe4226000,
+    0x00000000, 0x00000168, 0x0001b605, 0xe4351000,
+    0x00000000, 0x016a0169, 0x84322100, 0x00000000,
+    0x00380166, 0x24345000, 0x00000000, 0x0037016c,
+    0xe4226000, 0x00000000, 0x0000016d, 0x0001d605,
+    0xe4351000, 0x00000000, 0x016f016e, 0xe434e000,
+    0x00000000, 0x0170016b, 0xe438f000, 0x00000000,
+    0x0000003e, 0xe4351000, 0x00000000, 0x011d0172,
+    0xe434e000, 0x00000000, 0x01730171, 0xe438f000,
+    0x00000000, 0x00000151, 0x00035605, 0xe4351000,
+    0x00000000, 0x01760175, 0xe434e000, 0x00000000,
+    0x01770174, 0xc438e000, 0x00000000, 0x00000178,
+    0x00006894, 0x000005e4, 0x00000548, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000154, 0xe431f000,
+    0x00000000, 0x011a0152, 0x00006894, 0x000005e8,
+    0x000005ec, 0x00040001, 0xc435a100, 0x00000000,
+    0x00000165, 0xe431f000, 0x00000000, 0x011b0152,
+    0x00006894, 0x000005f0, 0x000005f4, 0x00040001,
+    0xe431f000, 0x00000000, 0x010f0152, 0x00006894,
+    0x00000098, 0x000005f8, 0x00040001, 0xe431f000,
+    0x00000000, 0x011c0152, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0xe4000028,
+    0x0000017f, 0x00000153, 0x00000152, 0x00000180,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000061, 0xe4000028, 0x00000182, 0x00000181,
+    0x00000112, 0x00000183, 0xe431f000, 0x00000000,
+    0x00250010, 0xd0005354, 0x00000618, 0x00000400,
+    0x00009705, 0x00021705, 0xe431f000, 0x00000000,
+    0x01890186, 0xc4005354, 0x00000628, 0x00000400,
+    0x00021605, 0xc435a000, 0x00000000, 0x00000187,
+    0x00011705, 0xc435a200, 0x00000000, 0x00000187,
+    0xc435a100, 0x00000000, 0x00000187, 0xc435a300,
+    0x00000000, 0x00000187, 0xc43cc000, 0x00000000,
+    0x00330039, 0xffe01605, 0xc4322000, 0x00000000,
+    0x01930006, 0xc434e000, 0x00000000, 0x01920194,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x01960195,
+    0x00000605, 0xff00ffff, 0x00031605, 0x00000605,
+    0x00ffffff, 0xc4287000, 0x00000000, 0x00350197,
+    0x00029705, 0x00031705, 0xa83b8000, 0x00000000,
+    0x00000009, 0x84390000, 0x00000000, 0x0000019e,
+    0x00003505, 0xa4288000, 0x00000000, 0x01a0019e,
+    0x84390000, 0x00000000, 0x000001a1, 0xc438e000,
+    0x00000000, 0x0000019f, 0xc4351000, 0x00000000,
+    0x002601a3, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x000501a5, 0xc434e000, 0x00000000, 0x01a401a6,
+    0xc438e000, 0x00000000, 0x000001a2, 0xc4351000,
+    0x00000000, 0x018c01a8, 0xc4322000, 0x00000000,
+    0x019801a7, 0xc434e000, 0x00000000, 0x01a901aa,
+    0x903bb000, 0x00000000, 0x00000009, 0xc438e200,
+    0x00000000, 0x000001ac, 0xc4351000, 0x00000000,
+    0x019901ad, 0xc4322000, 0x00000000, 0x019a01ab,
+    0xc434e000, 0x00000000, 0x01ae01af, 0x903bb000,
+    0x00000000, 0x0000019b, 0x84322000, 0x00000000,
+    0x003801b1, 0x24345000, 0x00000000, 0x003701b2,
+    0xe4226000, 0x00000000, 0x000001b3, 0xe4351000,
+    0x00000000, 0x002601b4, 0xc43bd000, 0x00000000,
+    0x000001b5, 0x0000b605, 0xc434e000, 0x00000000,
+    0x01b701b6, 0xc43be000, 0x00000000, 0x000001b5,
+    0xe4369000, 0x00000000, 0x01b901b8, 0x84322100,
+    0x00000000, 0x003801b1, 0x24345000, 0x00000000,
+    0x003701bb, 0xe4226000, 0x00000000, 0x000001bc,
+    0x00013605, 0xe4351000, 0x00000000, 0x01be01bd,
+    0xe434e000, 0x00000000, 0x01bf01ba, 0x84322200,
+    0x00000000, 0x003801b1, 0x24345000, 0x00000000,
+    0x003701c1, 0xe4226000, 0x00000000, 0x000001c2,
+    0x00015605, 0xe4351000, 0x00000000, 0x01c401c3,
+    0xe434e000, 0x00000000, 0x01c501c0, 0x84322300,
+    0x00000000, 0x003801b1, 0x24345000, 0x00000000,
+    0x003701c7, 0xe4226000, 0x00000000, 0x000001c8,
+    0x00017605, 0xe4351000, 0x00000000, 0x01ca01c9,
+    0xe434e000, 0x00000000, 0x01cb01c6, 0xc43bd000,
+    0x00000000, 0x000001cc, 0x7b000e05, 0xc434e000,
+    0x00000000, 0x01cd01ce, 0x00006894, 0x0000073c,
+    0x00000614, 0x00040001, 0xe438f000, 0x00000000,
+    0x00000034, 0xe4351000, 0x00000000, 0x002601d0,
+    0x903bb000, 0x00000000, 0x000001b0, 0x84322000,
+    0x00000000, 0x003801d2, 0x24345000, 0x00000000,
+    0x003701d3, 0xe4226000, 0x00000000, 0x000001d4,
+    0xe4351000, 0x00000000, 0x01be01d5, 0xe434e000,
+    0x00000000, 0x01d601d1, 0xc438e000, 0x00000000,
+    0x000001d7, 0xe431f000, 0x00000000, 0x01880185,
+    0x00006894, 0x00000760, 0x00000764, 0x00040001,
+    0xe431f000, 0x00000000, 0x018e0185, 0x00006894,
+    0x00000634, 0x00000768, 0x00040001, 0xe431f000,
+    0x00000000, 0x010f0185, 0x00006894, 0x0000063c,
+    0x0000076c, 0x00040001, 0xe431f000, 0x00000000,
+    0x01890185, 0x00006894, 0x00000640, 0x00000770,
+    0x00040001, 0xe431f000, 0x00000000, 0x019c0185,
+    0x00006894, 0x0000062c, 0x00000774, 0x00040001,
+    0xe431f000, 0x00000000, 0x019d0185, 0x00006894,
+    0x00000644, 0x00000778, 0x00040001, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000a, 0x00000e05, 0x24327000,
+    0x00000000, 0x01e20030, 0xfffff605, 0xc431f000,
+    0x00000000, 0x01e40030, 0xc4273000, 0x00000000,
+    0x01e201e3, 0x000001e5, 0xe438f000, 0x00000000,
+    0x0000001e, 0xe431f000, 0x00000000, 0x01e70023,
+    0xe4273000, 0x00000000, 0x002301e3, 0x000001e8,
+    0xe431f000, 0x00000000, 0x01e9000f, 0x24345000,
+    0x00000000, 0x01e60021, 0x00000001, 0x000007ac,
+    0x00000000, 0x00000003, 0x00000000, 0x00000002,
+    0xc431f000, 0x00000000, 0x01e40017, 0x24327000,
+    0x00000000, 0x01ed001a, 0x00000001, 0x000007b8,
+    0x00000000, 0x00000001, 0x00000000, 0x00000027,
+    0x00009705, 0x00011705, 0x00001405, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x000401f3, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000003, 0xc438e100,
+    0x00000000, 0x000001f6, 0x00021605, 0xc4351000,
+    0x00000000, 0x01f801f7, 0xc4287000, 0x00000000,
+    0x01e201f4, 0xc434e000, 0x00000000, 0x01f901fa,
+    0x903bb000, 0x00000000, 0x000001fb, 0x00003405,
+    0x84322000, 0x00000000, 0x01fd01fc, 0x24345000,
+    0x00000000, 0x01f201fe, 0xe4226000, 0x00000000,
+    0x000001ff, 0xe4351000, 0x00000000, 0x01f50200,
+    0xc43bd000, 0x00000000, 0x00000201, 0x00203605,
+    0xc434e000, 0x00000000, 0x02030202, 0xc43be000,
+    0x00000000, 0x00000201, 0xe4369000, 0x00000000,
+    0x02050204, 0x84322100, 0x00000000, 0x01fd01fc,
+    0x24345000, 0x00000000, 0x01f20207, 0xe4226000,
+    0x00000000, 0x00000208, 0x0001f605, 0xe4351000,
+    0x00000000, 0x020a0209, 0xe434e000, 0x00000000,
+    0x020b0206, 0xc43bd000, 0x00000000, 0x0000020c,
+    0x18800e05, 0xc434e000, 0x00000000, 0x020e020d,
+    0x00006894, 0x0000083c, 0x000007a8, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000018, 0xe431f000,
+    0x00000000, 0x01f001ea, 0x00006894, 0x00000840,
+    0x00000844, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000018, 0xe431f000, 0x00000000, 0x01f101ea,
+    0x00006894, 0x00000848, 0x0000084c, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000027,
+    0x00009705, 0x00011705, 0x00001405, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0002021a, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000003, 0xc438e100,
+    0x00000000, 0x0000021d, 0x00021605, 0xc4351000,
+    0x00000000, 0x021f021e, 0xc4287000, 0x00000000,
+    0x01e2021b, 0xc434e000, 0x00000000, 0x02200221,
+    0x903bb000, 0x00000000, 0x00000222, 0x00003405,
+    0x84322000, 0x00000000, 0x02240223, 0x24345000,
+    0x00000000, 0x02190225, 0xe4226000, 0x00000000,
+    0x00000226, 0xe4351000, 0x00000000, 0x021c0227,
+    0xc43bd000, 0x00000000, 0x00000228, 0x00203605,
+    0xc434e000, 0x00000000, 0x022a0229, 0xc43be000,
+    0x00000000, 0x00000228, 0xe4369000, 0x00000000,
+    0x022c022b, 0x84322100, 0x00000000, 0x02240223,
+    0x24345000, 0x00000000, 0x0219022e, 0xe4226000,
+    0x00000000, 0x0000022f, 0x0001f605, 0xe4351000,
+    0x00000000, 0x02310230, 0xe434e000, 0x00000000,
+    0x0232022d, 0xc43bd000, 0x00000000, 0x00000233,
+    0x18800e05, 0xc434e000, 0x00000000, 0x02350234,
+    0x00006894, 0x000008d8, 0x000007a8, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000019, 0xe431f000,
+    0x00000000, 0x021701ea, 0x00006894, 0x000008dc,
+    0x000008e0, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000019, 0xe431f000, 0x00000000, 0x021801ea,
+    0x00006894, 0x000008e4, 0x000008e8, 0x00040001,
+    0x00000000, 0x00000000,
+};
+   nir_def *args[12] = { dst_base, indirect_base, draw_id_base, indirect_stride, indirect_draw_count, draw_base, max_draw_count, flags, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx11_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx11_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx)
+{
+   /*
+    block b0:   // preds:
+    64     %0 = @load_param (param_idx=0)
+    32     %1 = @load_param (param_idx=1)
+    64     %2 = @load_param (param_idx=2)
+    32     %3 = @load_param (param_idx=3)
+    32     %4 = @load_param (param_idx=4)
+    32     %5 = @load_param (param_idx=6)
+    32     %6 = @load_param (param_idx=7)
+    32     %7 = @load_param (param_idx=8)
+    32     %8 = @load_param (param_idx=9)
+    1      %9 = ult %8, %4
+                // succs: b1 b19
+    if %9 {
+        block b1:   // preds: b0
+        32    %10 = load_const (0x00000001)
+        32    %11 = iand %7, %10 (0x1)
+        32    %12 = load_const (0x00000000)
+        1     %13 = ine %11, %12 (0x0)
+        32    %14 = load_const (0x00000002)
+        32    %15 = iand %7, %14 (0x2)
+        1     %16 = ine %15, %12 (0x0)
+        32    %17 = load_const (0x00000004)
+        32    %18 = iand %7, %17 (0x4)
+        1     %19 = ieq %18, %12 (0x0)
+        32    %20 = load_const (0x00000008)
+        32    %21 = iand %7, %20 (0x8)
+        1     %22 = ine %21, %12 (0x0)
+        32    %23 = iadd %3, %8
+        32    %24 = imul %23, %5
+        64    %25 = u2u64 %24
+        32    %26 = imul %8, %1
+        64    %27 = u2u64 %26
+        64    %28 = iadd %2, %25
+        32    %29 = @load_global (%28) (access=none, align_mul=4, align_offset=0)
+        64    %30 = u2u64 %29
+                    // succs: b2 b6
+        if %16 {
+            block b2:   // preds: b1
+            1     %31 = inot %13
+                        // succs: b3 b4
+            if %31 {
+                block b3:   // preds: b2
+                64    %32 = u2u64 %6
+                64    %33 = iadd %0, %27
+                64    %34 = ishl %32, %14 (0x2)
+                64    %35 = iadd %33, %34
+                            @store_global (%29, %35) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b5
+            } else {
+                block b4:   // preds: b2
+                64    %36 = u2u64 %6
+                64    %37 = iadd %0, %27
+                32    %38 = load_const (0x00000003)
+                64    %39 = ishl %36, %38 (0x3)
+                64    %40 = iadd %37, %39
+                            @store_global (%30, %40) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b5
+            }
+            block b5:  // preds: b3 b4, succs: b7
+        } else {
+            block b6:  // preds: b1, succs: b7
+        }
+        block b7:  // preds: b5 b6, succs: b8
+        loop {
+            block b8:   // preds: b7 b17
+            32    %41 = phi b7: %12 (0x0), b17: %75
+            1     %42 = uge %41, %6
+                        // succs: b9 b10
+            if %42 {
+                block b9:// preds: b8
+                break
+                // succs: b18
+            } else {
+                block b10:  // preds: b8, succs: b11
+            }
+            block b11:  // preds: b10
+            32    %43 = ishl %41, %10 (0x1)
+            32    %44 = iadd %10 (0x1), %43
+                        // succs: b12 b13
+            if %19 {
+                block b12:  // preds: b11
+                64    %45 = u2u64 %44
+                32    %46 = load_const (0x00000003)
+                64    %47 = ishl %45, %46 (0x3)
+                64    %48 = iadd %28, %47
+                64    %49 = @load_global (%48) (access=none, align_mul=8, align_offset=0)
+                            // succs: b14
+            } else {
+                block b13:  // preds: b11
+                64    %50 = u2u64 %44
+                32    %51 = load_const (0x00000003)
+                64    %52 = ishl %50, %51 (0x3)
+                64    %53 = iadd %28, %52
+                32x4  %54 = @load_global (%53) (access=none, align_mul=8, align_offset=0)
+                64    %55 = pack_64_2x32 %54.zw
+                64    %56 = pack_64_2x32 %54.xy
+                64    %57 = ineg %56
+                64    %58 = iadd %55, %57
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13
+            64    %59 = phi b12: %49, b13: %58
+            64    %60 = load_const (0x0000000000000000)
+            1     %61 = ieq %29, %12 (0x0)
+            1     %62 = iand %22, %61
+            64    %63 = bcsel %62, %60 (0x0), %59
+            1     %64 = inot %13
+                        // succs: b15 b16
+            if %64 {
+                block b15:  // preds: b14
+                32    %65 = u2u32 %63
+                64    %66 = u2u64 %41
+                64    %67 = iadd %0, %27
+                64    %68 = ishl %66, %14 (0x2)
+                64    %69 = iadd %67, %68
+                            @store_global (%65, %69) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b17
+            } else {
+                block b16:  // preds: b14
+                64    %70 = u2u64 %41
+                64    %71 = iadd %0, %27
+                32    %72 = load_const (0x00000003)
+                64    %73 = ishl %70, %72 (0x3)
+                64    %74 = iadd %71, %73
+                            @store_global (%63, %74) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b17
+            }
+            block b17:  // preds: b15 b16
+            32    %75 = iadd %41, %10 (0x1)
+                        // succs: b8
+        }
+        block b18:  // preds: b9, succs: b20
+    } else {
+        block b19:  // preds: b0, succs: b20
+    }
+    block b20:  // preds: b18 b19, succs: b21
+    block b21:
+   */
+   static const uint32_t impl_0_nir[336] = {
+    0x00000062, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000a, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000a, 0xe4001744,
+    0xc4011744, 0xe4021744, 0xc4031744, 0xc4041744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0x243a6000, 0x00000000, 0x0006000a, 0x00000001,
+    0x0000002c, 0x00000000, 0x00000005, 0x00000000,
+    0x00000015, 0x00003605, 0xc4322000, 0x00000000,
+    0x000d0009, 0x00000e05, 0x24345000, 0x00000000,
+    0x000f000e, 0x00005605, 0xc4322000, 0x00000000,
+    0x00110009, 0x24345000, 0x00000000, 0x000f0012,
+    0x00009605, 0xc4322000, 0x00000000, 0x00140009,
+    0x24327000, 0x00000000, 0x000f0015, 0x00011605,
+    0xc4322000, 0x00000000, 0x00170009, 0x24345000,
+    0x00000000, 0x000f0018, 0xc431f000, 0x00000000,
+    0x000a0005, 0xc433f000, 0x00000000, 0x0007001a,
+    0xe438f000, 0x00000000, 0x0000001b, 0xc433f000,
+    0x00000000, 0x0003000a, 0xe438f000, 0x00000000,
+    0x0000001d, 0xe431f000, 0x00000000, 0x001c0004,
+    0xc4005354, 0x0000007c, 0x00000400, 0xe438f000,
+    0x00000000, 0x00000020, 0x00000001, 0x0000004c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000001,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x0000008c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001e0002, 0xe4351000,
+    0x00000000, 0x00110025, 0xe431f000, 0x00000000,
+    0x00270026, 0x00006894, 0x00000080, 0x000000a0,
+    0x00040001, 0x00000001, 0x00000000, 0x00000006,
+    0xe438f000, 0x00000000, 0x00000008, 0xe431f000,
+    0x00000000, 0x001e0002, 0x00007605, 0xe4351000,
+    0x00000000, 0x002c002a, 0xe431f000, 0x00000000,
+    0x002d002b, 0x00006894, 0x00000084, 0x000000b8,
+    0x00080001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0x00000000, 0x00000007, 0x00000000,
+    0x00000002, 0xc4000028, 0x0000000f, 0x00000031,
+    0x0000005e, 0x0000005d, 0x243a0000, 0x00000000,
+    0x00080033, 0x00000001, 0x000000d0, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0xc4351000, 0x00000000, 0x000d0033,
+    0xc431f000, 0x00000000, 0x0038000d, 0x00000001,
+    0x00000058, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x003c003b,
+    0xe431f000, 0x00000000, 0x003d001f, 0xe4005354,
+    0x000000f8, 0x00000800, 0x00000001, 0x00000000,
+    0x00000009, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x00420041,
+    0xe431f000, 0x00000000, 0x0043001f, 0xd0005354,
+    0x00000110, 0x00000800, 0xe4168000, 0x00000000,
+    0x5e000114, 0xe4368000, 0x00000000, 0x00000045,
+    0xe4349000, 0x00000000, 0x00000047, 0xe431f000,
+    0x00000000, 0x00480046, 0x00000000, 0x00000006,
+    0xe4000028, 0x0000003f, 0x0000003a, 0x00000049,
+    0x00000040, 0x00000f05, 0x24327000, 0x00000000,
+    0x000f0020, 0x24322000, 0x00000000, 0x004d0019,
+    0xe4273000, 0x00000000, 0x004c004e, 0x0000004b,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x00000140, 0x00000000, 0x00000001, 0x00000000,
+    0x00000006, 0xc438e000, 0x00000000, 0x0000004f,
+    0xe438f000, 0x00000000, 0x00000033, 0xe431f000,
+    0x00000000, 0x001e0002, 0xe4351000, 0x00000000,
+    0x00110053, 0xe431f000, 0x00000000, 0x00550054,
+    0x00006894, 0x00000148, 0x00000158, 0x00040001,
+    0x00000001, 0x00000000, 0x00000006, 0xe438f000,
+    0x00000000, 0x00000033, 0xe431f000, 0x00000000,
+    0x001e0002, 0x00007605, 0xe4351000, 0x00000000,
+    0x005a0058, 0xe431f000, 0x00000000, 0x005b0059,
+    0x00006894, 0x0000013c, 0x00000170, 0x00080001,
+    0x00000000, 0x00000001, 0xc431f000, 0x00000000,
+    0x000d0033, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+   nir_def *args[10] = { destination_base, destination_stride, query_data, first_query, num_queries, query_data_offset, query_stride, num_query_items, copy_flags, copy_item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx11_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx11_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = @load_param (param_idx=3)
+    32     %5 = load_const (0x00000004)
+    32     %6 = load_const (0x00000002)
+    32     %7 = ishl %4, %6 (0x2)
+    64     %8 = u2u64 %7
+    32     %9 = iadd %4, %5 (0x4)
+    1     %10 = ult %3, %9
+                // succs: b1 b11
+    if %10 {
+        block b1:   // preds: b0
+        32    %11 = load_const (0x00000003)
+        32    %12 = iadd %4, %11 (0x3)
+        1     %13 = ult %3, %12
+                    // succs: b2 b9
+        if %13 {
+            block b2:   // preds: b1
+            32    %14 = iadd %4, %6 (0x2)
+            1     %15 = ult %3, %14
+                        // succs: b3 b7
+            if %15 {
+                block b3:   // preds: b2
+                32    %16 = load_const (0x00000001)
+                32    %17 = iadd %4, %16 (0x1)
+                1     %18 = uge %3, %17
+                            // succs: b4 b5
+                if %18 {
+                    block b4:   // preds: b3
+                    64    %19 = iadd %2, %8
+                    32    %20 = @load_global (%19) (access=none, align_mul=4, align_offset=0)
+                    64    %21 = iadd %1, %8
+                                @store_global (%20, %21) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                // succs: b6
+                } else {
+                    block b5:  // preds: b3, succs: b6
+                }
+                block b6:  // preds: b4 b5, succs: b8
+            } else {
+                block b7:   // preds: b2
+                64    %22 = iadd %2, %8
+                32x2  %23 = @load_global (%22) (access=none, align_mul=8, align_offset=0)
+                64    %24 = iadd %1, %8
+                            @store_global (%23, %24) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                            // succs: b8
+            }
+            block b8:  // preds: b6 b7, succs: b10
+        } else {
+            block b9:   // preds: b1
+            64    %25 = iadd %2, %8
+            32x4  %26 = @load_global (%25) (access=none, align_mul=16, align_offset=0)
+            32x4  %27 = vec4 %26.x, %26.y, %26.z, %0
+            64    %28 = iadd %1, %8
+                        @store_global (%27, %28) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                        // succs: b10
+        }
+        block b10:  // preds: b8 b9, succs: b12
+    } else {
+        block b11:  // preds: b0
+        64    %29 = iadd %2, %8
+        32x4  %30 = @load_global (%29) (access=none, align_mul=16, align_offset=0)
+        64    %31 = iadd %1, %8
+                    @store_global (%30, %31) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                    // succs: b12
+    }
+    block b12:  // preds: b10 b11, succs: b13
+    block b13:
+   */
+   static const uint32_t impl_0_nir[168] = {
+    0x0000002e, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000004, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000b, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0xc4031744,
+    0x00009605, 0x00005605, 0xc4351000, 0x00000000,
+    0x00080006, 0xe438f000, 0x00000000, 0x00000009,
+    0xc431f000, 0x00000000, 0x00070006, 0x243a6000,
+    0x00000000, 0x000b0005, 0x00000001, 0x00000030,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00007605, 0xc431f000, 0x00000000, 0x000e0006,
+    0x243a6000, 0x00000000, 0x000f0005, 0x00000001,
+    0x00000040, 0x00000000, 0x00000003, 0x00000000,
+    0x00000002, 0xc431f000, 0x00000000, 0x00080006,
+    0x243a6000, 0x00000000, 0x00120005, 0x00000001,
+    0x0000004c, 0x00000000, 0x00000003, 0x00000000,
+    0x00000003, 0x00003605, 0xc431f000, 0x00000000,
+    0x00150006, 0x243a0000, 0x00000000, 0x00160005,
+    0x00000001, 0x0000005c, 0x00000000, 0x00000001,
+    0x00000000, 0x00000004, 0xe431f000, 0x00000000,
+    0x000a0004, 0xc4005354, 0x00000064, 0x00000400,
+    0xe431f000, 0x00000000, 0x000a0003, 0x00006894,
+    0x00000068, 0x0000006c, 0x00040001, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x00000004, 0xe431f000,
+    0x00000000, 0x000a0004, 0xc8005354, 0x0000007c,
+    0x00000800, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000080, 0x00000084, 0x00080003,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x00000090, 0x00001000, 0xd01d3000,
+    0x00000000, 0xe4000094, 0xe5000094, 0xe6000094,
+    0xe4000008, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000098, 0x0000009c, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000004, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x000000a8, 0x00001000, 0xe431f000,
+    0x00000000, 0x000a0003, 0x00006894, 0x000000ac,
+    0x000000b0, 0x0010000f, 0x00000000, 0x00000000,
+};
+   nir_def *args[4] = { dst_base, src_base, num_dwords, dword_offset };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx11_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+void
+gfx11_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = load_const (0x00000000)
+                // succs: b1
+    loop {
+        block b1:   // preds: b0 b16
+        32     %5 = phi b0: %4 (0x0), b16: %8
+        1      %6 = uge %5, %3
+                    // succs: b2 b3
+        if %6 {
+            block b2:// preds: b1
+            break
+            // succs: b17
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:   // preds: b3
+        32     %7 = load_const (0x00000010 = 16)
+        32     %8 = iadd %5, %7 (0x10)
+        1      %9 = ult %3, %8
+                    // succs: b5 b15
+        if %9 {
+            block b5:   // preds: b4
+            32    %10 = load_const (0x0000000c = 12)
+            32    %11 = iadd %5, %10 (0xc)
+            1     %12 = ult %3, %11
+                        // succs: b6 b13
+            if %12 {
+                block b6:   // preds: b5
+                32    %13 = load_const (0x00000008)
+                32    %14 = iadd %5, %13 (0x8)
+                1     %15 = ult %3, %14
+                            // succs: b7 b11
+                if %15 {
+                    block b7:   // preds: b6
+                    32    %16 = load_const (0x00000004)
+                    32    %17 = iadd %5, %16 (0x4)
+                    1     %18 = uge %3, %17
+                                // succs: b8 b9
+                    if %18 {
+                        block b8:   // preds: b7
+                        64    %19 = u2u64 %5
+                        64    %20 = iadd %2, %19
+                        32    %21 = @load_global (%20) (access=none, align_mul=4, align_offset=0)
+                        64    %22 = iadd %1, %19
+                                    @store_global (%21, %22) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                    // succs: b10
+                    } else {
+                        block b9:  // preds: b7, succs: b10
+                    }
+                    block b10:  // preds: b8 b9, succs: b12
+                } else {
+                    block b11:  // preds: b6
+                    64    %23 = u2u64 %5
+                    64    %24 = iadd %2, %23
+                    32x2  %25 = @load_global (%24) (access=none, align_mul=8, align_offset=0)
+                    64    %26 = iadd %1, %23
+                                @store_global (%25, %26) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                                // succs: b12
+                }
+                block b12:  // preds: b10 b11, succs: b14
+            } else {
+                block b13:  // preds: b5
+                64    %27 = u2u64 %5
+                64    %28 = iadd %2, %27
+                32x4  %29 = @load_global (%28) (access=none, align_mul=16, align_offset=0)
+                64    %30 = iadd %1, %27
+                32x4  %31 = vec4 %29.x, %29.y, %29.z, %0
+                            @store_global (%31, %30) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13, succs: b16
+        } else {
+            block b15:  // preds: b4
+            64    %32 = u2u64 %5
+            64    %33 = iadd %2, %32
+            32x4  %34 = @load_global (%33) (access=none, align_mul=16, align_offset=0)
+            64    %35 = iadd %1, %32
+                        @store_global (%34, %35) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                        // succs: b16
+        }
+        block b16:  // preds: b14 b15, succs: b1
+    }
+    block b17:  // preds: b2, succs: b18
+    block b18:
+   */
+   static const uint32_t impl_0_nir[197] = {
+    0x00000037, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000003, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x00000005, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0x00000e05,
+    0x00000002, 0x00000000, 0x00000005, 0x00000000,
+    0x00000002, 0xc4000028, 0x00000006, 0x00000001,
+    0x0000000e, 0x00000035, 0x243a0000, 0x00000000,
+    0x00050008, 0x00000001, 0x00000024, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000003, 0x00021605, 0xc431f000, 0x00000000,
+    0x000d0008, 0x243a6000, 0x00000000, 0x000e0005,
+    0x00000001, 0x0000003c, 0x00000000, 0x00000003,
+    0x00000000, 0x00000003, 0x00019605, 0xc431f000,
+    0x00000000, 0x00110008, 0x243a6000, 0x00000000,
+    0x00120005, 0x00000001, 0x0000004c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000003, 0x00011605,
+    0xc431f000, 0x00000000, 0x00150008, 0x243a6000,
+    0x00000000, 0x00160005, 0x00000001, 0x0000005c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00009605, 0xc431f000, 0x00000000, 0x00190008,
+    0x243a0000, 0x00000000, 0x001a0005, 0x00000001,
+    0x0000006c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001d0004, 0xc4005354,
+    0x00000078, 0x00000400, 0xe431f000, 0x00000000,
+    0x001d0003, 0x00006894, 0x0000007c, 0x00000080,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00240004, 0xc8005354,
+    0x00000094, 0x00000800, 0xe431f000, 0x00000000,
+    0x00240003, 0x00006894, 0x00000098, 0x0000009c,
+    0x00080003, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000006, 0xe438f000, 0x00000000,
+    0x00000008, 0xe431f000, 0x00000000, 0x002a0004,
+    0xd0005354, 0x000000ac, 0x00001000, 0xe431f000,
+    0x00000000, 0x002a0003, 0xd01d3000, 0x00000000,
+    0xe40000b0, 0xe50000b0, 0xe60000b0, 0xe4000008,
+    0x00006894, 0x000000b8, 0x000000b4, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00310004, 0xd0005354,
+    0x000000c8, 0x00001000, 0xe431f000, 0x00000000,
+    0x00310003, 0x00006894, 0x000000cc, 0x000000d0,
+    0x0010000f, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[3] = { dst_ptr, src_ptr, size };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
+struct vtn_bindgen_dummy {
+   vtn_bindgen_dummy() {
+      /* Format strings:
+       *
+       */
+const uint32_t printf_0_blob[1] = {
+    0x00000000,
+};
+      u_printf_singleton_init_or_ref();
+      u_printf_singleton_add_serialized((const void*)printf_0_blob, sizeof(printf_0_blob));
+   }
+
+   ~vtn_bindgen_dummy() {
+      u_printf_singleton_decref();
+   }
+};
+
+static vtn_bindgen_dummy vtn_bindgen_dummy_instance;
diff --git a/src/intel/shaders/intel_gfx110_shaders_binding.h b/src/intel/shaders/intel_gfx110_shaders_binding.h
new file mode 100644
index 00000000000..ee65852080a
--- /dev/null
+++ b/src/intel/shaders/intel_gfx110_shaders_binding.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#pragma once
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx11_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx11_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx11_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx11_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id);
+
+void
+gfx11_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx11_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx11_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx11_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx11_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx11_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx11_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
diff --git a/src/intel/shaders/intel_gfx120_shaders_binding.cpp b/src/intel/shaders/intel_gfx120_shaders_binding.cpp
new file mode 100644
index 00000000000..65a5cc2cdec
--- /dev/null
+++ b/src/intel/shaders/intel_gfx120_shaders_binding.cpp
@@ -0,0 +1,3850 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx12_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx12_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count)
+{
+   /*
+    block b0:  // preds:
+    64    %0 = @load_param (param_idx=0)
+    32    %1 = @load_param (param_idx=1)
+    32    %2 = load_const (0x00000002)
+    32    %3 = ishl %1, %2 (0x2)
+    32    %4 = load_const (0xffffffff = -1 = 4294967295)
+    32    %5 = iadd %4 (0xffffffff), %3
+    32    %6 = load_const (0x78080000 = 2013790208)
+    32    %7 = ior %6 (0x78080000), %5
+               @store_global (%7, %0) (wrmask=x, access=none, align_mul=4, align_offset=0)
+               // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[37] = {
+    0x0000000a, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000009, 0xe4001744,
+    0xc4011744, 0x00005605, 0xc4351000, 0x00000000,
+    0x00040003, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00050006, 0x78080e05, 0xc434e000, 0x00000000,
+    0x00070008, 0x00006894, 0x00000024, 0x00000008,
+    0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, buffer_count };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx12_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx12_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    32     %2 = undefined
+    32     %3 = undefined
+    64     %4 = @load_param (param_idx=0)
+    32     %5 = @load_param (param_idx=1)
+    32     %6 = @load_param (param_idx=2)
+    64     %7 = @load_param (param_idx=3)
+    32     %8 = @load_param (param_idx=4)
+    32     %9 = @load_param (param_idx=5)
+    64    %10 = load_const (0x0000000000000004)
+    64    %11 = load_const (0x0000000000000000)
+    1     %12 = ieq %7, %11 (0x0)
+    8     %13 = load_const (0x00)
+    8     %14 = load_const (0x01)
+    32    %15 = load_const (0x00000000)
+    32    %16 = b2i32 %12
+    32    %17 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %18 = iand %3, %17 (0xffffff00)
+    32    %19 = ior %18, %16
+    32    %20 = load_const (0x00000001)
+    32    %21 = load_const (0x00000008)
+    32    %22 = load_const (0x00000100 = 256)
+    32    %23 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %24 = iand %19, %23 (0xffff00ff)
+    32    %25 = ior %24, %22 (0x100)
+    16x2  %26 = unpack_32_2x16 %2
+    32    %27 = u2u32 %26.x
+    32    %28 = load_const (0x00000010 = 16)
+    32    %29 = ishl %27, %28 (0x10)
+    32    %30 = extract_u16 %25, %15 (0x0)
+    32    %31 = ior %30, %29
+    64    %32 = load_const (0x0000000000000008)
+    64    %33 = load_const (0x000000000000000c = 12)
+    32    %34 = iand %1, %17 (0xffffff00)
+    32    %35 = ior %34, %20 (0x1)
+    32    %36 = load_const (0x0000000d = 13)
+    8     %37 = u2u8 %26.y
+    16    %38 = load_const (0x0001)
+    16    %39 = extract_u8 %26.y, %38 (0x1)
+    8     %40 = u2u8 %39
+    32    %41 = u2u32 %37
+    32    %42 = ishl %41, %21 (0x8)
+    32    %43 = iand %35, %23 (0xffff00ff)
+    32    %44 = ior %43, %42
+    32    %45 = u2u32 %40
+    32    %46 = ishl %45, %28 (0x10)
+    32    %47 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32    %48 = iand %44, %47 (0xff00ffff)
+    32    %49 = ior %48, %46
+    8x4   %50 = unpack_32_4x8 %0
+    32    %51 = u2u32 %50.x
+    32    %52 = load_const (0x00000018 = 24)
+    32    %53 = ishl %51, %52 (0x18)
+    32    %54 = load_const (0x00ffffff = 16777215)
+    32    %55 = iand %49, %54 (0xffffff)
+    32    %56 = ior %55, %53
+    32x2  %57 = unpack_64_2x32 %7
+    64    %58 = u2u64 %9
+    8x4   %59 = unpack_32_4x8 %31
+    8     %60 = iand %59.x, %14 (0x1)
+    1     %61 = ine %60, %13 (0x0)
+    64    %62 = b2i64 %61
+    64    %63 = ishl %62, %36 (0xd)
+    64    %64 = ior %58, %63
+    8     %65 = iand %59.y, %14 (0x1)
+    1     %66 = ine %65, %13 (0x0)
+    64    %67 = b2i64 %66
+    32    %68 = load_const (0x0000000e = 14)
+    64    %69 = ishl %67, %68 (0xe)
+    64    %70 = ior %64, %69
+    64    %71 = u2u64 %5
+    64    %72 = ishl %71, %28 (0x10)
+    64    %73 = ior %70, %72
+    8x4   %74 = unpack_32_4x8 %56
+    8     %75 = iand %74.x, %14 (0x1)
+    1     %76 = ine %75, %13 (0x0)
+    64    %77 = b2i64 %76
+    32    %78 = load_const (0x00000019 = 25)
+    64    %79 = ishl %77, %78 (0x19)
+    64    %80 = ior %73, %79
+    64    %81 = u2u64 %6
+    32    %82 = load_const (0x0000001a = 26)
+    64    %83 = ishl %81, %82 (0x1a)
+    64    %84 = ior %80, %83
+    32    %85 = u2u32 %84
+                @store_global (%85, %4) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %86 = u2u32 %7
+    64    %87 = iadd %4, %10 (0x4)
+                @store_global (%86, %87) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %88 = mov %57.y
+    64    %89 = iadd %4, %32 (0x8)
+                @store_global (%88, %89) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %90 = iadd %4, %33 (0xc)
+                @store_global (%8, %90) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[264] = {
+    0x0000005d, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000006, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000005f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0xe4001744,
+    0xc4011744, 0xc4021744, 0xe4031744, 0xc4041744,
+    0xc4051744, 0x00009705, 0x00000f05, 0x24327000,
+    0x00000000, 0x000d0009, 0x00001405, 0x00003405,
+    0x00000e05, 0xc4225000, 0x00000000, 0x0000000e,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00130005,
+    0xc434e000, 0x00000000, 0x00120014, 0x00003605,
+    0x00011605, 0x00201605, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00190015, 0xc434e000, 0x00000000,
+    0x0018001a, 0xa83b8000, 0x00000000, 0x00000004,
+    0xc438e000, 0x00000000, 0x0000001c, 0x00021605,
+    0xc4351000, 0x00000000, 0x001e001d, 0xc4287000,
+    0x00000000, 0x0011001b, 0xc434e000, 0x00000000,
+    0x001f0020, 0x00011705, 0x00019705, 0xc4322000,
+    0x00000000, 0x00130003, 0xc434e000, 0x00000000,
+    0x00160024, 0x0001b605, 0x84390100, 0x00000000,
+    0x0000001c, 0x00003505, 0xa4288100, 0x00000000,
+    0x0028001c, 0x84390000, 0x00000000, 0x00000029,
+    0xc438e000, 0x00000000, 0x00000027, 0xc4351000,
+    0x00000000, 0x0017002b, 0xc4322000, 0x00000000,
+    0x00190025, 0xc434e000, 0x00000000, 0x002c002d,
+    0xc438e000, 0x00000000, 0x0000002a, 0xc4351000,
+    0x00000000, 0x001e002f, 0x00000605, 0xff00ffff,
+    0xc4322000, 0x00000000, 0x0031002e, 0xc434e000,
+    0x00000000, 0x00300032, 0x903bb000, 0x00000000,
+    0x00000002, 0xc438e000, 0x00000000, 0x00000034,
+    0x00031605, 0xc4351000, 0x00000000, 0x00360035,
+    0x00000605, 0x00ffffff, 0xc4322000, 0x00000000,
+    0x00380033, 0xc434e000, 0x00000000, 0x00370039,
+    0xc83bc000, 0x00000000, 0x00000009, 0xe438f000,
+    0x00000000, 0x0000000b, 0x903bb000, 0x00000000,
+    0x00000021, 0x84322000, 0x00000000, 0x0010003d,
+    0x24345000, 0x00000000, 0x000f003e, 0xe4226000,
+    0x00000000, 0x0000003f, 0xe4351000, 0x00000000,
+    0x00260040, 0xe434e000, 0x00000000, 0x0041003c,
+    0x84322100, 0x00000000, 0x0010003d, 0x24345000,
+    0x00000000, 0x000f0043, 0xe4226000, 0x00000000,
+    0x00000044, 0x0001d605, 0xe4351000, 0x00000000,
+    0x00460045, 0xe434e000, 0x00000000, 0x00470042,
+    0xe438f000, 0x00000000, 0x00000007, 0xe4351000,
+    0x00000000, 0x001e0049, 0xe434e000, 0x00000000,
+    0x004a0048, 0x903bb000, 0x00000000, 0x0000003a,
+    0x84322000, 0x00000000, 0x0010004c, 0x24345000,
+    0x00000000, 0x000f004d, 0xe4226000, 0x00000000,
+    0x0000004e, 0x00033605, 0xe4351000, 0x00000000,
+    0x0050004f, 0xe434e000, 0x00000000, 0x0051004b,
+    0xe438f000, 0x00000000, 0x00000008, 0x00035605,
+    0xe4351000, 0x00000000, 0x00540053, 0xe434e000,
+    0x00000000, 0x00550052, 0xc438e000, 0x00000000,
+    0x00000056, 0x00006894, 0x0000015c, 0x00000018,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000009,
+    0xe431f000, 0x00000000, 0x000c0006, 0x00006894,
+    0x00000160, 0x00000164, 0x00040001, 0xc435a100,
+    0x00000000, 0x0000003b, 0xe431f000, 0x00000000,
+    0x00220006, 0x00006894, 0x00000168, 0x0000016c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230006,
+    0x00006894, 0x00000028, 0x00000170, 0x00040001,
+};
+   nir_def *args[6] = { dst_ptr, mocs, buffer_idx, address, size, stride };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx12_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx12_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    32     %2 = undefined
+    64     %3 = @load_param (param_idx=0)
+    1      %4 = @load_param (param_idx=1)
+    1      %5 = @load_param (param_idx=2)
+    32     %6 = @load_param (param_idx=4)
+    32     %7 = @load_param (param_idx=5)
+    32     %8 = @load_param (param_idx=6)
+    32     %9 = @load_param (param_idx=7)
+    32    %10 = @load_param (param_idx=8)
+    8     %11 = load_const (0x00)
+    8     %12 = load_const (0x01)
+    64    %13 = load_const (0x0000000000000004)
+    32    %14 = b2i32 %4
+    32    %15 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %16 = iand %2, %15 (0xffffff00)
+    32    %17 = ior %16, %14
+    32    %18 = load_const (0x00000008)
+    32    %19 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %20 = iand %17, %19 (0xffff00ff)
+    32    %21 = load_const (0x00000010 = 16)
+    32    %22 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32    %23 = load_const (0x00000018 = 24)
+    32    %24 = load_const (0x00ffffff = 16777215)
+    32    %25 = load_const (0x00000000)
+    32    %26 = extract_u16 %20, %25 (0x0)
+    64    %27 = load_const (0x0000000000000008)
+    64    %28 = load_const (0x000000000000000c = 12)
+    64    %29 = load_const (0x0000000000000010 = 16)
+    64    %30 = load_const (0x0000000000000014 = 20)
+    64    %31 = load_const (0x0000000000000018 = 24)
+    16x2  %32 = unpack_32_2x16 %0
+    8     %33 = u2u8 %32.x
+    16    %34 = load_const (0x0001)
+    16    %35 = extract_u8 %32.x, %34 (0x1)
+    8     %36 = u2u8 %35
+    32    %37 = u2u32 %33
+    32    %38 = ishl %37, %18 (0x8)
+    32    %39 = load_const (0xffff0000 = -65536 = 4294901760)
+    32    %40 = iand %39 (0xffff0000), %1
+    32    %41 = ior %40, %38
+    32    %42 = u2u32 %36
+    32    %43 = ishl %42, %21 (0x10)
+    32    %44 = iand %41, %22 (0xff00ffff)
+    32    %45 = ior %44, %43
+    8x4   %46 = unpack_32_4x8 %0
+    32    %47 = u2u32 %46.z
+    32    %48 = ishl %47, %23 (0x18)
+    32    %49 = iand %45, %24 (0xffffff)
+    32    %50 = ior %49, %48
+    8x4   %51 = unpack_32_4x8 %26
+    8     %52 = iand %51.x, %12 (0x1)
+    1     %53 = ine %52, %11 (0x0)
+    64    %54 = b2i64 %53
+    64    %55 = ishl %54, %18 (0x8)
+    32    %56 = unpack_64_2x32_split_x %55
+    32    %57 = load_const (0x00000005)
+    32    %58 = ior %56, %57 (0x5)
+    32    %59 = unpack_64_2x32_split_y %55
+    64    %60 = pack_64_2x32_split %58, %59
+    8     %61 = iand %51.y, %12 (0x1)
+    1     %62 = ine %61, %11 (0x0)
+    64    %63 = b2i64 %62
+    32    %64 = load_const (0x00000009)
+    64    %65 = ishl %63, %64 (0x9)
+    64    %66 = ior %60, %65
+    8     %67 = iand %51.z, %12 (0x1)
+    1     %68 = ine %67, %11 (0x0)
+    64    %69 = b2i64 %68
+    32    %70 = load_const (0x0000000a = 10)
+    64    %71 = ishl %69, %70 (0xa)
+    64    %72 = ior %66, %71
+    8     %73 = iand %51.w, %12 (0x1)
+    1     %74 = ine %73, %11 (0x0)
+    64    %75 = b2i64 %74
+    32    %76 = load_const (0x0000000b = 11)
+    64    %77 = ishl %75, %76 (0xb)
+    64    %78 = ior %72, %77
+    32    %79 = unpack_64_2x32_split_x %78
+    32    %80 = load_const (0x7b000000 = 2063597568)
+    32    %81 = ior %80 (0x7b000000), %79
+                @store_global (%81, %3) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %82 = b2i64 %5
+    64    %83 = ishl %82, %18 (0x8)
+    8x4   %84 = unpack_32_4x8 %50
+    8     %85 = iand %84.x, %12 (0x1)
+    1     %86 = ine %85, %11 (0x0)
+    64    %87 = b2i64 %86
+    64    %88 = ishl %87, %64 (0x9)
+    64    %89 = ior %83, %88
+    32    %90 = u2u32 %89
+    64    %91 = iadd %3, %13 (0x4)
+                @store_global (%90, %91) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %92 = iadd %3, %27 (0x8)
+                @store_global (%6, %92) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %93 = iadd %3, %28 (0xc)
+                @store_global (%7, %93) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %94 = iadd %3, %29 (0x10)
+                @store_global (%8, %94) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %95 = iadd %3, %30 (0x14)
+                @store_global (%9, %95) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %96 = iadd %3, %31 (0x18)
+                @store_global (%10, %96) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[300] = {
+    0x00000063, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000068, 0x00000607,
+    0x00000607, 0x00000607, 0xe4001744, 0x24011744,
+    0x24021744, 0xc4041744, 0xc4051744, 0xc4061744,
+    0xc4071744, 0xc4081744, 0x00001405, 0x00003405,
+    0x00009705, 0xc4225000, 0x00000000, 0x00000006,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00110004,
+    0xc434e000, 0x00000000, 0x00100012, 0x00011605,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00150013,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x00000605, 0x00ffffff, 0x00000e05, 0xc4287000,
+    0x00000000, 0x001b0016, 0x00011705, 0x00019705,
+    0x00021705, 0x00029705, 0x00031705, 0xa83b8000,
+    0x00000000, 0x00000002, 0x84390000, 0x00000000,
+    0x00000022, 0x00003505, 0xa4288000, 0x00000000,
+    0x00240022, 0x84390000, 0x00000000, 0x00000025,
+    0xc438e000, 0x00000000, 0x00000023, 0xc4351000,
+    0x00000000, 0x00140027, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00030029, 0xc434e000, 0x00000000,
+    0x0028002a, 0xc438e000, 0x00000000, 0x00000026,
+    0xc4351000, 0x00000000, 0x0017002c, 0xc4322000,
+    0x00000000, 0x0018002b, 0xc434e000, 0x00000000,
+    0x002d002e, 0x903bb000, 0x00000000, 0x00000002,
+    0xc438e200, 0x00000000, 0x00000030, 0xc4351000,
+    0x00000000, 0x00190031, 0xc4322000, 0x00000000,
+    0x001a002f, 0xc434e000, 0x00000000, 0x00320033,
+    0x903bb000, 0x00000000, 0x0000001c, 0x84322000,
+    0x00000000, 0x000e0035, 0x24345000, 0x00000000,
+    0x000d0036, 0xe4226000, 0x00000000, 0x00000037,
+    0xe4351000, 0x00000000, 0x00140038, 0xc43bd000,
+    0x00000000, 0x00000039, 0x0000b605, 0xc434e000,
+    0x00000000, 0x003b003a, 0xc43be000, 0x00000000,
+    0x00000039, 0xe4369000, 0x00000000, 0x003d003c,
+    0x84322100, 0x00000000, 0x000e0035, 0x24345000,
+    0x00000000, 0x000d003f, 0xe4226000, 0x00000000,
+    0x00000040, 0x00013605, 0xe4351000, 0x00000000,
+    0x00420041, 0xe434e000, 0x00000000, 0x0043003e,
+    0x84322200, 0x00000000, 0x000e0035, 0x24345000,
+    0x00000000, 0x000d0045, 0xe4226000, 0x00000000,
+    0x00000046, 0x00015605, 0xe4351000, 0x00000000,
+    0x00480047, 0xe434e000, 0x00000000, 0x00490044,
+    0x84322300, 0x00000000, 0x000e0035, 0x24345000,
+    0x00000000, 0x000d004b, 0xe4226000, 0x00000000,
+    0x0000004c, 0x00017605, 0xe4351000, 0x00000000,
+    0x004e004d, 0xe434e000, 0x00000000, 0x004f004a,
+    0xc43bd000, 0x00000000, 0x00000050, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x00510052, 0x00006894,
+    0x0000014c, 0x00000014, 0x00040001, 0xe4226000,
+    0x00000000, 0x00000007, 0xe4351000, 0x00000000,
+    0x00140054, 0x903bb000, 0x00000000, 0x00000034,
+    0x84322000, 0x00000000, 0x000e0056, 0x24345000,
+    0x00000000, 0x000d0057, 0xe4226000, 0x00000000,
+    0x00000058, 0xe4351000, 0x00000000, 0x00420059,
+    0xe434e000, 0x00000000, 0x005a0055, 0xc438e000,
+    0x00000000, 0x0000005b, 0xe431f000, 0x00000000,
+    0x000f0005, 0x00006894, 0x00000170, 0x00000174,
+    0x00040001, 0xe431f000, 0x00000000, 0x001d0005,
+    0x00006894, 0x00000020, 0x00000178, 0x00040001,
+    0xe431f000, 0x00000000, 0x001e0005, 0x00006894,
+    0x00000024, 0x0000017c, 0x00040001, 0xe431f000,
+    0x00000000, 0x001f0005, 0x00006894, 0x00000028,
+    0x00000180, 0x00040001, 0xe431f000, 0x00000000,
+    0x00200005, 0x00006894, 0x0000002c, 0x00000184,
+    0x00040001, 0xe431f000, 0x00000000, 0x00210005,
+    0x00006894, 0x00000030, 0x00000188, 0x00040001,
+};
+   nir_def *args[9] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx12_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id);
+
+void
+gfx12_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    64      %4 = @load_param (param_idx=0)
+    1       %5 = @load_param (param_idx=1)
+    1       %6 = @load_param (param_idx=2)
+    32      %7 = @load_param (param_idx=4)
+    32      %8 = @load_param (param_idx=5)
+    32      %9 = @load_param (param_idx=6)
+    32     %10 = @load_param (param_idx=7)
+    32     %11 = @load_param (param_idx=8)
+    32     %12 = @load_param (param_idx=9)
+    32     %13 = @load_param (param_idx=10)
+    32     %14 = @load_param (param_idx=11)
+    8      %15 = load_const (0x00)
+    8      %16 = load_const (0x01)
+    32     %17 = load_const (0x00000008)
+    64     %18 = load_const (0x0000000000000004)
+    32     %19 = b2i32 %5
+    32     %20 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %21 = iand %3, %20 (0xffffff00)
+    32     %22 = ior %21, %19
+    32     %23 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %24 = iand %22, %23 (0xffff00ff)
+    32     %25 = load_const (0x00000010 = 16)
+    32     %26 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32     %27 = load_const (0x00000018 = 24)
+    32     %28 = load_const (0x01000000 = 16777216)
+    32     %29 = load_const (0x00ffffff = 16777215)
+    32     %30 = load_const (0x00000000)
+    32     %31 = extract_u16 %24, %30 (0x0)
+    32     %32 = ior %31, %28 (0x1000000)
+    64     %33 = load_const (0x0000000000000008)
+    64     %34 = load_const (0x000000000000000c = 12)
+    64     %35 = load_const (0x0000000000000010 = 16)
+    64     %36 = load_const (0x0000000000000014 = 20)
+    64     %37 = load_const (0x0000000000000018 = 24)
+    64     %38 = load_const (0x000000000000001c = 28)
+    64     %39 = load_const (0x0000000000000020 = 32)
+    8x4    %40 = unpack_32_4x8 %1
+    8x4    %41 = unpack_32_4x8 %0
+    16     %42 = u2u16 %40.w
+    16     %43 = u2u16 %41.x
+    16     %44 = ishl %43, %17 (0x8)
+    16     %45 = ior %42, %44
+    8      %46 = u2u8 %45
+    16     %47 = load_const (0x0001)
+    16     %48 = extract_u8 %45, %47 (0x1)
+    8      %49 = u2u8 %48
+    32     %50 = u2u32 %46
+    32     %51 = ishl %50, %17 (0x8)
+    32     %52 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %53 = iand %52 (0xffff0000), %2
+    32     %54 = ior %53, %51
+    32     %55 = u2u32 %49
+    32     %56 = ishl %55, %25 (0x10)
+    32     %57 = iand %54, %26 (0xff00ffff)
+    32     %58 = ior %57, %56
+    32     %59 = u2u32 %41.y
+    32     %60 = ishl %59, %27 (0x18)
+    32     %61 = iand %58, %29 (0xffffff)
+    32     %62 = ior %61, %60
+    64     %63 = load_const (0x0000000000000024 = 36)
+    8x4    %64 = unpack_32_4x8 %32
+    8      %65 = iand %64.x, %16 (0x1)
+    1      %66 = ine %65, %15 (0x0)
+    64     %67 = b2i64 %66
+    64     %68 = ishl %67, %17 (0x8)
+    32     %69 = unpack_64_2x32_split_x %68
+    32     %70 = ior %69, %17 (0x8)
+    32     %71 = unpack_64_2x32_split_y %68
+    64     %72 = pack_64_2x32_split %70, %71
+    8      %73 = iand %64.y, %16 (0x1)
+    1      %74 = ine %73, %15 (0x0)
+    64     %75 = b2i64 %74
+    32     %76 = load_const (0x00000009)
+    64     %77 = ishl %75, %76 (0x9)
+    64     %78 = ior %72, %77
+    8      %79 = iand %64.z, %16 (0x1)
+    1      %80 = ine %79, %15 (0x0)
+    64     %81 = b2i64 %80
+    32     %82 = load_const (0x0000000a = 10)
+    64     %83 = ishl %81, %82 (0xa)
+    64     %84 = ior %78, %83
+    8      %85 = iand %64.w, %16 (0x1)
+    1      %86 = ine %85, %15 (0x0)
+    64     %87 = b2i64 %86
+    32     %88 = load_const (0x0000000b = 11)
+    64     %89 = ishl %87, %88 (0xb)
+    64     %90 = ior %84, %89
+    32     %91 = unpack_64_2x32_split_x %90
+    32     %92 = load_const (0x7b000000 = 2063597568)
+    32     %93 = ior %92 (0x7b000000), %91
+                 @store_global (%93, %4) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %94 = b2i64 %6
+    64     %95 = ishl %94, %17 (0x8)
+    8x4    %96 = unpack_32_4x8 %62
+    8      %97 = iand %96.x, %16 (0x1)
+    1      %98 = ine %97, %15 (0x0)
+    64     %99 = b2i64 %98
+    64    %100 = ishl %99, %76 (0x9)
+    64    %101 = ior %95, %100
+    32    %102 = u2u32 %101
+    64    %103 = iadd %4, %18 (0x4)
+                 @store_global (%102, %103) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %104 = iadd %4, %33 (0x8)
+                 @store_global (%7, %104) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %105 = iadd %4, %34 (0xc)
+                 @store_global (%8, %105) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %106 = iadd %4, %35 (0x10)
+                 @store_global (%9, %106) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %107 = iadd %4, %36 (0x14)
+                 @store_global (%10, %107) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %108 = iadd %4, %37 (0x18)
+                 @store_global (%11, %108) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %109 = iadd %4, %38 (0x1c)
+                 @store_global (%12, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %110 = iadd %4, %39 (0x20)
+                 @store_global (%13, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %111 = iadd %4, %63 (0x24)
+                 @store_global (%14, %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                 // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[354] = {
+    0x00000072, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000007a, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0xe4001744,
+    0x24011744, 0x24021744, 0xc4041744, 0xc4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0xc40a1744, 0xc40b1744, 0x00001405, 0x00003405,
+    0x00011605, 0x00009705, 0xc4225000, 0x00000000,
+    0x00000007, 0xffe01605, 0xc4322000, 0x00000000,
+    0x00160005, 0xc434e000, 0x00000000, 0x00150017,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00190018,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0x00000e05,
+    0xc4287000, 0x00000000, 0x0020001a, 0xc434e000,
+    0x00000000, 0x001e0021, 0x00011705, 0x00019705,
+    0x00021705, 0x00029705, 0x00031705, 0x00039705,
+    0x00041705, 0x907bb000, 0x00000000, 0x00000003,
+    0x00000000, 0x00000002, 0xa438d300, 0x00000000,
+    0x0000002a, 0xa438d000, 0x00000000, 0x0000002b,
+    0xa4351000, 0x00000000, 0x0013002d, 0xa434e000,
+    0x00000000, 0x002e002c, 0x84390000, 0x00000000,
+    0x0000002f, 0x00003505, 0xa4288000, 0x00000000,
+    0x0031002f, 0x84390000, 0x00000000, 0x00000032,
+    0xc438e000, 0x00000000, 0x00000030, 0xc4351000,
+    0x00000000, 0x00130034, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00040036, 0xc434e000, 0x00000000,
+    0x00350037, 0xc438e000, 0x00000000, 0x00000033,
+    0xc4351000, 0x00000000, 0x001b0039, 0xc4322000,
+    0x00000000, 0x001c0038, 0xc434e000, 0x00000000,
+    0x003a003b, 0xc438e100, 0x00000000, 0x0000002b,
+    0xc4351000, 0x00000000, 0x001d003d, 0xc4322000,
+    0x00000000, 0x001f003c, 0xc434e000, 0x00000000,
+    0x003e003f, 0x00049705, 0x903bb000, 0x00000000,
+    0x00000022, 0x84322000, 0x00000000, 0x00120042,
+    0x24345000, 0x00000000, 0x00110043, 0xe4226000,
+    0x00000000, 0x00000044, 0xe4351000, 0x00000000,
+    0x00130045, 0xc43bd000, 0x00000000, 0x00000046,
+    0xc434e000, 0x00000000, 0x00130047, 0xc43be000,
+    0x00000000, 0x00000046, 0xe4369000, 0x00000000,
+    0x00490048, 0x84322100, 0x00000000, 0x00120042,
+    0x24345000, 0x00000000, 0x0011004b, 0xe4226000,
+    0x00000000, 0x0000004c, 0x00013605, 0xe4351000,
+    0x00000000, 0x004e004d, 0xe434e000, 0x00000000,
+    0x004f004a, 0x84322200, 0x00000000, 0x00120042,
+    0x24345000, 0x00000000, 0x00110051, 0xe4226000,
+    0x00000000, 0x00000052, 0x00015605, 0xe4351000,
+    0x00000000, 0x00540053, 0xe434e000, 0x00000000,
+    0x00550050, 0x84322300, 0x00000000, 0x00120042,
+    0x24345000, 0x00000000, 0x00110057, 0xe4226000,
+    0x00000000, 0x00000058, 0x00017605, 0xe4351000,
+    0x00000000, 0x005a0059, 0xe434e000, 0x00000000,
+    0x005b0056, 0xc43bd000, 0x00000000, 0x0000005c,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x005d005e,
+    0x00006894, 0x0000017c, 0x00000018, 0x00040001,
+    0xe4226000, 0x00000000, 0x00000008, 0xe4351000,
+    0x00000000, 0x00130060, 0x903bb000, 0x00000000,
+    0x00000040, 0x84322000, 0x00000000, 0x00120062,
+    0x24345000, 0x00000000, 0x00110063, 0xe4226000,
+    0x00000000, 0x00000064, 0xe4351000, 0x00000000,
+    0x004e0065, 0xe434e000, 0x00000000, 0x00660061,
+    0xc438e000, 0x00000000, 0x00000067, 0xe431f000,
+    0x00000000, 0x00140006, 0x00006894, 0x000001a0,
+    0x000001a4, 0x00040001, 0xe431f000, 0x00000000,
+    0x00230006, 0x00006894, 0x00000024, 0x000001a8,
+    0x00040001, 0xe431f000, 0x00000000, 0x00240006,
+    0x00006894, 0x00000028, 0x000001ac, 0x00040001,
+    0xe431f000, 0x00000000, 0x00250006, 0x00006894,
+    0x0000002c, 0x000001b0, 0x00040001, 0xe431f000,
+    0x00000000, 0x00260006, 0x00006894, 0x00000030,
+    0x000001b4, 0x00040001, 0xe431f000, 0x00000000,
+    0x00270006, 0x00006894, 0x00000034, 0x000001b8,
+    0x00040001, 0xe431f000, 0x00000000, 0x00280006,
+    0x00006894, 0x00000038, 0x000001bc, 0x00040001,
+    0xe431f000, 0x00000000, 0x00290006, 0x00006894,
+    0x0000003c, 0x000001c0, 0x00040001, 0xe431f000,
+    0x00000000, 0x00410006, 0x00006894, 0x00000040,
+    0x000001c4, 0x00040001,
+};
+   nir_def *args[12] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location, param_base_vertex, param_base_instance, param_draw_id };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx12_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx12_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    64     %2 = @load_param (param_idx=0)
+    64     %3 = @load_param (param_idx=1)
+    64     %4 = load_const (0x0000000000000004)
+    64     %5 = load_const (0x0000000000000008)
+    8      %6 = load_const (0x00)
+    32     %7 = load_const (0x00000000)
+    32     %8 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %9 = iand %8 (0xffff0000), %1
+    32    %10 = load_const (0x0000000a = 10)
+    16x2  %11 = unpack_32_2x16 %0
+    32    %12 = u2u32 %11.y
+    32    %13 = load_const (0x00000010 = 16)
+    32    %14 = ishl %12, %13 (0x10)
+    32    %15 = extract_u16 %9, %7 (0x0)
+    32    %16 = ior %15, %14
+    8x4   %17 = unpack_32_4x8 %16
+    8     %18 = load_const (0x01)
+    8     %19 = iand %17.x, %18 (0x1)
+    1     %20 = ine %19, %6 (0x0)
+    64    %21 = b2i64 %20
+    64    %22 = ishl %21, %10 (0xa)
+    32    %23 = unpack_64_2x32_split_x %22
+    32    %24 = load_const (0x00000101 = 257)
+    32    %25 = ior %23, %24 (0x101)
+    32    %26 = unpack_64_2x32_split_y %22
+    64    %27 = pack_64_2x32_split %25, %26
+    8     %28 = iand %17.y, %18 (0x1)
+    1     %29 = ine %28, %6 (0x0)
+    64    %30 = b2i64 %29
+    32    %31 = load_const (0x0000000f = 15)
+    64    %32 = ishl %30, %31 (0xf)
+    64    %33 = ior %27, %32
+    32    %34 = unpack_64_2x32_split_x %33
+    32    %35 = load_const (0x18800000 = 411041792)
+    32    %36 = ior %34, %35 (0x18800000)
+                @store_global (%36, %2) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %37 = u2u32 %3
+    64    %38 = iadd %2, %4 (0x4)
+                @store_global (%37, %38) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %39 = unpack_64_2x32_split_y %3
+    64    %40 = iadd %2, %5 (0x8)
+                @store_global (%39, %40) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[124] = {
+    0x0000002b, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002c, 0x00000607,
+    0x00000607, 0xe4001744, 0xe4011744, 0x00009705,
+    0x00011705, 0x00001405, 0x00000e05, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0003000a, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000002, 0xc438e100,
+    0x00000000, 0x0000000d, 0x00021605, 0xc4351000,
+    0x00000000, 0x000f000e, 0xc4287000, 0x00000000,
+    0x0009000b, 0xc434e000, 0x00000000, 0x00100011,
+    0x903bb000, 0x00000000, 0x00000012, 0x00003405,
+    0x84322000, 0x00000000, 0x00140013, 0x24345000,
+    0x00000000, 0x00080015, 0xe4226000, 0x00000000,
+    0x00000016, 0xe4351000, 0x00000000, 0x000c0017,
+    0xc43bd000, 0x00000000, 0x00000018, 0x00203605,
+    0xc434e000, 0x00000000, 0x001a0019, 0xc43be000,
+    0x00000000, 0x00000018, 0xe4369000, 0x00000000,
+    0x001c001b, 0x84322100, 0x00000000, 0x00140013,
+    0x24345000, 0x00000000, 0x0008001e, 0xe4226000,
+    0x00000000, 0x0000001f, 0x0001f605, 0xe4351000,
+    0x00000000, 0x00210020, 0xe434e000, 0x00000000,
+    0x0022001d, 0xc43bd000, 0x00000000, 0x00000023,
+    0x18800e05, 0xc434e000, 0x00000000, 0x00250024,
+    0x00006894, 0x00000098, 0x00000010, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000005, 0xe431f000,
+    0x00000000, 0x00060004, 0x00006894, 0x0000009c,
+    0x000000a0, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x00070004,
+    0x00006894, 0x000000a4, 0x000000a8, 0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, addr };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx12_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx12_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    64      %6 = @load_param (param_idx=0)
+    64      %7 = @load_param (param_idx=1)
+    32      %8 = @load_param (param_idx=3)
+    32      %9 = @load_param (param_idx=4)
+    1      %10 = @load_param (param_idx=5)
+    1      %11 = @load_param (param_idx=6)
+    8      %12 = load_const (0x00)
+    8      %13 = load_const (0x01)
+    1      %14 = inot %10
+                 // succs: b1 b2
+    if %14 {
+        block b1:    // preds: b0
+        32x4   %15 = @load_global (%7) (access=none, align_mul=4, align_offset=0)
+        32     %16 = load_const (0x00000008)
+        32     %17 = mov %15.x
+        64     %18 = load_const (0x0000000000000008)
+        32     %19 = mov %15.z
+        64     %20 = load_const (0x0000000000000004)
+        32     %21 = imul %15.y, %9
+        64     %22 = load_const (0x000000000000000c = 12)
+        32     %23 = mov %15.w
+        32     %24 = load_const (0x00000000)
+        32     %25 = b2i32 %11
+        32     %26 = load_const (0xffffff00 = -256 = 4294967040)
+        32     %27 = iand %5, %26 (0xffffff00)
+        32     %28 = ior %27, %25
+        32     %29 = load_const (0xffff00ff = -65281 = 4294902015)
+        32     %30 = iand %28, %29 (0xffff00ff)
+        32     %31 = load_const (0x00000010 = 16)
+        32     %32 = load_const (0xff00ffff = -16711681 = 4278255615)
+        32     %33 = load_const (0x00000018 = 24)
+        32     %34 = load_const (0x01000000 = 16777216)
+        32     %35 = load_const (0x00ffffff = 16777215)
+        32     %36 = extract_u16 %30, %24 (0x0)
+        32     %37 = ior %36, %34 (0x1000000)
+        64     %38 = load_const (0x0000000000000010 = 16)
+        64     %39 = load_const (0x0000000000000014 = 20)
+        64     %40 = load_const (0x0000000000000018 = 24)
+        64     %41 = load_const (0x000000000000001c = 28)
+        64     %42 = load_const (0x0000000000000020 = 32)
+        8x4    %43 = unpack_32_4x8 %3
+        8x4    %44 = unpack_32_4x8 %2
+        16     %45 = u2u16 %43.w
+        16     %46 = u2u16 %44.x
+        16     %47 = ishl %46, %16 (0x8)
+        16     %48 = ior %45, %47
+        8      %49 = u2u8 %48
+        16     %50 = load_const (0x0001)
+        16     %51 = extract_u8 %48, %50 (0x1)
+        8      %52 = u2u8 %51
+        32     %53 = u2u32 %49
+        32     %54 = ishl %53, %16 (0x8)
+        32     %55 = load_const (0xffff0000 = -65536 = 4294901760)
+        32     %56 = iand %55 (0xffff0000), %4
+        32     %57 = ior %56, %54
+        32     %58 = u2u32 %52
+        32     %59 = ishl %58, %31 (0x10)
+        32     %60 = iand %57, %32 (0xff00ffff)
+        32     %61 = ior %60, %59
+        32     %62 = u2u32 %44.y
+        32     %63 = ishl %62, %33 (0x18)
+        32     %64 = iand %61, %35 (0xffffff)
+        32     %65 = ior %64, %63
+        64     %66 = load_const (0x0000000000000024 = 36)
+        8x4    %67 = unpack_32_4x8 %37
+        8      %68 = iand %67.x, %13 (0x1)
+        1      %69 = ine %68, %12 (0x0)
+        64     %70 = b2i64 %69
+        64     %71 = ishl %70, %16 (0x8)
+        32     %72 = unpack_64_2x32_split_x %71
+        32     %73 = ior %72, %16 (0x8)
+        32     %74 = unpack_64_2x32_split_y %71
+        64     %75 = pack_64_2x32_split %73, %74
+        8      %76 = iand %67.y, %13 (0x1)
+        1      %77 = ine %76, %12 (0x0)
+        64     %78 = b2i64 %77
+        32     %79 = load_const (0x00000009)
+        64     %80 = ishl %78, %79 (0x9)
+        64     %81 = ior %75, %80
+        8      %82 = iand %67.z, %13 (0x1)
+        1      %83 = ine %82, %12 (0x0)
+        64     %84 = b2i64 %83
+        32     %85 = load_const (0x0000000a = 10)
+        64     %86 = ishl %84, %85 (0xa)
+        64     %87 = ior %81, %86
+        8      %88 = iand %67.w, %13 (0x1)
+        1      %89 = ine %88, %12 (0x0)
+        64     %90 = b2i64 %89
+        32     %91 = load_const (0x0000000b = 11)
+        64     %92 = ishl %90, %91 (0xb)
+        64     %93 = ior %87, %92
+        32     %94 = unpack_64_2x32_split_x %93
+        32     %95 = load_const (0x7b000000 = 2063597568)
+        32     %96 = ior %95 (0x7b000000), %94
+                     @store_global (%96, %6) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64     %97 = b2i64 %10
+        64     %98 = ishl %97, %16 (0x8)
+        8x4    %99 = unpack_32_4x8 %65
+        8     %100 = iand %99.x, %13 (0x1)
+        1     %101 = ine %100, %12 (0x0)
+        64    %102 = b2i64 %101
+        64    %103 = ishl %102, %79 (0x9)
+        64    %104 = ior %98, %103
+        32    %105 = u2u32 %104
+        64    %106 = iadd %6, %20 (0x4)
+                     @store_global (%105, %106) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %107 = iadd %6, %18 (0x8)
+                     @store_global (%17, %107) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %108 = iadd %6, %22 (0xc)
+                     @store_global (%19, %108) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %109 = iadd %6, %38 (0x10)
+                     @store_global (%21, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %110 = iadd %6, %39 (0x14)
+                     @store_global (%23, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %111 = iadd %6, %40 (0x18)
+                     @store_global (%24 (0x0), %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %112 = iadd %6, %41 (0x1c)
+                     @store_global (%19, %112) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %113 = iadd %6, %42 (0x20)
+                     @store_global (%23, %113) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %114 = iadd %6, %66 (0x24)
+                     @store_global (%8, %114) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b3
+    } else {
+        block b2:    // preds: b0
+        32x4  %115 = @load_global (%7) (access=none, align_mul=4, align_offset=0)
+        32    %116 = load_const (0x00000008)
+        64    %117 = load_const (0x0000000000000004)
+        64    %118 = load_const (0x0000000000000010 = 16)
+        64    %119 = iadd %7, %118 (0x10)
+        32    %120 = @load_global (%119) (access=none, align_mul=4, align_offset=0)
+        32    %121 = load_const (0x00000010 = 16)
+        32    %122 = mov %115.x
+        64    %123 = load_const (0x0000000000000008)
+        32    %124 = mov %115.z
+        32    %125 = imul %115.y, %9
+        64    %126 = load_const (0x000000000000000c = 12)
+        32    %127 = mov %115.w
+        32    %128 = b2i32 %11
+        32    %129 = load_const (0xffffff00 = -256 = 4294967040)
+        32    %130 = iand %1, %129 (0xffffff00)
+        32    %131 = ior %130, %128
+        32    %132 = load_const (0xffff00ff = -65281 = 4294902015)
+        32    %133 = iand %131, %132 (0xffff00ff)
+        32    %134 = load_const (0xff00ffff = -16711681 = 4278255615)
+        32    %135 = load_const (0x00000018 = 24)
+        32    %136 = load_const (0x01000000 = 16777216)
+        32    %137 = load_const (0x00ffffff = 16777215)
+        32    %138 = load_const (0x00000000)
+        32    %139 = extract_u16 %133, %138 (0x0)
+        32    %140 = ior %139, %136 (0x1000000)
+        64    %141 = load_const (0x0000000000000014 = 20)
+        64    %142 = load_const (0x0000000000000018 = 24)
+        64    %143 = load_const (0x000000000000001c = 28)
+        64    %144 = load_const (0x0000000000000020 = 32)
+        8x4   %145 = unpack_32_4x8 %3
+        8x4   %146 = unpack_32_4x8 %2
+        16    %147 = u2u16 %145.w
+        16    %148 = u2u16 %146.x
+        16    %149 = ishl %148, %116 (0x8)
+        16    %150 = ior %147, %149
+        8     %151 = u2u8 %150
+        16    %152 = load_const (0x0001)
+        16    %153 = extract_u8 %150, %152 (0x1)
+        8     %154 = u2u8 %153
+        32    %155 = u2u32 %151
+        32    %156 = ishl %155, %116 (0x8)
+        32    %157 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %158 = iand %157 (0xffff0000), %0
+        32    %159 = ior %158, %156
+        32    %160 = u2u32 %154
+        32    %161 = ishl %160, %121 (0x10)
+        32    %162 = iand %159, %134 (0xff00ffff)
+        32    %163 = ior %162, %161
+        32    %164 = u2u32 %146.y
+        32    %165 = ishl %164, %135 (0x18)
+        32    %166 = iand %163, %137 (0xffffff)
+        32    %167 = ior %166, %165
+        64    %168 = load_const (0x0000000000000024 = 36)
+        8x4   %169 = unpack_32_4x8 %140
+        8     %170 = iand %169.x, %13 (0x1)
+        1     %171 = ine %170, %12 (0x0)
+        64    %172 = b2i64 %171
+        64    %173 = ishl %172, %116 (0x8)
+        32    %174 = unpack_64_2x32_split_x %173
+        32    %175 = ior %174, %116 (0x8)
+        32    %176 = unpack_64_2x32_split_y %173
+        64    %177 = pack_64_2x32_split %175, %176
+        8     %178 = iand %169.y, %13 (0x1)
+        1     %179 = ine %178, %12 (0x0)
+        64    %180 = b2i64 %179
+        32    %181 = load_const (0x00000009)
+        64    %182 = ishl %180, %181 (0x9)
+        64    %183 = ior %177, %182
+        8     %184 = iand %169.z, %13 (0x1)
+        1     %185 = ine %184, %12 (0x0)
+        64    %186 = b2i64 %185
+        32    %187 = load_const (0x0000000a = 10)
+        64    %188 = ishl %186, %187 (0xa)
+        64    %189 = ior %183, %188
+        8     %190 = iand %169.w, %13 (0x1)
+        1     %191 = ine %190, %12 (0x0)
+        64    %192 = b2i64 %191
+        32    %193 = load_const (0x0000000b = 11)
+        64    %194 = ishl %192, %193 (0xb)
+        64    %195 = ior %189, %194
+        32    %196 = unpack_64_2x32_split_x %195
+        32    %197 = load_const (0x7b000000 = 2063597568)
+        32    %198 = ior %197 (0x7b000000), %196
+                     @store_global (%198, %6) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %199 = b2i64 %10
+        64    %200 = ishl %199, %116 (0x8)
+        8x4   %201 = unpack_32_4x8 %167
+        8     %202 = iand %201.x, %13 (0x1)
+        1     %203 = ine %202, %12 (0x0)
+        64    %204 = b2i64 %203
+        64    %205 = ishl %204, %181 (0x9)
+        64    %206 = ior %200, %205
+        32    %207 = u2u32 %206
+        64    %208 = iadd %6, %117 (0x4)
+                     @store_global (%207, %208) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %209 = iadd %6, %123 (0x8)
+                     @store_global (%122, %209) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %210 = iadd %6, %126 (0xc)
+                     @store_global (%124, %210) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %211 = iadd %6, %118 (0x10)
+                     @store_global (%125, %211) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %212 = iadd %6, %141 (0x14)
+                     @store_global (%120, %212) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %213 = iadd %6, %142 (0x18)
+                     @store_global (%127, %213) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %214 = iadd %6, %143 (0x1c)
+                     @store_global (%127, %214) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %215 = iadd %6, %144 (0x20)
+                     @store_global (%120, %215) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %216 = iadd %6, %168 (0x24)
+                     @store_global (%8, %216) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b3
+    }
+    block b3:  // preds: b1 b2, succs: b4
+    block b4:
+   */
+   static const uint32_t impl_0_nir[675] = {
+    0x000000de, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000b, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0xe4001744, 0xe4011744, 0xc4031744,
+    0xc4041744, 0x24051744, 0x24061744, 0x00001405,
+    0x00003405, 0x2434a000, 0x00000000, 0x0000000c,
+    0x00000001, 0x00000040, 0x00000000, 0x00000001,
+    0x00000000, 0x0000006e, 0xd0005354, 0x00000024,
+    0x00000400, 0x00011605, 0xc435a000, 0x00000000,
+    0x00000012, 0x00011705, 0xc435a200, 0x00000000,
+    0x00000012, 0x00009705, 0xc433f100, 0x00000000,
+    0x000b0012, 0x00019705, 0xc435a300, 0x00000000,
+    0x00000012, 0x00000e05, 0xc4225000, 0x00000000,
+    0x0000000d, 0xffe01605, 0xc4322000, 0x00000000,
+    0x001d0007, 0xc434e000, 0x00000000, 0x001c001e,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x0020001f,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x001b0021, 0xc434e000, 0x00000000,
+    0x00250027, 0x00021705, 0x00029705, 0x00031705,
+    0x00039705, 0x00041705, 0x907bb000, 0x00000000,
+    0x00000005, 0x00000000, 0x00000004, 0xa438d300,
+    0x00000000, 0x0000002e, 0xa438d000, 0x00000000,
+    0x0000002f, 0xa4351000, 0x00000000, 0x00130031,
+    0xa434e000, 0x00000000, 0x00320030, 0x84390000,
+    0x00000000, 0x00000033, 0x00003505, 0xa4288000,
+    0x00000000, 0x00350033, 0x84390000, 0x00000000,
+    0x00000036, 0xc438e000, 0x00000000, 0x00000034,
+    0xc4351000, 0x00000000, 0x00130038, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0006003a, 0xc434e000,
+    0x00000000, 0x0039003b, 0xc438e000, 0x00000000,
+    0x00000037, 0xc4351000, 0x00000000, 0x0022003d,
+    0xc4322000, 0x00000000, 0x0023003c, 0xc434e000,
+    0x00000000, 0x003e003f, 0xc438e100, 0x00000000,
+    0x0000002f, 0xc4351000, 0x00000000, 0x00240041,
+    0xc4322000, 0x00000000, 0x00260040, 0xc434e000,
+    0x00000000, 0x00420043, 0x00049705, 0x903bb000,
+    0x00000000, 0x00000028, 0x84322000, 0x00000000,
+    0x000f0046, 0x24345000, 0x00000000, 0x000e0047,
+    0xe4226000, 0x00000000, 0x00000048, 0xe4351000,
+    0x00000000, 0x00130049, 0xc43bd000, 0x00000000,
+    0x0000004a, 0xc434e000, 0x00000000, 0x0013004b,
+    0xc43be000, 0x00000000, 0x0000004a, 0xe4369000,
+    0x00000000, 0x004d004c, 0x84322100, 0x00000000,
+    0x000f0046, 0x24345000, 0x00000000, 0x000e004f,
+    0xe4226000, 0x00000000, 0x00000050, 0x00013605,
+    0xe4351000, 0x00000000, 0x00520051, 0xe434e000,
+    0x00000000, 0x0053004e, 0x84322200, 0x00000000,
+    0x000f0046, 0x24345000, 0x00000000, 0x000e0055,
+    0xe4226000, 0x00000000, 0x00000056, 0x00015605,
+    0xe4351000, 0x00000000, 0x00580057, 0xe434e000,
+    0x00000000, 0x00590054, 0x84322300, 0x00000000,
+    0x000f0046, 0x24345000, 0x00000000, 0x000e005b,
+    0xe4226000, 0x00000000, 0x0000005c, 0x00017605,
+    0xe4351000, 0x00000000, 0x005e005d, 0xe434e000,
+    0x00000000, 0x005f005a, 0xc43bd000, 0x00000000,
+    0x00000060, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00610062, 0x00006894, 0x0000018c, 0x00000020,
+    0x00040001, 0xe4226000, 0x00000000, 0x0000000c,
+    0xe4351000, 0x00000000, 0x00130064, 0x903bb000,
+    0x00000000, 0x00000044, 0x84322000, 0x00000000,
+    0x000f0066, 0x24345000, 0x00000000, 0x000e0067,
+    0xe4226000, 0x00000000, 0x00000068, 0xe4351000,
+    0x00000000, 0x00520069, 0xe434e000, 0x00000000,
+    0x006a0065, 0xc438e000, 0x00000000, 0x0000006b,
+    0xe431f000, 0x00000000, 0x00170008, 0x00006894,
+    0x000001b0, 0x000001b4, 0x00040001, 0xe431f000,
+    0x00000000, 0x00150008, 0x00006894, 0x00000050,
+    0x000001b8, 0x00040001, 0xe431f000, 0x00000000,
+    0x00190008, 0x00006894, 0x00000058, 0x000001bc,
+    0x00040001, 0xe431f000, 0x00000000, 0x00290008,
+    0x00006894, 0x00000060, 0x000001c0, 0x00040001,
+    0xe431f000, 0x00000000, 0x002a0008, 0x00006894,
+    0x00000068, 0x000001c4, 0x00040001, 0xe431f000,
+    0x00000000, 0x002b0008, 0x00006894, 0x0000006c,
+    0x000001c8, 0x00040001, 0xe431f000, 0x00000000,
+    0x002c0008, 0x00006894, 0x00000058, 0x000001cc,
+    0x00040001, 0xe431f000, 0x00000000, 0x002d0008,
+    0x00006894, 0x00000068, 0x000001d0, 0x00040001,
+    0xe431f000, 0x00000000, 0x00450008, 0x00006894,
+    0x00000028, 0x000001d4, 0x00040001, 0x00000001,
+    0x00000000, 0x00000070, 0xd0005354, 0x00000024,
+    0x00000400, 0x00011605, 0x00009705, 0x00021705,
+    0xe431f000, 0x00000000, 0x007a0009, 0xc4005354,
+    0x000001ec, 0x00000400, 0x00021605, 0xc435a000,
+    0x00000000, 0x00000077, 0x00011705, 0xc435a200,
+    0x00000000, 0x00000077, 0xc433f100, 0x00000000,
+    0x000b0077, 0x00019705, 0xc435a300, 0x00000000,
+    0x00000077, 0xc4225000, 0x00000000, 0x0000000d,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00850003,
+    0xc434e000, 0x00000000, 0x00840086, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00880087, 0x00000605,
+    0xff00ffff, 0x00031605, 0x01000e05, 0x00000605,
+    0x00ffffff, 0x00000e05, 0xc4287000, 0x00000000,
+    0x008e0089, 0xc434e000, 0x00000000, 0x008c008f,
+    0x00029705, 0x00031705, 0x00039705, 0x00041705,
+    0x907bb000, 0x00000000, 0x00000005, 0x00000000,
+    0x00000004, 0xa438d300, 0x00000000, 0x00000095,
+    0xa438d000, 0x00000000, 0x00000096, 0xa4351000,
+    0x00000000, 0x00780098, 0xa434e000, 0x00000000,
+    0x00990097, 0x84390000, 0x00000000, 0x0000009a,
+    0x00003505, 0xa4288000, 0x00000000, 0x009c009a,
+    0x84390000, 0x00000000, 0x0000009d, 0xc438e000,
+    0x00000000, 0x0000009b, 0xc4351000, 0x00000000,
+    0x0078009f, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x000200a1, 0xc434e000, 0x00000000, 0x00a000a2,
+    0xc438e000, 0x00000000, 0x0000009e, 0xc4351000,
+    0x00000000, 0x007d00a4, 0xc4322000, 0x00000000,
+    0x008a00a3, 0xc434e000, 0x00000000, 0x00a500a6,
+    0xc438e100, 0x00000000, 0x00000096, 0xc4351000,
+    0x00000000, 0x008b00a8, 0xc4322000, 0x00000000,
+    0x008d00a7, 0xc434e000, 0x00000000, 0x00a900aa,
+    0x00049705, 0x903bb000, 0x00000000, 0x00000090,
+    0x84322000, 0x00000000, 0x000f00ad, 0x24345000,
+    0x00000000, 0x000e00ae, 0xe4226000, 0x00000000,
+    0x000000af, 0xe4351000, 0x00000000, 0x007800b0,
+    0xc43bd000, 0x00000000, 0x000000b1, 0xc434e000,
+    0x00000000, 0x007800b2, 0xc43be000, 0x00000000,
+    0x000000b1, 0xe4369000, 0x00000000, 0x00b400b3,
+    0x84322100, 0x00000000, 0x000f00ad, 0x24345000,
+    0x00000000, 0x000e00b6, 0xe4226000, 0x00000000,
+    0x000000b7, 0x00013605, 0xe4351000, 0x00000000,
+    0x00b900b8, 0xe434e000, 0x00000000, 0x00ba00b5,
+    0x84322200, 0x00000000, 0x000f00ad, 0x24345000,
+    0x00000000, 0x000e00bc, 0xe4226000, 0x00000000,
+    0x000000bd, 0x00015605, 0xe4351000, 0x00000000,
+    0x00bf00be, 0xe434e000, 0x00000000, 0x00c000bb,
+    0x84322300, 0x00000000, 0x000f00ad, 0x24345000,
+    0x00000000, 0x000e00c2, 0xe4226000, 0x00000000,
+    0x000000c3, 0x00017605, 0xe4351000, 0x00000000,
+    0x00c500c4, 0xe434e000, 0x00000000, 0x00c600c1,
+    0xc43bd000, 0x00000000, 0x000000c7, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x00c800c9, 0x00006894,
+    0x00000328, 0x00000020, 0x00040001, 0xe4226000,
+    0x00000000, 0x0000000c, 0xe4351000, 0x00000000,
+    0x007800cb, 0x903bb000, 0x00000000, 0x000000ab,
+    0x84322000, 0x00000000, 0x000f00cd, 0x24345000,
+    0x00000000, 0x000e00ce, 0xe4226000, 0x00000000,
+    0x000000cf, 0xe4351000, 0x00000000, 0x00b900d0,
+    0xe434e000, 0x00000000, 0x00d100cc, 0xc438e000,
+    0x00000000, 0x000000d2, 0xe431f000, 0x00000000,
+    0x00790008, 0x00006894, 0x0000034c, 0x00000350,
+    0x00040001, 0xe431f000, 0x00000000, 0x007f0008,
+    0x00006894, 0x000001f8, 0x00000354, 0x00040001,
+    0xe431f000, 0x00000000, 0x00820008, 0x00006894,
+    0x00000200, 0x00000358, 0x00040001, 0xe431f000,
+    0x00000000, 0x007a0008, 0x00006894, 0x00000204,
+    0x0000035c, 0x00040001, 0xe431f000, 0x00000000,
+    0x00910008, 0x00006894, 0x000001f0, 0x00000360,
+    0x00040001, 0xe431f000, 0x00000000, 0x00920008,
+    0x00006894, 0x0000020c, 0x00000364, 0x00040001,
+    0xe431f000, 0x00000000, 0x00930008, 0x00006894,
+    0x0000020c, 0x00000368, 0x00040001, 0xe431f000,
+    0x00000000, 0x00940008, 0x00006894, 0x000001f0,
+    0x0000036c, 0x00040001, 0xe431f000, 0x00000000,
+    0x00ac0008, 0x00006894, 0x00000028, 0x00000370,
+    0x00040001, 0x00000000, 0x00000000,
+};
+   nir_def *args[11] = { dst_ptr, indirect_ptr, draw_id_ptr, draw_id, instance_multiplier, is_indexed, is_predicated, uses_tbimr, uses_base, uses_drawid, mocs };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx12_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx12_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    64      %9 = @load_param (param_idx=0)
+    64     %10 = @load_param (param_idx=1)
+    64     %11 = @load_param (param_idx=2)
+    32     %12 = @load_param (param_idx=4)
+    64     %13 = @load_param (param_idx=5)
+    32     %14 = @load_param (param_idx=6)
+    32     %15 = @load_param (param_idx=7)
+    32     %16 = @load_param (param_idx=8)
+    32     %17 = @load_param (param_idx=9)
+    32     %18 = @load_param (param_idx=11)
+    32     %19 = @load_param (param_idx=12)
+    64     %20 = @load_param (param_idx=13)
+    64     %21 = @load_param (param_idx=14)
+    32     %22 = @load_param (param_idx=15)
+    32     %23 = iadd %14, %22
+    32     %24 = @load_global (%13) (access=none, align_mul=4, align_offset=0)
+    32     %25 = imul %22, %18
+    64     %26 = u2u64 %25
+    32     %27 = imul %23, %12
+    64     %28 = u2u64 %27
+    32     %29 = umin %24, %16
+    1      %30 = ult %23, %29
+                 // succs: b1 b8
+    if %30 {
+        block b1:    // preds: b0
+        32     %31 = load_const (0x00000001)
+        32     %32 = iand %17, %31 (0x1)
+        32     %33 = load_const (0x00000000)
+        1      %34 = ieq %32, %33 (0x0)
+        8      %35 = load_const (0x00)
+        8      %36 = load_const (0x01)
+        32     %37 = load_const (0x00000002)
+        32     %38 = iand %17, %37 (0x2)
+        32     %39 = load_const (0x00000080 = 128)
+        32     %40 = iand %17, %39 (0x80)
+        1      %41 = ine %40, %33 (0x0)
+                     // succs: b2 b3
+        if %41 {
+            block b2:    // preds: b1
+            32     %42 = load_const (0x00000024 = 36)
+            32x4   %43 = @load_global (%10) (access=none, align_mul=16, align_offset=0)
+            64     %44 = iadd %9, %26
+                         @store_global (%43, %44) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+            64     %45 = load_const (0x0000000000000010 = 16)
+            64     %46 = iadd %10, %45 (0x10)
+            32x4   %47 = @load_global (%46) (access=none, align_mul=16, align_offset=0)
+            64     %48 = iadd %26, %45 (0x10)
+            64     %49 = iadd %9, %48
+                         @store_global (%47, %49) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+            64     %50 = load_const (0x0000000000000020 = 32)
+            64     %51 = iadd %10, %50 (0x20)
+            32     %52 = @load_global (%51) (access=none, align_mul=4, align_offset=0)
+            64     %53 = iadd %26, %50 (0x20)
+            64     %54 = iadd %9, %53
+                         @store_global (%52, %54) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b4
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:    // preds: b2 b3
+        32     %55 = phi b2: %42 (0x24), b3: %33 (0x0)
+        64     %56 = u2u64 %55
+                     // succs: b5 b6
+        if %34 {
+            block b5:    // preds: b4
+            64     %57 = iadd %11, %28
+            32x4   %58 = @load_global (%57) (access=none, align_mul=4, align_offset=0)
+            32     %59 = load_const (0x00000008)
+            32     %60 = mov %58.x
+            64     %61 = load_const (0x0000000000000008)
+            32     %62 = mov %58.z
+            64     %63 = load_const (0x0000000000000004)
+            32     %64 = imul %58.y, %15
+            64     %65 = load_const (0x000000000000000c = 12)
+            32     %66 = mov %58.w
+            64     %67 = iadd %26, %56
+            64     %68 = iadd %9, %67
+            32     %69 = ushr %38, %31 (0x1)
+            32     %70 = load_const (0xffffff00 = -256 = 4294967040)
+            32     %71 = iand %8, %70 (0xffffff00)
+            32     %72 = ior %71, %69
+            32     %73 = load_const (0xffff00ff = -65281 = 4294902015)
+            32     %74 = iand %72, %73 (0xffff00ff)
+            32     %75 = load_const (0x00000010 = 16)
+            32     %76 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32     %77 = load_const (0x00000018 = 24)
+            32     %78 = load_const (0x01000000 = 16777216)
+            32     %79 = load_const (0x00ffffff = 16777215)
+            32     %80 = extract_u16 %74, %33 (0x0)
+            32     %81 = ior %80, %78 (0x1000000)
+            64     %82 = load_const (0x0000000000000010 = 16)
+            64     %83 = load_const (0x0000000000000014 = 20)
+            64     %84 = load_const (0x0000000000000018 = 24)
+            64     %85 = load_const (0x000000000000001c = 28)
+            64     %86 = load_const (0x0000000000000020 = 32)
+            8x4    %87 = unpack_32_4x8 %6
+            8x4    %88 = unpack_32_4x8 %5
+            16     %89 = u2u16 %87.w
+            16     %90 = u2u16 %88.x
+            16     %91 = ishl %90, %59 (0x8)
+            16     %92 = ior %89, %91
+            8      %93 = u2u8 %92
+            16     %94 = load_const (0x0001)
+            16     %95 = extract_u8 %92, %94 (0x1)
+            8      %96 = u2u8 %95
+            32     %97 = u2u32 %93
+            32     %98 = ishl %97, %59 (0x8)
+            32     %99 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %100 = iand %99 (0xffff0000), %7
+            32    %101 = ior %100, %98
+            32    %102 = u2u32 %96
+            32    %103 = ishl %102, %75 (0x10)
+            32    %104 = iand %101, %76 (0xff00ffff)
+            32    %105 = ior %104, %103
+            32    %106 = u2u32 %88.y
+            32    %107 = ishl %106, %77 (0x18)
+            32    %108 = iand %105, %79 (0xffffff)
+            32    %109 = ior %108, %107
+            64    %110 = load_const (0x0000000000000024 = 36)
+            8x4   %111 = unpack_32_4x8 %81
+            8     %112 = iand %111.x, %36 (0x1)
+            1     %113 = ine %112, %35 (0x0)
+            64    %114 = b2i64 %113
+            64    %115 = ishl %114, %59 (0x8)
+            32    %116 = unpack_64_2x32_split_x %115
+            32    %117 = ior %116, %59 (0x8)
+            32    %118 = unpack_64_2x32_split_y %115
+            64    %119 = pack_64_2x32_split %117, %118
+            8     %120 = iand %111.y, %36 (0x1)
+            1     %121 = ine %120, %35 (0x0)
+            64    %122 = b2i64 %121
+            32    %123 = load_const (0x00000009)
+            64    %124 = ishl %122, %123 (0x9)
+            64    %125 = ior %119, %124
+            8     %126 = iand %111.z, %36 (0x1)
+            1     %127 = ine %126, %35 (0x0)
+            64    %128 = b2i64 %127
+            32    %129 = load_const (0x0000000a = 10)
+            64    %130 = ishl %128, %129 (0xa)
+            64    %131 = ior %125, %130
+            8     %132 = iand %111.w, %36 (0x1)
+            1     %133 = ine %132, %35 (0x0)
+            64    %134 = b2i64 %133
+            32    %135 = load_const (0x0000000b = 11)
+            64    %136 = ishl %134, %135 (0xb)
+            64    %137 = ior %131, %136
+            32    %138 = unpack_64_2x32_split_x %137
+            32    %139 = load_const (0x7b000000 = 2063597568)
+            32    %140 = ior %139 (0x7b000000), %138
+                         @store_global (%140, %68) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %141 = u2u64 %32
+            64    %142 = ishl %141, %59 (0x8)
+            8x4   %143 = unpack_32_4x8 %109
+            8     %144 = iand %143.x, %36 (0x1)
+            1     %145 = ine %144, %35 (0x0)
+            64    %146 = b2i64 %145
+            64    %147 = ishl %146, %123 (0x9)
+            64    %148 = ior %142, %147
+            32    %149 = u2u32 %148
+            64    %150 = iadd %68, %63 (0x4)
+                         @store_global (%149, %150) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %151 = iadd %68, %61 (0x8)
+                         @store_global (%60, %151) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %152 = iadd %68, %65 (0xc)
+                         @store_global (%62, %152) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %153 = iadd %68, %82 (0x10)
+                         @store_global (%64, %153) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %154 = iadd %68, %83 (0x14)
+                         @store_global (%66, %154) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %155 = iadd %68, %84 (0x18)
+                         @store_global (%33 (0x0), %155) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %156 = iadd %68, %85 (0x1c)
+                         @store_global (%62, %156) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %157 = iadd %68, %86 (0x20)
+                         @store_global (%66, %157) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %158 = iadd %68, %110 (0x24)
+                         @store_global (%23, %158) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b7
+        } else {
+            block b6:    // preds: b4
+            64    %159 = iadd %11, %28
+            32x4  %160 = @load_global (%159) (access=none, align_mul=4, align_offset=0)
+            32    %161 = load_const (0x00000008)
+            64    %162 = load_const (0x0000000000000004)
+            64    %163 = load_const (0x0000000000000010 = 16)
+            64    %164 = iadd %159, %163 (0x10)
+            32    %165 = @load_global (%164) (access=none, align_mul=4, align_offset=0)
+            32    %166 = load_const (0x00000010 = 16)
+            32    %167 = mov %160.x
+            64    %168 = load_const (0x0000000000000008)
+            32    %169 = mov %160.z
+            32    %170 = imul %160.y, %15
+            64    %171 = load_const (0x000000000000000c = 12)
+            32    %172 = mov %160.w
+            64    %173 = iadd %26, %56
+            64    %174 = iadd %9, %173
+            32    %175 = ushr %38, %31 (0x1)
+            32    %176 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %177 = iand %4, %176 (0xffffff00)
+            32    %178 = ior %177, %175
+            32    %179 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %180 = iand %178, %179 (0xffff00ff)
+            32    %181 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32    %182 = load_const (0x00000018 = 24)
+            32    %183 = load_const (0x01000000 = 16777216)
+            32    %184 = load_const (0x00ffffff = 16777215)
+            32    %185 = extract_u16 %180, %33 (0x0)
+            32    %186 = ior %185, %183 (0x1000000)
+            64    %187 = load_const (0x0000000000000014 = 20)
+            64    %188 = load_const (0x0000000000000018 = 24)
+            64    %189 = load_const (0x000000000000001c = 28)
+            64    %190 = load_const (0x0000000000000020 = 32)
+            8x4   %191 = unpack_32_4x8 %6
+            8x4   %192 = unpack_32_4x8 %5
+            16    %193 = u2u16 %191.w
+            16    %194 = u2u16 %192.x
+            16    %195 = ishl %194, %161 (0x8)
+            16    %196 = ior %193, %195
+            8     %197 = u2u8 %196
+            16    %198 = load_const (0x0001)
+            16    %199 = extract_u8 %196, %198 (0x1)
+            8     %200 = u2u8 %199
+            32    %201 = u2u32 %197
+            32    %202 = ishl %201, %161 (0x8)
+            32    %203 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %204 = iand %203 (0xffff0000), %3
+            32    %205 = ior %204, %202
+            32    %206 = u2u32 %200
+            32    %207 = ishl %206, %166 (0x10)
+            32    %208 = iand %205, %181 (0xff00ffff)
+            32    %209 = ior %208, %207
+            32    %210 = u2u32 %192.y
+            32    %211 = ishl %210, %182 (0x18)
+            32    %212 = iand %209, %184 (0xffffff)
+            32    %213 = ior %212, %211
+            64    %214 = load_const (0x0000000000000024 = 36)
+            8x4   %215 = unpack_32_4x8 %186
+            8     %216 = iand %215.x, %36 (0x1)
+            1     %217 = ine %216, %35 (0x0)
+            64    %218 = b2i64 %217
+            64    %219 = ishl %218, %161 (0x8)
+            32    %220 = unpack_64_2x32_split_x %219
+            32    %221 = ior %220, %161 (0x8)
+            32    %222 = unpack_64_2x32_split_y %219
+            64    %223 = pack_64_2x32_split %221, %222
+            8     %224 = iand %215.y, %36 (0x1)
+            1     %225 = ine %224, %35 (0x0)
+            64    %226 = b2i64 %225
+            32    %227 = load_const (0x00000009)
+            64    %228 = ishl %226, %227 (0x9)
+            64    %229 = ior %223, %228
+            8     %230 = iand %215.z, %36 (0x1)
+            1     %231 = ine %230, %35 (0x0)
+            64    %232 = b2i64 %231
+            32    %233 = load_const (0x0000000a = 10)
+            64    %234 = ishl %232, %233 (0xa)
+            64    %235 = ior %229, %234
+            8     %236 = iand %215.w, %36 (0x1)
+            1     %237 = ine %236, %35 (0x0)
+            64    %238 = b2i64 %237
+            32    %239 = load_const (0x0000000b = 11)
+            64    %240 = ishl %238, %239 (0xb)
+            64    %241 = ior %235, %240
+            32    %242 = unpack_64_2x32_split_x %241
+            32    %243 = load_const (0x7b000000 = 2063597568)
+            32    %244 = ior %243 (0x7b000000), %242
+                         @store_global (%244, %174) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %245 = u2u64 %32
+            64    %246 = ishl %245, %161 (0x8)
+            8x4   %247 = unpack_32_4x8 %213
+            8     %248 = iand %247.x, %36 (0x1)
+            1     %249 = ine %248, %35 (0x0)
+            64    %250 = b2i64 %249
+            64    %251 = ishl %250, %227 (0x9)
+            64    %252 = ior %246, %251
+            32    %253 = u2u32 %252
+            64    %254 = iadd %174, %162 (0x4)
+                         @store_global (%253, %254) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %255 = iadd %174, %168 (0x8)
+                         @store_global (%167, %255) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %256 = iadd %174, %171 (0xc)
+                         @store_global (%169, %256) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %257 = iadd %174, %163 (0x10)
+                         @store_global (%170, %257) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %258 = iadd %174, %187 (0x14)
+                         @store_global (%165, %258) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %259 = iadd %174, %188 (0x18)
+                         @store_global (%172, %259) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %260 = iadd %174, %189 (0x1c)
+                         @store_global (%172, %260) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %261 = iadd %174, %190 (0x20)
+                         @store_global (%165, %261) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %262 = iadd %174, %214 (0x24)
+                         @store_global (%23, %262) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b7
+        }
+        block b7:  // preds: b5 b6, succs: b9
+    } else {
+        block b8:  // preds: b0, succs: b9
+    }
+    block b9:    // preds: b7 b8
+    32    %263 = load_const (0x00000020 = 32)
+    32    %264 = iand %17, %263 (0x20)
+    32    %265 = load_const (0x00000000)
+    1     %266 = ieq %264, %265 (0x0)
+    8     %267 = load_const (0x00)
+    8     %268 = load_const (0x01)
+    1     %269 = ieq %24, %265 (0x0)
+    32    %270 = load_const (0xffffffff = -1 = 4294967295)
+    32    %271 = iadd %29, %270 (0xffffffff)
+    32    %272 = bcsel %269, %265 (0x0), %271
+    64    %273 = u2u64 %18
+    64    %274 = iadd %26, %273
+    64    %275 = bcsel %269, %26, %274
+    64    %276 = iadd %9, %275
+                 // succs: b10 b14
+    if %266 {
+        block b10:   // preds: b9
+        1     %277 = ieq %23, %272
+        1     %278 = ult %24, %16
+        1     %279 = iand %278, %277
+                     // succs: b11 b12
+        if %279 {
+            block b11:   // preds: b10
+            64    %280 = load_const (0x0000000000000004)
+            64    %281 = load_const (0x0000000000000008)
+            32    %282 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %283 = iand %282 (0xffff0000), %2
+            32    %284 = load_const (0x0000000a = 10)
+            16x2  %285 = unpack_32_2x16 %5
+            32    %286 = u2u32 %285.y
+            32    %287 = load_const (0x00000010 = 16)
+            32    %288 = ishl %286, %287 (0x10)
+            32    %289 = extract_u16 %283, %265 (0x0)
+            32    %290 = ior %289, %288
+            8x4   %291 = unpack_32_4x8 %290
+            8     %292 = iand %291.x, %268 (0x1)
+            1     %293 = ine %292, %267 (0x0)
+            64    %294 = b2i64 %293
+            64    %295 = ishl %294, %284 (0xa)
+            32    %296 = unpack_64_2x32_split_x %295
+            32    %297 = load_const (0x00000101 = 257)
+            32    %298 = ior %296, %297 (0x101)
+            32    %299 = unpack_64_2x32_split_y %295
+            64    %300 = pack_64_2x32_split %298, %299
+            8     %301 = iand %291.y, %268 (0x1)
+            1     %302 = ine %301, %267 (0x0)
+            64    %303 = b2i64 %302
+            32    %304 = load_const (0x0000000f = 15)
+            64    %305 = ishl %303, %304 (0xf)
+            64    %306 = ior %300, %305
+            32    %307 = unpack_64_2x32_split_x %306
+            32    %308 = load_const (0x18800000 = 411041792)
+            32    %309 = ior %307, %308 (0x18800000)
+                         @store_global (%309, %276) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %310 = u2u32 %21
+            64    %311 = iadd %276, %280 (0x4)
+                         @store_global (%310, %311) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %312 = unpack_64_2x32_split_y %21
+            64    %313 = iadd %276, %281 (0x8)
+                         @store_global (%312, %313) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b13
+        } else {
+            block b12:  // preds: b10, succs: b13
+        }
+        block b13:  // preds: b11 b12, succs: b21
+    } else {
+        block b14:   // preds: b9
+        1     %314 = ine %23, %272
+                     // succs: b15 b19
+        if %314 {
+            block b15:   // preds: b14
+            32    %315 = iadd %19, %270 (0xffffffff)
+            1     %316 = ieq %22, %315
+                         // succs: b16 b17
+            if %316 {
+                block b16:   // preds: b15
+                64    %317 = load_const (0x0000000000000004)
+                64    %318 = load_const (0x0000000000000008)
+                32    %319 = load_const (0xffff0000 = -65536 = 4294901760)
+                32    %320 = iand %319 (0xffff0000), %1
+                32    %321 = load_const (0x0000000a = 10)
+                16x2  %322 = unpack_32_2x16 %5
+                32    %323 = u2u32 %322.y
+                32    %324 = load_const (0x00000010 = 16)
+                32    %325 = ishl %323, %324 (0x10)
+                32    %326 = extract_u16 %320, %265 (0x0)
+                32    %327 = ior %326, %325
+                8x4   %328 = unpack_32_4x8 %327
+                8     %329 = iand %328.x, %268 (0x1)
+                1     %330 = ine %329, %267 (0x0)
+                64    %331 = b2i64 %330
+                64    %332 = ishl %331, %321 (0xa)
+                32    %333 = unpack_64_2x32_split_x %332
+                32    %334 = load_const (0x00000101 = 257)
+                32    %335 = ior %333, %334 (0x101)
+                32    %336 = unpack_64_2x32_split_y %332
+                64    %337 = pack_64_2x32_split %335, %336
+                8     %338 = iand %328.y, %268 (0x1)
+                1     %339 = ine %338, %267 (0x0)
+                64    %340 = b2i64 %339
+                32    %341 = load_const (0x0000000f = 15)
+                64    %342 = ishl %340, %341 (0xf)
+                64    %343 = ior %337, %342
+                32    %344 = unpack_64_2x32_split_x %343
+                32    %345 = load_const (0x18800000 = 411041792)
+                32    %346 = ior %344, %345 (0x18800000)
+                             @store_global (%346, %276) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %347 = u2u32 %20
+                64    %348 = iadd %276, %317 (0x4)
+                             @store_global (%347, %348) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %349 = unpack_64_2x32_split_y %20
+                64    %350 = iadd %276, %318 (0x8)
+                             @store_global (%349, %350) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                             // succs: b18
+            } else {
+                block b17:  // preds: b15, succs: b18
+            }
+            block b18:  // preds: b16 b17, succs: b20
+        } else {
+            block b19:   // preds: b14
+            64    %351 = load_const (0x0000000000000004)
+            64    %352 = load_const (0x0000000000000008)
+            32    %353 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %354 = iand %353 (0xffff0000), %0
+            32    %355 = load_const (0x0000000a = 10)
+            16x2  %356 = unpack_32_2x16 %5
+            32    %357 = u2u32 %356.y
+            32    %358 = load_const (0x00000010 = 16)
+            32    %359 = ishl %357, %358 (0x10)
+            32    %360 = extract_u16 %354, %265 (0x0)
+            32    %361 = ior %360, %359
+            8x4   %362 = unpack_32_4x8 %361
+            8     %363 = iand %362.x, %268 (0x1)
+            1     %364 = ine %363, %267 (0x0)
+            64    %365 = b2i64 %364
+            64    %366 = ishl %365, %355 (0xa)
+            32    %367 = unpack_64_2x32_split_x %366
+            32    %368 = load_const (0x00000101 = 257)
+            32    %369 = ior %367, %368 (0x101)
+            32    %370 = unpack_64_2x32_split_y %366
+            64    %371 = pack_64_2x32_split %369, %370
+            8     %372 = iand %362.y, %268 (0x1)
+            1     %373 = ine %372, %267 (0x0)
+            64    %374 = b2i64 %373
+            32    %375 = load_const (0x0000000f = 15)
+            64    %376 = ishl %374, %375 (0xf)
+            64    %377 = ior %371, %376
+            32    %378 = unpack_64_2x32_split_x %377
+            32    %379 = load_const (0x18800000 = 411041792)
+            32    %380 = ior %378, %379 (0x18800000)
+                         @store_global (%380, %276) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %381 = u2u32 %21
+            64    %382 = iadd %276, %351 (0x4)
+                         @store_global (%381, %382) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %383 = unpack_64_2x32_split_y %21
+            64    %384 = iadd %276, %352 (0x8)
+                         @store_global (%383, %384) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b20
+        }
+        block b20:  // preds: b18 b19, succs: b21
+    }
+    block b21:  // preds: b13 b20, succs: b22
+    block b22:
+   */
+   static const uint32_t impl_0_nir[1223] = {
+    0x00000198, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000010, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0x00000000, 0x0000001f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4011744, 0xe4021744, 0xc4041744,
+    0xe4051744, 0xc4061744, 0xc4071744, 0xc4081744,
+    0xc4091744, 0xc40b1744, 0xc40c1744, 0xe40d1744,
+    0xe40e1744, 0xc40f1744, 0xc431f000, 0x00000000,
+    0x00180010, 0xc4005354, 0x0000003c, 0x00000400,
+    0xc433f000, 0x00000000, 0x00140018, 0xe438f000,
+    0x00000000, 0x0000001b, 0xc433f000, 0x00000000,
+    0x000e0019, 0xe438f000, 0x00000000, 0x0000001d,
+    0xc43ae000, 0x00000000, 0x0012001a, 0x243a6000,
+    0x00000000, 0x001f0019, 0x00000001, 0x00000080,
+    0x00000000, 0x00000005, 0x00000000, 0x0000000b,
+    0x00003605, 0xc4322000, 0x00000000, 0x00220013,
+    0x00000e05, 0x24327000, 0x00000000, 0x00240023,
+    0x00001405, 0x00003405, 0x00005605, 0xc4322000,
+    0x00000000, 0x00280013, 0x00101605, 0xc4322000,
+    0x00000000, 0x002a0013, 0x24345000, 0x00000000,
+    0x0024002b, 0x00000001, 0x000000b0, 0x00000000,
+    0x00000001, 0x00000000, 0x00000010, 0x00049605,
+    0xd0005354, 0x00000030, 0x00001000, 0xe431f000,
+    0x00000000, 0x001c000b, 0x00006894, 0x000000bc,
+    0x000000c0, 0x0010000f, 0x00021705, 0xe431f000,
+    0x00000000, 0x0031000c, 0xd0005354, 0x000000c8,
+    0x00001000, 0xe471f000, 0x00000000, 0x0031001c,
+    0x00000000, 0x0034000b, 0x00006894, 0x000000cc,
+    0x000000d4, 0x0010000f, 0x00041705, 0xe431f000,
+    0x00000000, 0x0036000c, 0xc4005354, 0x000000dc,
+    0x00000400, 0xe471f000, 0x00000000, 0x0036001c,
+    0x00000000, 0x0039000b, 0x00006894, 0x000000e0,
+    0x000000e8, 0x00040001, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000002e, 0x0000002d, 0x00000024, 0x0000003b,
+    0xe438f000, 0x00000000, 0x0000003d, 0x00000001,
+    0x00000094, 0x00000000, 0x00000001, 0x00000000,
+    0x00000070, 0xe431f000, 0x00000000, 0x001e000d,
+    0xd0005354, 0x00000100, 0x00000400, 0x00011605,
+    0xc435a000, 0x00000000, 0x00000041, 0x00011705,
+    0xc435a200, 0x00000000, 0x00000041, 0x00009705,
+    0xc433f100, 0x00000000, 0x00110041, 0x00019705,
+    0xc435a300, 0x00000000, 0x00000041, 0xe471f000,
+    0x00000000, 0x003e001c, 0x00000000, 0x004a000b,
+    0xc43cc000, 0x00000000, 0x00220029, 0xffe01605,
+    0xc4322000, 0x00000000, 0x004d000a, 0xc434e000,
+    0x00000000, 0x004c004e, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x0050004f, 0x00021605, 0x00000605,
+    0xff00ffff, 0x00031605, 0x01000e05, 0x00000605,
+    0x00ffffff, 0xc4287000, 0x00000000, 0x00240051,
+    0xc434e000, 0x00000000, 0x00550057, 0x00021705,
+    0x00029705, 0x00031705, 0x00039705, 0x00041705,
+    0x907bb000, 0x00000000, 0x00000008, 0x00000000,
+    0x00000007, 0xa438d300, 0x00000000, 0x0000005e,
+    0xa438d000, 0x00000000, 0x0000005f, 0xa4351000,
+    0x00000000, 0x00420061, 0xa434e000, 0x00000000,
+    0x00620060, 0x84390000, 0x00000000, 0x00000063,
+    0x00003505, 0xa4288000, 0x00000000, 0x00650063,
+    0x84390000, 0x00000000, 0x00000066, 0xc438e000,
+    0x00000000, 0x00000064, 0xc4351000, 0x00000000,
+    0x00420068, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x0009006a, 0xc434e000, 0x00000000, 0x0069006b,
+    0xc438e000, 0x00000000, 0x00000067, 0xc4351000,
+    0x00000000, 0x0052006d, 0xc4322000, 0x00000000,
+    0x0053006c, 0xc434e000, 0x00000000, 0x006e006f,
+    0xc438e100, 0x00000000, 0x0000005f, 0xc4351000,
+    0x00000000, 0x00540071, 0xc4322000, 0x00000000,
+    0x00560070, 0xc434e000, 0x00000000, 0x00720073,
+    0x00049705, 0x903bb000, 0x00000000, 0x00000058,
+    0x84322000, 0x00000000, 0x00270076, 0x24345000,
+    0x00000000, 0x00260077, 0xe4226000, 0x00000000,
+    0x00000078, 0xe4351000, 0x00000000, 0x00420079,
+    0xc43bd000, 0x00000000, 0x0000007a, 0xc434e000,
+    0x00000000, 0x0042007b, 0xc43be000, 0x00000000,
+    0x0000007a, 0xe4369000, 0x00000000, 0x007d007c,
+    0x84322100, 0x00000000, 0x00270076, 0x24345000,
+    0x00000000, 0x0026007f, 0xe4226000, 0x00000000,
+    0x00000080, 0x00013605, 0xe4351000, 0x00000000,
+    0x00820081, 0xe434e000, 0x00000000, 0x0083007e,
+    0x84322200, 0x00000000, 0x00270076, 0x24345000,
+    0x00000000, 0x00260085, 0xe4226000, 0x00000000,
+    0x00000086, 0x00015605, 0xe4351000, 0x00000000,
+    0x00880087, 0xe434e000, 0x00000000, 0x00890084,
+    0x84322300, 0x00000000, 0x00270076, 0x24345000,
+    0x00000000, 0x0026008b, 0xe4226000, 0x00000000,
+    0x0000008c, 0x00017605, 0xe4351000, 0x00000000,
+    0x008e008d, 0xe434e000, 0x00000000, 0x008f008a,
+    0xc43bd000, 0x00000000, 0x00000090, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x00910092, 0x00006894,
+    0x0000024c, 0x0000012c, 0x00040001, 0xe438f000,
+    0x00000000, 0x00000023, 0xe4351000, 0x00000000,
+    0x00420094, 0x903bb000, 0x00000000, 0x00000074,
+    0x84322000, 0x00000000, 0x00270096, 0x24345000,
+    0x00000000, 0x00260097, 0xe4226000, 0x00000000,
+    0x00000098, 0xe4351000, 0x00000000, 0x00820099,
+    0xe434e000, 0x00000000, 0x009a0095, 0xc438e000,
+    0x00000000, 0x0000009b, 0xe431f000, 0x00000000,
+    0x0046004b, 0x00006894, 0x00000270, 0x00000274,
+    0x00040001, 0xe431f000, 0x00000000, 0x0044004b,
+    0x00006894, 0x0000010c, 0x00000278, 0x00040001,
+    0xe431f000, 0x00000000, 0x0048004b, 0x00006894,
+    0x00000114, 0x0000027c, 0x00040001, 0xe431f000,
+    0x00000000, 0x0059004b, 0x00006894, 0x0000011c,
+    0x00000280, 0x00040001, 0xe431f000, 0x00000000,
+    0x005a004b, 0x00006894, 0x00000124, 0x00000284,
+    0x00040001, 0xe431f000, 0x00000000, 0x005b004b,
+    0x00006894, 0x00000090, 0x00000288, 0x00040001,
+    0xe431f000, 0x00000000, 0x005c004b, 0x00006894,
+    0x00000114, 0x0000028c, 0x00040001, 0xe431f000,
+    0x00000000, 0x005d004b, 0x00006894, 0x00000124,
+    0x00000290, 0x00040001, 0xe431f000, 0x00000000,
+    0x0075004b, 0x00006894, 0x00000064, 0x00000294,
+    0x00040001, 0x00000001, 0x00000000, 0x00000072,
+    0xe431f000, 0x00000000, 0x001e000d, 0xd0005354,
+    0x0000029c, 0x00000400, 0x00011605, 0x00009705,
+    0x00021705, 0xe431f000, 0x00000000, 0x00ab00a7,
+    0xc4005354, 0x000002b0, 0x00000400, 0x00021605,
+    0xc435a000, 0x00000000, 0x000000a8, 0x00011705,
+    0xc435a200, 0x00000000, 0x000000a8, 0xc433f100,
+    0x00000000, 0x001100a8, 0x00019705, 0xc435a300,
+    0x00000000, 0x000000a8, 0xe471f000, 0x00000000,
+    0x003e001c, 0x00000000, 0x00b5000b, 0xc43cc000,
+    0x00000000, 0x00220029, 0xffe01605, 0xc4322000,
+    0x00000000, 0x00b80006, 0xc434e000, 0x00000000,
+    0x00b700b9, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x00bb00ba, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x002400bc, 0xc434e000, 0x00000000,
+    0x00bf00c1, 0x00029705, 0x00031705, 0x00039705,
+    0x00041705, 0x907bb000, 0x00000000, 0x00000008,
+    0x00000000, 0x00000007, 0xa438d300, 0x00000000,
+    0x000000c7, 0xa438d000, 0x00000000, 0x000000c8,
+    0xa4351000, 0x00000000, 0x00a900ca, 0xa434e000,
+    0x00000000, 0x00cb00c9, 0x84390000, 0x00000000,
+    0x000000cc, 0x00003505, 0xa4288000, 0x00000000,
+    0x00ce00cc, 0x84390000, 0x00000000, 0x000000cf,
+    0xc438e000, 0x00000000, 0x000000cd, 0xc4351000,
+    0x00000000, 0x00a900d1, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x000500d3, 0xc434e000, 0x00000000,
+    0x00d200d4, 0xc438e000, 0x00000000, 0x000000d0,
+    0xc4351000, 0x00000000, 0x00ae00d6, 0xc4322000,
+    0x00000000, 0x00bd00d5, 0xc434e000, 0x00000000,
+    0x00d700d8, 0xc438e100, 0x00000000, 0x000000c8,
+    0xc4351000, 0x00000000, 0x00be00da, 0xc4322000,
+    0x00000000, 0x00c000d9, 0xc434e000, 0x00000000,
+    0x00db00dc, 0x00049705, 0x903bb000, 0x00000000,
+    0x000000c2, 0x84322000, 0x00000000, 0x002700df,
+    0x24345000, 0x00000000, 0x002600e0, 0xe4226000,
+    0x00000000, 0x000000e1, 0xe4351000, 0x00000000,
+    0x00a900e2, 0xc43bd000, 0x00000000, 0x000000e3,
+    0xc434e000, 0x00000000, 0x00a900e4, 0xc43be000,
+    0x00000000, 0x000000e3, 0xe4369000, 0x00000000,
+    0x00e600e5, 0x84322100, 0x00000000, 0x002700df,
+    0x24345000, 0x00000000, 0x002600e8, 0xe4226000,
+    0x00000000, 0x000000e9, 0x00013605, 0xe4351000,
+    0x00000000, 0x00eb00ea, 0xe434e000, 0x00000000,
+    0x00ec00e7, 0x84322200, 0x00000000, 0x002700df,
+    0x24345000, 0x00000000, 0x002600ee, 0xe4226000,
+    0x00000000, 0x000000ef, 0x00015605, 0xe4351000,
+    0x00000000, 0x00f100f0, 0xe434e000, 0x00000000,
+    0x00f200ed, 0x84322300, 0x00000000, 0x002700df,
+    0x24345000, 0x00000000, 0x002600f4, 0xe4226000,
+    0x00000000, 0x000000f5, 0x00017605, 0xe4351000,
+    0x00000000, 0x00f700f6, 0xe434e000, 0x00000000,
+    0x00f800f3, 0xc43bd000, 0x00000000, 0x000000f9,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x00fa00fb,
+    0x00006894, 0x000003f0, 0x000002d8, 0x00040001,
+    0xe438f000, 0x00000000, 0x00000023, 0xe4351000,
+    0x00000000, 0x00a900fd, 0x903bb000, 0x00000000,
+    0x000000dd, 0x84322000, 0x00000000, 0x002700ff,
+    0x24345000, 0x00000000, 0x00260100, 0xe4226000,
+    0x00000000, 0x00000101, 0xe4351000, 0x00000000,
+    0x00eb0102, 0xe434e000, 0x00000000, 0x010300fe,
+    0xc438e000, 0x00000000, 0x00000104, 0xe431f000,
+    0x00000000, 0x00aa00b6, 0x00006894, 0x00000414,
+    0x00000418, 0x00040001, 0xe431f000, 0x00000000,
+    0x00b000b6, 0x00006894, 0x000002bc, 0x0000041c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00b300b6,
+    0x00006894, 0x000002c4, 0x00000420, 0x00040001,
+    0xe431f000, 0x00000000, 0x00ab00b6, 0x00006894,
+    0x000002c8, 0x00000424, 0x00040001, 0xe431f000,
+    0x00000000, 0x00c300b6, 0x00006894, 0x000002b4,
+    0x00000428, 0x00040001, 0xe431f000, 0x00000000,
+    0x00c400b6, 0x00006894, 0x000002d0, 0x0000042c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00c500b6,
+    0x00006894, 0x000002d0, 0x00000430, 0x00040001,
+    0xe431f000, 0x00000000, 0x00c600b6, 0x00006894,
+    0x000002b4, 0x00000434, 0x00040001, 0xe431f000,
+    0x00000000, 0x00de00b6, 0x00006894, 0x00000064,
+    0x00000438, 0x00040001, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x0000000e, 0x00041605, 0xc4322000, 0x00000000,
+    0x01120013, 0x00000e05, 0x24327000, 0x00000000,
+    0x01140113, 0x00001405, 0x00003405, 0x24327000,
+    0x00000000, 0x0114001a, 0xfffff605, 0xc431f000,
+    0x00000000, 0x0119001f, 0xc4273000, 0x00000000,
+    0x01140118, 0x0000011a, 0xe438f000, 0x00000000,
+    0x00000014, 0xe431f000, 0x00000000, 0x011c001c,
+    0xe4273000, 0x00000000, 0x001c0118, 0x0000011d,
+    0xe431f000, 0x00000000, 0x011e000b, 0x00000001,
+    0x00000454, 0x00000000, 0x00000003, 0x00000000,
+    0x00000003, 0x24327000, 0x00000000, 0x011b0019,
+    0x243a6000, 0x00000000, 0x0012001a, 0x24322000,
+    0x00000000, 0x01210122, 0x00000001, 0x0000048c,
+    0x00000000, 0x00000001, 0x00000000, 0x00000025,
+    0x00009705, 0x00011705, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00040127, 0x00015605, 0xa83b8000,
+    0x00000000, 0x00000007, 0xc438e100, 0x00000000,
+    0x0000012a, 0x00021605, 0xc4351000, 0x00000000,
+    0x012c012b, 0xc4287000, 0x00000000, 0x01140128,
+    0xc434e000, 0x00000000, 0x012d012e, 0x903bb000,
+    0x00000000, 0x0000012f, 0x84322000, 0x00000000,
+    0x01170130, 0x24345000, 0x00000000, 0x01160131,
+    0xe4226000, 0x00000000, 0x00000132, 0xe4351000,
+    0x00000000, 0x01290133, 0xc43bd000, 0x00000000,
+    0x00000134, 0x00203605, 0xc434e000, 0x00000000,
+    0x01360135, 0xc43be000, 0x00000000, 0x00000134,
+    0xe4369000, 0x00000000, 0x01380137, 0x84322100,
+    0x00000000, 0x01170130, 0x24345000, 0x00000000,
+    0x0116013a, 0xe4226000, 0x00000000, 0x0000013b,
+    0x0001f605, 0xe4351000, 0x00000000, 0x013d013c,
+    0xe434e000, 0x00000000, 0x013e0139, 0xc43bd000,
+    0x00000000, 0x0000013f, 0x18800e05, 0xc434e000,
+    0x00000000, 0x01410140, 0x00006894, 0x00000508,
+    0x0000047c, 0x00040001, 0xc438e000, 0x00000000,
+    0x00000017, 0xe431f000, 0x00000000, 0x0125011f,
+    0x00006894, 0x0000050c, 0x00000510, 0x00040001,
+    0xc43be000, 0x00000000, 0x00000017, 0xe431f000,
+    0x00000000, 0x0126011f, 0x00006894, 0x00000514,
+    0x00000518, 0x00040001, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000003,
+    0x00000000, 0x00000001, 0x24345000, 0x00000000,
+    0x011b0019, 0x00000001, 0x00000528, 0x00000000,
+    0x00000003, 0x00000000, 0x00000002, 0xc431f000,
+    0x00000000, 0x01190015, 0x24327000, 0x00000000,
+    0x014c0018, 0x00000001, 0x00000534, 0x00000000,
+    0x00000001, 0x00000000, 0x00000025, 0x00009705,
+    0x00011705, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x00030151, 0x00015605, 0xa83b8000, 0x00000000,
+    0x00000007, 0xc438e100, 0x00000000, 0x00000154,
+    0x00021605, 0xc4351000, 0x00000000, 0x01560155,
+    0xc4287000, 0x00000000, 0x01140152, 0xc434e000,
+    0x00000000, 0x01570158, 0x903bb000, 0x00000000,
+    0x00000159, 0x84322000, 0x00000000, 0x0117015a,
+    0x24345000, 0x00000000, 0x0116015b, 0xe4226000,
+    0x00000000, 0x0000015c, 0xe4351000, 0x00000000,
+    0x0153015d, 0xc43bd000, 0x00000000, 0x0000015e,
+    0x00203605, 0xc434e000, 0x00000000, 0x0160015f,
+    0xc43be000, 0x00000000, 0x0000015e, 0xe4369000,
+    0x00000000, 0x01620161, 0x84322100, 0x00000000,
+    0x0117015a, 0x24345000, 0x00000000, 0x01160164,
+    0xe4226000, 0x00000000, 0x00000165, 0x0001f605,
+    0xe4351000, 0x00000000, 0x01670166, 0xe434e000,
+    0x00000000, 0x01680163, 0xc43bd000, 0x00000000,
+    0x00000169, 0x18800e05, 0xc434e000, 0x00000000,
+    0x016b016a, 0x00006894, 0x000005b0, 0x0000047c,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000016,
+    0xe431f000, 0x00000000, 0x014f011f, 0x00006894,
+    0x000005b4, 0x000005b8, 0x00040001, 0xc43be000,
+    0x00000000, 0x00000016, 0xe431f000, 0x00000000,
+    0x0150011f, 0x00006894, 0x000005bc, 0x000005c0,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000025, 0x00009705, 0x00011705, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x00020176, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000007, 0xc438e100,
+    0x00000000, 0x00000179, 0x00021605, 0xc4351000,
+    0x00000000, 0x017b017a, 0xc4287000, 0x00000000,
+    0x01140177, 0xc434e000, 0x00000000, 0x017c017d,
+    0x903bb000, 0x00000000, 0x0000017e, 0x84322000,
+    0x00000000, 0x0117017f, 0x24345000, 0x00000000,
+    0x01160180, 0xe4226000, 0x00000000, 0x00000181,
+    0xe4351000, 0x00000000, 0x01780182, 0xc43bd000,
+    0x00000000, 0x00000183, 0x00203605, 0xc434e000,
+    0x00000000, 0x01850184, 0xc43be000, 0x00000000,
+    0x00000183, 0xe4369000, 0x00000000, 0x01870186,
+    0x84322100, 0x00000000, 0x0117017f, 0x24345000,
+    0x00000000, 0x01160189, 0xe4226000, 0x00000000,
+    0x0000018a, 0x0001f605, 0xe4351000, 0x00000000,
+    0x018c018b, 0xe434e000, 0x00000000, 0x018d0188,
+    0xc43bd000, 0x00000000, 0x0000018e, 0x18800e05,
+    0xc434e000, 0x00000000, 0x0190018f, 0x00006894,
+    0x00000644, 0x0000047c, 0x00040001, 0xc438e000,
+    0x00000000, 0x00000017, 0xe431f000, 0x00000000,
+    0x0174011f, 0x00006894, 0x00000648, 0x0000064c,
+    0x00040001, 0xc43be000, 0x00000000, 0x00000017,
+    0xe431f000, 0x00000000, 0x0175011f, 0x00006894,
+    0x00000650, 0x00000654, 0x00040001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000,
+};
+   nir_def *args[16] = { dst_base, wa_insts_ptr, indirect_base, draw_id_base, indirect_stride, _draw_count, draw_base, instance_multiplier, max_draw_count, flags, mocs, _3dprim_size_B, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx12_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx12_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    32      %9 = undefined
+    32     %10 = undefined
+    32     %11 = undefined
+    32     %12 = undefined
+    32     %13 = undefined
+    32     %14 = undefined
+    32     %15 = undefined
+    32     %16 = undefined
+    32     %17 = undefined
+    32     %18 = undefined
+    32     %19 = undefined
+    64     %20 = load_const (0x0000000000000000)
+    32     %21 = load_const (0x00000000)
+    8      %22 = load_const (0x00)
+    32     %23 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %24 = load_const (0x00000001)
+    32     %25 = load_const (0x00000003)
+    32     %26 = load_const (0x00000008)
+    32     %27 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %28 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %29 = iand %28 (0xffff0000), %19
+    64     %30 = @load_param (param_idx=0)
+    64     %31 = @load_param (param_idx=1)
+    64     %32 = @load_param (param_idx=2)
+    32     %33 = @load_param (param_idx=3)
+    64     %34 = @load_param (param_idx=4)
+    32     %35 = @load_param (param_idx=5)
+    32     %36 = @load_param (param_idx=6)
+    32     %37 = @load_param (param_idx=7)
+    32     %38 = @load_param (param_idx=8)
+    64     %39 = @load_param (param_idx=9)
+    64     %40 = @load_param (param_idx=10)
+    32     %41 = @load_param (param_idx=11)
+    32     %42 = load_const (0x00000002)
+    32     %43 = extract_u8 %37, %42 (0x2)
+    32     %44 = load_const (0x00000004)
+    32     %45 = ishl %43, %42 (0x2)
+    32     %46 = extract_u8 %37, %25 (0x3)
+    32     %47 = iadd %35, %41
+    64     %48 = load_const (0x0000000000000004)
+    32     %49 = imul %41, %45
+    64     %50 = u2u64 %49
+    64     %51 = iadd %48 (0x4), %50
+    32     %52 = imul %47, %33
+    64     %53 = u2u64 %52
+    32     %54 = ishl %41, %25 (0x3)
+    64     %55 = u2u64 %54
+    1      %56 = ine %34, %20 (0x0)
+                 // succs: b1 b2
+    if %56 {
+        block b1:    // preds: b0
+        32     %57 = @load_global (%34) (access=none, align_mul=4, align_offset=0)
+        32     %58 = umin %36, %57
+                     // succs: b3
+    } else {
+        block b2:  // preds: b0, succs: b3
+    }
+    block b3:    // preds: b1 b2
+    32     %59 = phi b1: %58, b2: %36
+    1      %60 = ieq %41, %21 (0x0)
+                 // succs: b4 b5
+    if %60 {
+        block b4:    // preds: b3
+        8      %61 = load_const (0x01)
+        32     %62 = b2i32 %60
+        32     %63 = ishl %62, %26 (0x8)
+        32     %64 = iand %28 (0xffff0000), %18
+        32     %65 = ior %64, %63
+        16x2   %66 = unpack_32_2x16 %29
+        32     %67 = u2u32 %66.x
+        32     %68 = load_const (0x00000010 = 16)
+        32     %69 = ishl %67, %68 (0x10)
+        32     %70 = extract_u16 %65, %21 (0x0)
+        32     %71 = ior %70, %69
+        8x4    %72 = unpack_32_4x8 %71
+        8      %73 = iand %72.x, %61 (0x1)
+        1      %74 = ine %73, %22 (0x0)
+        64     %75 = b2i64 %74
+        8      %76 = iand %72.y, %61 (0x1)
+        1      %77 = ine %76, %22 (0x0)
+        64     %78 = b2i64 %77
+        64     %79 = ishl %78, %26 (0x8)
+        64     %80 = ior %75, %79
+        32     %81 = unpack_64_2x32_split_x %80
+        32     %82 = load_const (0x02800000 = 41943040)
+        32     %83 = ior %81, %82 (0x2800000)
+                     @store_global (%83, %30) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b6
+    } else {
+        block b5:  // preds: b3, succs: b6
+    }
+    block b6:    // preds: b4 b5
+    1      %84 = ult %47, %59
+                 // succs: b7 b29
+    if %84 {
+        block b7:    // preds: b6
+        32     %85 = iand %37, %24 (0x1)
+        1      %86 = ieq %85, %21 (0x0)
+        8      %87 = load_const (0x01)
+        32     %88 = iand %37, %42 (0x2)
+        32     %89 = iand %37, %26 (0x8)
+        1      %90 = ine %89, %21 (0x0)
+        32     %91 = iand %37, %44 (0x4)
+        1      %92 = ine %91, %21 (0x0)
+        32     %93 = extract_u8 %37, %24 (0x1)
+                     // succs: b8 b18
+        if %86 {
+            block b8:    // preds: b7
+            64     %94 = load_const (0x0000000000000008)
+            32     %95 = umax %91, %89
+            1      %96 = ine %95, %21 (0x0)
+            64     %97 = iadd %30, %51
+                         // succs: b9 b16
+            if %96 {
+                block b9:    // preds: b8
+                32     %98 = ushr %89, %25 (0x3)
+                32     %99 = ushr %91, %42 (0x2)
+                32    %100 = iadd.nsw %98, %99
+                32    %101 = ishl %100, %42 (0x2)
+                32    %102 = load_const (0xffffffff = -1 = 4294967295)
+                32    %103 = iadd %102 (0xffffffff), %101
+                64    %104 = load_const (0x000000000000000c = 12)
+                64    %105 = load_const (0x0000000000000010 = 16)
+                32    %106 = load_const (0x00000010 = 16)
+                32    %107 = load_const (0x78080000 = 2013790208)
+                32    %108 = ior %107 (0x78080000), %103
+                             @store_global (%108, %97) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %109 = iadd %97, %48 (0x4)
+                             // succs: b10 b11
+                if %90 {
+                    block b10:   // preds: b9
+                    32    %110 = iadd %46, %24 (0x1)
+                    64    %111 = iadd %53, %94 (0x8)
+                    64    %112 = iadd %31, %111
+                    1     %113 = ieq %112, %20 (0x0)
+                    32    %114 = b2i32 %113
+                    32    %115 = iand %17, %23 (0xffffff00)
+                    32    %116 = ior %115, %114
+                    32    %117 = load_const (0x00000100 = 256)
+                    32    %118 = iand %116, %27 (0xffff00ff)
+                    32    %119 = ior %118, %117 (0x100)
+                    16x2  %120 = unpack_32_2x16 %16
+                    32    %121 = u2u32 %120.x
+                    32    %122 = ishl %121, %106 (0x10)
+                    32    %123 = extract_u16 %119, %21 (0x0)
+                    32    %124 = ior %123, %122
+                    32    %125 = iand %15, %23 (0xffffff00)
+                    32    %126 = ior %125, %24 (0x1)
+                    32    %127 = load_const (0x0000000d = 13)
+                    8     %128 = u2u8 %120.y
+                    16    %129 = load_const (0x0001)
+                    16    %130 = extract_u8 %120.y, %129 (0x1)
+                    8     %131 = u2u8 %130
+                    32    %132 = u2u32 %128
+                    32    %133 = ishl %132, %26 (0x8)
+                    32    %134 = iand %126, %27 (0xffff00ff)
+                    32    %135 = ior %134, %133
+                    32    %136 = u2u32 %131
+                    32    %137 = ishl %136, %106 (0x10)
+                    32    %138 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %139 = iand %135, %138 (0xff00ffff)
+                    32    %140 = ior %139, %137
+                    8x4   %141 = unpack_32_4x8 %14
+                    32    %142 = u2u32 %141.x
+                    32    %143 = load_const (0x00000018 = 24)
+                    32    %144 = ishl %142, %143 (0x18)
+                    32    %145 = load_const (0x00ffffff = 16777215)
+                    32    %146 = iand %140, %145 (0xffffff)
+                    32    %147 = ior %146, %144
+                    64    %148 = load_const (0x0000000000000014 = 20)
+                    32x2  %149 = unpack_64_2x32 %112
+                    8x4   %150 = unpack_32_4x8 %124
+                    8     %151 = iand %150.x, %87 (0x1)
+                    1     %152 = ine %151, %22 (0x0)
+                    64    %153 = b2i64 %152
+                    64    %154 = ishl %153, %127 (0xd)
+                    8     %155 = iand %150.y, %87 (0x1)
+                    1     %156 = ine %155, %22 (0x0)
+                    64    %157 = b2i64 %156
+                    32    %158 = load_const (0x0000000e = 14)
+                    64    %159 = ishl %157, %158 (0xe)
+                    64    %160 = ior %154, %159
+                    64    %161 = u2u64 %93
+                    64    %162 = ishl %161, %106 (0x10)
+                    64    %163 = ior %160, %162
+                    8x4   %164 = unpack_32_4x8 %147
+                    8     %165 = iand %164.x, %87 (0x1)
+                    1     %166 = ine %165, %22 (0x0)
+                    64    %167 = b2i64 %166
+                    32    %168 = load_const (0x00000019 = 25)
+                    64    %169 = ishl %167, %168 (0x19)
+                    64    %170 = ior %163, %169
+                    64    %171 = u2u64 %46
+                    32    %172 = load_const (0x0000001a = 26)
+                    64    %173 = ishl %171, %172 (0x1a)
+                    64    %174 = ior %170, %173
+                    32    %175 = u2u32 %174
+                                 @store_global (%175, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %176 = u2u32 %112
+                    64    %177 = iadd %97, %94 (0x8)
+                                 @store_global (%176, %177) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %178 = mov %149.y
+                    64    %179 = iadd %97, %104 (0xc)
+                                 @store_global (%178, %179) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %180 = iadd %97, %105 (0x10)
+                                 @store_global (%26 (0x8), %180) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %181 = iadd %97, %148 (0x14)
+                                 // succs: b12
+                } else {
+                    block b11:  // preds: b9, succs: b12
+                }
+                block b12:   // preds: b10 b11
+                32    %182 = phi b10: %110, b11: %46
+                64    %183 = phi b10: %181, b11: %109
+                             // succs: b13 b14
+                if %92 {
+                    block b13:   // preds: b12
+                    64    %184 = iadd %32, %55
+                                 @store_global (%47, %184) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %185 = ineg %85
+                    64    %186 = iadd %184, %48 (0x4)
+                                 @store_global (%185, %186) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %187 = ieq %184, %20 (0x0)
+                    32    %188 = b2i32 %187
+                    32    %189 = iand %13, %23 (0xffffff00)
+                    32    %190 = ior %189, %188
+                    32    %191 = load_const (0x00000100 = 256)
+                    32    %192 = iand %190, %27 (0xffff00ff)
+                    32    %193 = ior %192, %191 (0x100)
+                    16x2  %194 = unpack_32_2x16 %16
+                    32    %195 = u2u32 %194.x
+                    32    %196 = ishl %195, %106 (0x10)
+                    32    %197 = extract_u16 %193, %21 (0x0)
+                    32    %198 = ior %197, %196
+                    32    %199 = iand %12, %23 (0xffffff00)
+                    32    %200 = ior %199, %24 (0x1)
+                    32    %201 = load_const (0x0000000d = 13)
+                    8     %202 = u2u8 %194.y
+                    16    %203 = load_const (0x0001)
+                    16    %204 = extract_u8 %194.y, %203 (0x1)
+                    8     %205 = u2u8 %204
+                    32    %206 = u2u32 %202
+                    32    %207 = ishl %206, %26 (0x8)
+                    32    %208 = iand %200, %27 (0xffff00ff)
+                    32    %209 = ior %208, %207
+                    32    %210 = u2u32 %205
+                    32    %211 = ishl %210, %106 (0x10)
+                    32    %212 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %213 = iand %209, %212 (0xff00ffff)
+                    32    %214 = ior %213, %211
+                    8x4   %215 = unpack_32_4x8 %14
+                    32    %216 = u2u32 %215.x
+                    32    %217 = load_const (0x00000018 = 24)
+                    32    %218 = ishl %216, %217 (0x18)
+                    32    %219 = load_const (0x00ffffff = 16777215)
+                    32    %220 = iand %214, %219 (0xffffff)
+                    32    %221 = ior %220, %218
+                    32x2  %222 = unpack_64_2x32 %184
+                    8x4   %223 = unpack_32_4x8 %198
+                    8     %224 = iand %223.x, %87 (0x1)
+                    1     %225 = ine %224, %22 (0x0)
+                    64    %226 = b2i64 %225
+                    64    %227 = ishl %226, %201 (0xd)
+                    8     %228 = iand %223.y, %87 (0x1)
+                    1     %229 = ine %228, %22 (0x0)
+                    64    %230 = b2i64 %229
+                    32    %231 = load_const (0x0000000e = 14)
+                    64    %232 = ishl %230, %231 (0xe)
+                    64    %233 = ior %227, %232
+                    64    %234 = u2u64 %93
+                    64    %235 = ishl %234, %106 (0x10)
+                    64    %236 = ior %233, %235
+                    8x4   %237 = unpack_32_4x8 %221
+                    8     %238 = iand %237.x, %87 (0x1)
+                    1     %239 = ine %238, %22 (0x0)
+                    64    %240 = b2i64 %239
+                    32    %241 = load_const (0x00000019 = 25)
+                    64    %242 = ishl %240, %241 (0x19)
+                    64    %243 = ior %236, %242
+                    64    %244 = u2u64 %182
+                    32    %245 = load_const (0x0000001a = 26)
+                    64    %246 = ishl %244, %245 (0x1a)
+                    64    %247 = ior %243, %246
+                    32    %248 = u2u32 %247
+                                 @store_global (%248, %183) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %249 = u2u32 %184
+                    64    %250 = iadd %183, %48 (0x4)
+                                 @store_global (%249, %250) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %251 = mov %222.y
+                    64    %252 = iadd %183, %94 (0x8)
+                                 @store_global (%251, %252) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %253 = iadd %183, %104 (0xc)
+                                 @store_global (%26 (0x8), %253) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %254 = iadd %183, %105 (0x10)
+                                 // succs: b15
+                } else {
+                    block b14:  // preds: b12, succs: b15
+                }
+                block b15:   // preds: b13 b14
+                64    %255 = phi b13: %254, b14: %183
+                             // succs: b17
+            } else {
+                block b16:  // preds: b8, succs: b17
+            }
+            block b17:   // preds: b15 b16
+            64    %256 = phi b15: %255, b16: %97
+            64    %257 = iadd %31, %53
+            32x4  %258 = @load_global (%257) (access=none, align_mul=4, align_offset=0)
+            32    %259 = mov %258.x
+            32    %260 = mov %258.z
+            32    %261 = mov %258.y
+            64    %262 = load_const (0x000000000000000c = 12)
+            32    %263 = mov %258.w
+            32    %264 = ushr %88, %24 (0x1)
+            32    %265 = iand %11, %23 (0xffffff00)
+            32    %266 = ior %265, %264
+            32    %267 = iand %266, %27 (0xffff00ff)
+            32    %268 = load_const (0x00000010 = 16)
+            32    %269 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32    %270 = load_const (0x00000018 = 24)
+            32    %271 = load_const (0x00ffffff = 16777215)
+            32    %272 = extract_u16 %267, %21 (0x0)
+            64    %273 = load_const (0x0000000000000010 = 16)
+            64    %274 = load_const (0x0000000000000014 = 20)
+            64    %275 = load_const (0x0000000000000018 = 24)
+            16x2  %276 = unpack_32_2x16 %9
+            8     %277 = u2u8 %276.x
+            16    %278 = load_const (0x0001)
+            16    %279 = extract_u8 %276.x, %278 (0x1)
+            8     %280 = u2u8 %279
+            32    %281 = u2u32 %277
+            32    %282 = ishl %281, %26 (0x8)
+            32    %283 = iand %28 (0xffff0000), %10
+            32    %284 = ior %283, %282
+            32    %285 = u2u32 %280
+            32    %286 = ishl %285, %268 (0x10)
+            32    %287 = iand %284, %269 (0xff00ffff)
+            32    %288 = ior %287, %286
+            8x4   %289 = unpack_32_4x8 %9
+            32    %290 = u2u32 %289.z
+            32    %291 = ishl %290, %270 (0x18)
+            32    %292 = iand %288, %271 (0xffffff)
+            32    %293 = ior %292, %291
+            8x4   %294 = unpack_32_4x8 %272
+            8     %295 = iand %294.x, %87 (0x1)
+            1     %296 = ine %295, %22 (0x0)
+            64    %297 = b2i64 %296
+            64    %298 = ishl %297, %26 (0x8)
+            32    %299 = unpack_64_2x32_split_x %298
+            32    %300 = load_const (0x00000005)
+            32    %301 = ior %299, %300 (0x5)
+            32    %302 = unpack_64_2x32_split_y %298
+            64    %303 = pack_64_2x32_split %301, %302
+            8     %304 = iand %294.y, %87 (0x1)
+            1     %305 = ine %304, %22 (0x0)
+            64    %306 = b2i64 %305
+            32    %307 = load_const (0x00000009)
+            64    %308 = ishl %306, %307 (0x9)
+            64    %309 = ior %303, %308
+            8     %310 = iand %294.z, %87 (0x1)
+            1     %311 = ine %310, %22 (0x0)
+            64    %312 = b2i64 %311
+            32    %313 = load_const (0x0000000a = 10)
+            64    %314 = ishl %312, %313 (0xa)
+            64    %315 = ior %309, %314
+            8     %316 = iand %294.w, %87 (0x1)
+            1     %317 = ine %316, %22 (0x0)
+            64    %318 = b2i64 %317
+            32    %319 = load_const (0x0000000b = 11)
+            64    %320 = ishl %318, %319 (0xb)
+            64    %321 = ior %315, %320
+            32    %322 = unpack_64_2x32_split_x %321
+            32    %323 = load_const (0x7b000000 = 2063597568)
+            32    %324 = ior %323 (0x7b000000), %322
+                         @store_global (%324, %256) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %325 = u2u64 %85
+            64    %326 = ishl %325, %26 (0x8)
+            8x4   %327 = unpack_32_4x8 %293
+            8     %328 = iand %327.x, %87 (0x1)
+            1     %329 = ine %328, %22 (0x0)
+            64    %330 = b2i64 %329
+            64    %331 = ishl %330, %307 (0x9)
+            64    %332 = ior %326, %331
+            32    %333 = u2u32 %332
+            64    %334 = iadd %256, %48 (0x4)
+                         @store_global (%333, %334) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %335 = iadd %256, %94 (0x8)
+                         @store_global (%259, %335) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %336 = iadd %256, %262 (0xc)
+                         @store_global (%260, %336) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %337 = iadd %256, %273 (0x10)
+                         @store_global (%261, %337) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %338 = iadd %256, %274 (0x14)
+                         @store_global (%263, %338) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %339 = iadd %256, %275 (0x18)
+                         @store_global (%21 (0x0), %339) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b28
+        } else {
+            block b18:   // preds: b7
+            64    %340 = load_const (0x000000000000000c = 12)
+            32    %341 = umax %91, %89
+            1     %342 = ine %341, %21 (0x0)
+            64    %343 = iadd %30, %51
+                         // succs: b19 b26
+            if %342 {
+                block b19:   // preds: b18
+                32    %344 = ushr %89, %25 (0x3)
+                32    %345 = ushr %91, %42 (0x2)
+                32    %346 = iadd.nsw %344, %345
+                32    %347 = ishl %346, %42 (0x2)
+                32    %348 = load_const (0xffffffff = -1 = 4294967295)
+                32    %349 = iadd %348 (0xffffffff), %347
+                64    %350 = load_const (0x0000000000000008)
+                64    %351 = load_const (0x0000000000000010 = 16)
+                32    %352 = load_const (0x00000010 = 16)
+                32    %353 = load_const (0x78080000 = 2013790208)
+                32    %354 = ior %353 (0x78080000), %349
+                             @store_global (%354, %343) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %355 = iadd %343, %48 (0x4)
+                             // succs: b20 b21
+                if %90 {
+                    block b20:   // preds: b19
+                    32    %356 = iadd %46, %24 (0x1)
+                    64    %357 = iadd %53, %340 (0xc)
+                    64    %358 = iadd %31, %357
+                    1     %359 = ieq %358, %20 (0x0)
+                    32    %360 = b2i32 %359
+                    32    %361 = iand %8, %23 (0xffffff00)
+                    32    %362 = ior %361, %360
+                    32    %363 = load_const (0x00000100 = 256)
+                    32    %364 = iand %362, %27 (0xffff00ff)
+                    32    %365 = ior %364, %363 (0x100)
+                    16x2  %366 = unpack_32_2x16 %16
+                    32    %367 = u2u32 %366.x
+                    32    %368 = ishl %367, %352 (0x10)
+                    32    %369 = extract_u16 %365, %21 (0x0)
+                    32    %370 = ior %369, %368
+                    32    %371 = iand %7, %23 (0xffffff00)
+                    32    %372 = ior %371, %24 (0x1)
+                    32    %373 = load_const (0x0000000d = 13)
+                    8     %374 = u2u8 %366.y
+                    16    %375 = load_const (0x0001)
+                    16    %376 = extract_u8 %366.y, %375 (0x1)
+                    8     %377 = u2u8 %376
+                    32    %378 = u2u32 %374
+                    32    %379 = ishl %378, %26 (0x8)
+                    32    %380 = iand %372, %27 (0xffff00ff)
+                    32    %381 = ior %380, %379
+                    32    %382 = u2u32 %377
+                    32    %383 = ishl %382, %352 (0x10)
+                    32    %384 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %385 = iand %381, %384 (0xff00ffff)
+                    32    %386 = ior %385, %383
+                    8x4   %387 = unpack_32_4x8 %14
+                    32    %388 = u2u32 %387.x
+                    32    %389 = load_const (0x00000018 = 24)
+                    32    %390 = ishl %388, %389 (0x18)
+                    32    %391 = load_const (0x00ffffff = 16777215)
+                    32    %392 = iand %386, %391 (0xffffff)
+                    32    %393 = ior %392, %390
+                    64    %394 = load_const (0x0000000000000014 = 20)
+                    32x2  %395 = unpack_64_2x32 %358
+                    8x4   %396 = unpack_32_4x8 %370
+                    8     %397 = iand %396.x, %87 (0x1)
+                    1     %398 = ine %397, %22 (0x0)
+                    64    %399 = b2i64 %398
+                    64    %400 = ishl %399, %373 (0xd)
+                    8     %401 = iand %396.y, %87 (0x1)
+                    1     %402 = ine %401, %22 (0x0)
+                    64    %403 = b2i64 %402
+                    32    %404 = load_const (0x0000000e = 14)
+                    64    %405 = ishl %403, %404 (0xe)
+                    64    %406 = ior %400, %405
+                    64    %407 = u2u64 %93
+                    64    %408 = ishl %407, %352 (0x10)
+                    64    %409 = ior %406, %408
+                    8x4   %410 = unpack_32_4x8 %393
+                    8     %411 = iand %410.x, %87 (0x1)
+                    1     %412 = ine %411, %22 (0x0)
+                    64    %413 = b2i64 %412
+                    32    %414 = load_const (0x00000019 = 25)
+                    64    %415 = ishl %413, %414 (0x19)
+                    64    %416 = ior %409, %415
+                    64    %417 = u2u64 %46
+                    32    %418 = load_const (0x0000001a = 26)
+                    64    %419 = ishl %417, %418 (0x1a)
+                    64    %420 = ior %416, %419
+                    32    %421 = u2u32 %420
+                                 @store_global (%421, %355) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %422 = u2u32 %358
+                    64    %423 = iadd %343, %350 (0x8)
+                                 @store_global (%422, %423) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %424 = mov %395.y
+                    64    %425 = iadd %343, %340 (0xc)
+                                 @store_global (%424, %425) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %426 = iadd %343, %351 (0x10)
+                                 @store_global (%26 (0x8), %426) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %427 = iadd %343, %394 (0x14)
+                                 // succs: b22
+                } else {
+                    block b21:  // preds: b19, succs: b22
+                }
+                block b22:   // preds: b20 b21
+                32    %428 = phi b20: %356, b21: %46
+                64    %429 = phi b20: %427, b21: %355
+                             // succs: b23 b24
+                if %92 {
+                    block b23:   // preds: b22
+                    64    %430 = iadd %32, %55
+                                 @store_global (%47, %430) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %431 = ineg %85
+                    64    %432 = iadd %430, %48 (0x4)
+                                 @store_global (%431, %432) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %433 = ieq %430, %20 (0x0)
+                    32    %434 = b2i32 %433
+                    32    %435 = iand %6, %23 (0xffffff00)
+                    32    %436 = ior %435, %434
+                    32    %437 = load_const (0x00000100 = 256)
+                    32    %438 = iand %436, %27 (0xffff00ff)
+                    32    %439 = ior %438, %437 (0x100)
+                    16x2  %440 = unpack_32_2x16 %16
+                    32    %441 = u2u32 %440.x
+                    32    %442 = ishl %441, %352 (0x10)
+                    32    %443 = extract_u16 %439, %21 (0x0)
+                    32    %444 = ior %443, %442
+                    32    %445 = iand %5, %23 (0xffffff00)
+                    32    %446 = ior %445, %24 (0x1)
+                    32    %447 = load_const (0x0000000d = 13)
+                    8     %448 = u2u8 %440.y
+                    16    %449 = load_const (0x0001)
+                    16    %450 = extract_u8 %440.y, %449 (0x1)
+                    8     %451 = u2u8 %450
+                    32    %452 = u2u32 %448
+                    32    %453 = ishl %452, %26 (0x8)
+                    32    %454 = iand %446, %27 (0xffff00ff)
+                    32    %455 = ior %454, %453
+                    32    %456 = u2u32 %451
+                    32    %457 = ishl %456, %352 (0x10)
+                    32    %458 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %459 = iand %455, %458 (0xff00ffff)
+                    32    %460 = ior %459, %457
+                    8x4   %461 = unpack_32_4x8 %14
+                    32    %462 = u2u32 %461.x
+                    32    %463 = load_const (0x00000018 = 24)
+                    32    %464 = ishl %462, %463 (0x18)
+                    32    %465 = load_const (0x00ffffff = 16777215)
+                    32    %466 = iand %460, %465 (0xffffff)
+                    32    %467 = ior %466, %464
+                    32x2  %468 = unpack_64_2x32 %430
+                    8x4   %469 = unpack_32_4x8 %444
+                    8     %470 = iand %469.x, %87 (0x1)
+                    1     %471 = ine %470, %22 (0x0)
+                    64    %472 = b2i64 %471
+                    64    %473 = ishl %472, %447 (0xd)
+                    8     %474 = iand %469.y, %87 (0x1)
+                    1     %475 = ine %474, %22 (0x0)
+                    64    %476 = b2i64 %475
+                    32    %477 = load_const (0x0000000e = 14)
+                    64    %478 = ishl %476, %477 (0xe)
+                    64    %479 = ior %473, %478
+                    64    %480 = u2u64 %93
+                    64    %481 = ishl %480, %352 (0x10)
+                    64    %482 = ior %479, %481
+                    8x4   %483 = unpack_32_4x8 %467
+                    8     %484 = iand %483.x, %87 (0x1)
+                    1     %485 = ine %484, %22 (0x0)
+                    64    %486 = b2i64 %485
+                    32    %487 = load_const (0x00000019 = 25)
+                    64    %488 = ishl %486, %487 (0x19)
+                    64    %489 = ior %482, %488
+                    64    %490 = u2u64 %428
+                    32    %491 = load_const (0x0000001a = 26)
+                    64    %492 = ishl %490, %491 (0x1a)
+                    64    %493 = ior %489, %492
+                    32    %494 = u2u32 %493
+                                 @store_global (%494, %429) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %495 = u2u32 %430
+                    64    %496 = iadd %429, %48 (0x4)
+                                 @store_global (%495, %496) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %497 = mov %468.y
+                    64    %498 = iadd %429, %350 (0x8)
+                                 @store_global (%497, %498) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %499 = iadd %429, %340 (0xc)
+                                 @store_global (%26 (0x8), %499) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %500 = iadd %429, %351 (0x10)
+                                 // succs: b25
+                } else {
+                    block b24:  // preds: b22, succs: b25
+                }
+                block b25:   // preds: b23 b24
+                64    %501 = phi b23: %500, b24: %429
+                             // succs: b27
+            } else {
+                block b26:  // preds: b18, succs: b27
+            }
+            block b27:   // preds: b25 b26
+            64    %502 = phi b25: %501, b26: %343
+            64    %503 = iadd %31, %53
+            32x4  %504 = @load_global (%503) (access=none, align_mul=4, align_offset=0)
+            64    %505 = load_const (0x0000000000000010 = 16)
+            64    %506 = iadd %503, %505 (0x10)
+            32    %507 = @load_global (%506) (access=none, align_mul=4, align_offset=0)
+            32    %508 = load_const (0x00000010 = 16)
+            32    %509 = mov %504.x
+            64    %510 = load_const (0x0000000000000008)
+            32    %511 = mov %504.z
+            32    %512 = mov %504.y
+            32    %513 = mov %504.w
+            32    %514 = ushr %88, %24 (0x1)
+            32    %515 = iand %4, %23 (0xffffff00)
+            32    %516 = ior %515, %514
+            32    %517 = iand %516, %27 (0xffff00ff)
+            32    %518 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32    %519 = load_const (0x00000018 = 24)
+            32    %520 = load_const (0x00ffffff = 16777215)
+            32    %521 = extract_u16 %517, %21 (0x0)
+            64    %522 = load_const (0x0000000000000014 = 20)
+            64    %523 = load_const (0x0000000000000018 = 24)
+            16x2  %524 = unpack_32_2x16 %9
+            8     %525 = u2u8 %524.x
+            16    %526 = load_const (0x0001)
+            16    %527 = extract_u8 %524.x, %526 (0x1)
+            8     %528 = u2u8 %527
+            32    %529 = u2u32 %525
+            32    %530 = ishl %529, %26 (0x8)
+            32    %531 = iand %28 (0xffff0000), %3
+            32    %532 = ior %531, %530
+            32    %533 = u2u32 %528
+            32    %534 = ishl %533, %508 (0x10)
+            32    %535 = iand %532, %518 (0xff00ffff)
+            32    %536 = ior %535, %534
+            8x4   %537 = unpack_32_4x8 %9
+            32    %538 = u2u32 %537.z
+            32    %539 = ishl %538, %519 (0x18)
+            32    %540 = iand %536, %520 (0xffffff)
+            32    %541 = ior %540, %539
+            8x4   %542 = unpack_32_4x8 %521
+            8     %543 = iand %542.x, %87 (0x1)
+            1     %544 = ine %543, %22 (0x0)
+            64    %545 = b2i64 %544
+            64    %546 = ishl %545, %26 (0x8)
+            32    %547 = unpack_64_2x32_split_x %546
+            32    %548 = load_const (0x00000005)
+            32    %549 = ior %547, %548 (0x5)
+            32    %550 = unpack_64_2x32_split_y %546
+            64    %551 = pack_64_2x32_split %549, %550
+            8     %552 = iand %542.y, %87 (0x1)
+            1     %553 = ine %552, %22 (0x0)
+            64    %554 = b2i64 %553
+            32    %555 = load_const (0x00000009)
+            64    %556 = ishl %554, %555 (0x9)
+            64    %557 = ior %551, %556
+            8     %558 = iand %542.z, %87 (0x1)
+            1     %559 = ine %558, %22 (0x0)
+            64    %560 = b2i64 %559
+            32    %561 = load_const (0x0000000a = 10)
+            64    %562 = ishl %560, %561 (0xa)
+            64    %563 = ior %557, %562
+            8     %564 = iand %542.w, %87 (0x1)
+            1     %565 = ine %564, %22 (0x0)
+            64    %566 = b2i64 %565
+            32    %567 = load_const (0x0000000b = 11)
+            64    %568 = ishl %566, %567 (0xb)
+            64    %569 = ior %563, %568
+            32    %570 = unpack_64_2x32_split_x %569
+            32    %571 = load_const (0x7b000000 = 2063597568)
+            32    %572 = ior %571 (0x7b000000), %570
+                         @store_global (%572, %502) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %573 = u2u64 %85
+            64    %574 = ishl %573, %26 (0x8)
+            8x4   %575 = unpack_32_4x8 %541
+            8     %576 = iand %575.x, %87 (0x1)
+            1     %577 = ine %576, %22 (0x0)
+            64    %578 = b2i64 %577
+            64    %579 = ishl %578, %555 (0x9)
+            64    %580 = ior %574, %579
+            32    %581 = u2u32 %580
+            64    %582 = iadd %502, %48 (0x4)
+                         @store_global (%581, %582) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %583 = iadd %502, %510 (0x8)
+                         @store_global (%509, %583) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %584 = iadd %502, %340 (0xc)
+                         @store_global (%511, %584) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %585 = iadd %502, %505 (0x10)
+                         @store_global (%512, %585) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %586 = iadd %502, %522 (0x14)
+                         @store_global (%507, %586) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %587 = iadd %502, %523 (0x18)
+                         @store_global (%513, %587) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b28
+        }
+        block b28:  // preds: b17 b27, succs: b30
+    } else {
+        block b29:  // preds: b6, succs: b30
+    }
+    block b30:   // preds: b28 b29
+    1     %588 = ieq %59, %21 (0x0)
+    32    %589 = load_const (0xffffffff = -1 = 4294967295)
+    32    %590 = iadd %59, %589 (0xffffffff)
+    32    %591 = bcsel %588, %21 (0x0), %590
+    64    %592 = u2u64 %45
+    64    %593 = iadd %51, %592
+    64    %594 = bcsel %588, %51, %593
+    64    %595 = iadd %30, %594
+    1     %596 = ine %47, %591
+                 // succs: b31 b35
+    if %596 {
+        block b31:   // preds: b30
+        32    %597 = iadd %38, %589 (0xffffffff)
+        1     %598 = ieq %41, %597
+                     // succs: b32 b33
+        if %598 {
+            block b32:   // preds: b31
+            64    %599 = load_const (0x0000000000000008)
+            32    %600 = iand %28 (0xffff0000), %2
+            32    %601 = load_const (0x0000000a = 10)
+            16x2  %602 = unpack_32_2x16 %1
+            32    %603 = u2u32 %602.y
+            32    %604 = load_const (0x00000010 = 16)
+            32    %605 = ishl %603, %604 (0x10)
+            32    %606 = extract_u16 %600, %21 (0x0)
+            32    %607 = ior %606, %605
+            8x4   %608 = unpack_32_4x8 %607
+            8     %609 = load_const (0x01)
+            8     %610 = iand %608.x, %609 (0x1)
+            1     %611 = ine %610, %22 (0x0)
+            64    %612 = b2i64 %611
+            64    %613 = ishl %612, %601 (0xa)
+            32    %614 = unpack_64_2x32_split_x %613
+            32    %615 = load_const (0x00000101 = 257)
+            32    %616 = ior %614, %615 (0x101)
+            32    %617 = unpack_64_2x32_split_y %613
+            64    %618 = pack_64_2x32_split %616, %617
+            8     %619 = iand %608.y, %609 (0x1)
+            1     %620 = ine %619, %22 (0x0)
+            64    %621 = b2i64 %620
+            32    %622 = load_const (0x0000000f = 15)
+            64    %623 = ishl %621, %622 (0xf)
+            64    %624 = ior %618, %623
+            32    %625 = unpack_64_2x32_split_x %624
+            32    %626 = load_const (0x18800000 = 411041792)
+            32    %627 = ior %625, %626 (0x18800000)
+                         @store_global (%627, %595) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %628 = u2u32 %39
+            64    %629 = iadd %595, %48 (0x4)
+                         @store_global (%628, %629) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %630 = unpack_64_2x32_split_y %39
+            64    %631 = iadd %595, %599 (0x8)
+                         @store_global (%630, %631) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b34
+        } else {
+            block b33:  // preds: b31, succs: b34
+        }
+        block b34:  // preds: b32 b33, succs: b36
+    } else {
+        block b35:   // preds: b30
+        64    %632 = load_const (0x0000000000000008)
+        32    %633 = iand %28 (0xffff0000), %0
+        32    %634 = load_const (0x0000000a = 10)
+        16x2  %635 = unpack_32_2x16 %1
+        32    %636 = u2u32 %635.y
+        32    %637 = load_const (0x00000010 = 16)
+        32    %638 = ishl %636, %637 (0x10)
+        32    %639 = extract_u16 %633, %21 (0x0)
+        32    %640 = ior %639, %638
+        8x4   %641 = unpack_32_4x8 %640
+        8     %642 = load_const (0x01)
+        8     %643 = iand %641.x, %642 (0x1)
+        1     %644 = ine %643, %22 (0x0)
+        64    %645 = b2i64 %644
+        64    %646 = ishl %645, %634 (0xa)
+        32    %647 = unpack_64_2x32_split_x %646
+        32    %648 = load_const (0x00000101 = 257)
+        32    %649 = ior %647, %648 (0x101)
+        32    %650 = unpack_64_2x32_split_y %646
+        64    %651 = pack_64_2x32_split %649, %650
+        8     %652 = iand %641.y, %642 (0x1)
+        1     %653 = ine %652, %22 (0x0)
+        64    %654 = b2i64 %653
+        32    %655 = load_const (0x0000000f = 15)
+        64    %656 = ishl %654, %655 (0xf)
+        64    %657 = ior %651, %656
+        32    %658 = unpack_64_2x32_split_x %657
+        32    %659 = load_const (0x18800000 = 411041792)
+        32    %660 = ior %658, %659 (0x18800000)
+                     @store_global (%660, %595) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %661 = u2u32 %40
+        64    %662 = iadd %595, %48 (0x4)
+                     @store_global (%661, %662) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %663 = unpack_64_2x32_split_y %40
+        64    %664 = iadd %595, %632 (0x8)
+                     @store_global (%663, %664) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b36
+    }
+    block b36:  // preds: b34 b35, succs: b37
+    block b37:
+   */
+   static const uint32_t impl_0_nir[2103] = {
+    0x000002bf, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000009, 0x00000000, 0x00000039, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000f05,
+    0x00000e05, 0x00001405, 0xffe01605, 0x00003605,
+    0x00007605, 0x00011605, 0xe01ff605, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0015001e, 0xe4001744,
+    0xe4011744, 0xe4021744, 0xc4031744, 0xe4041744,
+    0xc4051744, 0xc4061744, 0xc4071744, 0xc4081744,
+    0xe4091744, 0xe40a1744, 0xc40b1744, 0x00005605,
+    0xc4288000, 0x00000000, 0x002c0027, 0x00009605,
+    0xc4351000, 0x00000000, 0x002c002d, 0xc4288000,
+    0x00000000, 0x001b0027, 0xc431f000, 0x00000000,
+    0x002b0025, 0x00009705, 0xc433f000, 0x00000000,
+    0x002f002b, 0xe438f000, 0x00000000, 0x00000033,
+    0xe431f000, 0x00000000, 0x00340032, 0xc433f000,
+    0x00000000, 0x00230031, 0xe438f000, 0x00000000,
+    0x00000036, 0xc4351000, 0x00000000, 0x001b002b,
+    0xe438f000, 0x00000000, 0x00000038, 0x24345000,
+    0x00000000, 0x00160024, 0x00000001, 0x000000e8,
+    0x00000000, 0x00000001, 0x00000000, 0x00000002,
+    0xc4005354, 0x00000090, 0x00000400, 0xc43ae000,
+    0x00000000, 0x003c0026, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000003d, 0x0000003b, 0x00000026, 0x0000003e,
+    0x24327000, 0x00000000, 0x0017002b, 0x00000001,
+    0x00000104, 0x00000000, 0x00000001, 0x00000000,
+    0x00000018, 0x00003405, 0xc4225000, 0x00000000,
+    0x00000041, 0xc4351000, 0x00000000, 0x001c0044,
+    0xc4322000, 0x00000000, 0x0014001e, 0xc434e000,
+    0x00000000, 0x00450046, 0xa83b8000, 0x00000000,
+    0x0000001f, 0xc438e000, 0x00000000, 0x00000048,
+    0x00021605, 0xc4351000, 0x00000000, 0x004a0049,
+    0xc4287000, 0x00000000, 0x00170047, 0xc434e000,
+    0x00000000, 0x004b004c, 0x903bb000, 0x00000000,
+    0x0000004d, 0x84322000, 0x00000000, 0x0043004e,
+    0x24345000, 0x00000000, 0x0018004f, 0xe4226000,
+    0x00000000, 0x00000050, 0x84322100, 0x00000000,
+    0x0043004e, 0x24345000, 0x00000000, 0x00180052,
+    0xe4226000, 0x00000000, 0x00000053, 0xe4351000,
+    0x00000000, 0x001c0054, 0xe434e000, 0x00000000,
+    0x00550051, 0xc43bd000, 0x00000000, 0x00000056,
+    0x02800e05, 0xc434e000, 0x00000000, 0x00580057,
+    0x00006894, 0x00000164, 0x00000080, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x243a6000, 0x00000000, 0x00400031,
+    0x00000001, 0x00000170, 0x00000000, 0x00000003,
+    0x00000000, 0x00000009, 0xc4322000, 0x00000000,
+    0x001a0027, 0x24327000, 0x00000000, 0x0017005e,
+    0x00003405, 0xc4722000, 0x00000000, 0x002c0027,
+    0x00000000, 0x001c0027, 0x24345000, 0x00000000,
+    0x00170062, 0xc4322000, 0x00000000, 0x002e0027,
+    0x24345000, 0x00000000, 0x00170064, 0xc4288000,
+    0x00000000, 0x001a0027, 0x00000001, 0x0000017c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000004,
+    0x00011705, 0xc43ac000, 0x00000000, 0x00620064,
+    0x24345000, 0x00000000, 0x00170069, 0xe431f000,
+    0x00000000, 0x00350020, 0x00000001, 0x000001a8,
+    0x00000000, 0x00000005, 0x00000000, 0x0000000d,
+    0xc47cc000, 0x00000000, 0x001b0062, 0x00000000,
+    0x002c0064, 0xc431f020, 0x00000000, 0x006e006d,
+    0xc4351000, 0x00000000, 0x002c006f, 0xfffff605,
+    0xc431f000, 0x00000000, 0x00700071, 0x00019705,
+    0x00021705, 0x00021605, 0x78080e05, 0xc434e000,
+    0x00000000, 0x00720076, 0x00006894, 0x000001dc,
+    0x000001ac, 0x00040001, 0xe431f000, 0x00000000,
+    0x0032006b, 0x00000001, 0x0000018c, 0x00000000,
+    0x00000001, 0x00000000, 0x0000004c, 0xc431f000,
+    0x00000000, 0x001a0030, 0xe471f000, 0x00000000,
+    0x00680037, 0x00000000, 0x007b0021, 0x24327000,
+    0x00000000, 0x0016007c, 0xc4225000, 0x00000000,
+    0x0000007d, 0xc4322000, 0x00000000, 0x00190013,
+    0xc434e000, 0x00000000, 0x007e007f, 0x00201605,
+    0xc4322000, 0x00000000, 0x001d0080, 0xc434e000,
+    0x00000000, 0x00810082, 0xa83b8000, 0x00000000,
+    0x00000012, 0xc438e000, 0x00000000, 0x00000084,
+    0xc4351000, 0x00000000, 0x00750085, 0xc4287000,
+    0x00000000, 0x00170083, 0xc434e000, 0x00000000,
+    0x00860087, 0xc4322000, 0x00000000, 0x00190011,
+    0xc434e000, 0x00000000, 0x001a0089, 0x0001b605,
+    0x84390100, 0x00000000, 0x00000084, 0x00003505,
+    0xa4288100, 0x00000000, 0x008d0084, 0x84390000,
+    0x00000000, 0x0000008e, 0xc438e000, 0x00000000,
+    0x0000008c, 0xc4351000, 0x00000000, 0x001c0090,
+    0xc4322000, 0x00000000, 0x001d008a, 0xc434e000,
+    0x00000000, 0x00910092, 0xc438e000, 0x00000000,
+    0x0000008f, 0xc4351000, 0x00000000, 0x00750094,
+    0x00000605, 0xff00ffff, 0xc4322000, 0x00000000,
+    0x00960093, 0xc434e000, 0x00000000, 0x00950097,
+    0x903bb000, 0x00000000, 0x00000010, 0xc438e000,
+    0x00000000, 0x00000099, 0x00031605, 0xc4351000,
+    0x00000000, 0x009b009a, 0x00000605, 0x00ffffff,
+    0xc4322000, 0x00000000, 0x009d0098, 0xc434e000,
+    0x00000000, 0x009c009e, 0x00029705, 0xc83bc000,
+    0x00000000, 0x0000007c, 0x903bb000, 0x00000000,
+    0x00000088, 0x84322000, 0x00000000, 0x006000a2,
+    0x24345000, 0x00000000, 0x001800a3, 0xe4226000,
+    0x00000000, 0x000000a4, 0xe4351000, 0x00000000,
+    0x008b00a5, 0x84322100, 0x00000000, 0x006000a2,
+    0x24345000, 0x00000000, 0x001800a7, 0xe4226000,
+    0x00000000, 0x000000a8, 0x0001d605, 0xe4351000,
+    0x00000000, 0x00aa00a9, 0xe434e000, 0x00000000,
+    0x00ab00a6, 0xe438f000, 0x00000000, 0x00000066,
+    0xe4351000, 0x00000000, 0x007500ad, 0xe434e000,
+    0x00000000, 0x00ae00ac, 0x903bb000, 0x00000000,
+    0x0000009f, 0x84322000, 0x00000000, 0x006000b0,
+    0x24345000, 0x00000000, 0x001800b1, 0xe4226000,
+    0x00000000, 0x000000b2, 0x00033605, 0xe4351000,
+    0x00000000, 0x00b400b3, 0xe434e000, 0x00000000,
+    0x00b500af, 0xe438f000, 0x00000000, 0x00000030,
+    0x00035605, 0xe4351000, 0x00000000, 0x00b800b7,
+    0xe434e000, 0x00000000, 0x00b900b6, 0xc438e000,
+    0x00000000, 0x000000ba, 0x00006894, 0x000002ec,
+    0x000001e0, 0x00040001, 0xc438e000, 0x00000000,
+    0x0000007c, 0xe431f000, 0x00000000, 0x0068006b,
+    0x00006894, 0x000002f0, 0x000002f4, 0x00040001,
+    0xc435a100, 0x00000000, 0x000000a1, 0xe431f000,
+    0x00000000, 0x0073006b, 0x00006894, 0x000002f8,
+    0x000002fc, 0x00040001, 0xe431f000, 0x00000000,
+    0x0074006b, 0x00006894, 0x00000070, 0x00000300,
+    0x00040001, 0xe431f000, 0x00000000, 0x00a0006b,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0xc4000028, 0x0000007a, 0x00000079,
+    0x00000030, 0x000000c2, 0xe4000028, 0x000000c1,
+    0x00000079, 0x00000078, 0x000000c2, 0x00000001,
+    0x00000194, 0x00000000, 0x00000001, 0x00000000,
+    0x0000004d, 0xe431f000, 0x00000000, 0x00390022,
+    0x00006894, 0x000000c4, 0x0000031c, 0x00040001,
+    0xc4349000, 0x00000000, 0x0000005e, 0xe431f000,
+    0x00000000, 0x003200c7, 0x00006894, 0x00000320,
+    0x00000324, 0x00040001, 0x24327000, 0x00000000,
+    0x001600c7, 0xc4225000, 0x00000000, 0x000000ca,
+    0xc4322000, 0x00000000, 0x0019000f, 0xc434e000,
+    0x00000000, 0x00cb00cc, 0x00201605, 0xc4322000,
+    0x00000000, 0x001d00cd, 0xc434e000, 0x00000000,
+    0x00ce00cf, 0xa83b8000, 0x00000000, 0x00000012,
+    0xc438e000, 0x00000000, 0x000000d1, 0xc4351000,
+    0x00000000, 0x007500d2, 0xc4287000, 0x00000000,
+    0x001700d0, 0xc434e000, 0x00000000, 0x00d300d4,
+    0xc4322000, 0x00000000, 0x0019000e, 0xc434e000,
+    0x00000000, 0x001a00d6, 0x0001b605, 0x84390100,
+    0x00000000, 0x000000d1, 0x00003505, 0xa4288100,
+    0x00000000, 0x00da00d1, 0x84390000, 0x00000000,
+    0x000000db, 0xc438e000, 0x00000000, 0x000000d9,
+    0xc4351000, 0x00000000, 0x001c00dd, 0xc4322000,
+    0x00000000, 0x001d00d7, 0xc434e000, 0x00000000,
+    0x00de00df, 0xc438e000, 0x00000000, 0x000000dc,
+    0xc4351000, 0x00000000, 0x007500e1, 0x00000605,
+    0xff00ffff, 0xc4322000, 0x00000000, 0x00e300e0,
+    0xc434e000, 0x00000000, 0x00e200e4, 0x903bb000,
+    0x00000000, 0x00000010, 0xc438e000, 0x00000000,
+    0x000000e6, 0x00031605, 0xc4351000, 0x00000000,
+    0x00e800e7, 0x00000605, 0x00ffffff, 0xc4322000,
+    0x00000000, 0x00ea00e5, 0xc434e000, 0x00000000,
+    0x00e900eb, 0xc83bc000, 0x00000000, 0x000000c7,
+    0x903bb000, 0x00000000, 0x000000d5, 0x84322000,
+    0x00000000, 0x006000ee, 0x24345000, 0x00000000,
+    0x001800ef, 0xe4226000, 0x00000000, 0x000000f0,
+    0xe4351000, 0x00000000, 0x00d800f1, 0x84322100,
+    0x00000000, 0x006000ee, 0x24345000, 0x00000000,
+    0x001800f3, 0xe4226000, 0x00000000, 0x000000f4,
+    0x0001d605, 0xe4351000, 0x00000000, 0x00f600f5,
+    0xe434e000, 0x00000000, 0x00f700f2, 0xe438f000,
+    0x00000000, 0x00000066, 0xe4351000, 0x00000000,
+    0x007500f9, 0xe434e000, 0x00000000, 0x00fa00f8,
+    0x903bb000, 0x00000000, 0x000000ec, 0x84322000,
+    0x00000000, 0x006000fc, 0x24345000, 0x00000000,
+    0x001800fd, 0xe4226000, 0x00000000, 0x000000fe,
+    0x00033605, 0xe4351000, 0x00000000, 0x010000ff,
+    0xe434e000, 0x00000000, 0x010100fb, 0xe438f000,
+    0x00000000, 0x000000c4, 0x00035605, 0xe4351000,
+    0x00000000, 0x01040103, 0xe434e000, 0x00000000,
+    0x01050102, 0xc438e000, 0x00000000, 0x00000106,
+    0x00006894, 0x0000041c, 0x00000314, 0x00040001,
+    0xc438e000, 0x00000000, 0x000000c7, 0xe431f000,
+    0x00000000, 0x003200c5, 0x00006894, 0x00000420,
+    0x00000424, 0x00040001, 0xc435a100, 0x00000000,
+    0x000000ed, 0xe431f000, 0x00000000, 0x006800c5,
+    0x00006894, 0x00000428, 0x0000042c, 0x00040001,
+    0xe431f000, 0x00000000, 0x007300c5, 0x00006894,
+    0x00000070, 0x00000430, 0x00040001, 0xe431f000,
+    0x00000000, 0x007400c5, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0xe4000028,
+    0x0000010d, 0x000000c6, 0x000000c5, 0x0000010e,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x0000005b, 0xe4000028, 0x00000110, 0x0000010f,
+    0x0000006b, 0x00000111, 0xe431f000, 0x00000000,
+    0x00370021, 0xd0005354, 0x00000450, 0x00000400,
+    0xc435a000, 0x00000000, 0x00000115, 0xc435a200,
+    0x00000000, 0x00000115, 0xc435a100, 0x00000000,
+    0x00000115, 0x00019705, 0xc435a300, 0x00000000,
+    0x00000115, 0xc43cc000, 0x00000000, 0x001a0061,
+    0xc4322000, 0x00000000, 0x0019000d, 0xc434e000,
+    0x00000000, 0x011b011c, 0xc4322000, 0x00000000,
+    0x001d011d, 0x00021605, 0x00000605, 0xff00ffff,
+    0x00031605, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x0017011e, 0x00021705, 0x00029705,
+    0x00031705, 0xa83b8000, 0x00000000, 0x0000000b,
+    0x84390000, 0x00000000, 0x00000127, 0x00003505,
+    0xa4288000, 0x00000000, 0x01290127, 0x84390000,
+    0x00000000, 0x0000012a, 0xc438e000, 0x00000000,
+    0x00000128, 0xc4351000, 0x00000000, 0x001c012c,
+    0xc4322000, 0x00000000, 0x000c001e, 0xc434e000,
+    0x00000000, 0x012d012e, 0xc438e000, 0x00000000,
+    0x0000012b, 0xc4351000, 0x00000000, 0x011f0130,
+    0xc4322000, 0x00000000, 0x0120012f, 0xc434e000,
+    0x00000000, 0x01310132, 0x903bb000, 0x00000000,
+    0x0000000b, 0xc438e200, 0x00000000, 0x00000134,
+    0xc4351000, 0x00000000, 0x01210135, 0xc4322000,
+    0x00000000, 0x01220133, 0xc434e000, 0x00000000,
+    0x01360137, 0x903bb000, 0x00000000, 0x00000123,
+    0x84322000, 0x00000000, 0x00600139, 0x24345000,
+    0x00000000, 0x0018013a, 0xe4226000, 0x00000000,
+    0x0000013b, 0xe4351000, 0x00000000, 0x001c013c,
+    0xc43bd000, 0x00000000, 0x0000013d, 0x0000b605,
+    0xc434e000, 0x00000000, 0x013f013e, 0xc43be000,
+    0x00000000, 0x0000013d, 0xe4369000, 0x00000000,
+    0x01410140, 0x84322100, 0x00000000, 0x00600139,
+    0x24345000, 0x00000000, 0x00180143, 0xe4226000,
+    0x00000000, 0x00000144, 0x00013605, 0xe4351000,
+    0x00000000, 0x01460145, 0xe434e000, 0x00000000,
+    0x01470142, 0x84322200, 0x00000000, 0x00600139,
+    0x24345000, 0x00000000, 0x00180149, 0xe4226000,
+    0x00000000, 0x0000014a, 0x00015605, 0xe4351000,
+    0x00000000, 0x014c014b, 0xe434e000, 0x00000000,
+    0x014d0148, 0x84322300, 0x00000000, 0x00600139,
+    0x24345000, 0x00000000, 0x0018014f, 0xe4226000,
+    0x00000000, 0x00000150, 0x00017605, 0xe4351000,
+    0x00000000, 0x01520151, 0xe434e000, 0x00000000,
+    0x0153014e, 0xc43bd000, 0x00000000, 0x00000154,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x01550156,
+    0x00006894, 0x0000055c, 0x0000044c, 0x00040001,
+    0xe438f000, 0x00000000, 0x0000005e, 0xe4351000,
+    0x00000000, 0x001c0158, 0x903bb000, 0x00000000,
+    0x00000138, 0x84322000, 0x00000000, 0x0060015a,
+    0x24345000, 0x00000000, 0x0018015b, 0xe4226000,
+    0x00000000, 0x0000015c, 0xe4351000, 0x00000000,
+    0x0146015d, 0xe434e000, 0x00000000, 0x015e0159,
+    0xc438e000, 0x00000000, 0x0000015f, 0xe431f000,
+    0x00000000, 0x00320113, 0x00006894, 0x00000580,
+    0x00000584, 0x00040001, 0xe431f000, 0x00000000,
+    0x00680113, 0x00006894, 0x00000458, 0x00000588,
+    0x00040001, 0xe431f000, 0x00000000, 0x01190113,
+    0x00006894, 0x0000045c, 0x0000058c, 0x00040001,
+    0xe431f000, 0x00000000, 0x01240113, 0x00006894,
+    0x00000460, 0x00000590, 0x00040001, 0xe431f000,
+    0x00000000, 0x01250113, 0x00006894, 0x00000468,
+    0x00000594, 0x00040001, 0xe431f000, 0x00000000,
+    0x01260113, 0x00006894, 0x0000005c, 0x00000598,
+    0x00040001, 0x00000003, 0x00000000, 0x00000004,
+    0x00019705, 0xc43ac000, 0x00000000, 0x00620064,
+    0x24345000, 0x00000000, 0x00170169, 0xe431f000,
+    0x00000000, 0x00350020, 0x00000001, 0x000005a8,
+    0x00000000, 0x00000005, 0x00000000, 0x0000000d,
+    0xc47cc000, 0x00000000, 0x001b0062, 0x00000000,
+    0x002c0064, 0xc431f020, 0x00000000, 0x016e016d,
+    0xc4351000, 0x00000000, 0x002c016f, 0xfffff605,
+    0xc431f000, 0x00000000, 0x01700171, 0x00011705,
+    0x00021705, 0x00021605, 0x78080e05, 0xc434e000,
+    0x00000000, 0x01720176, 0x00006894, 0x000005dc,
+    0x000005ac, 0x00040001, 0xe431f000, 0x00000000,
+    0x0032016b, 0x00000001, 0x0000018c, 0x00000000,
+    0x00000001, 0x00000000, 0x0000004c, 0xc431f000,
+    0x00000000, 0x001a0030, 0xe471f000, 0x00000000,
+    0x01680037, 0x00000000, 0x017b0021, 0x24327000,
+    0x00000000, 0x0016017c, 0xc4225000, 0x00000000,
+    0x0000017d, 0xc4322000, 0x00000000, 0x0019000a,
+    0xc434e000, 0x00000000, 0x017e017f, 0x00201605,
+    0xc4322000, 0x00000000, 0x001d0180, 0xc434e000,
+    0x00000000, 0x01810182, 0xa83b8000, 0x00000000,
+    0x00000012, 0xc438e000, 0x00000000, 0x00000184,
+    0xc4351000, 0x00000000, 0x01750185, 0xc4287000,
+    0x00000000, 0x00170183, 0xc434e000, 0x00000000,
+    0x01860187, 0xc4322000, 0x00000000, 0x00190009,
+    0xc434e000, 0x00000000, 0x001a0189, 0x0001b605,
+    0x84390100, 0x00000000, 0x00000184, 0x00003505,
+    0xa4288100, 0x00000000, 0x018d0184, 0x84390000,
+    0x00000000, 0x0000018e, 0xc438e000, 0x00000000,
+    0x0000018c, 0xc4351000, 0x00000000, 0x001c0190,
+    0xc4322000, 0x00000000, 0x001d018a, 0xc434e000,
+    0x00000000, 0x01910192, 0xc438e000, 0x00000000,
+    0x0000018f, 0xc4351000, 0x00000000, 0x01750194,
+    0x00000605, 0xff00ffff, 0xc4322000, 0x00000000,
+    0x01960193, 0xc434e000, 0x00000000, 0x01950197,
+    0x903bb000, 0x00000000, 0x00000010, 0xc438e000,
+    0x00000000, 0x00000199, 0x00031605, 0xc4351000,
+    0x00000000, 0x019b019a, 0x00000605, 0x00ffffff,
+    0xc4322000, 0x00000000, 0x019d0198, 0xc434e000,
+    0x00000000, 0x019c019e, 0x00029705, 0xc83bc000,
+    0x00000000, 0x0000017c, 0x903bb000, 0x00000000,
+    0x00000188, 0x84322000, 0x00000000, 0x006001a2,
+    0x24345000, 0x00000000, 0x001801a3, 0xe4226000,
+    0x00000000, 0x000001a4, 0xe4351000, 0x00000000,
+    0x018b01a5, 0x84322100, 0x00000000, 0x006001a2,
+    0x24345000, 0x00000000, 0x001801a7, 0xe4226000,
+    0x00000000, 0x000001a8, 0x0001d605, 0xe4351000,
+    0x00000000, 0x01aa01a9, 0xe434e000, 0x00000000,
+    0x01ab01a6, 0xe438f000, 0x00000000, 0x00000066,
+    0xe4351000, 0x00000000, 0x017501ad, 0xe434e000,
+    0x00000000, 0x01ae01ac, 0x903bb000, 0x00000000,
+    0x0000019f, 0x84322000, 0x00000000, 0x006001b0,
+    0x24345000, 0x00000000, 0x001801b1, 0xe4226000,
+    0x00000000, 0x000001b2, 0x00033605, 0xe4351000,
+    0x00000000, 0x01b401b3, 0xe434e000, 0x00000000,
+    0x01b501af, 0xe438f000, 0x00000000, 0x00000030,
+    0x00035605, 0xe4351000, 0x00000000, 0x01b801b7,
+    0xe434e000, 0x00000000, 0x01b901b6, 0xc438e000,
+    0x00000000, 0x000001ba, 0x00006894, 0x000006ec,
+    0x000005e0, 0x00040001, 0xc438e000, 0x00000000,
+    0x0000017c, 0xe431f000, 0x00000000, 0x0173016b,
+    0x00006894, 0x000006f0, 0x000006f4, 0x00040001,
+    0xc435a100, 0x00000000, 0x000001a1, 0xe431f000,
+    0x00000000, 0x0168016b, 0x00006894, 0x000006f8,
+    0x000006fc, 0x00040001, 0xe431f000, 0x00000000,
+    0x0174016b, 0x00006894, 0x00000070, 0x00000700,
+    0x00040001, 0xe431f000, 0x00000000, 0x01a0016b,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0xc4000028, 0x0000017a, 0x00000179,
+    0x00000030, 0x000001c2, 0xe4000028, 0x000001c1,
+    0x00000179, 0x00000178, 0x000001c2, 0x00000001,
+    0x00000194, 0x00000000, 0x00000001, 0x00000000,
+    0x0000004d, 0xe431f000, 0x00000000, 0x00390022,
+    0x00006894, 0x000000c4, 0x0000071c, 0x00040001,
+    0xc4349000, 0x00000000, 0x0000005e, 0xe431f000,
+    0x00000000, 0x003201c7, 0x00006894, 0x00000720,
+    0x00000724, 0x00040001, 0x24327000, 0x00000000,
+    0x001601c7, 0xc4225000, 0x00000000, 0x000001ca,
+    0xc4322000, 0x00000000, 0x00190008, 0xc434e000,
+    0x00000000, 0x01cb01cc, 0x00201605, 0xc4322000,
+    0x00000000, 0x001d01cd, 0xc434e000, 0x00000000,
+    0x01ce01cf, 0xa83b8000, 0x00000000, 0x00000012,
+    0xc438e000, 0x00000000, 0x000001d1, 0xc4351000,
+    0x00000000, 0x017501d2, 0xc4287000, 0x00000000,
+    0x001701d0, 0xc434e000, 0x00000000, 0x01d301d4,
+    0xc4322000, 0x00000000, 0x00190007, 0xc434e000,
+    0x00000000, 0x001a01d6, 0x0001b605, 0x84390100,
+    0x00000000, 0x000001d1, 0x00003505, 0xa4288100,
+    0x00000000, 0x01da01d1, 0x84390000, 0x00000000,
+    0x000001db, 0xc438e000, 0x00000000, 0x000001d9,
+    0xc4351000, 0x00000000, 0x001c01dd, 0xc4322000,
+    0x00000000, 0x001d01d7, 0xc434e000, 0x00000000,
+    0x01de01df, 0xc438e000, 0x00000000, 0x000001dc,
+    0xc4351000, 0x00000000, 0x017501e1, 0x00000605,
+    0xff00ffff, 0xc4322000, 0x00000000, 0x01e301e0,
+    0xc434e000, 0x00000000, 0x01e201e4, 0x903bb000,
+    0x00000000, 0x00000010, 0xc438e000, 0x00000000,
+    0x000001e6, 0x00031605, 0xc4351000, 0x00000000,
+    0x01e801e7, 0x00000605, 0x00ffffff, 0xc4322000,
+    0x00000000, 0x01ea01e5, 0xc434e000, 0x00000000,
+    0x01e901eb, 0xc83bc000, 0x00000000, 0x000001c7,
+    0x903bb000, 0x00000000, 0x000001d5, 0x84322000,
+    0x00000000, 0x006001ee, 0x24345000, 0x00000000,
+    0x001801ef, 0xe4226000, 0x00000000, 0x000001f0,
+    0xe4351000, 0x00000000, 0x01d801f1, 0x84322100,
+    0x00000000, 0x006001ee, 0x24345000, 0x00000000,
+    0x001801f3, 0xe4226000, 0x00000000, 0x000001f4,
+    0x0001d605, 0xe4351000, 0x00000000, 0x01f601f5,
+    0xe434e000, 0x00000000, 0x01f701f2, 0xe438f000,
+    0x00000000, 0x00000066, 0xe4351000, 0x00000000,
+    0x017501f9, 0xe434e000, 0x00000000, 0x01fa01f8,
+    0x903bb000, 0x00000000, 0x000001ec, 0x84322000,
+    0x00000000, 0x006001fc, 0x24345000, 0x00000000,
+    0x001801fd, 0xe4226000, 0x00000000, 0x000001fe,
+    0x00033605, 0xe4351000, 0x00000000, 0x020001ff,
+    0xe434e000, 0x00000000, 0x020101fb, 0xe438f000,
+    0x00000000, 0x000001c4, 0x00035605, 0xe4351000,
+    0x00000000, 0x02040203, 0xe434e000, 0x00000000,
+    0x02050202, 0xc438e000, 0x00000000, 0x00000206,
+    0x00006894, 0x0000081c, 0x00000714, 0x00040001,
+    0xc438e000, 0x00000000, 0x000001c7, 0xe431f000,
+    0x00000000, 0x003201c5, 0x00006894, 0x00000820,
+    0x00000824, 0x00040001, 0xc435a100, 0x00000000,
+    0x000001ed, 0xe431f000, 0x00000000, 0x017301c5,
+    0x00006894, 0x00000828, 0x0000082c, 0x00040001,
+    0xe431f000, 0x00000000, 0x016801c5, 0x00006894,
+    0x00000070, 0x00000830, 0x00040001, 0xe431f000,
+    0x00000000, 0x017401c5, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0xe4000028,
+    0x0000020d, 0x000001c6, 0x000001c5, 0x0000020e,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x0000005d, 0xe4000028, 0x00000210, 0x0000020f,
+    0x0000016b, 0x00000211, 0xe431f000, 0x00000000,
+    0x00370021, 0xd0005354, 0x00000850, 0x00000400,
+    0x00021705, 0xe431f000, 0x00000000, 0x02160214,
+    0xc4005354, 0x0000085c, 0x00000400, 0x00021605,
+    0xc435a000, 0x00000000, 0x00000215, 0x00011705,
+    0xc435a200, 0x00000000, 0x00000215, 0xc435a100,
+    0x00000000, 0x00000215, 0xc435a300, 0x00000000,
+    0x00000215, 0xc43cc000, 0x00000000, 0x001a0061,
+    0xc4322000, 0x00000000, 0x00190006, 0xc434e000,
+    0x00000000, 0x021f0220, 0xc4322000, 0x00000000,
+    0x001d0221, 0x00000605, 0xff00ffff, 0x00031605,
+    0x00000605, 0x00ffffff, 0xc4287000, 0x00000000,
+    0x00170222, 0x00029705, 0x00031705, 0xa83b8000,
+    0x00000000, 0x0000000b, 0x84390000, 0x00000000,
+    0x00000229, 0x00003505, 0xa4288000, 0x00000000,
+    0x022b0229, 0x84390000, 0x00000000, 0x0000022c,
+    0xc438e000, 0x00000000, 0x0000022a, 0xc4351000,
+    0x00000000, 0x001c022e, 0xc4322000, 0x00000000,
+    0x0005001e, 0xc434e000, 0x00000000, 0x022f0230,
+    0xc438e000, 0x00000000, 0x0000022d, 0xc4351000,
+    0x00000000, 0x02190232, 0xc4322000, 0x00000000,
+    0x02230231, 0xc434e000, 0x00000000, 0x02330234,
+    0x903bb000, 0x00000000, 0x0000000b, 0xc438e200,
+    0x00000000, 0x00000236, 0xc4351000, 0x00000000,
+    0x02240237, 0xc4322000, 0x00000000, 0x02250235,
+    0xc434e000, 0x00000000, 0x02380239, 0x903bb000,
+    0x00000000, 0x00000226, 0x84322000, 0x00000000,
+    0x0060023b, 0x24345000, 0x00000000, 0x0018023c,
+    0xe4226000, 0x00000000, 0x0000023d, 0xe4351000,
+    0x00000000, 0x001c023e, 0xc43bd000, 0x00000000,
+    0x0000023f, 0x0000b605, 0xc434e000, 0x00000000,
+    0x02410240, 0xc43be000, 0x00000000, 0x0000023f,
+    0xe4369000, 0x00000000, 0x02430242, 0x84322100,
+    0x00000000, 0x0060023b, 0x24345000, 0x00000000,
+    0x00180245, 0xe4226000, 0x00000000, 0x00000246,
+    0x00013605, 0xe4351000, 0x00000000, 0x02480247,
+    0xe434e000, 0x00000000, 0x02490244, 0x84322200,
+    0x00000000, 0x0060023b, 0x24345000, 0x00000000,
+    0x0018024b, 0xe4226000, 0x00000000, 0x0000024c,
+    0x00015605, 0xe4351000, 0x00000000, 0x024e024d,
+    0xe434e000, 0x00000000, 0x024f024a, 0x84322300,
+    0x00000000, 0x0060023b, 0x24345000, 0x00000000,
+    0x00180251, 0xe4226000, 0x00000000, 0x00000252,
+    0x00017605, 0xe4351000, 0x00000000, 0x02540253,
+    0xe434e000, 0x00000000, 0x02550250, 0xc43bd000,
+    0x00000000, 0x00000256, 0x7b000e05, 0xc434e000,
+    0x00000000, 0x02570258, 0x00006894, 0x00000964,
+    0x0000084c, 0x00040001, 0xe438f000, 0x00000000,
+    0x0000005e, 0xe4351000, 0x00000000, 0x001c025a,
+    0x903bb000, 0x00000000, 0x0000023a, 0x84322000,
+    0x00000000, 0x0060025c, 0x24345000, 0x00000000,
+    0x0018025d, 0xe4226000, 0x00000000, 0x0000025e,
+    0xe4351000, 0x00000000, 0x0248025f, 0xe434e000,
+    0x00000000, 0x0260025b, 0xc438e000, 0x00000000,
+    0x00000261, 0xe431f000, 0x00000000, 0x00320213,
+    0x00006894, 0x00000988, 0x0000098c, 0x00040001,
+    0xe431f000, 0x00000000, 0x021b0213, 0x00006894,
+    0x00000868, 0x00000990, 0x00040001, 0xe431f000,
+    0x00000000, 0x01680213, 0x00006894, 0x00000870,
+    0x00000994, 0x00040001, 0xe431f000, 0x00000000,
+    0x02160213, 0x00006894, 0x00000874, 0x00000998,
+    0x00040001, 0xe431f000, 0x00000000, 0x02270213,
+    0x00006894, 0x00000860, 0x0000099c, 0x00040001,
+    0xe431f000, 0x00000000, 0x02280213, 0x00006894,
+    0x00000878, 0x000009a0, 0x00040001, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x24327000, 0x00000000,
+    0x00170040, 0xfffff605, 0xc431f000, 0x00000000,
+    0x026d0040, 0xc4273000, 0x00000000, 0x0017026c,
+    0x0000026e, 0xe438f000, 0x00000000, 0x0000002f,
+    0xe431f000, 0x00000000, 0x02700035, 0xe4273000,
+    0x00000000, 0x0035026c, 0x00000271, 0xe431f000,
+    0x00000000, 0x02720020, 0x24345000, 0x00000000,
+    0x026f0031, 0x00000001, 0x000009d0, 0x00000000,
+    0x00000003, 0x00000000, 0x00000002, 0xc431f000,
+    0x00000000, 0x026d0028, 0x24327000, 0x00000000,
+    0x0276002b, 0x00000001, 0x000009dc, 0x00000000,
+    0x00000001, 0x00000000, 0x00000024, 0x00011705,
+    0xc4322000, 0x00000000, 0x0004001e, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000003, 0xc438e100,
+    0x00000000, 0x0000027c, 0x00021605, 0xc4351000,
+    0x00000000, 0x027e027d, 0xc4287000, 0x00000000,
+    0x0017027a, 0xc434e000, 0x00000000, 0x027f0280,
+    0x903bb000, 0x00000000, 0x00000281, 0x00003405,
+    0x84322000, 0x00000000, 0x02830282, 0x24345000,
+    0x00000000, 0x00180284, 0xe4226000, 0x00000000,
+    0x00000285, 0xe4351000, 0x00000000, 0x027b0286,
+    0xc43bd000, 0x00000000, 0x00000287, 0x00203605,
+    0xc434e000, 0x00000000, 0x02890288, 0xc43be000,
+    0x00000000, 0x00000287, 0xe4369000, 0x00000000,
+    0x028b028a, 0x84322100, 0x00000000, 0x02830282,
+    0x24345000, 0x00000000, 0x0018028d, 0xe4226000,
+    0x00000000, 0x0000028e, 0x0001f605, 0xe4351000,
+    0x00000000, 0x0290028f, 0xe434e000, 0x00000000,
+    0x0291028c, 0xc43bd000, 0x00000000, 0x00000292,
+    0x18800e05, 0xc434e000, 0x00000000, 0x02940293,
+    0x00006894, 0x00000a54, 0x000009cc, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000029, 0xe431f000,
+    0x00000000, 0x00320273, 0x00006894, 0x00000a58,
+    0x00000a5c, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000029, 0xe431f000, 0x00000000, 0x02790273,
+    0x00006894, 0x00000a60, 0x00000a64, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000024,
+    0x00011705, 0xc4322000, 0x00000000, 0x0002001e,
+    0x00015605, 0xa83b8000, 0x00000000, 0x00000003,
+    0xc438e100, 0x00000000, 0x000002a0, 0x00021605,
+    0xc4351000, 0x00000000, 0x02a202a1, 0xc4287000,
+    0x00000000, 0x0017029e, 0xc434e000, 0x00000000,
+    0x02a302a4, 0x903bb000, 0x00000000, 0x000002a5,
+    0x00003405, 0x84322000, 0x00000000, 0x02a702a6,
+    0x24345000, 0x00000000, 0x001802a8, 0xe4226000,
+    0x00000000, 0x000002a9, 0xe4351000, 0x00000000,
+    0x029f02aa, 0xc43bd000, 0x00000000, 0x000002ab,
+    0x00203605, 0xc434e000, 0x00000000, 0x02ad02ac,
+    0xc43be000, 0x00000000, 0x000002ab, 0xe4369000,
+    0x00000000, 0x02af02ae, 0x84322100, 0x00000000,
+    0x02a702a6, 0x24345000, 0x00000000, 0x001802b1,
+    0xe4226000, 0x00000000, 0x000002b2, 0x0001f605,
+    0xe4351000, 0x00000000, 0x02b402b3, 0xe434e000,
+    0x00000000, 0x02b502b0, 0xc43bd000, 0x00000000,
+    0x000002b6, 0x18800e05, 0xc434e000, 0x00000000,
+    0x02b802b7, 0x00006894, 0x00000ae4, 0x000009cc,
+    0x00040001, 0xc438e000, 0x00000000, 0x0000002a,
+    0xe431f000, 0x00000000, 0x00320273, 0x00006894,
+    0x00000ae8, 0x00000aec, 0x00040001, 0xc43be000,
+    0x00000000, 0x0000002a, 0xe431f000, 0x00000000,
+    0x029d0273, 0x00006894, 0x00000af0, 0x00000af4,
+    0x00040001, 0x00000000, 0x00000000,
+};
+   nir_def *args[12] = { dst_base, indirect_base, draw_id_base, indirect_stride, indirect_draw_count, draw_base, max_draw_count, flags, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx12_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx12_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx)
+{
+   /*
+    block b0:   // preds:
+    64     %0 = @load_param (param_idx=0)
+    32     %1 = @load_param (param_idx=1)
+    64     %2 = @load_param (param_idx=2)
+    32     %3 = @load_param (param_idx=3)
+    32     %4 = @load_param (param_idx=4)
+    32     %5 = @load_param (param_idx=6)
+    32     %6 = @load_param (param_idx=7)
+    32     %7 = @load_param (param_idx=8)
+    32     %8 = @load_param (param_idx=9)
+    1      %9 = ult %8, %4
+                // succs: b1 b19
+    if %9 {
+        block b1:   // preds: b0
+        32    %10 = load_const (0x00000001)
+        32    %11 = iand %7, %10 (0x1)
+        32    %12 = load_const (0x00000000)
+        1     %13 = ine %11, %12 (0x0)
+        32    %14 = load_const (0x00000002)
+        32    %15 = iand %7, %14 (0x2)
+        1     %16 = ine %15, %12 (0x0)
+        32    %17 = load_const (0x00000004)
+        32    %18 = iand %7, %17 (0x4)
+        1     %19 = ieq %18, %12 (0x0)
+        32    %20 = load_const (0x00000008)
+        32    %21 = iand %7, %20 (0x8)
+        1     %22 = ine %21, %12 (0x0)
+        32    %23 = iadd %3, %8
+        32    %24 = imul %23, %5
+        64    %25 = u2u64 %24
+        32    %26 = imul %8, %1
+        64    %27 = u2u64 %26
+        64    %28 = iadd %2, %25
+        32    %29 = @load_global (%28) (access=none, align_mul=4, align_offset=0)
+        64    %30 = u2u64 %29
+                    // succs: b2 b6
+        if %16 {
+            block b2:   // preds: b1
+            1     %31 = inot %13
+                        // succs: b3 b4
+            if %31 {
+                block b3:   // preds: b2
+                64    %32 = u2u64 %6
+                64    %33 = iadd %0, %27
+                64    %34 = ishl %32, %14 (0x2)
+                64    %35 = iadd %33, %34
+                            @store_global (%29, %35) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b5
+            } else {
+                block b4:   // preds: b2
+                64    %36 = u2u64 %6
+                64    %37 = iadd %0, %27
+                32    %38 = load_const (0x00000003)
+                64    %39 = ishl %36, %38 (0x3)
+                64    %40 = iadd %37, %39
+                            @store_global (%30, %40) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b5
+            }
+            block b5:  // preds: b3 b4, succs: b7
+        } else {
+            block b6:  // preds: b1, succs: b7
+        }
+        block b7:  // preds: b5 b6, succs: b8
+        loop {
+            block b8:   // preds: b7 b17
+            32    %41 = phi b7: %12 (0x0), b17: %75
+            1     %42 = uge %41, %6
+                        // succs: b9 b10
+            if %42 {
+                block b9:// preds: b8
+                break
+                // succs: b18
+            } else {
+                block b10:  // preds: b8, succs: b11
+            }
+            block b11:  // preds: b10
+            32    %43 = ishl %41, %10 (0x1)
+            32    %44 = iadd %10 (0x1), %43
+                        // succs: b12 b13
+            if %19 {
+                block b12:  // preds: b11
+                64    %45 = u2u64 %44
+                32    %46 = load_const (0x00000003)
+                64    %47 = ishl %45, %46 (0x3)
+                64    %48 = iadd %28, %47
+                64    %49 = @load_global (%48) (access=none, align_mul=8, align_offset=0)
+                            // succs: b14
+            } else {
+                block b13:  // preds: b11
+                64    %50 = u2u64 %44
+                32    %51 = load_const (0x00000003)
+                64    %52 = ishl %50, %51 (0x3)
+                64    %53 = iadd %28, %52
+                32x4  %54 = @load_global (%53) (access=none, align_mul=8, align_offset=0)
+                64    %55 = pack_64_2x32 %54.zw
+                64    %56 = pack_64_2x32 %54.xy
+                64    %57 = ineg %56
+                64    %58 = iadd %55, %57
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13
+            64    %59 = phi b12: %49, b13: %58
+            64    %60 = load_const (0x0000000000000000)
+            1     %61 = ieq %29, %12 (0x0)
+            1     %62 = iand %22, %61
+            64    %63 = bcsel %62, %60 (0x0), %59
+            1     %64 = inot %13
+                        // succs: b15 b16
+            if %64 {
+                block b15:  // preds: b14
+                32    %65 = u2u32 %63
+                64    %66 = u2u64 %41
+                64    %67 = iadd %0, %27
+                64    %68 = ishl %66, %14 (0x2)
+                64    %69 = iadd %67, %68
+                            @store_global (%65, %69) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b17
+            } else {
+                block b16:  // preds: b14
+                64    %70 = u2u64 %41
+                64    %71 = iadd %0, %27
+                32    %72 = load_const (0x00000003)
+                64    %73 = ishl %70, %72 (0x3)
+                64    %74 = iadd %71, %73
+                            @store_global (%63, %74) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b17
+            }
+            block b17:  // preds: b15 b16
+            32    %75 = iadd %41, %10 (0x1)
+                        // succs: b8
+        }
+        block b18:  // preds: b9, succs: b20
+    } else {
+        block b19:  // preds: b0, succs: b20
+    }
+    block b20:  // preds: b18 b19, succs: b21
+    block b21:
+   */
+   static const uint32_t impl_0_nir[336] = {
+    0x00000062, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000a, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000a, 0xe4001744,
+    0xc4011744, 0xe4021744, 0xc4031744, 0xc4041744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0x243a6000, 0x00000000, 0x0006000a, 0x00000001,
+    0x0000002c, 0x00000000, 0x00000005, 0x00000000,
+    0x00000015, 0x00003605, 0xc4322000, 0x00000000,
+    0x000d0009, 0x00000e05, 0x24345000, 0x00000000,
+    0x000f000e, 0x00005605, 0xc4322000, 0x00000000,
+    0x00110009, 0x24345000, 0x00000000, 0x000f0012,
+    0x00009605, 0xc4322000, 0x00000000, 0x00140009,
+    0x24327000, 0x00000000, 0x000f0015, 0x00011605,
+    0xc4322000, 0x00000000, 0x00170009, 0x24345000,
+    0x00000000, 0x000f0018, 0xc431f000, 0x00000000,
+    0x000a0005, 0xc433f000, 0x00000000, 0x0007001a,
+    0xe438f000, 0x00000000, 0x0000001b, 0xc433f000,
+    0x00000000, 0x0003000a, 0xe438f000, 0x00000000,
+    0x0000001d, 0xe431f000, 0x00000000, 0x001c0004,
+    0xc4005354, 0x0000007c, 0x00000400, 0xe438f000,
+    0x00000000, 0x00000020, 0x00000001, 0x0000004c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000001,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x0000008c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001e0002, 0xe4351000,
+    0x00000000, 0x00110025, 0xe431f000, 0x00000000,
+    0x00270026, 0x00006894, 0x00000080, 0x000000a0,
+    0x00040001, 0x00000001, 0x00000000, 0x00000006,
+    0xe438f000, 0x00000000, 0x00000008, 0xe431f000,
+    0x00000000, 0x001e0002, 0x00007605, 0xe4351000,
+    0x00000000, 0x002c002a, 0xe431f000, 0x00000000,
+    0x002d002b, 0x00006894, 0x00000084, 0x000000b8,
+    0x00080001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0x00000000, 0x00000007, 0x00000000,
+    0x00000002, 0xc4000028, 0x0000000f, 0x00000031,
+    0x0000005e, 0x0000005d, 0x243a0000, 0x00000000,
+    0x00080033, 0x00000001, 0x000000d0, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0xc4351000, 0x00000000, 0x000d0033,
+    0xc431f000, 0x00000000, 0x0038000d, 0x00000001,
+    0x00000058, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x003c003b,
+    0xe431f000, 0x00000000, 0x003d001f, 0xe4005354,
+    0x000000f8, 0x00000800, 0x00000001, 0x00000000,
+    0x00000009, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x00420041,
+    0xe431f000, 0x00000000, 0x0043001f, 0xd0005354,
+    0x00000110, 0x00000800, 0xe4168000, 0x00000000,
+    0x5e000114, 0xe4368000, 0x00000000, 0x00000045,
+    0xe4349000, 0x00000000, 0x00000047, 0xe431f000,
+    0x00000000, 0x00480046, 0x00000000, 0x00000006,
+    0xe4000028, 0x0000003f, 0x0000003a, 0x00000049,
+    0x00000040, 0x00000f05, 0x24327000, 0x00000000,
+    0x000f0020, 0x24322000, 0x00000000, 0x004d0019,
+    0xe4273000, 0x00000000, 0x004c004e, 0x0000004b,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x00000140, 0x00000000, 0x00000001, 0x00000000,
+    0x00000006, 0xc438e000, 0x00000000, 0x0000004f,
+    0xe438f000, 0x00000000, 0x00000033, 0xe431f000,
+    0x00000000, 0x001e0002, 0xe4351000, 0x00000000,
+    0x00110053, 0xe431f000, 0x00000000, 0x00550054,
+    0x00006894, 0x00000148, 0x00000158, 0x00040001,
+    0x00000001, 0x00000000, 0x00000006, 0xe438f000,
+    0x00000000, 0x00000033, 0xe431f000, 0x00000000,
+    0x001e0002, 0x00007605, 0xe4351000, 0x00000000,
+    0x005a0058, 0xe431f000, 0x00000000, 0x005b0059,
+    0x00006894, 0x0000013c, 0x00000170, 0x00080001,
+    0x00000000, 0x00000001, 0xc431f000, 0x00000000,
+    0x000d0033, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+   nir_def *args[10] = { destination_base, destination_stride, query_data, first_query, num_queries, query_data_offset, query_stride, num_query_items, copy_flags, copy_item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx12_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx12_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = @load_param (param_idx=3)
+    32     %5 = load_const (0x00000004)
+    32     %6 = load_const (0x00000002)
+    32     %7 = ishl %4, %6 (0x2)
+    64     %8 = u2u64 %7
+    32     %9 = iadd %4, %5 (0x4)
+    1     %10 = ult %3, %9
+                // succs: b1 b11
+    if %10 {
+        block b1:   // preds: b0
+        32    %11 = load_const (0x00000003)
+        32    %12 = iadd %4, %11 (0x3)
+        1     %13 = ult %3, %12
+                    // succs: b2 b9
+        if %13 {
+            block b2:   // preds: b1
+            32    %14 = iadd %4, %6 (0x2)
+            1     %15 = ult %3, %14
+                        // succs: b3 b7
+            if %15 {
+                block b3:   // preds: b2
+                32    %16 = load_const (0x00000001)
+                32    %17 = iadd %4, %16 (0x1)
+                1     %18 = uge %3, %17
+                            // succs: b4 b5
+                if %18 {
+                    block b4:   // preds: b3
+                    64    %19 = iadd %2, %8
+                    32    %20 = @load_global (%19) (access=none, align_mul=4, align_offset=0)
+                    64    %21 = iadd %1, %8
+                                @store_global (%20, %21) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                // succs: b6
+                } else {
+                    block b5:  // preds: b3, succs: b6
+                }
+                block b6:  // preds: b4 b5, succs: b8
+            } else {
+                block b7:   // preds: b2
+                64    %22 = iadd %2, %8
+                32x2  %23 = @load_global (%22) (access=none, align_mul=8, align_offset=0)
+                64    %24 = iadd %1, %8
+                            @store_global (%23, %24) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                            // succs: b8
+            }
+            block b8:  // preds: b6 b7, succs: b10
+        } else {
+            block b9:   // preds: b1
+            64    %25 = iadd %2, %8
+            32x4  %26 = @load_global (%25) (access=none, align_mul=16, align_offset=0)
+            32x4  %27 = vec4 %26.x, %26.y, %26.z, %0
+            64    %28 = iadd %1, %8
+                        @store_global (%27, %28) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                        // succs: b10
+        }
+        block b10:  // preds: b8 b9, succs: b12
+    } else {
+        block b11:  // preds: b0
+        64    %29 = iadd %2, %8
+        32x4  %30 = @load_global (%29) (access=none, align_mul=16, align_offset=0)
+        64    %31 = iadd %1, %8
+                    @store_global (%30, %31) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                    // succs: b12
+    }
+    block b12:  // preds: b10 b11, succs: b13
+    block b13:
+   */
+   static const uint32_t impl_0_nir[168] = {
+    0x0000002e, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000004, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000b, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0xc4031744,
+    0x00009605, 0x00005605, 0xc4351000, 0x00000000,
+    0x00080006, 0xe438f000, 0x00000000, 0x00000009,
+    0xc431f000, 0x00000000, 0x00070006, 0x243a6000,
+    0x00000000, 0x000b0005, 0x00000001, 0x00000030,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00007605, 0xc431f000, 0x00000000, 0x000e0006,
+    0x243a6000, 0x00000000, 0x000f0005, 0x00000001,
+    0x00000040, 0x00000000, 0x00000003, 0x00000000,
+    0x00000002, 0xc431f000, 0x00000000, 0x00080006,
+    0x243a6000, 0x00000000, 0x00120005, 0x00000001,
+    0x0000004c, 0x00000000, 0x00000003, 0x00000000,
+    0x00000003, 0x00003605, 0xc431f000, 0x00000000,
+    0x00150006, 0x243a0000, 0x00000000, 0x00160005,
+    0x00000001, 0x0000005c, 0x00000000, 0x00000001,
+    0x00000000, 0x00000004, 0xe431f000, 0x00000000,
+    0x000a0004, 0xc4005354, 0x00000064, 0x00000400,
+    0xe431f000, 0x00000000, 0x000a0003, 0x00006894,
+    0x00000068, 0x0000006c, 0x00040001, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x00000004, 0xe431f000,
+    0x00000000, 0x000a0004, 0xc8005354, 0x0000007c,
+    0x00000800, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000080, 0x00000084, 0x00080003,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x00000090, 0x00001000, 0xd01d3000,
+    0x00000000, 0xe4000094, 0xe5000094, 0xe6000094,
+    0xe4000008, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000098, 0x0000009c, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000004, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x000000a8, 0x00001000, 0xe431f000,
+    0x00000000, 0x000a0003, 0x00006894, 0x000000ac,
+    0x000000b0, 0x0010000f, 0x00000000, 0x00000000,
+};
+   nir_def *args[4] = { dst_base, src_base, num_dwords, dword_offset };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx12_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+void
+gfx12_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = load_const (0x00000000)
+                // succs: b1
+    loop {
+        block b1:   // preds: b0 b16
+        32     %5 = phi b0: %4 (0x0), b16: %8
+        1      %6 = uge %5, %3
+                    // succs: b2 b3
+        if %6 {
+            block b2:// preds: b1
+            break
+            // succs: b17
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:   // preds: b3
+        32     %7 = load_const (0x00000010 = 16)
+        32     %8 = iadd %5, %7 (0x10)
+        1      %9 = ult %3, %8
+                    // succs: b5 b15
+        if %9 {
+            block b5:   // preds: b4
+            32    %10 = load_const (0x0000000c = 12)
+            32    %11 = iadd %5, %10 (0xc)
+            1     %12 = ult %3, %11
+                        // succs: b6 b13
+            if %12 {
+                block b6:   // preds: b5
+                32    %13 = load_const (0x00000008)
+                32    %14 = iadd %5, %13 (0x8)
+                1     %15 = ult %3, %14
+                            // succs: b7 b11
+                if %15 {
+                    block b7:   // preds: b6
+                    32    %16 = load_const (0x00000004)
+                    32    %17 = iadd %5, %16 (0x4)
+                    1     %18 = uge %3, %17
+                                // succs: b8 b9
+                    if %18 {
+                        block b8:   // preds: b7
+                        64    %19 = u2u64 %5
+                        64    %20 = iadd %2, %19
+                        32    %21 = @load_global (%20) (access=none, align_mul=4, align_offset=0)
+                        64    %22 = iadd %1, %19
+                                    @store_global (%21, %22) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                    // succs: b10
+                    } else {
+                        block b9:  // preds: b7, succs: b10
+                    }
+                    block b10:  // preds: b8 b9, succs: b12
+                } else {
+                    block b11:  // preds: b6
+                    64    %23 = u2u64 %5
+                    64    %24 = iadd %2, %23
+                    32x2  %25 = @load_global (%24) (access=none, align_mul=8, align_offset=0)
+                    64    %26 = iadd %1, %23
+                                @store_global (%25, %26) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                                // succs: b12
+                }
+                block b12:  // preds: b10 b11, succs: b14
+            } else {
+                block b13:  // preds: b5
+                64    %27 = u2u64 %5
+                64    %28 = iadd %2, %27
+                32x4  %29 = @load_global (%28) (access=none, align_mul=16, align_offset=0)
+                64    %30 = iadd %1, %27
+                32x4  %31 = vec4 %29.x, %29.y, %29.z, %0
+                            @store_global (%31, %30) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13, succs: b16
+        } else {
+            block b15:  // preds: b4
+            64    %32 = u2u64 %5
+            64    %33 = iadd %2, %32
+            32x4  %34 = @load_global (%33) (access=none, align_mul=16, align_offset=0)
+            64    %35 = iadd %1, %32
+                        @store_global (%34, %35) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                        // succs: b16
+        }
+        block b16:  // preds: b14 b15, succs: b1
+    }
+    block b17:  // preds: b2, succs: b18
+    block b18:
+   */
+   static const uint32_t impl_0_nir[197] = {
+    0x00000037, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000003, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x00000005, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0x00000e05,
+    0x00000002, 0x00000000, 0x00000005, 0x00000000,
+    0x00000002, 0xc4000028, 0x00000006, 0x00000001,
+    0x0000000e, 0x00000035, 0x243a0000, 0x00000000,
+    0x00050008, 0x00000001, 0x00000024, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000003, 0x00021605, 0xc431f000, 0x00000000,
+    0x000d0008, 0x243a6000, 0x00000000, 0x000e0005,
+    0x00000001, 0x0000003c, 0x00000000, 0x00000003,
+    0x00000000, 0x00000003, 0x00019605, 0xc431f000,
+    0x00000000, 0x00110008, 0x243a6000, 0x00000000,
+    0x00120005, 0x00000001, 0x0000004c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000003, 0x00011605,
+    0xc431f000, 0x00000000, 0x00150008, 0x243a6000,
+    0x00000000, 0x00160005, 0x00000001, 0x0000005c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00009605, 0xc431f000, 0x00000000, 0x00190008,
+    0x243a0000, 0x00000000, 0x001a0005, 0x00000001,
+    0x0000006c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001d0004, 0xc4005354,
+    0x00000078, 0x00000400, 0xe431f000, 0x00000000,
+    0x001d0003, 0x00006894, 0x0000007c, 0x00000080,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00240004, 0xc8005354,
+    0x00000094, 0x00000800, 0xe431f000, 0x00000000,
+    0x00240003, 0x00006894, 0x00000098, 0x0000009c,
+    0x00080003, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000006, 0xe438f000, 0x00000000,
+    0x00000008, 0xe431f000, 0x00000000, 0x002a0004,
+    0xd0005354, 0x000000ac, 0x00001000, 0xe431f000,
+    0x00000000, 0x002a0003, 0xd01d3000, 0x00000000,
+    0xe40000b0, 0xe50000b0, 0xe60000b0, 0xe4000008,
+    0x00006894, 0x000000b8, 0x000000b4, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00310004, 0xd0005354,
+    0x000000c8, 0x00001000, 0xe431f000, 0x00000000,
+    0x00310003, 0x00006894, 0x000000cc, 0x000000d0,
+    0x0010000f, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[3] = { dst_ptr, src_ptr, size };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
+struct vtn_bindgen_dummy {
+   vtn_bindgen_dummy() {
+      /* Format strings:
+       *
+       */
+const uint32_t printf_0_blob[1] = {
+    0x00000000,
+};
+      u_printf_singleton_init_or_ref();
+      u_printf_singleton_add_serialized((const void*)printf_0_blob, sizeof(printf_0_blob));
+   }
+
+   ~vtn_bindgen_dummy() {
+      u_printf_singleton_decref();
+   }
+};
+
+static vtn_bindgen_dummy vtn_bindgen_dummy_instance;
diff --git a/src/intel/shaders/intel_gfx120_shaders_binding.h b/src/intel/shaders/intel_gfx120_shaders_binding.h
new file mode 100644
index 00000000000..5d3799b2f35
--- /dev/null
+++ b/src/intel/shaders/intel_gfx120_shaders_binding.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#pragma once
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx12_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx12_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx12_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx12_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id);
+
+void
+gfx12_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx12_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx12_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx12_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx12_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx12_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx12_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
diff --git a/src/intel/shaders/intel_gfx125_shaders_binding.cpp b/src/intel/shaders/intel_gfx125_shaders_binding.cpp
new file mode 100644
index 00000000000..476a54e6743
--- /dev/null
+++ b/src/intel/shaders/intel_gfx125_shaders_binding.cpp
@@ -0,0 +1,3898 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx125_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx125_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count)
+{
+   /*
+    block b0:  // preds:
+    64    %0 = @load_param (param_idx=0)
+    32    %1 = @load_param (param_idx=1)
+    32    %2 = load_const (0x00000002)
+    32    %3 = ishl %1, %2 (0x2)
+    32    %4 = load_const (0xffffffff = -1 = 4294967295)
+    32    %5 = iadd %4 (0xffffffff), %3
+    32    %6 = load_const (0x78080000 = 2013790208)
+    32    %7 = ior %6 (0x78080000), %5
+               @store_global (%7, %0) (wrmask=x, access=none, align_mul=4, align_offset=0)
+               // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[37] = {
+    0x0000000a, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000009, 0xe4001744,
+    0xc4011744, 0x00005605, 0xc4351000, 0x00000000,
+    0x00040003, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00050006, 0x78080e05, 0xc434e000, 0x00000000,
+    0x00070008, 0x00006894, 0x00000024, 0x00000008,
+    0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, buffer_count };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx125_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx125_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    32     %2 = undefined
+    32     %3 = undefined
+    64     %4 = @load_param (param_idx=0)
+    32     %5 = @load_param (param_idx=1)
+    32     %6 = @load_param (param_idx=2)
+    64     %7 = @load_param (param_idx=3)
+    32     %8 = @load_param (param_idx=4)
+    32     %9 = @load_param (param_idx=5)
+    64    %10 = load_const (0x0000000000000004)
+    64    %11 = load_const (0x0000000000000000)
+    1     %12 = ieq %7, %11 (0x0)
+    8     %13 = load_const (0x00)
+    8     %14 = load_const (0x01)
+    32    %15 = load_const (0x00000000)
+    32    %16 = b2i32 %12
+    32    %17 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %18 = iand %3, %17 (0xffffff00)
+    32    %19 = ior %18, %16
+    32    %20 = load_const (0x00000001)
+    32    %21 = load_const (0x00000008)
+    32    %22 = load_const (0x00000100 = 256)
+    32    %23 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %24 = iand %19, %23 (0xffff00ff)
+    32    %25 = ior %24, %22 (0x100)
+    16x2  %26 = unpack_32_2x16 %2
+    32    %27 = u2u32 %26.x
+    32    %28 = load_const (0x00000010 = 16)
+    32    %29 = ishl %27, %28 (0x10)
+    32    %30 = extract_u16 %25, %15 (0x0)
+    32    %31 = ior %30, %29
+    64    %32 = load_const (0x0000000000000008)
+    64    %33 = load_const (0x000000000000000c = 12)
+    32    %34 = iand %1, %17 (0xffffff00)
+    32    %35 = ior %34, %20 (0x1)
+    32    %36 = load_const (0x0000000d = 13)
+    8     %37 = u2u8 %26.y
+    16    %38 = load_const (0x0001)
+    16    %39 = extract_u8 %26.y, %38 (0x1)
+    8     %40 = u2u8 %39
+    32    %41 = u2u32 %37
+    32    %42 = ishl %41, %21 (0x8)
+    32    %43 = iand %35, %23 (0xffff00ff)
+    32    %44 = ior %43, %42
+    32    %45 = u2u32 %40
+    32    %46 = ishl %45, %28 (0x10)
+    32    %47 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32    %48 = iand %44, %47 (0xff00ffff)
+    32    %49 = ior %48, %46
+    8x4   %50 = unpack_32_4x8 %0
+    32    %51 = u2u32 %50.x
+    32    %52 = load_const (0x00000018 = 24)
+    32    %53 = ishl %51, %52 (0x18)
+    32    %54 = load_const (0x00ffffff = 16777215)
+    32    %55 = iand %49, %54 (0xffffff)
+    32    %56 = ior %55, %53
+    32x2  %57 = unpack_64_2x32 %7
+    64    %58 = u2u64 %9
+    8x4   %59 = unpack_32_4x8 %31
+    8     %60 = iand %59.x, %14 (0x1)
+    1     %61 = ine %60, %13 (0x0)
+    64    %62 = b2i64 %61
+    64    %63 = ishl %62, %36 (0xd)
+    64    %64 = ior %58, %63
+    8     %65 = iand %59.y, %14 (0x1)
+    1     %66 = ine %65, %13 (0x0)
+    64    %67 = b2i64 %66
+    32    %68 = load_const (0x0000000e = 14)
+    64    %69 = ishl %67, %68 (0xe)
+    64    %70 = ior %64, %69
+    64    %71 = u2u64 %5
+    64    %72 = ishl %71, %28 (0x10)
+    64    %73 = ior %70, %72
+    8x4   %74 = unpack_32_4x8 %56
+    8     %75 = iand %74.x, %14 (0x1)
+    1     %76 = ine %75, %13 (0x0)
+    64    %77 = b2i64 %76
+    32    %78 = load_const (0x00000019 = 25)
+    64    %79 = ishl %77, %78 (0x19)
+    64    %80 = ior %73, %79
+    64    %81 = u2u64 %6
+    32    %82 = load_const (0x0000001a = 26)
+    64    %83 = ishl %81, %82 (0x1a)
+    64    %84 = ior %80, %83
+    32    %85 = u2u32 %84
+                @store_global (%85, %4) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %86 = u2u32 %7
+    64    %87 = iadd %4, %10 (0x4)
+                @store_global (%86, %87) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %88 = mov %57.y
+    64    %89 = iadd %4, %32 (0x8)
+                @store_global (%88, %89) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %90 = iadd %4, %33 (0xc)
+                @store_global (%8, %90) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[264] = {
+    0x0000005d, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000006, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000005f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0xe4001744,
+    0xc4011744, 0xc4021744, 0xe4031744, 0xc4041744,
+    0xc4051744, 0x00009705, 0x00000f05, 0x24327000,
+    0x00000000, 0x000d0009, 0x00001405, 0x00003405,
+    0x00000e05, 0xc4225000, 0x00000000, 0x0000000e,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00130005,
+    0xc434e000, 0x00000000, 0x00120014, 0x00003605,
+    0x00011605, 0x00201605, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00190015, 0xc434e000, 0x00000000,
+    0x0018001a, 0xa83b8000, 0x00000000, 0x00000004,
+    0xc438e000, 0x00000000, 0x0000001c, 0x00021605,
+    0xc4351000, 0x00000000, 0x001e001d, 0xc4287000,
+    0x00000000, 0x0011001b, 0xc434e000, 0x00000000,
+    0x001f0020, 0x00011705, 0x00019705, 0xc4322000,
+    0x00000000, 0x00130003, 0xc434e000, 0x00000000,
+    0x00160024, 0x0001b605, 0x84390100, 0x00000000,
+    0x0000001c, 0x00003505, 0xa4288100, 0x00000000,
+    0x0028001c, 0x84390000, 0x00000000, 0x00000029,
+    0xc438e000, 0x00000000, 0x00000027, 0xc4351000,
+    0x00000000, 0x0017002b, 0xc4322000, 0x00000000,
+    0x00190025, 0xc434e000, 0x00000000, 0x002c002d,
+    0xc438e000, 0x00000000, 0x0000002a, 0xc4351000,
+    0x00000000, 0x001e002f, 0x00000605, 0xff00ffff,
+    0xc4322000, 0x00000000, 0x0031002e, 0xc434e000,
+    0x00000000, 0x00300032, 0x903bb000, 0x00000000,
+    0x00000002, 0xc438e000, 0x00000000, 0x00000034,
+    0x00031605, 0xc4351000, 0x00000000, 0x00360035,
+    0x00000605, 0x00ffffff, 0xc4322000, 0x00000000,
+    0x00380033, 0xc434e000, 0x00000000, 0x00370039,
+    0xc83bc000, 0x00000000, 0x00000009, 0xe438f000,
+    0x00000000, 0x0000000b, 0x903bb000, 0x00000000,
+    0x00000021, 0x84322000, 0x00000000, 0x0010003d,
+    0x24345000, 0x00000000, 0x000f003e, 0xe4226000,
+    0x00000000, 0x0000003f, 0xe4351000, 0x00000000,
+    0x00260040, 0xe434e000, 0x00000000, 0x0041003c,
+    0x84322100, 0x00000000, 0x0010003d, 0x24345000,
+    0x00000000, 0x000f0043, 0xe4226000, 0x00000000,
+    0x00000044, 0x0001d605, 0xe4351000, 0x00000000,
+    0x00460045, 0xe434e000, 0x00000000, 0x00470042,
+    0xe438f000, 0x00000000, 0x00000007, 0xe4351000,
+    0x00000000, 0x001e0049, 0xe434e000, 0x00000000,
+    0x004a0048, 0x903bb000, 0x00000000, 0x0000003a,
+    0x84322000, 0x00000000, 0x0010004c, 0x24345000,
+    0x00000000, 0x000f004d, 0xe4226000, 0x00000000,
+    0x0000004e, 0x00033605, 0xe4351000, 0x00000000,
+    0x0050004f, 0xe434e000, 0x00000000, 0x0051004b,
+    0xe438f000, 0x00000000, 0x00000008, 0x00035605,
+    0xe4351000, 0x00000000, 0x00540053, 0xe434e000,
+    0x00000000, 0x00550052, 0xc438e000, 0x00000000,
+    0x00000056, 0x00006894, 0x0000015c, 0x00000018,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000009,
+    0xe431f000, 0x00000000, 0x000c0006, 0x00006894,
+    0x00000160, 0x00000164, 0x00040001, 0xc435a100,
+    0x00000000, 0x0000003b, 0xe431f000, 0x00000000,
+    0x00220006, 0x00006894, 0x00000168, 0x0000016c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230006,
+    0x00006894, 0x00000028, 0x00000170, 0x00040001,
+};
+   nir_def *args[6] = { dst_ptr, mocs, buffer_idx, address, size, stride };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx125_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx125_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    64      %3 = @load_param (param_idx=0)
+    1       %4 = @load_param (param_idx=1)
+    1       %5 = @load_param (param_idx=2)
+    1       %6 = @load_param (param_idx=3)
+    32      %7 = @load_param (param_idx=4)
+    32      %8 = @load_param (param_idx=5)
+    32      %9 = @load_param (param_idx=6)
+    32     %10 = @load_param (param_idx=7)
+    32     %11 = @load_param (param_idx=8)
+    8      %12 = load_const (0x00)
+    8      %13 = load_const (0x01)
+    64     %14 = load_const (0x0000000000000004)
+    32     %15 = b2i32 %4
+    32     %16 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %17 = iand %2, %16 (0xffffff00)
+    32     %18 = ior %17, %15
+    32     %19 = load_const (0x00000008)
+    32     %20 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %21 = iand %18, %20 (0xffff00ff)
+    32     %22 = load_const (0x00000010 = 16)
+    32     %23 = load_const (0xff00ffff = -16711681 = 4278255615)
+    8x4    %24 = unpack_32_4x8 %1
+    32     %25 = u2u32 %24.x
+    32     %26 = load_const (0x00000018 = 24)
+    32     %27 = ishl %25, %26 (0x18)
+    32     %28 = load_const (0x00ffffff = 16777215)
+    32     %29 = load_const (0x00000000)
+    32     %30 = extract_u16 %21, %29 (0x0)
+    32     %31 = ior %30, %27
+    64     %32 = load_const (0x0000000000000008)
+    64     %33 = load_const (0x000000000000000c = 12)
+    64     %34 = load_const (0x0000000000000010 = 16)
+    64     %35 = load_const (0x0000000000000014 = 20)
+    64     %36 = load_const (0x0000000000000018 = 24)
+    16     %37 = u2u16 %24.y
+    16     %38 = u2u16 %24.z
+    16     %39 = ishl %38, %19 (0x8)
+    16     %40 = ior %37, %39
+    8      %41 = u2u8 %40
+    16     %42 = load_const (0x0001)
+    16     %43 = extract_u8 %40, %42 (0x1)
+    8      %44 = u2u8 %43
+    32     %45 = u2u32 %41
+    32     %46 = ishl %45, %19 (0x8)
+    32     %47 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %48 = iand %47 (0xffff0000), %0
+    32     %49 = ior %48, %46
+    32     %50 = u2u32 %44
+    32     %51 = ishl %50, %22 (0x10)
+    32     %52 = iand %49, %23 (0xff00ffff)
+    32     %53 = ior %52, %51
+    32     %54 = u2u32 %24.w
+    32     %55 = ishl %54, %26 (0x18)
+    32     %56 = iand %53, %28 (0xffffff)
+    32     %57 = ior %56, %55
+    8x4    %58 = unpack_32_4x8 %31
+    8      %59 = iand %58.x, %13 (0x1)
+    1      %60 = ine %59, %12 (0x0)
+    64     %61 = b2i64 %60
+    64     %62 = ishl %61, %19 (0x8)
+    32     %63 = unpack_64_2x32_split_x %62
+    32     %64 = load_const (0x00000005)
+    32     %65 = ior %63, %64 (0x5)
+    32     %66 = unpack_64_2x32_split_y %62
+    64     %67 = pack_64_2x32_split %65, %66
+    8      %68 = iand %58.y, %13 (0x1)
+    1      %69 = ine %68, %12 (0x0)
+    64     %70 = b2i64 %69
+    32     %71 = load_const (0x00000009)
+    64     %72 = ishl %70, %71 (0x9)
+    64     %73 = ior %67, %72
+    8      %74 = iand %58.z, %13 (0x1)
+    1      %75 = ine %74, %12 (0x0)
+    64     %76 = b2i64 %75
+    32     %77 = load_const (0x0000000a = 10)
+    64     %78 = ishl %76, %77 (0xa)
+    64     %79 = ior %73, %78
+    64     %80 = b2i64 %6
+    32     %81 = load_const (0x0000000d = 13)
+    64     %82 = ishl %80, %81 (0xd)
+    64     %83 = ior %79, %82
+    32     %84 = unpack_64_2x32_split_x %83
+    32     %85 = load_const (0x7b000000 = 2063597568)
+    32     %86 = ior %85 (0x7b000000), %84
+                 @store_global (%86, %3) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %87 = b2i64 %5
+    64     %88 = ishl %87, %19 (0x8)
+    8x4    %89 = unpack_32_4x8 %57
+    8      %90 = iand %89.x, %13 (0x1)
+    1      %91 = ine %90, %12 (0x0)
+    64     %92 = b2i64 %91
+    64     %93 = ishl %92, %71 (0x9)
+    64     %94 = ior %88, %93
+    32     %95 = u2u32 %94
+    64     %96 = iadd %3, %14 (0x4)
+                 @store_global (%95, %96) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %97 = iadd %3, %32 (0x8)
+                 @store_global (%7, %97) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %98 = iadd %3, %33 (0xc)
+                 @store_global (%8, %98) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %99 = iadd %3, %34 (0x10)
+                 @store_global (%9, %99) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %100 = iadd %3, %35 (0x14)
+                 @store_global (%10, %100) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %101 = iadd %3, %36 (0x18)
+                 @store_global (%11, %101) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                 // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[313] = {
+    0x00000068, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000006d, 0x00000607,
+    0x00000607, 0x00000607, 0xe4001744, 0x24011744,
+    0x24021744, 0x24031744, 0xc4041744, 0xc4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0x00001405,
+    0x00003405, 0x00009705, 0xc4225000, 0x00000000,
+    0x00000006, 0xffe01605, 0xc4322000, 0x00000000,
+    0x00120004, 0xc434e000, 0x00000000, 0x00110013,
+    0x00011605, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x00160014, 0x00021605, 0x00000605, 0xff00ffff,
+    0x903bb000, 0x00000000, 0x00000003, 0xc438e000,
+    0x00000000, 0x0000001a, 0x00031605, 0xc4351000,
+    0x00000000, 0x001c001b, 0x00000605, 0x00ffffff,
+    0x00000e05, 0xc4287000, 0x00000000, 0x001f0017,
+    0xc434e000, 0x00000000, 0x001d0020, 0x00011705,
+    0x00019705, 0x00021705, 0x00029705, 0x00031705,
+    0xa438d100, 0x00000000, 0x0000001a, 0xa438d200,
+    0x00000000, 0x0000001a, 0xa4351000, 0x00000000,
+    0x00150028, 0xa434e000, 0x00000000, 0x00290027,
+    0x84390000, 0x00000000, 0x0000002a, 0x00003505,
+    0xa4288000, 0x00000000, 0x002c002a, 0x84390000,
+    0x00000000, 0x0000002d, 0xc438e000, 0x00000000,
+    0x0000002b, 0xc4351000, 0x00000000, 0x0015002f,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x00020031,
+    0xc434e000, 0x00000000, 0x00300032, 0xc438e000,
+    0x00000000, 0x0000002e, 0xc4351000, 0x00000000,
+    0x00180034, 0xc4322000, 0x00000000, 0x00190033,
+    0xc434e000, 0x00000000, 0x00350036, 0xc438e300,
+    0x00000000, 0x0000001a, 0xc4351000, 0x00000000,
+    0x001c0038, 0xc4322000, 0x00000000, 0x001e0037,
+    0xc434e000, 0x00000000, 0x0039003a, 0x903bb000,
+    0x00000000, 0x00000021, 0x84322000, 0x00000000,
+    0x000f003c, 0x24345000, 0x00000000, 0x000e003d,
+    0xe4226000, 0x00000000, 0x0000003e, 0xe4351000,
+    0x00000000, 0x0015003f, 0xc43bd000, 0x00000000,
+    0x00000040, 0x0000b605, 0xc434e000, 0x00000000,
+    0x00420041, 0xc43be000, 0x00000000, 0x00000040,
+    0xe4369000, 0x00000000, 0x00440043, 0x84322100,
+    0x00000000, 0x000f003c, 0x24345000, 0x00000000,
+    0x000e0046, 0xe4226000, 0x00000000, 0x00000047,
+    0x00013605, 0xe4351000, 0x00000000, 0x00490048,
+    0xe434e000, 0x00000000, 0x004a0045, 0x84322200,
+    0x00000000, 0x000f003c, 0x24345000, 0x00000000,
+    0x000e004c, 0xe4226000, 0x00000000, 0x0000004d,
+    0x00015605, 0xe4351000, 0x00000000, 0x004f004e,
+    0xe434e000, 0x00000000, 0x0050004b, 0xe4226000,
+    0x00000000, 0x00000008, 0x0001b605, 0xe4351000,
+    0x00000000, 0x00530052, 0xe434e000, 0x00000000,
+    0x00540051, 0xc43bd000, 0x00000000, 0x00000055,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x00560057,
+    0x00006894, 0x00000160, 0x00000014, 0x00040001,
+    0xe4226000, 0x00000000, 0x00000007, 0xe4351000,
+    0x00000000, 0x00150059, 0x903bb000, 0x00000000,
+    0x0000003b, 0x84322000, 0x00000000, 0x000f005b,
+    0x24345000, 0x00000000, 0x000e005c, 0xe4226000,
+    0x00000000, 0x0000005d, 0xe4351000, 0x00000000,
+    0x0049005e, 0xe434e000, 0x00000000, 0x005f005a,
+    0xc438e000, 0x00000000, 0x00000060, 0xe431f000,
+    0x00000000, 0x00100005, 0x00006894, 0x00000184,
+    0x00000188, 0x00040001, 0xe431f000, 0x00000000,
+    0x00220005, 0x00006894, 0x00000024, 0x0000018c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230005,
+    0x00006894, 0x00000028, 0x00000190, 0x00040001,
+    0xe431f000, 0x00000000, 0x00240005, 0x00006894,
+    0x0000002c, 0x00000194, 0x00040001, 0xe431f000,
+    0x00000000, 0x00250005, 0x00006894, 0x00000030,
+    0x00000198, 0x00040001, 0xe431f000, 0x00000000,
+    0x00260005, 0x00006894, 0x00000034, 0x0000019c,
+    0x00040001,
+};
+   nir_def *args[9] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx125_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id);
+
+void
+gfx125_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    64      %3 = @load_param (param_idx=0)
+    1       %4 = @load_param (param_idx=1)
+    1       %5 = @load_param (param_idx=2)
+    1       %6 = @load_param (param_idx=3)
+    32      %7 = @load_param (param_idx=4)
+    32      %8 = @load_param (param_idx=5)
+    32      %9 = @load_param (param_idx=6)
+    32     %10 = @load_param (param_idx=7)
+    32     %11 = @load_param (param_idx=8)
+    32     %12 = @load_param (param_idx=9)
+    32     %13 = @load_param (param_idx=10)
+    32     %14 = @load_param (param_idx=11)
+    8      %15 = load_const (0x00)
+    8      %16 = load_const (0x01)
+    32     %17 = load_const (0x00000008)
+    64     %18 = load_const (0x0000000000000004)
+    32     %19 = b2i32 %4
+    32     %20 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %21 = iand %2, %20 (0xffffff00)
+    32     %22 = ior %21, %19
+    32     %23 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %24 = iand %22, %23 (0xffff00ff)
+    32     %25 = load_const (0x00000010 = 16)
+    32     %26 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32     %27 = load_const (0x00000018 = 24)
+    32     %28 = load_const (0x01000000 = 16777216)
+    32     %29 = load_const (0x00ffffff = 16777215)
+    32     %30 = load_const (0x00000000)
+    32     %31 = extract_u16 %24, %30 (0x0)
+    32     %32 = ior %31, %28 (0x1000000)
+    64     %33 = load_const (0x0000000000000008)
+    64     %34 = load_const (0x000000000000000c = 12)
+    64     %35 = load_const (0x0000000000000010 = 16)
+    64     %36 = load_const (0x0000000000000014 = 20)
+    64     %37 = load_const (0x0000000000000018 = 24)
+    64     %38 = load_const (0x000000000000001c = 28)
+    64     %39 = load_const (0x0000000000000020 = 32)
+    64     %40 = load_const (0x0000000000000024 = 36)
+    16x2   %41 = unpack_32_2x16 %0
+    8      %42 = u2u8 %41.x
+    16     %43 = load_const (0x0001)
+    16     %44 = extract_u8 %41.x, %43 (0x1)
+    8      %45 = u2u8 %44
+    32     %46 = u2u32 %42
+    32     %47 = ishl %46, %17 (0x8)
+    32     %48 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %49 = iand %48 (0xffff0000), %1
+    32     %50 = ior %49, %47
+    32     %51 = u2u32 %45
+    32     %52 = ishl %51, %25 (0x10)
+    32     %53 = iand %50, %26 (0xff00ffff)
+    32     %54 = ior %53, %52
+    8x4    %55 = unpack_32_4x8 %0
+    32     %56 = u2u32 %55.z
+    32     %57 = ishl %56, %27 (0x18)
+    32     %58 = iand %54, %29 (0xffffff)
+    32     %59 = ior %58, %57
+    8x4    %60 = unpack_32_4x8 %32
+    8      %61 = iand %60.x, %16 (0x1)
+    1      %62 = ine %61, %15 (0x0)
+    64     %63 = b2i64 %62
+    64     %64 = ishl %63, %17 (0x8)
+    32     %65 = unpack_64_2x32_split_x %64
+    32     %66 = ior %65, %17 (0x8)
+    32     %67 = unpack_64_2x32_split_y %64
+    64     %68 = pack_64_2x32_split %66, %67
+    8      %69 = iand %60.y, %16 (0x1)
+    1      %70 = ine %69, %15 (0x0)
+    64     %71 = b2i64 %70
+    32     %72 = load_const (0x00000009)
+    64     %73 = ishl %71, %72 (0x9)
+    64     %74 = ior %68, %73
+    8      %75 = iand %60.z, %16 (0x1)
+    1      %76 = ine %75, %15 (0x0)
+    64     %77 = b2i64 %76
+    32     %78 = load_const (0x0000000a = 10)
+    64     %79 = ishl %77, %78 (0xa)
+    64     %80 = ior %74, %79
+    8      %81 = iand %60.w, %16 (0x1)
+    1      %82 = ine %81, %15 (0x0)
+    64     %83 = b2i64 %82
+    32     %84 = load_const (0x0000000b = 11)
+    64     %85 = ishl %83, %84 (0xb)
+    64     %86 = ior %80, %85
+    64     %87 = b2i64 %6
+    32     %88 = load_const (0x0000000d = 13)
+    64     %89 = ishl %87, %88 (0xd)
+    64     %90 = ior %86, %89
+    32     %91 = unpack_64_2x32_split_x %90
+    32     %92 = load_const (0x7b000000 = 2063597568)
+    32     %93 = ior %92 (0x7b000000), %91
+                 @store_global (%93, %3) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %94 = b2i64 %5
+    64     %95 = ishl %94, %17 (0x8)
+    8x4    %96 = unpack_32_4x8 %59
+    8      %97 = iand %96.x, %16 (0x1)
+    1      %98 = ine %97, %15 (0x0)
+    64     %99 = b2i64 %98
+    64    %100 = ishl %99, %72 (0x9)
+    64    %101 = ior %95, %100
+    32    %102 = u2u32 %101
+    64    %103 = iadd %3, %18 (0x4)
+                 @store_global (%102, %103) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %104 = iadd %3, %33 (0x8)
+                 @store_global (%7, %104) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %105 = iadd %3, %34 (0xc)
+                 @store_global (%8, %105) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %106 = iadd %3, %35 (0x10)
+                 @store_global (%9, %106) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %107 = iadd %3, %36 (0x14)
+                 @store_global (%10, %107) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %108 = iadd %3, %37 (0x18)
+                 @store_global (%11, %108) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %109 = iadd %3, %38 (0x1c)
+                 @store_global (%12, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %110 = iadd %3, %39 (0x20)
+                 @store_global (%13, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %111 = iadd %3, %40 (0x24)
+                 @store_global (%14, %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                 // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[353] = {
+    0x00000072, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000007a, 0x00000607,
+    0x00000607, 0x00000607, 0xe4001744, 0x24011744,
+    0x24021744, 0x24031744, 0xc4041744, 0xc4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0xc40a1744, 0xc40b1744, 0x00001405, 0x00003405,
+    0x00011605, 0x00009705, 0xc4225000, 0x00000000,
+    0x00000006, 0xffe01605, 0xc4322000, 0x00000000,
+    0x00160004, 0xc434e000, 0x00000000, 0x00150017,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00190018,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0x00000e05,
+    0xc4287000, 0x00000000, 0x0020001a, 0xc434e000,
+    0x00000000, 0x001e0021, 0x00011705, 0x00019705,
+    0x00021705, 0x00029705, 0x00031705, 0x00039705,
+    0x00041705, 0x00049705, 0xa83b8000, 0x00000000,
+    0x00000002, 0x84390000, 0x00000000, 0x0000002b,
+    0x00003505, 0xa4288000, 0x00000000, 0x002d002b,
+    0x84390000, 0x00000000, 0x0000002e, 0xc438e000,
+    0x00000000, 0x0000002c, 0xc4351000, 0x00000000,
+    0x00130030, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x00030032, 0xc434e000, 0x00000000, 0x00310033,
+    0xc438e000, 0x00000000, 0x0000002f, 0xc4351000,
+    0x00000000, 0x001b0035, 0xc4322000, 0x00000000,
+    0x001c0034, 0xc434e000, 0x00000000, 0x00360037,
+    0x903bb000, 0x00000000, 0x00000002, 0xc438e200,
+    0x00000000, 0x00000039, 0xc4351000, 0x00000000,
+    0x001d003a, 0xc4322000, 0x00000000, 0x001f0038,
+    0xc434e000, 0x00000000, 0x003b003c, 0x903bb000,
+    0x00000000, 0x00000022, 0x84322000, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x0011003f,
+    0xe4226000, 0x00000000, 0x00000040, 0xe4351000,
+    0x00000000, 0x00130041, 0xc43bd000, 0x00000000,
+    0x00000042, 0xc434e000, 0x00000000, 0x00130043,
+    0xc43be000, 0x00000000, 0x00000042, 0xe4369000,
+    0x00000000, 0x00450044, 0x84322100, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x00110047,
+    0xe4226000, 0x00000000, 0x00000048, 0x00013605,
+    0xe4351000, 0x00000000, 0x004a0049, 0xe434e000,
+    0x00000000, 0x004b0046, 0x84322200, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x0011004d,
+    0xe4226000, 0x00000000, 0x0000004e, 0x00015605,
+    0xe4351000, 0x00000000, 0x0050004f, 0xe434e000,
+    0x00000000, 0x0051004c, 0x84322300, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x00110053,
+    0xe4226000, 0x00000000, 0x00000054, 0x00017605,
+    0xe4351000, 0x00000000, 0x00560055, 0xe434e000,
+    0x00000000, 0x00570052, 0xe4226000, 0x00000000,
+    0x00000008, 0x0001b605, 0xe4351000, 0x00000000,
+    0x005a0059, 0xe434e000, 0x00000000, 0x005b0058,
+    0xc43bd000, 0x00000000, 0x0000005c, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x005d005e, 0x00006894,
+    0x0000017c, 0x00000014, 0x00040001, 0xe4226000,
+    0x00000000, 0x00000007, 0xe4351000, 0x00000000,
+    0x00130060, 0x903bb000, 0x00000000, 0x0000003d,
+    0x84322000, 0x00000000, 0x00120062, 0x24345000,
+    0x00000000, 0x00110063, 0xe4226000, 0x00000000,
+    0x00000064, 0xe4351000, 0x00000000, 0x004a0065,
+    0xe434e000, 0x00000000, 0x00660061, 0xc438e000,
+    0x00000000, 0x00000067, 0xe431f000, 0x00000000,
+    0x00140005, 0x00006894, 0x000001a0, 0x000001a4,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230005,
+    0x00006894, 0x00000024, 0x000001a8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00240005, 0x00006894,
+    0x00000028, 0x000001ac, 0x00040001, 0xe431f000,
+    0x00000000, 0x00250005, 0x00006894, 0x0000002c,
+    0x000001b0, 0x00040001, 0xe431f000, 0x00000000,
+    0x00260005, 0x00006894, 0x00000030, 0x000001b4,
+    0x00040001, 0xe431f000, 0x00000000, 0x00270005,
+    0x00006894, 0x00000034, 0x000001b8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00280005, 0x00006894,
+    0x00000038, 0x000001bc, 0x00040001, 0xe431f000,
+    0x00000000, 0x00290005, 0x00006894, 0x0000003c,
+    0x000001c0, 0x00040001, 0xe431f000, 0x00000000,
+    0x002a0005, 0x00006894, 0x00000040, 0x000001c4,
+    0x00040001,
+};
+   nir_def *args[12] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location, param_base_vertex, param_base_instance, param_draw_id };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx125_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx125_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    64     %2 = @load_param (param_idx=0)
+    64     %3 = @load_param (param_idx=1)
+    64     %4 = load_const (0x0000000000000004)
+    64     %5 = load_const (0x0000000000000008)
+    8      %6 = load_const (0x00)
+    32     %7 = load_const (0x00000000)
+    32     %8 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %9 = iand %8 (0xffff0000), %1
+    32    %10 = load_const (0x0000000a = 10)
+    16x2  %11 = unpack_32_2x16 %0
+    32    %12 = u2u32 %11.x
+    32    %13 = load_const (0x00000010 = 16)
+    32    %14 = ishl %12, %13 (0x10)
+    32    %15 = extract_u16 %9, %7 (0x0)
+    32    %16 = ior %15, %14
+    8x4   %17 = unpack_32_4x8 %16
+    8     %18 = load_const (0x01)
+    8     %19 = iand %17.x, %18 (0x1)
+    1     %20 = ine %19, %6 (0x0)
+    64    %21 = b2i64 %20
+    64    %22 = ishl %21, %10 (0xa)
+    32    %23 = unpack_64_2x32_split_x %22
+    32    %24 = load_const (0x00000101 = 257)
+    32    %25 = ior %23, %24 (0x101)
+    32    %26 = unpack_64_2x32_split_y %22
+    64    %27 = pack_64_2x32_split %25, %26
+    8     %28 = iand %17.y, %18 (0x1)
+    1     %29 = ine %28, %6 (0x0)
+    64    %30 = b2i64 %29
+    32    %31 = load_const (0x0000000f = 15)
+    64    %32 = ishl %30, %31 (0xf)
+    64    %33 = ior %27, %32
+    32    %34 = unpack_64_2x32_split_x %33
+    32    %35 = load_const (0x18800000 = 411041792)
+    32    %36 = ior %34, %35 (0x18800000)
+                @store_global (%36, %2) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %37 = u2u32 %3
+    64    %38 = iadd %2, %4 (0x4)
+                @store_global (%37, %38) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %39 = unpack_64_2x32_split_y %3
+    64    %40 = iadd %2, %5 (0x8)
+                @store_global (%39, %40) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[124] = {
+    0x0000002b, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002c, 0x00000607,
+    0x00000607, 0xe4001744, 0xe4011744, 0x00009705,
+    0x00011705, 0x00001405, 0x00000e05, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0003000a, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000002, 0xc438e000,
+    0x00000000, 0x0000000d, 0x00021605, 0xc4351000,
+    0x00000000, 0x000f000e, 0xc4287000, 0x00000000,
+    0x0009000b, 0xc434e000, 0x00000000, 0x00100011,
+    0x903bb000, 0x00000000, 0x00000012, 0x00003405,
+    0x84322000, 0x00000000, 0x00140013, 0x24345000,
+    0x00000000, 0x00080015, 0xe4226000, 0x00000000,
+    0x00000016, 0xe4351000, 0x00000000, 0x000c0017,
+    0xc43bd000, 0x00000000, 0x00000018, 0x00203605,
+    0xc434e000, 0x00000000, 0x001a0019, 0xc43be000,
+    0x00000000, 0x00000018, 0xe4369000, 0x00000000,
+    0x001c001b, 0x84322100, 0x00000000, 0x00140013,
+    0x24345000, 0x00000000, 0x0008001e, 0xe4226000,
+    0x00000000, 0x0000001f, 0x0001f605, 0xe4351000,
+    0x00000000, 0x00210020, 0xe434e000, 0x00000000,
+    0x0022001d, 0xc43bd000, 0x00000000, 0x00000023,
+    0x18800e05, 0xc434e000, 0x00000000, 0x00250024,
+    0x00006894, 0x00000098, 0x00000010, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000005, 0xe431f000,
+    0x00000000, 0x00060004, 0x00006894, 0x0000009c,
+    0x000000a0, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x00070004,
+    0x00006894, 0x000000a4, 0x000000a8, 0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, addr };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx125_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx125_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    64      %5 = @load_param (param_idx=0)
+    64      %6 = @load_param (param_idx=1)
+    32      %7 = @load_param (param_idx=3)
+    32      %8 = @load_param (param_idx=4)
+    1       %9 = @load_param (param_idx=5)
+    1      %10 = @load_param (param_idx=6)
+    1      %11 = @load_param (param_idx=7)
+    8      %12 = load_const (0x00)
+    8      %13 = load_const (0x01)
+    1      %14 = inot %9
+                 // succs: b1 b2
+    if %14 {
+        block b1:    // preds: b0
+        32x4   %15 = @load_global (%6) (access=none, align_mul=4, align_offset=0)
+        32     %16 = load_const (0x00000008)
+        32     %17 = mov %15.x
+        64     %18 = load_const (0x0000000000000008)
+        32     %19 = mov %15.z
+        64     %20 = load_const (0x0000000000000004)
+        32     %21 = imul %15.y, %8
+        64     %22 = load_const (0x000000000000000c = 12)
+        32     %23 = mov %15.w
+        32     %24 = load_const (0x00000000)
+        32     %25 = b2i32 %10
+        32     %26 = load_const (0xffffff00 = -256 = 4294967040)
+        32     %27 = iand %4, %26 (0xffffff00)
+        32     %28 = ior %27, %25
+        32     %29 = load_const (0xffff00ff = -65281 = 4294902015)
+        32     %30 = iand %28, %29 (0xffff00ff)
+        32     %31 = load_const (0x00000010 = 16)
+        32     %32 = load_const (0xff00ffff = -16711681 = 4278255615)
+        32     %33 = load_const (0x00000018 = 24)
+        32     %34 = load_const (0x01000000 = 16777216)
+        32     %35 = load_const (0x00ffffff = 16777215)
+        32     %36 = extract_u16 %30, %24 (0x0)
+        32     %37 = ior %36, %34 (0x1000000)
+        64     %38 = load_const (0x0000000000000010 = 16)
+        64     %39 = load_const (0x0000000000000014 = 20)
+        64     %40 = load_const (0x0000000000000018 = 24)
+        64     %41 = load_const (0x000000000000001c = 28)
+        64     %42 = load_const (0x0000000000000020 = 32)
+        64     %43 = load_const (0x0000000000000024 = 36)
+        16x2   %44 = unpack_32_2x16 %2
+        8      %45 = u2u8 %44.x
+        16     %46 = load_const (0x0001)
+        16     %47 = extract_u8 %44.x, %46 (0x1)
+        8      %48 = u2u8 %47
+        32     %49 = u2u32 %45
+        32     %50 = ishl %49, %16 (0x8)
+        32     %51 = load_const (0xffff0000 = -65536 = 4294901760)
+        32     %52 = iand %51 (0xffff0000), %3
+        32     %53 = ior %52, %50
+        32     %54 = u2u32 %48
+        32     %55 = ishl %54, %31 (0x10)
+        32     %56 = iand %53, %32 (0xff00ffff)
+        32     %57 = ior %56, %55
+        8x4    %58 = unpack_32_4x8 %2
+        32     %59 = u2u32 %58.z
+        32     %60 = ishl %59, %33 (0x18)
+        32     %61 = iand %57, %35 (0xffffff)
+        32     %62 = ior %61, %60
+        8x4    %63 = unpack_32_4x8 %37
+        8      %64 = iand %63.x, %13 (0x1)
+        1      %65 = ine %64, %12 (0x0)
+        64     %66 = b2i64 %65
+        64     %67 = ishl %66, %16 (0x8)
+        32     %68 = unpack_64_2x32_split_x %67
+        32     %69 = ior %68, %16 (0x8)
+        32     %70 = unpack_64_2x32_split_y %67
+        64     %71 = pack_64_2x32_split %69, %70
+        8      %72 = iand %63.y, %13 (0x1)
+        1      %73 = ine %72, %12 (0x0)
+        64     %74 = b2i64 %73
+        32     %75 = load_const (0x00000009)
+        64     %76 = ishl %74, %75 (0x9)
+        64     %77 = ior %71, %76
+        8      %78 = iand %63.z, %13 (0x1)
+        1      %79 = ine %78, %12 (0x0)
+        64     %80 = b2i64 %79
+        32     %81 = load_const (0x0000000a = 10)
+        64     %82 = ishl %80, %81 (0xa)
+        64     %83 = ior %77, %82
+        8      %84 = iand %63.w, %13 (0x1)
+        1      %85 = ine %84, %12 (0x0)
+        64     %86 = b2i64 %85
+        32     %87 = load_const (0x0000000b = 11)
+        64     %88 = ishl %86, %87 (0xb)
+        64     %89 = ior %83, %88
+        64     %90 = b2i64 %11
+        32     %91 = load_const (0x0000000d = 13)
+        64     %92 = ishl %90, %91 (0xd)
+        64     %93 = ior %89, %92
+        32     %94 = unpack_64_2x32_split_x %93
+        32     %95 = load_const (0x7b000000 = 2063597568)
+        32     %96 = ior %95 (0x7b000000), %94
+                     @store_global (%96, %5) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64     %97 = b2i64 %9
+        64     %98 = ishl %97, %16 (0x8)
+        8x4    %99 = unpack_32_4x8 %62
+        8     %100 = iand %99.x, %13 (0x1)
+        1     %101 = ine %100, %12 (0x0)
+        64    %102 = b2i64 %101
+        64    %103 = ishl %102, %75 (0x9)
+        64    %104 = ior %98, %103
+        32    %105 = u2u32 %104
+        64    %106 = iadd %5, %20 (0x4)
+                     @store_global (%105, %106) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %107 = iadd %5, %18 (0x8)
+                     @store_global (%17, %107) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %108 = iadd %5, %22 (0xc)
+                     @store_global (%19, %108) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %109 = iadd %5, %38 (0x10)
+                     @store_global (%21, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %110 = iadd %5, %39 (0x14)
+                     @store_global (%23, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %111 = iadd %5, %40 (0x18)
+                     @store_global (%24 (0x0), %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %112 = iadd %5, %41 (0x1c)
+                     @store_global (%19, %112) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %113 = iadd %5, %42 (0x20)
+                     @store_global (%23, %113) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %114 = iadd %5, %43 (0x24)
+                     @store_global (%7, %114) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b3
+    } else {
+        block b2:    // preds: b0
+        32x4  %115 = @load_global (%6) (access=none, align_mul=4, align_offset=0)
+        32    %116 = load_const (0x00000008)
+        64    %117 = load_const (0x0000000000000004)
+        64    %118 = load_const (0x0000000000000010 = 16)
+        64    %119 = iadd %6, %118 (0x10)
+        32    %120 = @load_global (%119) (access=none, align_mul=4, align_offset=0)
+        32    %121 = load_const (0x00000010 = 16)
+        32    %122 = mov %115.x
+        64    %123 = load_const (0x0000000000000008)
+        32    %124 = mov %115.z
+        32    %125 = imul %115.y, %8
+        64    %126 = load_const (0x000000000000000c = 12)
+        32    %127 = mov %115.w
+        32    %128 = b2i32 %10
+        32    %129 = load_const (0xffffff00 = -256 = 4294967040)
+        32    %130 = iand %1, %129 (0xffffff00)
+        32    %131 = ior %130, %128
+        32    %132 = load_const (0xffff00ff = -65281 = 4294902015)
+        32    %133 = iand %131, %132 (0xffff00ff)
+        32    %134 = load_const (0xff00ffff = -16711681 = 4278255615)
+        32    %135 = load_const (0x00000018 = 24)
+        32    %136 = load_const (0x01000000 = 16777216)
+        32    %137 = load_const (0x00ffffff = 16777215)
+        32    %138 = load_const (0x00000000)
+        32    %139 = extract_u16 %133, %138 (0x0)
+        32    %140 = ior %139, %136 (0x1000000)
+        64    %141 = load_const (0x0000000000000014 = 20)
+        64    %142 = load_const (0x0000000000000018 = 24)
+        64    %143 = load_const (0x000000000000001c = 28)
+        64    %144 = load_const (0x0000000000000020 = 32)
+        64    %145 = load_const (0x0000000000000024 = 36)
+        16x2  %146 = unpack_32_2x16 %2
+        8     %147 = u2u8 %146.x
+        16    %148 = load_const (0x0001)
+        16    %149 = extract_u8 %146.x, %148 (0x1)
+        8     %150 = u2u8 %149
+        32    %151 = u2u32 %147
+        32    %152 = ishl %151, %116 (0x8)
+        32    %153 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %154 = iand %153 (0xffff0000), %0
+        32    %155 = ior %154, %152
+        32    %156 = u2u32 %150
+        32    %157 = ishl %156, %121 (0x10)
+        32    %158 = iand %155, %134 (0xff00ffff)
+        32    %159 = ior %158, %157
+        8x4   %160 = unpack_32_4x8 %2
+        32    %161 = u2u32 %160.z
+        32    %162 = ishl %161, %135 (0x18)
+        32    %163 = iand %159, %137 (0xffffff)
+        32    %164 = ior %163, %162
+        8x4   %165 = unpack_32_4x8 %140
+        8     %166 = iand %165.x, %13 (0x1)
+        1     %167 = ine %166, %12 (0x0)
+        64    %168 = b2i64 %167
+        64    %169 = ishl %168, %116 (0x8)
+        32    %170 = unpack_64_2x32_split_x %169
+        32    %171 = ior %170, %116 (0x8)
+        32    %172 = unpack_64_2x32_split_y %169
+        64    %173 = pack_64_2x32_split %171, %172
+        8     %174 = iand %165.y, %13 (0x1)
+        1     %175 = ine %174, %12 (0x0)
+        64    %176 = b2i64 %175
+        32    %177 = load_const (0x00000009)
+        64    %178 = ishl %176, %177 (0x9)
+        64    %179 = ior %173, %178
+        8     %180 = iand %165.z, %13 (0x1)
+        1     %181 = ine %180, %12 (0x0)
+        64    %182 = b2i64 %181
+        32    %183 = load_const (0x0000000a = 10)
+        64    %184 = ishl %182, %183 (0xa)
+        64    %185 = ior %179, %184
+        8     %186 = iand %165.w, %13 (0x1)
+        1     %187 = ine %186, %12 (0x0)
+        64    %188 = b2i64 %187
+        32    %189 = load_const (0x0000000b = 11)
+        64    %190 = ishl %188, %189 (0xb)
+        64    %191 = ior %185, %190
+        64    %192 = b2i64 %11
+        32    %193 = load_const (0x0000000d = 13)
+        64    %194 = ishl %192, %193 (0xd)
+        64    %195 = ior %191, %194
+        32    %196 = unpack_64_2x32_split_x %195
+        32    %197 = load_const (0x7b000000 = 2063597568)
+        32    %198 = ior %197 (0x7b000000), %196
+                     @store_global (%198, %5) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %199 = b2i64 %9
+        64    %200 = ishl %199, %116 (0x8)
+        8x4   %201 = unpack_32_4x8 %164
+        8     %202 = iand %201.x, %13 (0x1)
+        1     %203 = ine %202, %12 (0x0)
+        64    %204 = b2i64 %203
+        64    %205 = ishl %204, %177 (0x9)
+        64    %206 = ior %200, %205
+        32    %207 = u2u32 %206
+        64    %208 = iadd %5, %117 (0x4)
+                     @store_global (%207, %208) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %209 = iadd %5, %123 (0x8)
+                     @store_global (%122, %209) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %210 = iadd %5, %126 (0xc)
+                     @store_global (%124, %210) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %211 = iadd %5, %118 (0x10)
+                     @store_global (%125, %211) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %212 = iadd %5, %141 (0x14)
+                     @store_global (%120, %212) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %213 = iadd %5, %142 (0x18)
+                     @store_global (%127, %213) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %214 = iadd %5, %143 (0x1c)
+                     @store_global (%127, %214) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %215 = iadd %5, %144 (0x20)
+                     @store_global (%120, %215) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %216 = iadd %5, %145 (0x24)
+                     @store_global (%7, %216) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b3
+    }
+    block b3:  // preds: b1 b2, succs: b4
+    block b4:
+   */
+   static const uint32_t impl_0_nir[673] = {
+    0x000000de, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000b, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4031744, 0xc4041744,
+    0x24051744, 0x24061744, 0x24071744, 0x00001405,
+    0x00003405, 0x2434a000, 0x00000000, 0x0000000b,
+    0x00000001, 0x00000040, 0x00000000, 0x00000001,
+    0x00000000, 0x0000006e, 0xd0005354, 0x00000020,
+    0x00000400, 0x00011605, 0xc435a000, 0x00000000,
+    0x00000012, 0x00011705, 0xc435a200, 0x00000000,
+    0x00000012, 0x00009705, 0xc433f100, 0x00000000,
+    0x000a0012, 0x00019705, 0xc435a300, 0x00000000,
+    0x00000012, 0x00000e05, 0xc4225000, 0x00000000,
+    0x0000000c, 0xffe01605, 0xc4322000, 0x00000000,
+    0x001d0006, 0xc434e000, 0x00000000, 0x001c001e,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x0020001f,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x001b0021, 0xc434e000, 0x00000000,
+    0x00250027, 0x00021705, 0x00029705, 0x00031705,
+    0x00039705, 0x00041705, 0x00049705, 0xa83b8000,
+    0x00000000, 0x00000004, 0x84390000, 0x00000000,
+    0x0000002f, 0x00003505, 0xa4288000, 0x00000000,
+    0x0031002f, 0x84390000, 0x00000000, 0x00000032,
+    0xc438e000, 0x00000000, 0x00000030, 0xc4351000,
+    0x00000000, 0x00130034, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00050036, 0xc434e000, 0x00000000,
+    0x00350037, 0xc438e000, 0x00000000, 0x00000033,
+    0xc4351000, 0x00000000, 0x00220039, 0xc4322000,
+    0x00000000, 0x00230038, 0xc434e000, 0x00000000,
+    0x003a003b, 0x903bb000, 0x00000000, 0x00000004,
+    0xc438e200, 0x00000000, 0x0000003d, 0xc4351000,
+    0x00000000, 0x0024003e, 0xc4322000, 0x00000000,
+    0x0026003c, 0xc434e000, 0x00000000, 0x003f0040,
+    0x903bb000, 0x00000000, 0x00000028, 0x84322000,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e0043, 0xe4226000, 0x00000000, 0x00000044,
+    0xe4351000, 0x00000000, 0x00130045, 0xc43bd000,
+    0x00000000, 0x00000046, 0xc434e000, 0x00000000,
+    0x00130047, 0xc43be000, 0x00000000, 0x00000046,
+    0xe4369000, 0x00000000, 0x00490048, 0x84322100,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e004b, 0xe4226000, 0x00000000, 0x0000004c,
+    0x00013605, 0xe4351000, 0x00000000, 0x004e004d,
+    0xe434e000, 0x00000000, 0x004f004a, 0x84322200,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e0051, 0xe4226000, 0x00000000, 0x00000052,
+    0x00015605, 0xe4351000, 0x00000000, 0x00540053,
+    0xe434e000, 0x00000000, 0x00550050, 0x84322300,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e0057, 0xe4226000, 0x00000000, 0x00000058,
+    0x00017605, 0xe4351000, 0x00000000, 0x005a0059,
+    0xe434e000, 0x00000000, 0x005b0056, 0xe4226000,
+    0x00000000, 0x0000000d, 0x0001b605, 0xe4351000,
+    0x00000000, 0x005e005d, 0xe434e000, 0x00000000,
+    0x005f005c, 0xc43bd000, 0x00000000, 0x00000060,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x00610062,
+    0x00006894, 0x0000018c, 0x0000001c, 0x00040001,
+    0xe4226000, 0x00000000, 0x0000000b, 0xe4351000,
+    0x00000000, 0x00130064, 0x903bb000, 0x00000000,
+    0x00000041, 0x84322000, 0x00000000, 0x000f0066,
+    0x24345000, 0x00000000, 0x000e0067, 0xe4226000,
+    0x00000000, 0x00000068, 0xe4351000, 0x00000000,
+    0x004e0069, 0xe434e000, 0x00000000, 0x006a0065,
+    0xc438e000, 0x00000000, 0x0000006b, 0xe431f000,
+    0x00000000, 0x00170007, 0x00006894, 0x000001b0,
+    0x000001b4, 0x00040001, 0xe431f000, 0x00000000,
+    0x00150007, 0x00006894, 0x00000050, 0x000001b8,
+    0x00040001, 0xe431f000, 0x00000000, 0x00190007,
+    0x00006894, 0x00000058, 0x000001bc, 0x00040001,
+    0xe431f000, 0x00000000, 0x00290007, 0x00006894,
+    0x00000060, 0x000001c0, 0x00040001, 0xe431f000,
+    0x00000000, 0x002a0007, 0x00006894, 0x00000068,
+    0x000001c4, 0x00040001, 0xe431f000, 0x00000000,
+    0x002b0007, 0x00006894, 0x0000006c, 0x000001c8,
+    0x00040001, 0xe431f000, 0x00000000, 0x002c0007,
+    0x00006894, 0x00000058, 0x000001cc, 0x00040001,
+    0xe431f000, 0x00000000, 0x002d0007, 0x00006894,
+    0x00000068, 0x000001d0, 0x00040001, 0xe431f000,
+    0x00000000, 0x002e0007, 0x00006894, 0x00000024,
+    0x000001d4, 0x00040001, 0x00000001, 0x00000000,
+    0x00000070, 0xd0005354, 0x00000020, 0x00000400,
+    0x00011605, 0x00009705, 0x00021705, 0xe431f000,
+    0x00000000, 0x007a0008, 0xc4005354, 0x000001ec,
+    0x00000400, 0x00021605, 0xc435a000, 0x00000000,
+    0x00000077, 0x00011705, 0xc435a200, 0x00000000,
+    0x00000077, 0xc433f100, 0x00000000, 0x000a0077,
+    0x00019705, 0xc435a300, 0x00000000, 0x00000077,
+    0xc4225000, 0x00000000, 0x0000000c, 0xffe01605,
+    0xc4322000, 0x00000000, 0x00850003, 0xc434e000,
+    0x00000000, 0x00840086, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00880087, 0x00000605, 0xff00ffff,
+    0x00031605, 0x01000e05, 0x00000605, 0x00ffffff,
+    0x00000e05, 0xc4287000, 0x00000000, 0x008e0089,
+    0xc434e000, 0x00000000, 0x008c008f, 0x00029705,
+    0x00031705, 0x00039705, 0x00041705, 0x00049705,
+    0xa83b8000, 0x00000000, 0x00000004, 0x84390000,
+    0x00000000, 0x00000096, 0x00003505, 0xa4288000,
+    0x00000000, 0x00980096, 0x84390000, 0x00000000,
+    0x00000099, 0xc438e000, 0x00000000, 0x00000097,
+    0xc4351000, 0x00000000, 0x0078009b, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0002009d, 0xc434e000,
+    0x00000000, 0x009c009e, 0xc438e000, 0x00000000,
+    0x0000009a, 0xc4351000, 0x00000000, 0x007d00a0,
+    0xc4322000, 0x00000000, 0x008a009f, 0xc434e000,
+    0x00000000, 0x00a100a2, 0x903bb000, 0x00000000,
+    0x00000004, 0xc438e200, 0x00000000, 0x000000a4,
+    0xc4351000, 0x00000000, 0x008b00a5, 0xc4322000,
+    0x00000000, 0x008d00a3, 0xc434e000, 0x00000000,
+    0x00a600a7, 0x903bb000, 0x00000000, 0x00000090,
+    0x84322000, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00aa, 0xe4226000, 0x00000000,
+    0x000000ab, 0xe4351000, 0x00000000, 0x007800ac,
+    0xc43bd000, 0x00000000, 0x000000ad, 0xc434e000,
+    0x00000000, 0x007800ae, 0xc43be000, 0x00000000,
+    0x000000ad, 0xe4369000, 0x00000000, 0x00b000af,
+    0x84322100, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00b2, 0xe4226000, 0x00000000,
+    0x000000b3, 0x00013605, 0xe4351000, 0x00000000,
+    0x00b500b4, 0xe434e000, 0x00000000, 0x00b600b1,
+    0x84322200, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00b8, 0xe4226000, 0x00000000,
+    0x000000b9, 0x00015605, 0xe4351000, 0x00000000,
+    0x00bb00ba, 0xe434e000, 0x00000000, 0x00bc00b7,
+    0x84322300, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00be, 0xe4226000, 0x00000000,
+    0x000000bf, 0x00017605, 0xe4351000, 0x00000000,
+    0x00c100c0, 0xe434e000, 0x00000000, 0x00c200bd,
+    0xe4226000, 0x00000000, 0x0000000d, 0x0001b605,
+    0xe4351000, 0x00000000, 0x00c500c4, 0xe434e000,
+    0x00000000, 0x00c600c3, 0xc43bd000, 0x00000000,
+    0x000000c7, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00c800c9, 0x00006894, 0x00000328, 0x0000001c,
+    0x00040001, 0xe4226000, 0x00000000, 0x0000000b,
+    0xe4351000, 0x00000000, 0x007800cb, 0x903bb000,
+    0x00000000, 0x000000a8, 0x84322000, 0x00000000,
+    0x000f00cd, 0x24345000, 0x00000000, 0x000e00ce,
+    0xe4226000, 0x00000000, 0x000000cf, 0xe4351000,
+    0x00000000, 0x00b500d0, 0xe434e000, 0x00000000,
+    0x00d100cc, 0xc438e000, 0x00000000, 0x000000d2,
+    0xe431f000, 0x00000000, 0x00790007, 0x00006894,
+    0x0000034c, 0x00000350, 0x00040001, 0xe431f000,
+    0x00000000, 0x007f0007, 0x00006894, 0x000001f8,
+    0x00000354, 0x00040001, 0xe431f000, 0x00000000,
+    0x00820007, 0x00006894, 0x00000200, 0x00000358,
+    0x00040001, 0xe431f000, 0x00000000, 0x007a0007,
+    0x00006894, 0x00000204, 0x0000035c, 0x00040001,
+    0xe431f000, 0x00000000, 0x00910007, 0x00006894,
+    0x000001f0, 0x00000360, 0x00040001, 0xe431f000,
+    0x00000000, 0x00920007, 0x00006894, 0x0000020c,
+    0x00000364, 0x00040001, 0xe431f000, 0x00000000,
+    0x00930007, 0x00006894, 0x0000020c, 0x00000368,
+    0x00040001, 0xe431f000, 0x00000000, 0x00940007,
+    0x00006894, 0x000001f0, 0x0000036c, 0x00040001,
+    0xe431f000, 0x00000000, 0x00950007, 0x00006894,
+    0x00000024, 0x00000370, 0x00040001, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[11] = { dst_ptr, indirect_ptr, draw_id_ptr, draw_id, instance_multiplier, is_indexed, is_predicated, uses_tbimr, uses_base, uses_drawid, mocs };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx125_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx125_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    64      %9 = @load_param (param_idx=0)
+    64     %10 = @load_param (param_idx=1)
+    64     %11 = @load_param (param_idx=2)
+    32     %12 = @load_param (param_idx=4)
+    64     %13 = @load_param (param_idx=5)
+    32     %14 = @load_param (param_idx=6)
+    32     %15 = @load_param (param_idx=7)
+    32     %16 = @load_param (param_idx=8)
+    32     %17 = @load_param (param_idx=9)
+    32     %18 = @load_param (param_idx=11)
+    32     %19 = @load_param (param_idx=12)
+    64     %20 = @load_param (param_idx=13)
+    64     %21 = @load_param (param_idx=14)
+    32     %22 = @load_param (param_idx=15)
+    32     %23 = iadd %14, %22
+    32     %24 = @load_global (%13) (access=none, align_mul=4, align_offset=0)
+    32     %25 = imul %22, %18
+    64     %26 = u2u64 %25
+    32     %27 = imul %23, %12
+    64     %28 = u2u64 %27
+    32     %29 = umin %24, %16
+    1      %30 = ult %23, %29
+                 // succs: b1 b8
+    if %30 {
+        block b1:    // preds: b0
+        32     %31 = load_const (0x00000001)
+        32     %32 = iand %17, %31 (0x1)
+        32     %33 = load_const (0x00000000)
+        1      %34 = ieq %32, %33 (0x0)
+        8      %35 = load_const (0x00)
+        8      %36 = load_const (0x01)
+        32     %37 = load_const (0x00000002)
+        32     %38 = iand %17, %37 (0x2)
+        32     %39 = load_const (0x00000040 = 64)
+        32     %40 = load_const (0x00000100 = 256)
+        32     %41 = iand %17, %40 (0x100)
+        1      %42 = ine %41, %33 (0x0)
+                     // succs: b2 b3
+        if %42 {
+            block b2:    // preds: b1
+            32     %43 = load_const (0x0000002c = 44)
+            32     %44 = undefined
+            32x4   %45 = @load_global (%10) (access=none, align_mul=16, align_offset=0)
+            64     %46 = iadd %9, %26
+                         @store_global (%45, %46) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+            64     %47 = load_const (0x0000000000000010 = 16)
+            64     %48 = iadd %10, %47 (0x10)
+            32x4   %49 = @load_global (%48) (access=none, align_mul=16, align_offset=0)
+            64     %50 = iadd %26, %47 (0x10)
+            64     %51 = iadd %9, %50
+                         @store_global (%49, %51) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+            64     %52 = load_const (0x0000000000000020 = 32)
+            64     %53 = iadd %10, %52 (0x20)
+            32x4   %54 = @load_global (%53) (access=none, align_mul=16, align_offset=0)
+            64     %55 = iadd %26, %52 (0x20)
+            64     %56 = iadd %9, %55
+            32x4   %57 = vec4 %54.x, %54.y, %54.z, %44
+                         @store_global (%57, %56) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                         // succs: b4
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:    // preds: b2 b3
+        32     %58 = phi b2: %43 (0x2c), b3: %33 (0x0)
+        64     %59 = u2u64 %58
+                     // succs: b5 b6
+        if %34 {
+            block b5:    // preds: b4
+            64     %60 = iadd %11, %28
+            32x4   %61 = @load_global (%60) (access=none, align_mul=4, align_offset=0)
+            32     %62 = load_const (0x00000008)
+            32     %63 = mov %61.x
+            64     %64 = load_const (0x0000000000000008)
+            32     %65 = mov %61.z
+            64     %66 = load_const (0x0000000000000004)
+            32     %67 = imul %61.y, %15
+            64     %68 = load_const (0x000000000000000c = 12)
+            32     %69 = mov %61.w
+            64     %70 = iadd %26, %59
+            64     %71 = iadd %9, %70
+            32     %72 = ushr %38, %31 (0x1)
+            32     %73 = load_const (0xffffff00 = -256 = 4294967040)
+            32     %74 = iand %8, %73 (0xffffff00)
+            32     %75 = ior %74, %72
+            32     %76 = load_const (0xffff00ff = -65281 = 4294902015)
+            32     %77 = iand %75, %76 (0xffff00ff)
+            32     %78 = load_const (0x00000006)
+            32     %79 = load_const (0x00000010 = 16)
+            32     %80 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32     %81 = load_const (0x00000018 = 24)
+            32     %82 = load_const (0x01000000 = 16777216)
+            32     %83 = load_const (0x00ffffff = 16777215)
+            32     %84 = extract_u16 %77, %33 (0x0)
+            32     %85 = ior %84, %82 (0x1000000)
+            32     %86 = iand %17, %39 (0x40)
+            32     %87 = ushr %86, %78 (0x6)
+            64     %88 = load_const (0x0000000000000010 = 16)
+            64     %89 = load_const (0x0000000000000014 = 20)
+            64     %90 = load_const (0x0000000000000018 = 24)
+            64     %91 = load_const (0x000000000000001c = 28)
+            64     %92 = load_const (0x0000000000000020 = 32)
+            64     %93 = load_const (0x0000000000000024 = 36)
+            16x2   %94 = unpack_32_2x16 %6
+            8      %95 = u2u8 %94.x
+            16     %96 = load_const (0x0001)
+            16     %97 = extract_u8 %94.x, %96 (0x1)
+            8      %98 = u2u8 %97
+            32     %99 = u2u32 %95
+            32    %100 = ishl %99, %62 (0x8)
+            32    %101 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %102 = iand %101 (0xffff0000), %7
+            32    %103 = ior %102, %100
+            32    %104 = u2u32 %98
+            32    %105 = ishl %104, %79 (0x10)
+            32    %106 = iand %103, %80 (0xff00ffff)
+            32    %107 = ior %106, %105
+            8x4   %108 = unpack_32_4x8 %6
+            32    %109 = u2u32 %108.z
+            32    %110 = ishl %109, %81 (0x18)
+            32    %111 = iand %107, %83 (0xffffff)
+            32    %112 = ior %111, %110
+            8x4   %113 = unpack_32_4x8 %85
+            8     %114 = iand %113.x, %36 (0x1)
+            1     %115 = ine %114, %35 (0x0)
+            64    %116 = b2i64 %115
+            64    %117 = ishl %116, %62 (0x8)
+            32    %118 = unpack_64_2x32_split_x %117
+            32    %119 = ior %118, %62 (0x8)
+            32    %120 = unpack_64_2x32_split_y %117
+            64    %121 = pack_64_2x32_split %119, %120
+            8     %122 = iand %113.y, %36 (0x1)
+            1     %123 = ine %122, %35 (0x0)
+            64    %124 = b2i64 %123
+            32    %125 = load_const (0x00000009)
+            64    %126 = ishl %124, %125 (0x9)
+            64    %127 = ior %121, %126
+            8     %128 = iand %113.z, %36 (0x1)
+            1     %129 = ine %128, %35 (0x0)
+            64    %130 = b2i64 %129
+            32    %131 = load_const (0x0000000a = 10)
+            64    %132 = ishl %130, %131 (0xa)
+            64    %133 = ior %127, %132
+            8     %134 = iand %113.w, %36 (0x1)
+            1     %135 = ine %134, %35 (0x0)
+            64    %136 = b2i64 %135
+            32    %137 = load_const (0x0000000b = 11)
+            64    %138 = ishl %136, %137 (0xb)
+            64    %139 = ior %133, %138
+            64    %140 = u2u64 %87
+            32    %141 = load_const (0x0000000d = 13)
+            64    %142 = ishl %140, %141 (0xd)
+            64    %143 = ior %139, %142
+            32    %144 = unpack_64_2x32_split_x %143
+            32    %145 = load_const (0x7b000000 = 2063597568)
+            32    %146 = ior %145 (0x7b000000), %144
+                         @store_global (%146, %71) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %147 = u2u64 %32
+            64    %148 = ishl %147, %62 (0x8)
+            8x4   %149 = unpack_32_4x8 %112
+            8     %150 = iand %149.x, %36 (0x1)
+            1     %151 = ine %150, %35 (0x0)
+            64    %152 = b2i64 %151
+            64    %153 = ishl %152, %125 (0x9)
+            64    %154 = ior %148, %153
+            32    %155 = u2u32 %154
+            64    %156 = iadd %71, %66 (0x4)
+                         @store_global (%155, %156) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %157 = iadd %71, %64 (0x8)
+                         @store_global (%63, %157) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %158 = iadd %71, %68 (0xc)
+                         @store_global (%65, %158) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %159 = iadd %71, %88 (0x10)
+                         @store_global (%67, %159) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %160 = iadd %71, %89 (0x14)
+                         @store_global (%69, %160) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %161 = iadd %71, %90 (0x18)
+                         @store_global (%33 (0x0), %161) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %162 = iadd %71, %91 (0x1c)
+                         @store_global (%65, %162) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %163 = iadd %71, %92 (0x20)
+                         @store_global (%69, %163) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %164 = iadd %71, %93 (0x24)
+                         @store_global (%23, %164) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b7
+        } else {
+            block b6:    // preds: b4
+            64    %165 = iadd %11, %28
+            32x4  %166 = @load_global (%165) (access=none, align_mul=4, align_offset=0)
+            32    %167 = load_const (0x00000008)
+            64    %168 = load_const (0x0000000000000004)
+            64    %169 = load_const (0x0000000000000010 = 16)
+            64    %170 = iadd %165, %169 (0x10)
+            32    %171 = @load_global (%170) (access=none, align_mul=4, align_offset=0)
+            32    %172 = load_const (0x00000010 = 16)
+            32    %173 = mov %166.x
+            64    %174 = load_const (0x0000000000000008)
+            32    %175 = mov %166.z
+            32    %176 = imul %166.y, %15
+            64    %177 = load_const (0x000000000000000c = 12)
+            32    %178 = mov %166.w
+            64    %179 = iadd %26, %59
+            64    %180 = iadd %9, %179
+            32    %181 = ushr %38, %31 (0x1)
+            32    %182 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %183 = iand %5, %182 (0xffffff00)
+            32    %184 = ior %183, %181
+            32    %185 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %186 = iand %184, %185 (0xffff00ff)
+            32    %187 = load_const (0x00000006)
+            32    %188 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32    %189 = load_const (0x00000018 = 24)
+            32    %190 = load_const (0x01000000 = 16777216)
+            32    %191 = load_const (0x00ffffff = 16777215)
+            32    %192 = extract_u16 %186, %33 (0x0)
+            32    %193 = ior %192, %190 (0x1000000)
+            32    %194 = iand %17, %39 (0x40)
+            32    %195 = ushr %194, %187 (0x6)
+            64    %196 = load_const (0x0000000000000014 = 20)
+            64    %197 = load_const (0x0000000000000018 = 24)
+            64    %198 = load_const (0x000000000000001c = 28)
+            64    %199 = load_const (0x0000000000000020 = 32)
+            64    %200 = load_const (0x0000000000000024 = 36)
+            16x2  %201 = unpack_32_2x16 %6
+            8     %202 = u2u8 %201.x
+            16    %203 = load_const (0x0001)
+            16    %204 = extract_u8 %201.x, %203 (0x1)
+            8     %205 = u2u8 %204
+            32    %206 = u2u32 %202
+            32    %207 = ishl %206, %167 (0x8)
+            32    %208 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %209 = iand %208 (0xffff0000), %4
+            32    %210 = ior %209, %207
+            32    %211 = u2u32 %205
+            32    %212 = ishl %211, %172 (0x10)
+            32    %213 = iand %210, %188 (0xff00ffff)
+            32    %214 = ior %213, %212
+            8x4   %215 = unpack_32_4x8 %6
+            32    %216 = u2u32 %215.z
+            32    %217 = ishl %216, %189 (0x18)
+            32    %218 = iand %214, %191 (0xffffff)
+            32    %219 = ior %218, %217
+            8x4   %220 = unpack_32_4x8 %193
+            8     %221 = iand %220.x, %36 (0x1)
+            1     %222 = ine %221, %35 (0x0)
+            64    %223 = b2i64 %222
+            64    %224 = ishl %223, %167 (0x8)
+            32    %225 = unpack_64_2x32_split_x %224
+            32    %226 = ior %225, %167 (0x8)
+            32    %227 = unpack_64_2x32_split_y %224
+            64    %228 = pack_64_2x32_split %226, %227
+            8     %229 = iand %220.y, %36 (0x1)
+            1     %230 = ine %229, %35 (0x0)
+            64    %231 = b2i64 %230
+            32    %232 = load_const (0x00000009)
+            64    %233 = ishl %231, %232 (0x9)
+            64    %234 = ior %228, %233
+            8     %235 = iand %220.z, %36 (0x1)
+            1     %236 = ine %235, %35 (0x0)
+            64    %237 = b2i64 %236
+            32    %238 = load_const (0x0000000a = 10)
+            64    %239 = ishl %237, %238 (0xa)
+            64    %240 = ior %234, %239
+            8     %241 = iand %220.w, %36 (0x1)
+            1     %242 = ine %241, %35 (0x0)
+            64    %243 = b2i64 %242
+            32    %244 = load_const (0x0000000b = 11)
+            64    %245 = ishl %243, %244 (0xb)
+            64    %246 = ior %240, %245
+            64    %247 = u2u64 %195
+            32    %248 = load_const (0x0000000d = 13)
+            64    %249 = ishl %247, %248 (0xd)
+            64    %250 = ior %246, %249
+            32    %251 = unpack_64_2x32_split_x %250
+            32    %252 = load_const (0x7b000000 = 2063597568)
+            32    %253 = ior %252 (0x7b000000), %251
+                         @store_global (%253, %180) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %254 = u2u64 %32
+            64    %255 = ishl %254, %167 (0x8)
+            8x4   %256 = unpack_32_4x8 %219
+            8     %257 = iand %256.x, %36 (0x1)
+            1     %258 = ine %257, %35 (0x0)
+            64    %259 = b2i64 %258
+            64    %260 = ishl %259, %232 (0x9)
+            64    %261 = ior %255, %260
+            32    %262 = u2u32 %261
+            64    %263 = iadd %180, %168 (0x4)
+                         @store_global (%262, %263) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %264 = iadd %180, %174 (0x8)
+                         @store_global (%173, %264) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %265 = iadd %180, %177 (0xc)
+                         @store_global (%175, %265) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %266 = iadd %180, %169 (0x10)
+                         @store_global (%176, %266) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %267 = iadd %180, %196 (0x14)
+                         @store_global (%171, %267) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %268 = iadd %180, %197 (0x18)
+                         @store_global (%178, %268) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %269 = iadd %180, %198 (0x1c)
+                         @store_global (%178, %269) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %270 = iadd %180, %199 (0x20)
+                         @store_global (%171, %270) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %271 = iadd %180, %200 (0x24)
+                         @store_global (%23, %271) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b7
+        }
+        block b7:  // preds: b5 b6, succs: b9
+    } else {
+        block b8:  // preds: b0, succs: b9
+    }
+    block b9:    // preds: b7 b8
+    32    %272 = load_const (0x00000020 = 32)
+    32    %273 = iand %17, %272 (0x20)
+    32    %274 = load_const (0x00000000)
+    1     %275 = ieq %273, %274 (0x0)
+    8     %276 = load_const (0x00)
+    8     %277 = load_const (0x01)
+    1     %278 = ieq %24, %274 (0x0)
+    32    %279 = load_const (0xffffffff = -1 = 4294967295)
+    32    %280 = iadd %29, %279 (0xffffffff)
+    32    %281 = bcsel %278, %274 (0x0), %280
+    64    %282 = u2u64 %18
+    64    %283 = iadd %26, %282
+    64    %284 = bcsel %278, %26, %283
+    64    %285 = iadd %9, %284
+                 // succs: b10 b14
+    if %275 {
+        block b10:   // preds: b9
+        1     %286 = ieq %23, %281
+        1     %287 = ult %24, %16
+        1     %288 = iand %287, %286
+                     // succs: b11 b12
+        if %288 {
+            block b11:   // preds: b10
+            64    %289 = load_const (0x0000000000000004)
+            64    %290 = load_const (0x0000000000000008)
+            32    %291 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %292 = iand %291 (0xffff0000), %3
+            32    %293 = load_const (0x0000000a = 10)
+            16x2  %294 = unpack_32_2x16 %2
+            32    %295 = u2u32 %294.x
+            32    %296 = load_const (0x00000010 = 16)
+            32    %297 = ishl %295, %296 (0x10)
+            32    %298 = extract_u16 %292, %274 (0x0)
+            32    %299 = ior %298, %297
+            8x4   %300 = unpack_32_4x8 %299
+            8     %301 = iand %300.x, %277 (0x1)
+            1     %302 = ine %301, %276 (0x0)
+            64    %303 = b2i64 %302
+            64    %304 = ishl %303, %293 (0xa)
+            32    %305 = unpack_64_2x32_split_x %304
+            32    %306 = load_const (0x00000101 = 257)
+            32    %307 = ior %305, %306 (0x101)
+            32    %308 = unpack_64_2x32_split_y %304
+            64    %309 = pack_64_2x32_split %307, %308
+            8     %310 = iand %300.y, %277 (0x1)
+            1     %311 = ine %310, %276 (0x0)
+            64    %312 = b2i64 %311
+            32    %313 = load_const (0x0000000f = 15)
+            64    %314 = ishl %312, %313 (0xf)
+            64    %315 = ior %309, %314
+            32    %316 = unpack_64_2x32_split_x %315
+            32    %317 = load_const (0x18800000 = 411041792)
+            32    %318 = ior %316, %317 (0x18800000)
+                         @store_global (%318, %285) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %319 = u2u32 %21
+            64    %320 = iadd %285, %289 (0x4)
+                         @store_global (%319, %320) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %321 = unpack_64_2x32_split_y %21
+            64    %322 = iadd %285, %290 (0x8)
+                         @store_global (%321, %322) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b13
+        } else {
+            block b12:  // preds: b10, succs: b13
+        }
+        block b13:  // preds: b11 b12, succs: b21
+    } else {
+        block b14:   // preds: b9
+        1     %323 = ine %23, %281
+                     // succs: b15 b19
+        if %323 {
+            block b15:   // preds: b14
+            32    %324 = iadd %19, %279 (0xffffffff)
+            1     %325 = ieq %22, %324
+                         // succs: b16 b17
+            if %325 {
+                block b16:   // preds: b15
+                64    %326 = load_const (0x0000000000000004)
+                64    %327 = load_const (0x0000000000000008)
+                32    %328 = load_const (0xffff0000 = -65536 = 4294901760)
+                32    %329 = iand %328 (0xffff0000), %1
+                32    %330 = load_const (0x0000000a = 10)
+                16x2  %331 = unpack_32_2x16 %2
+                32    %332 = u2u32 %331.x
+                32    %333 = load_const (0x00000010 = 16)
+                32    %334 = ishl %332, %333 (0x10)
+                32    %335 = extract_u16 %329, %274 (0x0)
+                32    %336 = ior %335, %334
+                8x4   %337 = unpack_32_4x8 %336
+                8     %338 = iand %337.x, %277 (0x1)
+                1     %339 = ine %338, %276 (0x0)
+                64    %340 = b2i64 %339
+                64    %341 = ishl %340, %330 (0xa)
+                32    %342 = unpack_64_2x32_split_x %341
+                32    %343 = load_const (0x00000101 = 257)
+                32    %344 = ior %342, %343 (0x101)
+                32    %345 = unpack_64_2x32_split_y %341
+                64    %346 = pack_64_2x32_split %344, %345
+                8     %347 = iand %337.y, %277 (0x1)
+                1     %348 = ine %347, %276 (0x0)
+                64    %349 = b2i64 %348
+                32    %350 = load_const (0x0000000f = 15)
+                64    %351 = ishl %349, %350 (0xf)
+                64    %352 = ior %346, %351
+                32    %353 = unpack_64_2x32_split_x %352
+                32    %354 = load_const (0x18800000 = 411041792)
+                32    %355 = ior %353, %354 (0x18800000)
+                             @store_global (%355, %285) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %356 = u2u32 %20
+                64    %357 = iadd %285, %326 (0x4)
+                             @store_global (%356, %357) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %358 = unpack_64_2x32_split_y %20
+                64    %359 = iadd %285, %327 (0x8)
+                             @store_global (%358, %359) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                             // succs: b18
+            } else {
+                block b17:  // preds: b15, succs: b18
+            }
+            block b18:  // preds: b16 b17, succs: b20
+        } else {
+            block b19:   // preds: b14
+            64    %360 = load_const (0x0000000000000004)
+            64    %361 = load_const (0x0000000000000008)
+            32    %362 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %363 = iand %362 (0xffff0000), %0
+            32    %364 = load_const (0x0000000a = 10)
+            16x2  %365 = unpack_32_2x16 %2
+            32    %366 = u2u32 %365.x
+            32    %367 = load_const (0x00000010 = 16)
+            32    %368 = ishl %366, %367 (0x10)
+            32    %369 = extract_u16 %363, %274 (0x0)
+            32    %370 = ior %369, %368
+            8x4   %371 = unpack_32_4x8 %370
+            8     %372 = iand %371.x, %277 (0x1)
+            1     %373 = ine %372, %276 (0x0)
+            64    %374 = b2i64 %373
+            64    %375 = ishl %374, %364 (0xa)
+            32    %376 = unpack_64_2x32_split_x %375
+            32    %377 = load_const (0x00000101 = 257)
+            32    %378 = ior %376, %377 (0x101)
+            32    %379 = unpack_64_2x32_split_y %375
+            64    %380 = pack_64_2x32_split %378, %379
+            8     %381 = iand %371.y, %277 (0x1)
+            1     %382 = ine %381, %276 (0x0)
+            64    %383 = b2i64 %382
+            32    %384 = load_const (0x0000000f = 15)
+            64    %385 = ishl %383, %384 (0xf)
+            64    %386 = ior %380, %385
+            32    %387 = unpack_64_2x32_split_x %386
+            32    %388 = load_const (0x18800000 = 411041792)
+            32    %389 = ior %387, %388 (0x18800000)
+                         @store_global (%389, %285) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %390 = u2u32 %21
+            64    %391 = iadd %285, %360 (0x4)
+                         @store_global (%390, %391) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %392 = unpack_64_2x32_split_y %21
+            64    %393 = iadd %285, %361 (0x8)
+                         @store_global (%392, %393) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b20
+        }
+        block b20:  // preds: b18 b19, succs: b21
+    }
+    block b21:  // preds: b13 b20, succs: b22
+    block b22:
+   */
+   static const uint32_t impl_0_nir[1243] = {
+    0x000001a1, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000010, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0x00000000, 0x0000001f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4011744, 0xe4021744, 0xc4041744,
+    0xe4051744, 0xc4061744, 0xc4071744, 0xc4081744,
+    0xc4091744, 0xc40b1744, 0xc40c1744, 0xe40d1744,
+    0xe40e1744, 0xc40f1744, 0xc431f000, 0x00000000,
+    0x00180010, 0xc4005354, 0x0000003c, 0x00000400,
+    0xc433f000, 0x00000000, 0x00140018, 0xe438f000,
+    0x00000000, 0x0000001b, 0xc433f000, 0x00000000,
+    0x000e0019, 0xe438f000, 0x00000000, 0x0000001d,
+    0xc43ae000, 0x00000000, 0x0012001a, 0x243a6000,
+    0x00000000, 0x001f0019, 0x00000001, 0x00000080,
+    0x00000000, 0x00000005, 0x00000000, 0x0000000c,
+    0x00003605, 0xc4322000, 0x00000000, 0x00220013,
+    0x00000e05, 0x24327000, 0x00000000, 0x00240023,
+    0x00001405, 0x00003405, 0x00005605, 0xc4322000,
+    0x00000000, 0x00280013, 0x00081605, 0x00201605,
+    0xc4322000, 0x00000000, 0x002b0013, 0x24345000,
+    0x00000000, 0x0024002c, 0x00000001, 0x000000b4,
+    0x00000000, 0x00000001, 0x00000000, 0x00000012,
+    0x00059605, 0x00000607, 0xd0005354, 0x00000030,
+    0x00001000, 0xe431f000, 0x00000000, 0x001c000b,
+    0x00006894, 0x000000c4, 0x000000c8, 0x0010000f,
+    0x00021705, 0xe431f000, 0x00000000, 0x0033000c,
+    0xd0005354, 0x000000d0, 0x00001000, 0xe471f000,
+    0x00000000, 0x0033001c, 0x00000000, 0x0036000b,
+    0x00006894, 0x000000d4, 0x000000dc, 0x0010000f,
+    0x00041705, 0xe431f000, 0x00000000, 0x0038000c,
+    0xd0005354, 0x000000e4, 0x00001000, 0xe471f000,
+    0x00000000, 0x0038001c, 0x00000000, 0x003b000b,
+    0xd01d3000, 0x00000000, 0xe40000e8, 0xe50000e8,
+    0xe60000e8, 0xe40000c0, 0x00006894, 0x000000f4,
+    0x000000f0, 0x00100007, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000002f, 0x0000002e, 0x00000024, 0x0000003e,
+    0xe438f000, 0x00000000, 0x00000040, 0x00000001,
+    0x00000094, 0x00000000, 0x00000001, 0x00000000,
+    0x00000073, 0xe431f000, 0x00000000, 0x001e000d,
+    0xd0005354, 0x0000010c, 0x00000400, 0x00011605,
+    0xc435a000, 0x00000000, 0x00000044, 0x00011705,
+    0xc435a200, 0x00000000, 0x00000044, 0x00009705,
+    0xc433f100, 0x00000000, 0x00110044, 0x00019705,
+    0xc435a300, 0x00000000, 0x00000044, 0xe471f000,
+    0x00000000, 0x0041001c, 0x00000000, 0x004d000b,
+    0xc43cc000, 0x00000000, 0x00220029, 0xffe01605,
+    0xc4322000, 0x00000000, 0x0050000a, 0xc434e000,
+    0x00000000, 0x004f0051, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00530052, 0x0000d605, 0x00021605,
+    0x00000605, 0xff00ffff, 0x00031605, 0x01000e05,
+    0x00000605, 0x00ffffff, 0xc4287000, 0x00000000,
+    0x00240054, 0xc434e000, 0x00000000, 0x0059005b,
+    0xc4322000, 0x00000000, 0x002a0013, 0xc43cc000,
+    0x00000000, 0x0055005d, 0x00021705, 0x00029705,
+    0x00031705, 0x00039705, 0x00041705, 0x00049705,
+    0xa83b8000, 0x00000000, 0x00000008, 0x84390000,
+    0x00000000, 0x00000065, 0x00003505, 0xa4288000,
+    0x00000000, 0x00670065, 0x84390000, 0x00000000,
+    0x00000068, 0xc438e000, 0x00000000, 0x00000066,
+    0xc4351000, 0x00000000, 0x0045006a, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0009006c, 0xc434e000,
+    0x00000000, 0x006b006d, 0xc438e000, 0x00000000,
+    0x00000069, 0xc4351000, 0x00000000, 0x0056006f,
+    0xc4322000, 0x00000000, 0x0057006e, 0xc434e000,
+    0x00000000, 0x00700071, 0x903bb000, 0x00000000,
+    0x00000008, 0xc438e200, 0x00000000, 0x00000073,
+    0xc4351000, 0x00000000, 0x00580074, 0xc4322000,
+    0x00000000, 0x005a0072, 0xc434e000, 0x00000000,
+    0x00750076, 0x903bb000, 0x00000000, 0x0000005c,
+    0x84322000, 0x00000000, 0x00270078, 0x24345000,
+    0x00000000, 0x00260079, 0xe4226000, 0x00000000,
+    0x0000007a, 0xe4351000, 0x00000000, 0x0045007b,
+    0xc43bd000, 0x00000000, 0x0000007c, 0xc434e000,
+    0x00000000, 0x0045007d, 0xc43be000, 0x00000000,
+    0x0000007c, 0xe4369000, 0x00000000, 0x007f007e,
+    0x84322100, 0x00000000, 0x00270078, 0x24345000,
+    0x00000000, 0x00260081, 0xe4226000, 0x00000000,
+    0x00000082, 0x00013605, 0xe4351000, 0x00000000,
+    0x00840083, 0xe434e000, 0x00000000, 0x00850080,
+    0x84322200, 0x00000000, 0x00270078, 0x24345000,
+    0x00000000, 0x00260087, 0xe4226000, 0x00000000,
+    0x00000088, 0x00015605, 0xe4351000, 0x00000000,
+    0x008a0089, 0xe434e000, 0x00000000, 0x008b0086,
+    0x84322300, 0x00000000, 0x00270078, 0x24345000,
+    0x00000000, 0x0026008d, 0xe4226000, 0x00000000,
+    0x0000008e, 0x00017605, 0xe4351000, 0x00000000,
+    0x0090008f, 0xe434e000, 0x00000000, 0x0091008c,
+    0xe438f000, 0x00000000, 0x0000005e, 0x0001b605,
+    0xe4351000, 0x00000000, 0x00940093, 0xe434e000,
+    0x00000000, 0x00950092, 0xc43bd000, 0x00000000,
+    0x00000096, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00970098, 0x00006894, 0x00000264, 0x00000138,
+    0x00040001, 0xe438f000, 0x00000000, 0x00000023,
+    0xe4351000, 0x00000000, 0x0045009a, 0x903bb000,
+    0x00000000, 0x00000077, 0x84322000, 0x00000000,
+    0x0027009c, 0x24345000, 0x00000000, 0x0026009d,
+    0xe4226000, 0x00000000, 0x0000009e, 0xe4351000,
+    0x00000000, 0x0084009f, 0xe434e000, 0x00000000,
+    0x00a0009b, 0xc438e000, 0x00000000, 0x000000a1,
+    0xe431f000, 0x00000000, 0x0049004e, 0x00006894,
+    0x00000288, 0x0000028c, 0x00040001, 0xe431f000,
+    0x00000000, 0x0047004e, 0x00006894, 0x00000118,
+    0x00000290, 0x00040001, 0xe431f000, 0x00000000,
+    0x004b004e, 0x00006894, 0x00000120, 0x00000294,
+    0x00040001, 0xe431f000, 0x00000000, 0x005f004e,
+    0x00006894, 0x00000128, 0x00000298, 0x00040001,
+    0xe431f000, 0x00000000, 0x0060004e, 0x00006894,
+    0x00000130, 0x0000029c, 0x00040001, 0xe431f000,
+    0x00000000, 0x0061004e, 0x00006894, 0x00000090,
+    0x000002a0, 0x00040001, 0xe431f000, 0x00000000,
+    0x0062004e, 0x00006894, 0x00000120, 0x000002a4,
+    0x00040001, 0xe431f000, 0x00000000, 0x0063004e,
+    0x00006894, 0x00000130, 0x000002a8, 0x00040001,
+    0xe431f000, 0x00000000, 0x0064004e, 0x00006894,
+    0x00000064, 0x000002ac, 0x00040001, 0x00000001,
+    0x00000000, 0x00000075, 0xe431f000, 0x00000000,
+    0x001e000d, 0xd0005354, 0x000002b4, 0x00000400,
+    0x00011605, 0x00009705, 0x00021705, 0xe431f000,
+    0x00000000, 0x00b100ad, 0xc4005354, 0x000002c8,
+    0x00000400, 0x00021605, 0xc435a000, 0x00000000,
+    0x000000ae, 0x00011705, 0xc435a200, 0x00000000,
+    0x000000ae, 0xc433f100, 0x00000000, 0x001100ae,
+    0x00019705, 0xc435a300, 0x00000000, 0x000000ae,
+    0xe471f000, 0x00000000, 0x0041001c, 0x00000000,
+    0x00bb000b, 0xc43cc000, 0x00000000, 0x00220029,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00be0007,
+    0xc434e000, 0x00000000, 0x00bd00bf, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00c100c0, 0x0000d605,
+    0x00000605, 0xff00ffff, 0x00031605, 0x01000e05,
+    0x00000605, 0x00ffffff, 0xc4287000, 0x00000000,
+    0x002400c2, 0xc434e000, 0x00000000, 0x00c600c8,
+    0xc4322000, 0x00000000, 0x002a0013, 0xc43cc000,
+    0x00000000, 0x00c300ca, 0x00029705, 0x00031705,
+    0x00039705, 0x00041705, 0x00049705, 0xa83b8000,
+    0x00000000, 0x00000008, 0x84390000, 0x00000000,
+    0x000000d1, 0x00003505, 0xa4288000, 0x00000000,
+    0x00d300d1, 0x84390000, 0x00000000, 0x000000d4,
+    0xc438e000, 0x00000000, 0x000000d2, 0xc4351000,
+    0x00000000, 0x00af00d6, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x000600d8, 0xc434e000, 0x00000000,
+    0x00d700d9, 0xc438e000, 0x00000000, 0x000000d5,
+    0xc4351000, 0x00000000, 0x00b400db, 0xc4322000,
+    0x00000000, 0x00c400da, 0xc434e000, 0x00000000,
+    0x00dc00dd, 0x903bb000, 0x00000000, 0x00000008,
+    0xc438e200, 0x00000000, 0x000000df, 0xc4351000,
+    0x00000000, 0x00c500e0, 0xc4322000, 0x00000000,
+    0x00c700de, 0xc434e000, 0x00000000, 0x00e100e2,
+    0x903bb000, 0x00000000, 0x000000c9, 0x84322000,
+    0x00000000, 0x002700e4, 0x24345000, 0x00000000,
+    0x002600e5, 0xe4226000, 0x00000000, 0x000000e6,
+    0xe4351000, 0x00000000, 0x00af00e7, 0xc43bd000,
+    0x00000000, 0x000000e8, 0xc434e000, 0x00000000,
+    0x00af00e9, 0xc43be000, 0x00000000, 0x000000e8,
+    0xe4369000, 0x00000000, 0x00eb00ea, 0x84322100,
+    0x00000000, 0x002700e4, 0x24345000, 0x00000000,
+    0x002600ed, 0xe4226000, 0x00000000, 0x000000ee,
+    0x00013605, 0xe4351000, 0x00000000, 0x00f000ef,
+    0xe434e000, 0x00000000, 0x00f100ec, 0x84322200,
+    0x00000000, 0x002700e4, 0x24345000, 0x00000000,
+    0x002600f3, 0xe4226000, 0x00000000, 0x000000f4,
+    0x00015605, 0xe4351000, 0x00000000, 0x00f600f5,
+    0xe434e000, 0x00000000, 0x00f700f2, 0x84322300,
+    0x00000000, 0x002700e4, 0x24345000, 0x00000000,
+    0x002600f9, 0xe4226000, 0x00000000, 0x000000fa,
+    0x00017605, 0xe4351000, 0x00000000, 0x00fc00fb,
+    0xe434e000, 0x00000000, 0x00fd00f8, 0xe438f000,
+    0x00000000, 0x000000cb, 0x0001b605, 0xe4351000,
+    0x00000000, 0x010000ff, 0xe434e000, 0x00000000,
+    0x010100fe, 0xc43bd000, 0x00000000, 0x00000102,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x01030104,
+    0x00006894, 0x00000414, 0x000002f0, 0x00040001,
+    0xe438f000, 0x00000000, 0x00000023, 0xe4351000,
+    0x00000000, 0x00af0106, 0x903bb000, 0x00000000,
+    0x000000e3, 0x84322000, 0x00000000, 0x00270108,
+    0x24345000, 0x00000000, 0x00260109, 0xe4226000,
+    0x00000000, 0x0000010a, 0xe4351000, 0x00000000,
+    0x00f0010b, 0xe434e000, 0x00000000, 0x010c0107,
+    0xc438e000, 0x00000000, 0x0000010d, 0xe431f000,
+    0x00000000, 0x00b000bc, 0x00006894, 0x00000438,
+    0x0000043c, 0x00040001, 0xe431f000, 0x00000000,
+    0x00b600bc, 0x00006894, 0x000002d4, 0x00000440,
+    0x00040001, 0xe431f000, 0x00000000, 0x00b900bc,
+    0x00006894, 0x000002dc, 0x00000444, 0x00040001,
+    0xe431f000, 0x00000000, 0x00b100bc, 0x00006894,
+    0x000002e0, 0x00000448, 0x00040001, 0xe431f000,
+    0x00000000, 0x00cc00bc, 0x00006894, 0x000002cc,
+    0x0000044c, 0x00040001, 0xe431f000, 0x00000000,
+    0x00cd00bc, 0x00006894, 0x000002e8, 0x00000450,
+    0x00040001, 0xe431f000, 0x00000000, 0x00ce00bc,
+    0x00006894, 0x000002e8, 0x00000454, 0x00040001,
+    0xe431f000, 0x00000000, 0x00cf00bc, 0x00006894,
+    0x000002cc, 0x00000458, 0x00040001, 0xe431f000,
+    0x00000000, 0x00d000bc, 0x00006894, 0x00000064,
+    0x0000045c, 0x00040001, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x0000000e, 0x00041605, 0xc4322000, 0x00000000,
+    0x011b0013, 0x00000e05, 0x24327000, 0x00000000,
+    0x011d011c, 0x00001405, 0x00003405, 0x24327000,
+    0x00000000, 0x011d001a, 0xfffff605, 0xc431f000,
+    0x00000000, 0x0122001f, 0xc4273000, 0x00000000,
+    0x011d0121, 0x00000123, 0xe438f000, 0x00000000,
+    0x00000014, 0xe431f000, 0x00000000, 0x0125001c,
+    0xe4273000, 0x00000000, 0x001c0121, 0x00000126,
+    0xe431f000, 0x00000000, 0x0127000b, 0x00000001,
+    0x00000478, 0x00000000, 0x00000003, 0x00000000,
+    0x00000003, 0x24327000, 0x00000000, 0x01240019,
+    0x243a6000, 0x00000000, 0x0012001a, 0x24322000,
+    0x00000000, 0x012a012b, 0x00000001, 0x000004b0,
+    0x00000000, 0x00000001, 0x00000000, 0x00000025,
+    0x00009705, 0x00011705, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00050130, 0x00015605, 0xa83b8000,
+    0x00000000, 0x00000004, 0xc438e000, 0x00000000,
+    0x00000133, 0x00021605, 0xc4351000, 0x00000000,
+    0x01350134, 0xc4287000, 0x00000000, 0x011d0131,
+    0xc434e000, 0x00000000, 0x01360137, 0x903bb000,
+    0x00000000, 0x00000138, 0x84322000, 0x00000000,
+    0x01200139, 0x24345000, 0x00000000, 0x011f013a,
+    0xe4226000, 0x00000000, 0x0000013b, 0xe4351000,
+    0x00000000, 0x0132013c, 0xc43bd000, 0x00000000,
+    0x0000013d, 0x00203605, 0xc434e000, 0x00000000,
+    0x013f013e, 0xc43be000, 0x00000000, 0x0000013d,
+    0xe4369000, 0x00000000, 0x01410140, 0x84322100,
+    0x00000000, 0x01200139, 0x24345000, 0x00000000,
+    0x011f0143, 0xe4226000, 0x00000000, 0x00000144,
+    0x0001f605, 0xe4351000, 0x00000000, 0x01460145,
+    0xe434e000, 0x00000000, 0x01470142, 0xc43bd000,
+    0x00000000, 0x00000148, 0x18800e05, 0xc434e000,
+    0x00000000, 0x014a0149, 0x00006894, 0x0000052c,
+    0x000004a0, 0x00040001, 0xc438e000, 0x00000000,
+    0x00000017, 0xe431f000, 0x00000000, 0x012e0128,
+    0x00006894, 0x00000530, 0x00000534, 0x00040001,
+    0xc43be000, 0x00000000, 0x00000017, 0xe431f000,
+    0x00000000, 0x012f0128, 0x00006894, 0x00000538,
+    0x0000053c, 0x00040001, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000003,
+    0x00000000, 0x00000001, 0x24345000, 0x00000000,
+    0x01240019, 0x00000001, 0x0000054c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000002, 0xc431f000,
+    0x00000000, 0x01220015, 0x24327000, 0x00000000,
+    0x01550018, 0x00000001, 0x00000558, 0x00000000,
+    0x00000001, 0x00000000, 0x00000025, 0x00009705,
+    0x00011705, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x0003015a, 0x00015605, 0xa83b8000, 0x00000000,
+    0x00000004, 0xc438e000, 0x00000000, 0x0000015d,
+    0x00021605, 0xc4351000, 0x00000000, 0x015f015e,
+    0xc4287000, 0x00000000, 0x011d015b, 0xc434e000,
+    0x00000000, 0x01600161, 0x903bb000, 0x00000000,
+    0x00000162, 0x84322000, 0x00000000, 0x01200163,
+    0x24345000, 0x00000000, 0x011f0164, 0xe4226000,
+    0x00000000, 0x00000165, 0xe4351000, 0x00000000,
+    0x015c0166, 0xc43bd000, 0x00000000, 0x00000167,
+    0x00203605, 0xc434e000, 0x00000000, 0x01690168,
+    0xc43be000, 0x00000000, 0x00000167, 0xe4369000,
+    0x00000000, 0x016b016a, 0x84322100, 0x00000000,
+    0x01200163, 0x24345000, 0x00000000, 0x011f016d,
+    0xe4226000, 0x00000000, 0x0000016e, 0x0001f605,
+    0xe4351000, 0x00000000, 0x0170016f, 0xe434e000,
+    0x00000000, 0x0171016c, 0xc43bd000, 0x00000000,
+    0x00000172, 0x18800e05, 0xc434e000, 0x00000000,
+    0x01740173, 0x00006894, 0x000005d4, 0x000004a0,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000016,
+    0xe431f000, 0x00000000, 0x01580128, 0x00006894,
+    0x000005d8, 0x000005dc, 0x00040001, 0xc43be000,
+    0x00000000, 0x00000016, 0xe431f000, 0x00000000,
+    0x01590128, 0x00006894, 0x000005e0, 0x000005e4,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000025, 0x00009705, 0x00011705, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0002017f, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000004, 0xc438e000,
+    0x00000000, 0x00000182, 0x00021605, 0xc4351000,
+    0x00000000, 0x01840183, 0xc4287000, 0x00000000,
+    0x011d0180, 0xc434e000, 0x00000000, 0x01850186,
+    0x903bb000, 0x00000000, 0x00000187, 0x84322000,
+    0x00000000, 0x01200188, 0x24345000, 0x00000000,
+    0x011f0189, 0xe4226000, 0x00000000, 0x0000018a,
+    0xe4351000, 0x00000000, 0x0181018b, 0xc43bd000,
+    0x00000000, 0x0000018c, 0x00203605, 0xc434e000,
+    0x00000000, 0x018e018d, 0xc43be000, 0x00000000,
+    0x0000018c, 0xe4369000, 0x00000000, 0x0190018f,
+    0x84322100, 0x00000000, 0x01200188, 0x24345000,
+    0x00000000, 0x011f0192, 0xe4226000, 0x00000000,
+    0x00000193, 0x0001f605, 0xe4351000, 0x00000000,
+    0x01950194, 0xe434e000, 0x00000000, 0x01960191,
+    0xc43bd000, 0x00000000, 0x00000197, 0x18800e05,
+    0xc434e000, 0x00000000, 0x01990198, 0x00006894,
+    0x00000668, 0x000004a0, 0x00040001, 0xc438e000,
+    0x00000000, 0x00000017, 0xe431f000, 0x00000000,
+    0x017d0128, 0x00006894, 0x0000066c, 0x00000670,
+    0x00040001, 0xc43be000, 0x00000000, 0x00000017,
+    0xe431f000, 0x00000000, 0x017e0128, 0x00006894,
+    0x00000674, 0x00000678, 0x00040001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000,
+};
+   nir_def *args[16] = { dst_base, wa_insts_ptr, indirect_base, draw_id_base, indirect_stride, _draw_count, draw_base, instance_multiplier, max_draw_count, flags, mocs, _3dprim_size_B, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx125_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx125_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    32      %9 = undefined
+    32     %10 = undefined
+    32     %11 = undefined
+    32     %12 = undefined
+    32     %13 = undefined
+    32     %14 = undefined
+    32     %15 = undefined
+    32     %16 = undefined
+    32     %17 = undefined
+    32     %18 = undefined
+    32     %19 = undefined
+    64     %20 = load_const (0x0000000000000000)
+    32     %21 = load_const (0x00000000)
+    8      %22 = load_const (0x00)
+    32     %23 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %24 = load_const (0x00000001)
+    32     %25 = load_const (0x00000003)
+    32     %26 = load_const (0x00000008)
+    32     %27 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %28 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %29 = iand %28 (0xffff0000), %19
+    64     %30 = @load_param (param_idx=0)
+    64     %31 = @load_param (param_idx=1)
+    64     %32 = @load_param (param_idx=2)
+    32     %33 = @load_param (param_idx=3)
+    64     %34 = @load_param (param_idx=4)
+    32     %35 = @load_param (param_idx=5)
+    32     %36 = @load_param (param_idx=6)
+    32     %37 = @load_param (param_idx=7)
+    32     %38 = @load_param (param_idx=8)
+    64     %39 = @load_param (param_idx=9)
+    64     %40 = @load_param (param_idx=10)
+    32     %41 = @load_param (param_idx=11)
+    32     %42 = load_const (0x00000002)
+    32     %43 = extract_u8 %37, %42 (0x2)
+    32     %44 = load_const (0x00000004)
+    32     %45 = ishl %43, %42 (0x2)
+    32     %46 = extract_u8 %37, %25 (0x3)
+    32     %47 = iadd %35, %41
+    64     %48 = load_const (0x0000000000000004)
+    32     %49 = imul %41, %45
+    64     %50 = u2u64 %49
+    64     %51 = iadd %48 (0x4), %50
+    32     %52 = imul %47, %33
+    64     %53 = u2u64 %52
+    32     %54 = ishl %41, %25 (0x3)
+    64     %55 = u2u64 %54
+    1      %56 = ine %34, %20 (0x0)
+                 // succs: b1 b2
+    if %56 {
+        block b1:    // preds: b0
+        32     %57 = @load_global (%34) (access=none, align_mul=4, align_offset=0)
+        32     %58 = umin %36, %57
+                     // succs: b3
+    } else {
+        block b2:  // preds: b0, succs: b3
+    }
+    block b3:    // preds: b1 b2
+    32     %59 = phi b1: %58, b2: %36
+    1      %60 = ieq %41, %21 (0x0)
+                 // succs: b4 b5
+    if %60 {
+        block b4:    // preds: b3
+        8      %61 = load_const (0x01)
+        32     %62 = b2i32 %60
+        32     %63 = ishl %62, %26 (0x8)
+        32     %64 = iand %28 (0xffff0000), %18
+        32     %65 = ior %64, %63
+        16x2   %66 = unpack_32_2x16 %29
+        32     %67 = u2u32 %66.x
+        32     %68 = load_const (0x00000010 = 16)
+        32     %69 = ishl %67, %68 (0x10)
+        32     %70 = extract_u16 %65, %21 (0x0)
+        32     %71 = ior %70, %69
+        8x4    %72 = unpack_32_4x8 %71
+        8      %73 = iand %72.x, %61 (0x1)
+        1      %74 = ine %73, %22 (0x0)
+        64     %75 = b2i64 %74
+        8      %76 = iand %72.y, %61 (0x1)
+        1      %77 = ine %76, %22 (0x0)
+        64     %78 = b2i64 %77
+        64     %79 = ishl %78, %26 (0x8)
+        64     %80 = ior %75, %79
+        32     %81 = unpack_64_2x32_split_x %80
+        32     %82 = load_const (0x02800000 = 41943040)
+        32     %83 = ior %81, %82 (0x2800000)
+                     @store_global (%83, %30) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b6
+    } else {
+        block b5:  // preds: b3, succs: b6
+    }
+    block b6:    // preds: b4 b5
+    1      %84 = ult %47, %59
+                 // succs: b7 b29
+    if %84 {
+        block b7:    // preds: b6
+        32     %85 = iand %37, %24 (0x1)
+        1      %86 = ieq %85, %21 (0x0)
+        8      %87 = load_const (0x01)
+        32     %88 = iand %37, %42 (0x2)
+        32     %89 = load_const (0x00000040 = 64)
+        32     %90 = iand %37, %26 (0x8)
+        1      %91 = ine %90, %21 (0x0)
+        32     %92 = iand %37, %44 (0x4)
+        1      %93 = ine %92, %21 (0x0)
+        32     %94 = extract_u8 %37, %24 (0x1)
+                     // succs: b8 b18
+        if %86 {
+            block b8:    // preds: b7
+            64     %95 = load_const (0x0000000000000008)
+            32     %96 = umax %92, %90
+            1      %97 = ine %96, %21 (0x0)
+            64     %98 = iadd %30, %51
+                         // succs: b9 b16
+            if %97 {
+                block b9:    // preds: b8
+                32     %99 = ushr %90, %25 (0x3)
+                32    %100 = ushr %92, %42 (0x2)
+                32    %101 = iadd.nsw %99, %100
+                32    %102 = ishl %101, %42 (0x2)
+                32    %103 = load_const (0xffffffff = -1 = 4294967295)
+                32    %104 = iadd %103 (0xffffffff), %102
+                64    %105 = load_const (0x000000000000000c = 12)
+                64    %106 = load_const (0x0000000000000010 = 16)
+                32    %107 = load_const (0x00000010 = 16)
+                32    %108 = load_const (0x78080000 = 2013790208)
+                32    %109 = ior %108 (0x78080000), %104
+                             @store_global (%109, %98) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %110 = iadd %98, %48 (0x4)
+                             // succs: b10 b11
+                if %91 {
+                    block b10:   // preds: b9
+                    32    %111 = iadd %46, %24 (0x1)
+                    64    %112 = iadd %53, %95 (0x8)
+                    64    %113 = iadd %31, %112
+                    1     %114 = ieq %113, %20 (0x0)
+                    32    %115 = b2i32 %114
+                    32    %116 = iand %17, %23 (0xffffff00)
+                    32    %117 = ior %116, %115
+                    32    %118 = load_const (0x00000100 = 256)
+                    32    %119 = iand %117, %27 (0xffff00ff)
+                    32    %120 = ior %119, %118 (0x100)
+                    16x2  %121 = unpack_32_2x16 %16
+                    32    %122 = u2u32 %121.x
+                    32    %123 = ishl %122, %107 (0x10)
+                    32    %124 = extract_u16 %120, %21 (0x0)
+                    32    %125 = ior %124, %123
+                    32    %126 = iand %15, %23 (0xffffff00)
+                    32    %127 = ior %126, %24 (0x1)
+                    32    %128 = load_const (0x0000000d = 13)
+                    8     %129 = u2u8 %121.y
+                    16    %130 = load_const (0x0001)
+                    16    %131 = extract_u8 %121.y, %130 (0x1)
+                    8     %132 = u2u8 %131
+                    32    %133 = u2u32 %129
+                    32    %134 = ishl %133, %26 (0x8)
+                    32    %135 = iand %127, %27 (0xffff00ff)
+                    32    %136 = ior %135, %134
+                    32    %137 = u2u32 %132
+                    32    %138 = ishl %137, %107 (0x10)
+                    32    %139 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %140 = iand %136, %139 (0xff00ffff)
+                    32    %141 = ior %140, %138
+                    8x4   %142 = unpack_32_4x8 %14
+                    32    %143 = u2u32 %142.x
+                    32    %144 = load_const (0x00000018 = 24)
+                    32    %145 = ishl %143, %144 (0x18)
+                    32    %146 = load_const (0x00ffffff = 16777215)
+                    32    %147 = iand %141, %146 (0xffffff)
+                    32    %148 = ior %147, %145
+                    64    %149 = load_const (0x0000000000000014 = 20)
+                    32x2  %150 = unpack_64_2x32 %113
+                    8x4   %151 = unpack_32_4x8 %125
+                    8     %152 = iand %151.x, %87 (0x1)
+                    1     %153 = ine %152, %22 (0x0)
+                    64    %154 = b2i64 %153
+                    64    %155 = ishl %154, %128 (0xd)
+                    8     %156 = iand %151.y, %87 (0x1)
+                    1     %157 = ine %156, %22 (0x0)
+                    64    %158 = b2i64 %157
+                    32    %159 = load_const (0x0000000e = 14)
+                    64    %160 = ishl %158, %159 (0xe)
+                    64    %161 = ior %155, %160
+                    64    %162 = u2u64 %94
+                    64    %163 = ishl %162, %107 (0x10)
+                    64    %164 = ior %161, %163
+                    8x4   %165 = unpack_32_4x8 %148
+                    8     %166 = iand %165.x, %87 (0x1)
+                    1     %167 = ine %166, %22 (0x0)
+                    64    %168 = b2i64 %167
+                    32    %169 = load_const (0x00000019 = 25)
+                    64    %170 = ishl %168, %169 (0x19)
+                    64    %171 = ior %164, %170
+                    64    %172 = u2u64 %46
+                    32    %173 = load_const (0x0000001a = 26)
+                    64    %174 = ishl %172, %173 (0x1a)
+                    64    %175 = ior %171, %174
+                    32    %176 = u2u32 %175
+                                 @store_global (%176, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %177 = u2u32 %113
+                    64    %178 = iadd %98, %95 (0x8)
+                                 @store_global (%177, %178) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %179 = mov %150.y
+                    64    %180 = iadd %98, %105 (0xc)
+                                 @store_global (%179, %180) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %181 = iadd %98, %106 (0x10)
+                                 @store_global (%26 (0x8), %181) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %182 = iadd %98, %149 (0x14)
+                                 // succs: b12
+                } else {
+                    block b11:  // preds: b9, succs: b12
+                }
+                block b12:   // preds: b10 b11
+                32    %183 = phi b10: %111, b11: %46
+                64    %184 = phi b10: %182, b11: %110
+                             // succs: b13 b14
+                if %93 {
+                    block b13:   // preds: b12
+                    64    %185 = iadd %32, %55
+                                 @store_global (%47, %185) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %186 = ineg %85
+                    64    %187 = iadd %185, %48 (0x4)
+                                 @store_global (%186, %187) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %188 = ieq %185, %20 (0x0)
+                    32    %189 = b2i32 %188
+                    32    %190 = iand %13, %23 (0xffffff00)
+                    32    %191 = ior %190, %189
+                    32    %192 = load_const (0x00000100 = 256)
+                    32    %193 = iand %191, %27 (0xffff00ff)
+                    32    %194 = ior %193, %192 (0x100)
+                    16x2  %195 = unpack_32_2x16 %16
+                    32    %196 = u2u32 %195.x
+                    32    %197 = ishl %196, %107 (0x10)
+                    32    %198 = extract_u16 %194, %21 (0x0)
+                    32    %199 = ior %198, %197
+                    32    %200 = iand %12, %23 (0xffffff00)
+                    32    %201 = ior %200, %24 (0x1)
+                    32    %202 = load_const (0x0000000d = 13)
+                    8     %203 = u2u8 %195.y
+                    16    %204 = load_const (0x0001)
+                    16    %205 = extract_u8 %195.y, %204 (0x1)
+                    8     %206 = u2u8 %205
+                    32    %207 = u2u32 %203
+                    32    %208 = ishl %207, %26 (0x8)
+                    32    %209 = iand %201, %27 (0xffff00ff)
+                    32    %210 = ior %209, %208
+                    32    %211 = u2u32 %206
+                    32    %212 = ishl %211, %107 (0x10)
+                    32    %213 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %214 = iand %210, %213 (0xff00ffff)
+                    32    %215 = ior %214, %212
+                    8x4   %216 = unpack_32_4x8 %14
+                    32    %217 = u2u32 %216.x
+                    32    %218 = load_const (0x00000018 = 24)
+                    32    %219 = ishl %217, %218 (0x18)
+                    32    %220 = load_const (0x00ffffff = 16777215)
+                    32    %221 = iand %215, %220 (0xffffff)
+                    32    %222 = ior %221, %219
+                    32x2  %223 = unpack_64_2x32 %185
+                    8x4   %224 = unpack_32_4x8 %199
+                    8     %225 = iand %224.x, %87 (0x1)
+                    1     %226 = ine %225, %22 (0x0)
+                    64    %227 = b2i64 %226
+                    64    %228 = ishl %227, %202 (0xd)
+                    8     %229 = iand %224.y, %87 (0x1)
+                    1     %230 = ine %229, %22 (0x0)
+                    64    %231 = b2i64 %230
+                    32    %232 = load_const (0x0000000e = 14)
+                    64    %233 = ishl %231, %232 (0xe)
+                    64    %234 = ior %228, %233
+                    64    %235 = u2u64 %94
+                    64    %236 = ishl %235, %107 (0x10)
+                    64    %237 = ior %234, %236
+                    8x4   %238 = unpack_32_4x8 %222
+                    8     %239 = iand %238.x, %87 (0x1)
+                    1     %240 = ine %239, %22 (0x0)
+                    64    %241 = b2i64 %240
+                    32    %242 = load_const (0x00000019 = 25)
+                    64    %243 = ishl %241, %242 (0x19)
+                    64    %244 = ior %237, %243
+                    64    %245 = u2u64 %183
+                    32    %246 = load_const (0x0000001a = 26)
+                    64    %247 = ishl %245, %246 (0x1a)
+                    64    %248 = ior %244, %247
+                    32    %249 = u2u32 %248
+                                 @store_global (%249, %184) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %250 = u2u32 %185
+                    64    %251 = iadd %184, %48 (0x4)
+                                 @store_global (%250, %251) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %252 = mov %223.y
+                    64    %253 = iadd %184, %95 (0x8)
+                                 @store_global (%252, %253) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %254 = iadd %184, %105 (0xc)
+                                 @store_global (%26 (0x8), %254) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %255 = iadd %184, %106 (0x10)
+                                 // succs: b15
+                } else {
+                    block b14:  // preds: b12, succs: b15
+                }
+                block b15:   // preds: b13 b14
+                64    %256 = phi b13: %255, b14: %184
+                             // succs: b17
+            } else {
+                block b16:  // preds: b8, succs: b17
+            }
+            block b17:   // preds: b15 b16
+            64    %257 = phi b15: %256, b16: %98
+            64    %258 = iadd %31, %53
+            32x4  %259 = @load_global (%258) (access=none, align_mul=4, align_offset=0)
+            32    %260 = mov %259.x
+            32    %261 = mov %259.z
+            32    %262 = mov %259.y
+            64    %263 = load_const (0x000000000000000c = 12)
+            32    %264 = mov %259.w
+            32    %265 = ushr %88, %24 (0x1)
+            32    %266 = iand %11, %23 (0xffffff00)
+            32    %267 = ior %266, %265
+            32    %268 = iand %267, %27 (0xffff00ff)
+            32    %269 = load_const (0x00000006)
+            32    %270 = load_const (0x00000010 = 16)
+            32    %271 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %272 = unpack_32_4x8 %10
+            32    %273 = u2u32 %272.x
+            32    %274 = load_const (0x00000018 = 24)
+            32    %275 = ishl %273, %274 (0x18)
+            32    %276 = load_const (0x00ffffff = 16777215)
+            32    %277 = extract_u16 %268, %21 (0x0)
+            32    %278 = ior %277, %275
+            32    %279 = iand %37, %89 (0x40)
+            32    %280 = ushr %279, %269 (0x6)
+            64    %281 = load_const (0x0000000000000010 = 16)
+            64    %282 = load_const (0x0000000000000014 = 20)
+            64    %283 = load_const (0x0000000000000018 = 24)
+            16    %284 = u2u16 %272.y
+            16    %285 = u2u16 %272.z
+            16    %286 = ishl %285, %26 (0x8)
+            16    %287 = ior %284, %286
+            8     %288 = u2u8 %287
+            16    %289 = load_const (0x0001)
+            16    %290 = extract_u8 %287, %289 (0x1)
+            8     %291 = u2u8 %290
+            32    %292 = u2u32 %288
+            32    %293 = ishl %292, %26 (0x8)
+            32    %294 = iand %28 (0xffff0000), %9
+            32    %295 = ior %294, %293
+            32    %296 = u2u32 %291
+            32    %297 = ishl %296, %270 (0x10)
+            32    %298 = iand %295, %271 (0xff00ffff)
+            32    %299 = ior %298, %297
+            32    %300 = u2u32 %272.w
+            32    %301 = ishl %300, %274 (0x18)
+            32    %302 = iand %299, %276 (0xffffff)
+            32    %303 = ior %302, %301
+            8x4   %304 = unpack_32_4x8 %278
+            8     %305 = iand %304.x, %87 (0x1)
+            1     %306 = ine %305, %22 (0x0)
+            64    %307 = b2i64 %306
+            64    %308 = ishl %307, %26 (0x8)
+            32    %309 = unpack_64_2x32_split_x %308
+            32    %310 = load_const (0x00000005)
+            32    %311 = ior %309, %310 (0x5)
+            32    %312 = unpack_64_2x32_split_y %308
+            64    %313 = pack_64_2x32_split %311, %312
+            8     %314 = iand %304.y, %87 (0x1)
+            1     %315 = ine %314, %22 (0x0)
+            64    %316 = b2i64 %315
+            32    %317 = load_const (0x00000009)
+            64    %318 = ishl %316, %317 (0x9)
+            64    %319 = ior %313, %318
+            8     %320 = iand %304.z, %87 (0x1)
+            1     %321 = ine %320, %22 (0x0)
+            64    %322 = b2i64 %321
+            32    %323 = load_const (0x0000000a = 10)
+            64    %324 = ishl %322, %323 (0xa)
+            64    %325 = ior %319, %324
+            64    %326 = u2u64 %280
+            32    %327 = load_const (0x0000000d = 13)
+            64    %328 = ishl %326, %327 (0xd)
+            64    %329 = ior %325, %328
+            32    %330 = unpack_64_2x32_split_x %329
+            32    %331 = load_const (0x7b000000 = 2063597568)
+            32    %332 = ior %331 (0x7b000000), %330
+                         @store_global (%332, %257) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %333 = u2u64 %85
+            64    %334 = ishl %333, %26 (0x8)
+            8x4   %335 = unpack_32_4x8 %303
+            8     %336 = iand %335.x, %87 (0x1)
+            1     %337 = ine %336, %22 (0x0)
+            64    %338 = b2i64 %337
+            64    %339 = ishl %338, %317 (0x9)
+            64    %340 = ior %334, %339
+            32    %341 = u2u32 %340
+            64    %342 = iadd %257, %48 (0x4)
+                         @store_global (%341, %342) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %343 = iadd %257, %95 (0x8)
+                         @store_global (%260, %343) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %344 = iadd %257, %263 (0xc)
+                         @store_global (%261, %344) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %345 = iadd %257, %281 (0x10)
+                         @store_global (%262, %345) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %346 = iadd %257, %282 (0x14)
+                         @store_global (%264, %346) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %347 = iadd %257, %283 (0x18)
+                         @store_global (%21 (0x0), %347) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b28
+        } else {
+            block b18:   // preds: b7
+            64    %348 = load_const (0x000000000000000c = 12)
+            32    %349 = umax %92, %90
+            1     %350 = ine %349, %21 (0x0)
+            64    %351 = iadd %30, %51
+                         // succs: b19 b26
+            if %350 {
+                block b19:   // preds: b18
+                32    %352 = ushr %90, %25 (0x3)
+                32    %353 = ushr %92, %42 (0x2)
+                32    %354 = iadd.nsw %352, %353
+                32    %355 = ishl %354, %42 (0x2)
+                32    %356 = load_const (0xffffffff = -1 = 4294967295)
+                32    %357 = iadd %356 (0xffffffff), %355
+                64    %358 = load_const (0x0000000000000008)
+                64    %359 = load_const (0x0000000000000010 = 16)
+                32    %360 = load_const (0x00000010 = 16)
+                32    %361 = load_const (0x78080000 = 2013790208)
+                32    %362 = ior %361 (0x78080000), %357
+                             @store_global (%362, %351) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %363 = iadd %351, %48 (0x4)
+                             // succs: b20 b21
+                if %91 {
+                    block b20:   // preds: b19
+                    32    %364 = iadd %46, %24 (0x1)
+                    64    %365 = iadd %53, %348 (0xc)
+                    64    %366 = iadd %31, %365
+                    1     %367 = ieq %366, %20 (0x0)
+                    32    %368 = b2i32 %367
+                    32    %369 = iand %8, %23 (0xffffff00)
+                    32    %370 = ior %369, %368
+                    32    %371 = load_const (0x00000100 = 256)
+                    32    %372 = iand %370, %27 (0xffff00ff)
+                    32    %373 = ior %372, %371 (0x100)
+                    16x2  %374 = unpack_32_2x16 %16
+                    32    %375 = u2u32 %374.x
+                    32    %376 = ishl %375, %360 (0x10)
+                    32    %377 = extract_u16 %373, %21 (0x0)
+                    32    %378 = ior %377, %376
+                    32    %379 = iand %7, %23 (0xffffff00)
+                    32    %380 = ior %379, %24 (0x1)
+                    32    %381 = load_const (0x0000000d = 13)
+                    8     %382 = u2u8 %374.y
+                    16    %383 = load_const (0x0001)
+                    16    %384 = extract_u8 %374.y, %383 (0x1)
+                    8     %385 = u2u8 %384
+                    32    %386 = u2u32 %382
+                    32    %387 = ishl %386, %26 (0x8)
+                    32    %388 = iand %380, %27 (0xffff00ff)
+                    32    %389 = ior %388, %387
+                    32    %390 = u2u32 %385
+                    32    %391 = ishl %390, %360 (0x10)
+                    32    %392 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %393 = iand %389, %392 (0xff00ffff)
+                    32    %394 = ior %393, %391
+                    8x4   %395 = unpack_32_4x8 %14
+                    32    %396 = u2u32 %395.x
+                    32    %397 = load_const (0x00000018 = 24)
+                    32    %398 = ishl %396, %397 (0x18)
+                    32    %399 = load_const (0x00ffffff = 16777215)
+                    32    %400 = iand %394, %399 (0xffffff)
+                    32    %401 = ior %400, %398
+                    64    %402 = load_const (0x0000000000000014 = 20)
+                    32x2  %403 = unpack_64_2x32 %366
+                    8x4   %404 = unpack_32_4x8 %378
+                    8     %405 = iand %404.x, %87 (0x1)
+                    1     %406 = ine %405, %22 (0x0)
+                    64    %407 = b2i64 %406
+                    64    %408 = ishl %407, %381 (0xd)
+                    8     %409 = iand %404.y, %87 (0x1)
+                    1     %410 = ine %409, %22 (0x0)
+                    64    %411 = b2i64 %410
+                    32    %412 = load_const (0x0000000e = 14)
+                    64    %413 = ishl %411, %412 (0xe)
+                    64    %414 = ior %408, %413
+                    64    %415 = u2u64 %94
+                    64    %416 = ishl %415, %360 (0x10)
+                    64    %417 = ior %414, %416
+                    8x4   %418 = unpack_32_4x8 %401
+                    8     %419 = iand %418.x, %87 (0x1)
+                    1     %420 = ine %419, %22 (0x0)
+                    64    %421 = b2i64 %420
+                    32    %422 = load_const (0x00000019 = 25)
+                    64    %423 = ishl %421, %422 (0x19)
+                    64    %424 = ior %417, %423
+                    64    %425 = u2u64 %46
+                    32    %426 = load_const (0x0000001a = 26)
+                    64    %427 = ishl %425, %426 (0x1a)
+                    64    %428 = ior %424, %427
+                    32    %429 = u2u32 %428
+                                 @store_global (%429, %363) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %430 = u2u32 %366
+                    64    %431 = iadd %351, %358 (0x8)
+                                 @store_global (%430, %431) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %432 = mov %403.y
+                    64    %433 = iadd %351, %348 (0xc)
+                                 @store_global (%432, %433) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %434 = iadd %351, %359 (0x10)
+                                 @store_global (%26 (0x8), %434) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %435 = iadd %351, %402 (0x14)
+                                 // succs: b22
+                } else {
+                    block b21:  // preds: b19, succs: b22
+                }
+                block b22:   // preds: b20 b21
+                32    %436 = phi b20: %364, b21: %46
+                64    %437 = phi b20: %435, b21: %363
+                             // succs: b23 b24
+                if %93 {
+                    block b23:   // preds: b22
+                    64    %438 = iadd %32, %55
+                                 @store_global (%47, %438) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %439 = ineg %85
+                    64    %440 = iadd %438, %48 (0x4)
+                                 @store_global (%439, %440) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %441 = ieq %438, %20 (0x0)
+                    32    %442 = b2i32 %441
+                    32    %443 = iand %6, %23 (0xffffff00)
+                    32    %444 = ior %443, %442
+                    32    %445 = load_const (0x00000100 = 256)
+                    32    %446 = iand %444, %27 (0xffff00ff)
+                    32    %447 = ior %446, %445 (0x100)
+                    16x2  %448 = unpack_32_2x16 %16
+                    32    %449 = u2u32 %448.x
+                    32    %450 = ishl %449, %360 (0x10)
+                    32    %451 = extract_u16 %447, %21 (0x0)
+                    32    %452 = ior %451, %450
+                    32    %453 = iand %5, %23 (0xffffff00)
+                    32    %454 = ior %453, %24 (0x1)
+                    32    %455 = load_const (0x0000000d = 13)
+                    8     %456 = u2u8 %448.y
+                    16    %457 = load_const (0x0001)
+                    16    %458 = extract_u8 %448.y, %457 (0x1)
+                    8     %459 = u2u8 %458
+                    32    %460 = u2u32 %456
+                    32    %461 = ishl %460, %26 (0x8)
+                    32    %462 = iand %454, %27 (0xffff00ff)
+                    32    %463 = ior %462, %461
+                    32    %464 = u2u32 %459
+                    32    %465 = ishl %464, %360 (0x10)
+                    32    %466 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %467 = iand %463, %466 (0xff00ffff)
+                    32    %468 = ior %467, %465
+                    8x4   %469 = unpack_32_4x8 %14
+                    32    %470 = u2u32 %469.x
+                    32    %471 = load_const (0x00000018 = 24)
+                    32    %472 = ishl %470, %471 (0x18)
+                    32    %473 = load_const (0x00ffffff = 16777215)
+                    32    %474 = iand %468, %473 (0xffffff)
+                    32    %475 = ior %474, %472
+                    32x2  %476 = unpack_64_2x32 %438
+                    8x4   %477 = unpack_32_4x8 %452
+                    8     %478 = iand %477.x, %87 (0x1)
+                    1     %479 = ine %478, %22 (0x0)
+                    64    %480 = b2i64 %479
+                    64    %481 = ishl %480, %455 (0xd)
+                    8     %482 = iand %477.y, %87 (0x1)
+                    1     %483 = ine %482, %22 (0x0)
+                    64    %484 = b2i64 %483
+                    32    %485 = load_const (0x0000000e = 14)
+                    64    %486 = ishl %484, %485 (0xe)
+                    64    %487 = ior %481, %486
+                    64    %488 = u2u64 %94
+                    64    %489 = ishl %488, %360 (0x10)
+                    64    %490 = ior %487, %489
+                    8x4   %491 = unpack_32_4x8 %475
+                    8     %492 = iand %491.x, %87 (0x1)
+                    1     %493 = ine %492, %22 (0x0)
+                    64    %494 = b2i64 %493
+                    32    %495 = load_const (0x00000019 = 25)
+                    64    %496 = ishl %494, %495 (0x19)
+                    64    %497 = ior %490, %496
+                    64    %498 = u2u64 %436
+                    32    %499 = load_const (0x0000001a = 26)
+                    64    %500 = ishl %498, %499 (0x1a)
+                    64    %501 = ior %497, %500
+                    32    %502 = u2u32 %501
+                                 @store_global (%502, %437) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %503 = u2u32 %438
+                    64    %504 = iadd %437, %48 (0x4)
+                                 @store_global (%503, %504) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %505 = mov %476.y
+                    64    %506 = iadd %437, %358 (0x8)
+                                 @store_global (%505, %506) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %507 = iadd %437, %348 (0xc)
+                                 @store_global (%26 (0x8), %507) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %508 = iadd %437, %359 (0x10)
+                                 // succs: b25
+                } else {
+                    block b24:  // preds: b22, succs: b25
+                }
+                block b25:   // preds: b23 b24
+                64    %509 = phi b23: %508, b24: %437
+                             // succs: b27
+            } else {
+                block b26:  // preds: b18, succs: b27
+            }
+            block b27:   // preds: b25 b26
+            64    %510 = phi b25: %509, b26: %351
+            64    %511 = iadd %31, %53
+            32x4  %512 = @load_global (%511) (access=none, align_mul=4, align_offset=0)
+            64    %513 = load_const (0x0000000000000010 = 16)
+            64    %514 = iadd %511, %513 (0x10)
+            32    %515 = @load_global (%514) (access=none, align_mul=4, align_offset=0)
+            32    %516 = load_const (0x00000010 = 16)
+            32    %517 = mov %512.x
+            64    %518 = load_const (0x0000000000000008)
+            32    %519 = mov %512.z
+            32    %520 = mov %512.y
+            32    %521 = mov %512.w
+            32    %522 = ushr %88, %24 (0x1)
+            32    %523 = iand %4, %23 (0xffffff00)
+            32    %524 = ior %523, %522
+            32    %525 = iand %524, %27 (0xffff00ff)
+            32    %526 = load_const (0x00000006)
+            32    %527 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %528 = unpack_32_4x8 %10
+            32    %529 = u2u32 %528.x
+            32    %530 = load_const (0x00000018 = 24)
+            32    %531 = ishl %529, %530 (0x18)
+            32    %532 = load_const (0x00ffffff = 16777215)
+            32    %533 = extract_u16 %525, %21 (0x0)
+            32    %534 = ior %533, %531
+            32    %535 = iand %37, %89 (0x40)
+            32    %536 = ushr %535, %526 (0x6)
+            64    %537 = load_const (0x0000000000000014 = 20)
+            64    %538 = load_const (0x0000000000000018 = 24)
+            16    %539 = u2u16 %528.y
+            16    %540 = u2u16 %528.z
+            16    %541 = ishl %540, %26 (0x8)
+            16    %542 = ior %539, %541
+            8     %543 = u2u8 %542
+            16    %544 = load_const (0x0001)
+            16    %545 = extract_u8 %542, %544 (0x1)
+            8     %546 = u2u8 %545
+            32    %547 = u2u32 %543
+            32    %548 = ishl %547, %26 (0x8)
+            32    %549 = iand %28 (0xffff0000), %3
+            32    %550 = ior %549, %548
+            32    %551 = u2u32 %546
+            32    %552 = ishl %551, %516 (0x10)
+            32    %553 = iand %550, %527 (0xff00ffff)
+            32    %554 = ior %553, %552
+            32    %555 = u2u32 %528.w
+            32    %556 = ishl %555, %530 (0x18)
+            32    %557 = iand %554, %532 (0xffffff)
+            32    %558 = ior %557, %556
+            8x4   %559 = unpack_32_4x8 %534
+            8     %560 = iand %559.x, %87 (0x1)
+            1     %561 = ine %560, %22 (0x0)
+            64    %562 = b2i64 %561
+            64    %563 = ishl %562, %26 (0x8)
+            32    %564 = unpack_64_2x32_split_x %563
+            32    %565 = load_const (0x00000005)
+            32    %566 = ior %564, %565 (0x5)
+            32    %567 = unpack_64_2x32_split_y %563
+            64    %568 = pack_64_2x32_split %566, %567
+            8     %569 = iand %559.y, %87 (0x1)
+            1     %570 = ine %569, %22 (0x0)
+            64    %571 = b2i64 %570
+            32    %572 = load_const (0x00000009)
+            64    %573 = ishl %571, %572 (0x9)
+            64    %574 = ior %568, %573
+            8     %575 = iand %559.z, %87 (0x1)
+            1     %576 = ine %575, %22 (0x0)
+            64    %577 = b2i64 %576
+            32    %578 = load_const (0x0000000a = 10)
+            64    %579 = ishl %577, %578 (0xa)
+            64    %580 = ior %574, %579
+            64    %581 = u2u64 %536
+            32    %582 = load_const (0x0000000d = 13)
+            64    %583 = ishl %581, %582 (0xd)
+            64    %584 = ior %580, %583
+            32    %585 = unpack_64_2x32_split_x %584
+            32    %586 = load_const (0x7b000000 = 2063597568)
+            32    %587 = ior %586 (0x7b000000), %585
+                         @store_global (%587, %510) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %588 = u2u64 %85
+            64    %589 = ishl %588, %26 (0x8)
+            8x4   %590 = unpack_32_4x8 %558
+            8     %591 = iand %590.x, %87 (0x1)
+            1     %592 = ine %591, %22 (0x0)
+            64    %593 = b2i64 %592
+            64    %594 = ishl %593, %572 (0x9)
+            64    %595 = ior %589, %594
+            32    %596 = u2u32 %595
+            64    %597 = iadd %510, %48 (0x4)
+                         @store_global (%596, %597) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %598 = iadd %510, %518 (0x8)
+                         @store_global (%517, %598) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %599 = iadd %510, %348 (0xc)
+                         @store_global (%519, %599) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %600 = iadd %510, %513 (0x10)
+                         @store_global (%520, %600) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %601 = iadd %510, %537 (0x14)
+                         @store_global (%515, %601) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %602 = iadd %510, %538 (0x18)
+                         @store_global (%521, %602) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b28
+        }
+        block b28:  // preds: b17 b27, succs: b30
+    } else {
+        block b29:  // preds: b6, succs: b30
+    }
+    block b30:   // preds: b28 b29
+    1     %603 = ieq %59, %21 (0x0)
+    32    %604 = load_const (0xffffffff = -1 = 4294967295)
+    32    %605 = iadd %59, %604 (0xffffffff)
+    32    %606 = bcsel %603, %21 (0x0), %605
+    64    %607 = u2u64 %45
+    64    %608 = iadd %51, %607
+    64    %609 = bcsel %603, %51, %608
+    64    %610 = iadd %30, %609
+    1     %611 = ine %47, %606
+                 // succs: b31 b35
+    if %611 {
+        block b31:   // preds: b30
+        32    %612 = iadd %38, %604 (0xffffffff)
+        1     %613 = ieq %41, %612
+                     // succs: b32 b33
+        if %613 {
+            block b32:   // preds: b31
+            64    %614 = load_const (0x0000000000000008)
+            32    %615 = iand %28 (0xffff0000), %2
+            32    %616 = load_const (0x0000000a = 10)
+            16x2  %617 = unpack_32_2x16 %1
+            32    %618 = u2u32 %617.x
+            32    %619 = load_const (0x00000010 = 16)
+            32    %620 = ishl %618, %619 (0x10)
+            32    %621 = extract_u16 %615, %21 (0x0)
+            32    %622 = ior %621, %620
+            8x4   %623 = unpack_32_4x8 %622
+            8     %624 = load_const (0x01)
+            8     %625 = iand %623.x, %624 (0x1)
+            1     %626 = ine %625, %22 (0x0)
+            64    %627 = b2i64 %626
+            64    %628 = ishl %627, %616 (0xa)
+            32    %629 = unpack_64_2x32_split_x %628
+            32    %630 = load_const (0x00000101 = 257)
+            32    %631 = ior %629, %630 (0x101)
+            32    %632 = unpack_64_2x32_split_y %628
+            64    %633 = pack_64_2x32_split %631, %632
+            8     %634 = iand %623.y, %624 (0x1)
+            1     %635 = ine %634, %22 (0x0)
+            64    %636 = b2i64 %635
+            32    %637 = load_const (0x0000000f = 15)
+            64    %638 = ishl %636, %637 (0xf)
+            64    %639 = ior %633, %638
+            32    %640 = unpack_64_2x32_split_x %639
+            32    %641 = load_const (0x18800000 = 411041792)
+            32    %642 = ior %640, %641 (0x18800000)
+                         @store_global (%642, %610) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %643 = u2u32 %39
+            64    %644 = iadd %610, %48 (0x4)
+                         @store_global (%643, %644) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %645 = unpack_64_2x32_split_y %39
+            64    %646 = iadd %610, %614 (0x8)
+                         @store_global (%645, %646) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b34
+        } else {
+            block b33:  // preds: b31, succs: b34
+        }
+        block b34:  // preds: b32 b33, succs: b36
+    } else {
+        block b35:   // preds: b30
+        64    %647 = load_const (0x0000000000000008)
+        32    %648 = iand %28 (0xffff0000), %0
+        32    %649 = load_const (0x0000000a = 10)
+        16x2  %650 = unpack_32_2x16 %1
+        32    %651 = u2u32 %650.x
+        32    %652 = load_const (0x00000010 = 16)
+        32    %653 = ishl %651, %652 (0x10)
+        32    %654 = extract_u16 %648, %21 (0x0)
+        32    %655 = ior %654, %653
+        8x4   %656 = unpack_32_4x8 %655
+        8     %657 = load_const (0x01)
+        8     %658 = iand %656.x, %657 (0x1)
+        1     %659 = ine %658, %22 (0x0)
+        64    %660 = b2i64 %659
+        64    %661 = ishl %660, %649 (0xa)
+        32    %662 = unpack_64_2x32_split_x %661
+        32    %663 = load_const (0x00000101 = 257)
+        32    %664 = ior %662, %663 (0x101)
+        32    %665 = unpack_64_2x32_split_y %661
+        64    %666 = pack_64_2x32_split %664, %665
+        8     %667 = iand %656.y, %657 (0x1)
+        1     %668 = ine %667, %22 (0x0)
+        64    %669 = b2i64 %668
+        32    %670 = load_const (0x0000000f = 15)
+        64    %671 = ishl %669, %670 (0xf)
+        64    %672 = ior %666, %671
+        32    %673 = unpack_64_2x32_split_x %672
+        32    %674 = load_const (0x18800000 = 411041792)
+        32    %675 = ior %673, %674 (0x18800000)
+                     @store_global (%675, %610) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %676 = u2u32 %40
+        64    %677 = iadd %610, %48 (0x4)
+                     @store_global (%676, %677) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %678 = unpack_64_2x32_split_y %40
+        64    %679 = iadd %610, %647 (0x8)
+                     @store_global (%678, %679) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b36
+    }
+    block b36:  // preds: b34 b35, succs: b37
+    block b37:
+   */
+   static const uint32_t impl_0_nir[2143] = {
+    0x000002ce, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000009, 0x00000000, 0x00000039, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000f05,
+    0x00000e05, 0x00001405, 0xffe01605, 0x00003605,
+    0x00007605, 0x00011605, 0xe01ff605, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0015001e, 0xe4001744,
+    0xe4011744, 0xe4021744, 0xc4031744, 0xe4041744,
+    0xc4051744, 0xc4061744, 0xc4071744, 0xc4081744,
+    0xe4091744, 0xe40a1744, 0xc40b1744, 0x00005605,
+    0xc4288000, 0x00000000, 0x002c0027, 0x00009605,
+    0xc4351000, 0x00000000, 0x002c002d, 0xc4288000,
+    0x00000000, 0x001b0027, 0xc431f000, 0x00000000,
+    0x002b0025, 0x00009705, 0xc433f000, 0x00000000,
+    0x002f002b, 0xe438f000, 0x00000000, 0x00000033,
+    0xe431f000, 0x00000000, 0x00340032, 0xc433f000,
+    0x00000000, 0x00230031, 0xe438f000, 0x00000000,
+    0x00000036, 0xc4351000, 0x00000000, 0x001b002b,
+    0xe438f000, 0x00000000, 0x00000038, 0x24345000,
+    0x00000000, 0x00160024, 0x00000001, 0x000000e8,
+    0x00000000, 0x00000001, 0x00000000, 0x00000002,
+    0xc4005354, 0x00000090, 0x00000400, 0xc43ae000,
+    0x00000000, 0x003c0026, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000003d, 0x0000003b, 0x00000026, 0x0000003e,
+    0x24327000, 0x00000000, 0x0017002b, 0x00000001,
+    0x00000104, 0x00000000, 0x00000001, 0x00000000,
+    0x00000018, 0x00003405, 0xc4225000, 0x00000000,
+    0x00000041, 0xc4351000, 0x00000000, 0x001c0044,
+    0xc4322000, 0x00000000, 0x0014001e, 0xc434e000,
+    0x00000000, 0x00450046, 0xa83b8000, 0x00000000,
+    0x0000001f, 0xc438e000, 0x00000000, 0x00000048,
+    0x00021605, 0xc4351000, 0x00000000, 0x004a0049,
+    0xc4287000, 0x00000000, 0x00170047, 0xc434e000,
+    0x00000000, 0x004b004c, 0x903bb000, 0x00000000,
+    0x0000004d, 0x84322000, 0x00000000, 0x0043004e,
+    0x24345000, 0x00000000, 0x0018004f, 0xe4226000,
+    0x00000000, 0x00000050, 0x84322100, 0x00000000,
+    0x0043004e, 0x24345000, 0x00000000, 0x00180052,
+    0xe4226000, 0x00000000, 0x00000053, 0xe4351000,
+    0x00000000, 0x001c0054, 0xe434e000, 0x00000000,
+    0x00550051, 0xc43bd000, 0x00000000, 0x00000056,
+    0x02800e05, 0xc434e000, 0x00000000, 0x00580057,
+    0x00006894, 0x00000164, 0x00000080, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x243a6000, 0x00000000, 0x00400031,
+    0x00000001, 0x00000170, 0x00000000, 0x00000003,
+    0x00000000, 0x0000000a, 0xc4322000, 0x00000000,
+    0x001a0027, 0x24327000, 0x00000000, 0x0017005e,
+    0x00003405, 0xc4322000, 0x00000000, 0x002c0027,
+    0x00081605, 0xc4322000, 0x00000000, 0x001c0027,
+    0x24345000, 0x00000000, 0x00170063, 0xc4322000,
+    0x00000000, 0x002e0027, 0x24345000, 0x00000000,
+    0x00170065, 0xc4288000, 0x00000000, 0x001a0027,
+    0x00000001, 0x0000017c, 0x00000000, 0x00000003,
+    0x00000000, 0x00000004, 0x00011705, 0xc43ac000,
+    0x00000000, 0x00630065, 0x24345000, 0x00000000,
+    0x0017006a, 0xe431f000, 0x00000000, 0x00350020,
+    0x00000001, 0x000001ac, 0x00000000, 0x00000005,
+    0x00000000, 0x0000000d, 0xc47cc000, 0x00000000,
+    0x001b0063, 0x00000000, 0x002c0065, 0xc431f020,
+    0x00000000, 0x006f006e, 0xc4351000, 0x00000000,
+    0x002c0070, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00710072, 0x00019705, 0x00021705, 0x00021605,
+    0x78080e05, 0xc434e000, 0x00000000, 0x00730077,
+    0x00006894, 0x000001e0, 0x000001b0, 0x00040001,
+    0xe431f000, 0x00000000, 0x0032006c, 0x00000001,
+    0x00000190, 0x00000000, 0x00000001, 0x00000000,
+    0x0000004c, 0xc431f000, 0x00000000, 0x001a0030,
+    0xe471f000, 0x00000000, 0x00690037, 0x00000000,
+    0x007c0021, 0x24327000, 0x00000000, 0x0016007d,
+    0xc4225000, 0x00000000, 0x0000007e, 0xc4322000,
+    0x00000000, 0x00190013, 0xc434e000, 0x00000000,
+    0x007f0080, 0x00201605, 0xc4322000, 0x00000000,
+    0x001d0081, 0xc434e000, 0x00000000, 0x00820083,
+    0xa83b8000, 0x00000000, 0x00000012, 0xc438e000,
+    0x00000000, 0x00000085, 0xc4351000, 0x00000000,
+    0x00760086, 0xc4287000, 0x00000000, 0x00170084,
+    0xc434e000, 0x00000000, 0x00870088, 0xc4322000,
+    0x00000000, 0x00190011, 0xc434e000, 0x00000000,
+    0x001a008a, 0x0001b605, 0x84390100, 0x00000000,
+    0x00000085, 0x00003505, 0xa4288100, 0x00000000,
+    0x008e0085, 0x84390000, 0x00000000, 0x0000008f,
+    0xc438e000, 0x00000000, 0x0000008d, 0xc4351000,
+    0x00000000, 0x001c0091, 0xc4322000, 0x00000000,
+    0x001d008b, 0xc434e000, 0x00000000, 0x00920093,
+    0xc438e000, 0x00000000, 0x00000090, 0xc4351000,
+    0x00000000, 0x00760095, 0x00000605, 0xff00ffff,
+    0xc4322000, 0x00000000, 0x00970094, 0xc434e000,
+    0x00000000, 0x00960098, 0x903bb000, 0x00000000,
+    0x00000010, 0xc438e000, 0x00000000, 0x0000009a,
+    0x00031605, 0xc4351000, 0x00000000, 0x009c009b,
+    0x00000605, 0x00ffffff, 0xc4322000, 0x00000000,
+    0x009e0099, 0xc434e000, 0x00000000, 0x009d009f,
+    0x00029705, 0xc83bc000, 0x00000000, 0x0000007d,
+    0x903bb000, 0x00000000, 0x00000089, 0x84322000,
+    0x00000000, 0x006000a3, 0x24345000, 0x00000000,
+    0x001800a4, 0xe4226000, 0x00000000, 0x000000a5,
+    0xe4351000, 0x00000000, 0x008c00a6, 0x84322100,
+    0x00000000, 0x006000a3, 0x24345000, 0x00000000,
+    0x001800a8, 0xe4226000, 0x00000000, 0x000000a9,
+    0x0001d605, 0xe4351000, 0x00000000, 0x00ab00aa,
+    0xe434e000, 0x00000000, 0x00ac00a7, 0xe438f000,
+    0x00000000, 0x00000067, 0xe4351000, 0x00000000,
+    0x007600ae, 0xe434e000, 0x00000000, 0x00af00ad,
+    0x903bb000, 0x00000000, 0x000000a0, 0x84322000,
+    0x00000000, 0x006000b1, 0x24345000, 0x00000000,
+    0x001800b2, 0xe4226000, 0x00000000, 0x000000b3,
+    0x00033605, 0xe4351000, 0x00000000, 0x00b500b4,
+    0xe434e000, 0x00000000, 0x00b600b0, 0xe438f000,
+    0x00000000, 0x00000030, 0x00035605, 0xe4351000,
+    0x00000000, 0x00b900b8, 0xe434e000, 0x00000000,
+    0x00ba00b7, 0xc438e000, 0x00000000, 0x000000bb,
+    0x00006894, 0x000002f0, 0x000001e4, 0x00040001,
+    0xc438e000, 0x00000000, 0x0000007d, 0xe431f000,
+    0x00000000, 0x0069006c, 0x00006894, 0x000002f4,
+    0x000002f8, 0x00040001, 0xc435a100, 0x00000000,
+    0x000000a2, 0xe431f000, 0x00000000, 0x0074006c,
+    0x00006894, 0x000002fc, 0x00000300, 0x00040001,
+    0xe431f000, 0x00000000, 0x0075006c, 0x00006894,
+    0x00000070, 0x00000304, 0x00040001, 0xe431f000,
+    0x00000000, 0x00a1006c, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000007b, 0x0000007a, 0x00000030, 0x000000c3,
+    0xe4000028, 0x000000c2, 0x0000007a, 0x00000079,
+    0x000000c3, 0x00000001, 0x00000198, 0x00000000,
+    0x00000001, 0x00000000, 0x0000004d, 0xe431f000,
+    0x00000000, 0x00390022, 0x00006894, 0x000000c4,
+    0x00000320, 0x00040001, 0xc4349000, 0x00000000,
+    0x0000005e, 0xe431f000, 0x00000000, 0x003200c8,
+    0x00006894, 0x00000324, 0x00000328, 0x00040001,
+    0x24327000, 0x00000000, 0x001600c8, 0xc4225000,
+    0x00000000, 0x000000cb, 0xc4322000, 0x00000000,
+    0x0019000f, 0xc434e000, 0x00000000, 0x00cc00cd,
+    0x00201605, 0xc4322000, 0x00000000, 0x001d00ce,
+    0xc434e000, 0x00000000, 0x00cf00d0, 0xa83b8000,
+    0x00000000, 0x00000012, 0xc438e000, 0x00000000,
+    0x000000d2, 0xc4351000, 0x00000000, 0x007600d3,
+    0xc4287000, 0x00000000, 0x001700d1, 0xc434e000,
+    0x00000000, 0x00d400d5, 0xc4322000, 0x00000000,
+    0x0019000e, 0xc434e000, 0x00000000, 0x001a00d7,
+    0x0001b605, 0x84390100, 0x00000000, 0x000000d2,
+    0x00003505, 0xa4288100, 0x00000000, 0x00db00d2,
+    0x84390000, 0x00000000, 0x000000dc, 0xc438e000,
+    0x00000000, 0x000000da, 0xc4351000, 0x00000000,
+    0x001c00de, 0xc4322000, 0x00000000, 0x001d00d8,
+    0xc434e000, 0x00000000, 0x00df00e0, 0xc438e000,
+    0x00000000, 0x000000dd, 0xc4351000, 0x00000000,
+    0x007600e2, 0x00000605, 0xff00ffff, 0xc4322000,
+    0x00000000, 0x00e400e1, 0xc434e000, 0x00000000,
+    0x00e300e5, 0x903bb000, 0x00000000, 0x00000010,
+    0xc438e000, 0x00000000, 0x000000e7, 0x00031605,
+    0xc4351000, 0x00000000, 0x00e900e8, 0x00000605,
+    0x00ffffff, 0xc4322000, 0x00000000, 0x00eb00e6,
+    0xc434e000, 0x00000000, 0x00ea00ec, 0xc83bc000,
+    0x00000000, 0x000000c8, 0x903bb000, 0x00000000,
+    0x000000d6, 0x84322000, 0x00000000, 0x006000ef,
+    0x24345000, 0x00000000, 0x001800f0, 0xe4226000,
+    0x00000000, 0x000000f1, 0xe4351000, 0x00000000,
+    0x00d900f2, 0x84322100, 0x00000000, 0x006000ef,
+    0x24345000, 0x00000000, 0x001800f4, 0xe4226000,
+    0x00000000, 0x000000f5, 0x0001d605, 0xe4351000,
+    0x00000000, 0x00f700f6, 0xe434e000, 0x00000000,
+    0x00f800f3, 0xe438f000, 0x00000000, 0x00000067,
+    0xe4351000, 0x00000000, 0x007600fa, 0xe434e000,
+    0x00000000, 0x00fb00f9, 0x903bb000, 0x00000000,
+    0x000000ed, 0x84322000, 0x00000000, 0x006000fd,
+    0x24345000, 0x00000000, 0x001800fe, 0xe4226000,
+    0x00000000, 0x000000ff, 0x00033605, 0xe4351000,
+    0x00000000, 0x01010100, 0xe434e000, 0x00000000,
+    0x010200fc, 0xe438f000, 0x00000000, 0x000000c5,
+    0x00035605, 0xe4351000, 0x00000000, 0x01050104,
+    0xe434e000, 0x00000000, 0x01060103, 0xc438e000,
+    0x00000000, 0x00000107, 0x00006894, 0x00000420,
+    0x00000318, 0x00040001, 0xc438e000, 0x00000000,
+    0x000000c8, 0xe431f000, 0x00000000, 0x003200c6,
+    0x00006894, 0x00000424, 0x00000428, 0x00040001,
+    0xc435a100, 0x00000000, 0x000000ee, 0xe431f000,
+    0x00000000, 0x006900c6, 0x00006894, 0x0000042c,
+    0x00000430, 0x00040001, 0xe431f000, 0x00000000,
+    0x007400c6, 0x00006894, 0x00000070, 0x00000434,
+    0x00040001, 0xe431f000, 0x00000000, 0x007500c6,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0xe4000028, 0x0000010e, 0x000000c7,
+    0x000000c6, 0x0000010f, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000062, 0xe4000028,
+    0x00000111, 0x00000110, 0x0000006c, 0x00000112,
+    0xe431f000, 0x00000000, 0x00370021, 0xd0005354,
+    0x00000454, 0x00000400, 0xc435a000, 0x00000000,
+    0x00000116, 0xc435a200, 0x00000000, 0x00000116,
+    0xc435a100, 0x00000000, 0x00000116, 0x00019705,
+    0xc435a300, 0x00000000, 0x00000116, 0xc43cc000,
+    0x00000000, 0x001a0061, 0xc4322000, 0x00000000,
+    0x0019000d, 0xc434e000, 0x00000000, 0x011c011d,
+    0xc4322000, 0x00000000, 0x001d011e, 0x0000d605,
+    0x00021605, 0x00000605, 0xff00ffff, 0x903bb000,
+    0x00000000, 0x0000000c, 0xc438e000, 0x00000000,
+    0x00000123, 0x00031605, 0xc4351000, 0x00000000,
+    0x01250124, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x0017011f, 0xc434e000, 0x00000000,
+    0x01260128, 0xc4322000, 0x00000000, 0x00620027,
+    0xc43cc000, 0x00000000, 0x0120012a, 0x00021705,
+    0x00029705, 0x00031705, 0xa438d100, 0x00000000,
+    0x00000123, 0xa438d200, 0x00000000, 0x00000123,
+    0xa4351000, 0x00000000, 0x001c0130, 0xa434e000,
+    0x00000000, 0x0131012f, 0x84390000, 0x00000000,
+    0x00000132, 0x00003505, 0xa4288000, 0x00000000,
+    0x01340132, 0x84390000, 0x00000000, 0x00000135,
+    0xc438e000, 0x00000000, 0x00000133, 0xc4351000,
+    0x00000000, 0x001c0137, 0xc4322000, 0x00000000,
+    0x000b001e, 0xc434e000, 0x00000000, 0x01380139,
+    0xc438e000, 0x00000000, 0x00000136, 0xc4351000,
+    0x00000000, 0x0121013b, 0xc4322000, 0x00000000,
+    0x0122013a, 0xc434e000, 0x00000000, 0x013c013d,
+    0xc438e300, 0x00000000, 0x00000123, 0xc4351000,
+    0x00000000, 0x0125013f, 0xc4322000, 0x00000000,
+    0x0127013e, 0xc434e000, 0x00000000, 0x01400141,
+    0x903bb000, 0x00000000, 0x00000129, 0x84322000,
+    0x00000000, 0x00600143, 0x24345000, 0x00000000,
+    0x00180144, 0xe4226000, 0x00000000, 0x00000145,
+    0xe4351000, 0x00000000, 0x001c0146, 0xc43bd000,
+    0x00000000, 0x00000147, 0x0000b605, 0xc434e000,
+    0x00000000, 0x01490148, 0xc43be000, 0x00000000,
+    0x00000147, 0xe4369000, 0x00000000, 0x014b014a,
+    0x84322100, 0x00000000, 0x00600143, 0x24345000,
+    0x00000000, 0x0018014d, 0xe4226000, 0x00000000,
+    0x0000014e, 0x00013605, 0xe4351000, 0x00000000,
+    0x0150014f, 0xe434e000, 0x00000000, 0x0151014c,
+    0x84322200, 0x00000000, 0x00600143, 0x24345000,
+    0x00000000, 0x00180153, 0xe4226000, 0x00000000,
+    0x00000154, 0x00015605, 0xe4351000, 0x00000000,
+    0x01560155, 0xe434e000, 0x00000000, 0x01570152,
+    0xe438f000, 0x00000000, 0x0000012b, 0x0001b605,
+    0xe4351000, 0x00000000, 0x015a0159, 0xe434e000,
+    0x00000000, 0x015b0158, 0xc43bd000, 0x00000000,
+    0x0000015c, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x015d015e, 0x00006894, 0x0000057c, 0x00000450,
+    0x00040001, 0xe438f000, 0x00000000, 0x0000005e,
+    0xe4351000, 0x00000000, 0x001c0160, 0x903bb000,
+    0x00000000, 0x00000142, 0x84322000, 0x00000000,
+    0x00600162, 0x24345000, 0x00000000, 0x00180163,
+    0xe4226000, 0x00000000, 0x00000164, 0xe4351000,
+    0x00000000, 0x01500165, 0xe434e000, 0x00000000,
+    0x01660161, 0xc438e000, 0x00000000, 0x00000167,
+    0xe431f000, 0x00000000, 0x00320114, 0x00006894,
+    0x000005a0, 0x000005a4, 0x00040001, 0xe431f000,
+    0x00000000, 0x00690114, 0x00006894, 0x0000045c,
+    0x000005a8, 0x00040001, 0xe431f000, 0x00000000,
+    0x011a0114, 0x00006894, 0x00000460, 0x000005ac,
+    0x00040001, 0xe431f000, 0x00000000, 0x012c0114,
+    0x00006894, 0x00000464, 0x000005b0, 0x00040001,
+    0xe431f000, 0x00000000, 0x012d0114, 0x00006894,
+    0x0000046c, 0x000005b4, 0x00040001, 0xe431f000,
+    0x00000000, 0x012e0114, 0x00006894, 0x0000005c,
+    0x000005b8, 0x00040001, 0x00000003, 0x00000000,
+    0x00000004, 0x00019705, 0xc43ac000, 0x00000000,
+    0x00630065, 0x24345000, 0x00000000, 0x00170171,
+    0xe431f000, 0x00000000, 0x00350020, 0x00000001,
+    0x000005c8, 0x00000000, 0x00000005, 0x00000000,
+    0x0000000d, 0xc47cc000, 0x00000000, 0x001b0063,
+    0x00000000, 0x002c0065, 0xc431f020, 0x00000000,
+    0x01760175, 0xc4351000, 0x00000000, 0x002c0177,
+    0xfffff605, 0xc431f000, 0x00000000, 0x01780179,
+    0x00011705, 0x00021705, 0x00021605, 0x78080e05,
+    0xc434e000, 0x00000000, 0x017a017e, 0x00006894,
+    0x000005fc, 0x000005cc, 0x00040001, 0xe431f000,
+    0x00000000, 0x00320173, 0x00000001, 0x00000190,
+    0x00000000, 0x00000001, 0x00000000, 0x0000004c,
+    0xc431f000, 0x00000000, 0x001a0030, 0xe471f000,
+    0x00000000, 0x01700037, 0x00000000, 0x01830021,
+    0x24327000, 0x00000000, 0x00160184, 0xc4225000,
+    0x00000000, 0x00000185, 0xc4322000, 0x00000000,
+    0x0019000a, 0xc434e000, 0x00000000, 0x01860187,
+    0x00201605, 0xc4322000, 0x00000000, 0x001d0188,
+    0xc434e000, 0x00000000, 0x0189018a, 0xa83b8000,
+    0x00000000, 0x00000012, 0xc438e000, 0x00000000,
+    0x0000018c, 0xc4351000, 0x00000000, 0x017d018d,
+    0xc4287000, 0x00000000, 0x0017018b, 0xc434e000,
+    0x00000000, 0x018e018f, 0xc4322000, 0x00000000,
+    0x00190009, 0xc434e000, 0x00000000, 0x001a0191,
+    0x0001b605, 0x84390100, 0x00000000, 0x0000018c,
+    0x00003505, 0xa4288100, 0x00000000, 0x0195018c,
+    0x84390000, 0x00000000, 0x00000196, 0xc438e000,
+    0x00000000, 0x00000194, 0xc4351000, 0x00000000,
+    0x001c0198, 0xc4322000, 0x00000000, 0x001d0192,
+    0xc434e000, 0x00000000, 0x0199019a, 0xc438e000,
+    0x00000000, 0x00000197, 0xc4351000, 0x00000000,
+    0x017d019c, 0x00000605, 0xff00ffff, 0xc4322000,
+    0x00000000, 0x019e019b, 0xc434e000, 0x00000000,
+    0x019d019f, 0x903bb000, 0x00000000, 0x00000010,
+    0xc438e000, 0x00000000, 0x000001a1, 0x00031605,
+    0xc4351000, 0x00000000, 0x01a301a2, 0x00000605,
+    0x00ffffff, 0xc4322000, 0x00000000, 0x01a501a0,
+    0xc434e000, 0x00000000, 0x01a401a6, 0x00029705,
+    0xc83bc000, 0x00000000, 0x00000184, 0x903bb000,
+    0x00000000, 0x00000190, 0x84322000, 0x00000000,
+    0x006001aa, 0x24345000, 0x00000000, 0x001801ab,
+    0xe4226000, 0x00000000, 0x000001ac, 0xe4351000,
+    0x00000000, 0x019301ad, 0x84322100, 0x00000000,
+    0x006001aa, 0x24345000, 0x00000000, 0x001801af,
+    0xe4226000, 0x00000000, 0x000001b0, 0x0001d605,
+    0xe4351000, 0x00000000, 0x01b201b1, 0xe434e000,
+    0x00000000, 0x01b301ae, 0xe438f000, 0x00000000,
+    0x00000067, 0xe4351000, 0x00000000, 0x017d01b5,
+    0xe434e000, 0x00000000, 0x01b601b4, 0x903bb000,
+    0x00000000, 0x000001a7, 0x84322000, 0x00000000,
+    0x006001b8, 0x24345000, 0x00000000, 0x001801b9,
+    0xe4226000, 0x00000000, 0x000001ba, 0x00033605,
+    0xe4351000, 0x00000000, 0x01bc01bb, 0xe434e000,
+    0x00000000, 0x01bd01b7, 0xe438f000, 0x00000000,
+    0x00000030, 0x00035605, 0xe4351000, 0x00000000,
+    0x01c001bf, 0xe434e000, 0x00000000, 0x01c101be,
+    0xc438e000, 0x00000000, 0x000001c2, 0x00006894,
+    0x0000070c, 0x00000600, 0x00040001, 0xc438e000,
+    0x00000000, 0x00000184, 0xe431f000, 0x00000000,
+    0x017b0173, 0x00006894, 0x00000710, 0x00000714,
+    0x00040001, 0xc435a100, 0x00000000, 0x000001a9,
+    0xe431f000, 0x00000000, 0x01700173, 0x00006894,
+    0x00000718, 0x0000071c, 0x00040001, 0xe431f000,
+    0x00000000, 0x017c0173, 0x00006894, 0x00000070,
+    0x00000720, 0x00040001, 0xe431f000, 0x00000000,
+    0x01a80173, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0xc4000028, 0x00000182,
+    0x00000181, 0x00000030, 0x000001ca, 0xe4000028,
+    0x000001c9, 0x00000181, 0x00000180, 0x000001ca,
+    0x00000001, 0x00000198, 0x00000000, 0x00000001,
+    0x00000000, 0x0000004d, 0xe431f000, 0x00000000,
+    0x00390022, 0x00006894, 0x000000c4, 0x0000073c,
+    0x00040001, 0xc4349000, 0x00000000, 0x0000005e,
+    0xe431f000, 0x00000000, 0x003201cf, 0x00006894,
+    0x00000740, 0x00000744, 0x00040001, 0x24327000,
+    0x00000000, 0x001601cf, 0xc4225000, 0x00000000,
+    0x000001d2, 0xc4322000, 0x00000000, 0x00190008,
+    0xc434e000, 0x00000000, 0x01d301d4, 0x00201605,
+    0xc4322000, 0x00000000, 0x001d01d5, 0xc434e000,
+    0x00000000, 0x01d601d7, 0xa83b8000, 0x00000000,
+    0x00000012, 0xc438e000, 0x00000000, 0x000001d9,
+    0xc4351000, 0x00000000, 0x017d01da, 0xc4287000,
+    0x00000000, 0x001701d8, 0xc434e000, 0x00000000,
+    0x01db01dc, 0xc4322000, 0x00000000, 0x00190007,
+    0xc434e000, 0x00000000, 0x001a01de, 0x0001b605,
+    0x84390100, 0x00000000, 0x000001d9, 0x00003505,
+    0xa4288100, 0x00000000, 0x01e201d9, 0x84390000,
+    0x00000000, 0x000001e3, 0xc438e000, 0x00000000,
+    0x000001e1, 0xc4351000, 0x00000000, 0x001c01e5,
+    0xc4322000, 0x00000000, 0x001d01df, 0xc434e000,
+    0x00000000, 0x01e601e7, 0xc438e000, 0x00000000,
+    0x000001e4, 0xc4351000, 0x00000000, 0x017d01e9,
+    0x00000605, 0xff00ffff, 0xc4322000, 0x00000000,
+    0x01eb01e8, 0xc434e000, 0x00000000, 0x01ea01ec,
+    0x903bb000, 0x00000000, 0x00000010, 0xc438e000,
+    0x00000000, 0x000001ee, 0x00031605, 0xc4351000,
+    0x00000000, 0x01f001ef, 0x00000605, 0x00ffffff,
+    0xc4322000, 0x00000000, 0x01f201ed, 0xc434e000,
+    0x00000000, 0x01f101f3, 0xc83bc000, 0x00000000,
+    0x000001cf, 0x903bb000, 0x00000000, 0x000001dd,
+    0x84322000, 0x00000000, 0x006001f6, 0x24345000,
+    0x00000000, 0x001801f7, 0xe4226000, 0x00000000,
+    0x000001f8, 0xe4351000, 0x00000000, 0x01e001f9,
+    0x84322100, 0x00000000, 0x006001f6, 0x24345000,
+    0x00000000, 0x001801fb, 0xe4226000, 0x00000000,
+    0x000001fc, 0x0001d605, 0xe4351000, 0x00000000,
+    0x01fe01fd, 0xe434e000, 0x00000000, 0x01ff01fa,
+    0xe438f000, 0x00000000, 0x00000067, 0xe4351000,
+    0x00000000, 0x017d0201, 0xe434e000, 0x00000000,
+    0x02020200, 0x903bb000, 0x00000000, 0x000001f4,
+    0x84322000, 0x00000000, 0x00600204, 0x24345000,
+    0x00000000, 0x00180205, 0xe4226000, 0x00000000,
+    0x00000206, 0x00033605, 0xe4351000, 0x00000000,
+    0x02080207, 0xe434e000, 0x00000000, 0x02090203,
+    0xe438f000, 0x00000000, 0x000001cc, 0x00035605,
+    0xe4351000, 0x00000000, 0x020c020b, 0xe434e000,
+    0x00000000, 0x020d020a, 0xc438e000, 0x00000000,
+    0x0000020e, 0x00006894, 0x0000083c, 0x00000734,
+    0x00040001, 0xc438e000, 0x00000000, 0x000001cf,
+    0xe431f000, 0x00000000, 0x003201cd, 0x00006894,
+    0x00000840, 0x00000844, 0x00040001, 0xc435a100,
+    0x00000000, 0x000001f5, 0xe431f000, 0x00000000,
+    0x017b01cd, 0x00006894, 0x00000848, 0x0000084c,
+    0x00040001, 0xe431f000, 0x00000000, 0x017001cd,
+    0x00006894, 0x00000070, 0x00000850, 0x00040001,
+    0xe431f000, 0x00000000, 0x017c01cd, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x00000215, 0x000001ce, 0x000001cd,
+    0x00000216, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000064, 0xe4000028, 0x00000218,
+    0x00000217, 0x00000173, 0x00000219, 0xe431f000,
+    0x00000000, 0x00370021, 0xd0005354, 0x00000870,
+    0x00000400, 0x00021705, 0xe431f000, 0x00000000,
+    0x021e021c, 0xc4005354, 0x0000087c, 0x00000400,
+    0x00021605, 0xc435a000, 0x00000000, 0x0000021d,
+    0x00011705, 0xc435a200, 0x00000000, 0x0000021d,
+    0xc435a100, 0x00000000, 0x0000021d, 0xc435a300,
+    0x00000000, 0x0000021d, 0xc43cc000, 0x00000000,
+    0x001a0061, 0xc4322000, 0x00000000, 0x00190006,
+    0xc434e000, 0x00000000, 0x02270228, 0xc4322000,
+    0x00000000, 0x001d0229, 0x0000d605, 0x00000605,
+    0xff00ffff, 0x903bb000, 0x00000000, 0x0000000c,
+    0xc438e000, 0x00000000, 0x0000022d, 0x00031605,
+    0xc4351000, 0x00000000, 0x022f022e, 0x00000605,
+    0x00ffffff, 0xc4287000, 0x00000000, 0x0017022a,
+    0xc434e000, 0x00000000, 0x02300232, 0xc4322000,
+    0x00000000, 0x00620027, 0xc43cc000, 0x00000000,
+    0x022b0234, 0x00029705, 0x00031705, 0xa438d100,
+    0x00000000, 0x0000022d, 0xa438d200, 0x00000000,
+    0x0000022d, 0xa4351000, 0x00000000, 0x001c0239,
+    0xa434e000, 0x00000000, 0x023a0238, 0x84390000,
+    0x00000000, 0x0000023b, 0x00003505, 0xa4288000,
+    0x00000000, 0x023d023b, 0x84390000, 0x00000000,
+    0x0000023e, 0xc438e000, 0x00000000, 0x0000023c,
+    0xc4351000, 0x00000000, 0x001c0240, 0xc4322000,
+    0x00000000, 0x0005001e, 0xc434e000, 0x00000000,
+    0x02410242, 0xc438e000, 0x00000000, 0x0000023f,
+    0xc4351000, 0x00000000, 0x02210244, 0xc4322000,
+    0x00000000, 0x022c0243, 0xc434e000, 0x00000000,
+    0x02450246, 0xc438e300, 0x00000000, 0x0000022d,
+    0xc4351000, 0x00000000, 0x022f0248, 0xc4322000,
+    0x00000000, 0x02310247, 0xc434e000, 0x00000000,
+    0x0249024a, 0x903bb000, 0x00000000, 0x00000233,
+    0x84322000, 0x00000000, 0x0060024c, 0x24345000,
+    0x00000000, 0x0018024d, 0xe4226000, 0x00000000,
+    0x0000024e, 0xe4351000, 0x00000000, 0x001c024f,
+    0xc43bd000, 0x00000000, 0x00000250, 0x0000b605,
+    0xc434e000, 0x00000000, 0x02520251, 0xc43be000,
+    0x00000000, 0x00000250, 0xe4369000, 0x00000000,
+    0x02540253, 0x84322100, 0x00000000, 0x0060024c,
+    0x24345000, 0x00000000, 0x00180256, 0xe4226000,
+    0x00000000, 0x00000257, 0x00013605, 0xe4351000,
+    0x00000000, 0x02590258, 0xe434e000, 0x00000000,
+    0x025a0255, 0x84322200, 0x00000000, 0x0060024c,
+    0x24345000, 0x00000000, 0x0018025c, 0xe4226000,
+    0x00000000, 0x0000025d, 0x00015605, 0xe4351000,
+    0x00000000, 0x025f025e, 0xe434e000, 0x00000000,
+    0x0260025b, 0xe438f000, 0x00000000, 0x00000235,
+    0x0001b605, 0xe4351000, 0x00000000, 0x02630262,
+    0xe434e000, 0x00000000, 0x02640261, 0xc43bd000,
+    0x00000000, 0x00000265, 0x7b000e05, 0xc434e000,
+    0x00000000, 0x02660267, 0x00006894, 0x000009a0,
+    0x0000086c, 0x00040001, 0xe438f000, 0x00000000,
+    0x0000005e, 0xe4351000, 0x00000000, 0x001c0269,
+    0x903bb000, 0x00000000, 0x0000024b, 0x84322000,
+    0x00000000, 0x0060026b, 0x24345000, 0x00000000,
+    0x0018026c, 0xe4226000, 0x00000000, 0x0000026d,
+    0xe4351000, 0x00000000, 0x0259026e, 0xe434e000,
+    0x00000000, 0x026f026a, 0xc438e000, 0x00000000,
+    0x00000270, 0xe431f000, 0x00000000, 0x0032021b,
+    0x00006894, 0x000009c4, 0x000009c8, 0x00040001,
+    0xe431f000, 0x00000000, 0x0223021b, 0x00006894,
+    0x00000888, 0x000009cc, 0x00040001, 0xe431f000,
+    0x00000000, 0x0170021b, 0x00006894, 0x00000890,
+    0x000009d0, 0x00040001, 0xe431f000, 0x00000000,
+    0x021e021b, 0x00006894, 0x00000894, 0x000009d4,
+    0x00040001, 0xe431f000, 0x00000000, 0x0236021b,
+    0x00006894, 0x00000880, 0x000009d8, 0x00040001,
+    0xe431f000, 0x00000000, 0x0237021b, 0x00006894,
+    0x00000898, 0x000009dc, 0x00040001, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x24327000, 0x00000000,
+    0x00170040, 0xfffff605, 0xc431f000, 0x00000000,
+    0x027c0040, 0xc4273000, 0x00000000, 0x0017027b,
+    0x0000027d, 0xe438f000, 0x00000000, 0x0000002f,
+    0xe431f000, 0x00000000, 0x027f0035, 0xe4273000,
+    0x00000000, 0x0035027b, 0x00000280, 0xe431f000,
+    0x00000000, 0x02810020, 0x24345000, 0x00000000,
+    0x027e0031, 0x00000001, 0x00000a0c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000002, 0xc431f000,
+    0x00000000, 0x027c0028, 0x24327000, 0x00000000,
+    0x0285002b, 0x00000001, 0x00000a18, 0x00000000,
+    0x00000001, 0x00000000, 0x00000024, 0x00011705,
+    0xc4322000, 0x00000000, 0x0004001e, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000003, 0xc438e000,
+    0x00000000, 0x0000028b, 0x00021605, 0xc4351000,
+    0x00000000, 0x028d028c, 0xc4287000, 0x00000000,
+    0x00170289, 0xc434e000, 0x00000000, 0x028e028f,
+    0x903bb000, 0x00000000, 0x00000290, 0x00003405,
+    0x84322000, 0x00000000, 0x02920291, 0x24345000,
+    0x00000000, 0x00180293, 0xe4226000, 0x00000000,
+    0x00000294, 0xe4351000, 0x00000000, 0x028a0295,
+    0xc43bd000, 0x00000000, 0x00000296, 0x00203605,
+    0xc434e000, 0x00000000, 0x02980297, 0xc43be000,
+    0x00000000, 0x00000296, 0xe4369000, 0x00000000,
+    0x029a0299, 0x84322100, 0x00000000, 0x02920291,
+    0x24345000, 0x00000000, 0x0018029c, 0xe4226000,
+    0x00000000, 0x0000029d, 0x0001f605, 0xe4351000,
+    0x00000000, 0x029f029e, 0xe434e000, 0x00000000,
+    0x02a0029b, 0xc43bd000, 0x00000000, 0x000002a1,
+    0x18800e05, 0xc434e000, 0x00000000, 0x02a302a2,
+    0x00006894, 0x00000a90, 0x00000a08, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000029, 0xe431f000,
+    0x00000000, 0x00320282, 0x00006894, 0x00000a94,
+    0x00000a98, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000029, 0xe431f000, 0x00000000, 0x02880282,
+    0x00006894, 0x00000a9c, 0x00000aa0, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000024,
+    0x00011705, 0xc4322000, 0x00000000, 0x0002001e,
+    0x00015605, 0xa83b8000, 0x00000000, 0x00000003,
+    0xc438e000, 0x00000000, 0x000002af, 0x00021605,
+    0xc4351000, 0x00000000, 0x02b102b0, 0xc4287000,
+    0x00000000, 0x001702ad, 0xc434e000, 0x00000000,
+    0x02b202b3, 0x903bb000, 0x00000000, 0x000002b4,
+    0x00003405, 0x84322000, 0x00000000, 0x02b602b5,
+    0x24345000, 0x00000000, 0x001802b7, 0xe4226000,
+    0x00000000, 0x000002b8, 0xe4351000, 0x00000000,
+    0x02ae02b9, 0xc43bd000, 0x00000000, 0x000002ba,
+    0x00203605, 0xc434e000, 0x00000000, 0x02bc02bb,
+    0xc43be000, 0x00000000, 0x000002ba, 0xe4369000,
+    0x00000000, 0x02be02bd, 0x84322100, 0x00000000,
+    0x02b602b5, 0x24345000, 0x00000000, 0x001802c0,
+    0xe4226000, 0x00000000, 0x000002c1, 0x0001f605,
+    0xe4351000, 0x00000000, 0x02c302c2, 0xe434e000,
+    0x00000000, 0x02c402bf, 0xc43bd000, 0x00000000,
+    0x000002c5, 0x18800e05, 0xc434e000, 0x00000000,
+    0x02c702c6, 0x00006894, 0x00000b20, 0x00000a08,
+    0x00040001, 0xc438e000, 0x00000000, 0x0000002a,
+    0xe431f000, 0x00000000, 0x00320282, 0x00006894,
+    0x00000b24, 0x00000b28, 0x00040001, 0xc43be000,
+    0x00000000, 0x0000002a, 0xe431f000, 0x00000000,
+    0x02ac0282, 0x00006894, 0x00000b2c, 0x00000b30,
+    0x00040001, 0x00000000, 0x00000000,
+};
+   nir_def *args[12] = { dst_base, indirect_base, draw_id_base, indirect_stride, indirect_draw_count, draw_base, max_draw_count, flags, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx125_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx125_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx)
+{
+   /*
+    block b0:   // preds:
+    64     %0 = @load_param (param_idx=0)
+    32     %1 = @load_param (param_idx=1)
+    64     %2 = @load_param (param_idx=2)
+    32     %3 = @load_param (param_idx=3)
+    32     %4 = @load_param (param_idx=4)
+    32     %5 = @load_param (param_idx=6)
+    32     %6 = @load_param (param_idx=7)
+    32     %7 = @load_param (param_idx=8)
+    32     %8 = @load_param (param_idx=9)
+    1      %9 = ult %8, %4
+                // succs: b1 b19
+    if %9 {
+        block b1:   // preds: b0
+        32    %10 = load_const (0x00000001)
+        32    %11 = iand %7, %10 (0x1)
+        32    %12 = load_const (0x00000000)
+        1     %13 = ine %11, %12 (0x0)
+        32    %14 = load_const (0x00000002)
+        32    %15 = iand %7, %14 (0x2)
+        1     %16 = ine %15, %12 (0x0)
+        32    %17 = load_const (0x00000004)
+        32    %18 = iand %7, %17 (0x4)
+        1     %19 = ieq %18, %12 (0x0)
+        32    %20 = load_const (0x00000008)
+        32    %21 = iand %7, %20 (0x8)
+        1     %22 = ine %21, %12 (0x0)
+        32    %23 = iadd %3, %8
+        32    %24 = imul %23, %5
+        64    %25 = u2u64 %24
+        32    %26 = imul %8, %1
+        64    %27 = u2u64 %26
+        64    %28 = iadd %2, %25
+        32    %29 = @load_global (%28) (access=none, align_mul=4, align_offset=0)
+        64    %30 = u2u64 %29
+                    // succs: b2 b6
+        if %16 {
+            block b2:   // preds: b1
+            1     %31 = inot %13
+                        // succs: b3 b4
+            if %31 {
+                block b3:   // preds: b2
+                64    %32 = u2u64 %6
+                64    %33 = iadd %0, %27
+                64    %34 = ishl %32, %14 (0x2)
+                64    %35 = iadd %33, %34
+                            @store_global (%29, %35) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b5
+            } else {
+                block b4:   // preds: b2
+                64    %36 = u2u64 %6
+                64    %37 = iadd %0, %27
+                32    %38 = load_const (0x00000003)
+                64    %39 = ishl %36, %38 (0x3)
+                64    %40 = iadd %37, %39
+                            @store_global (%30, %40) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b5
+            }
+            block b5:  // preds: b3 b4, succs: b7
+        } else {
+            block b6:  // preds: b1, succs: b7
+        }
+        block b7:  // preds: b5 b6, succs: b8
+        loop {
+            block b8:   // preds: b7 b17
+            32    %41 = phi b7: %12 (0x0), b17: %75
+            1     %42 = uge %41, %6
+                        // succs: b9 b10
+            if %42 {
+                block b9:// preds: b8
+                break
+                // succs: b18
+            } else {
+                block b10:  // preds: b8, succs: b11
+            }
+            block b11:  // preds: b10
+            32    %43 = ishl %41, %10 (0x1)
+            32    %44 = iadd %10 (0x1), %43
+                        // succs: b12 b13
+            if %19 {
+                block b12:  // preds: b11
+                64    %45 = u2u64 %44
+                32    %46 = load_const (0x00000003)
+                64    %47 = ishl %45, %46 (0x3)
+                64    %48 = iadd %28, %47
+                64    %49 = @load_global (%48) (access=none, align_mul=8, align_offset=0)
+                            // succs: b14
+            } else {
+                block b13:  // preds: b11
+                64    %50 = u2u64 %44
+                32    %51 = load_const (0x00000003)
+                64    %52 = ishl %50, %51 (0x3)
+                64    %53 = iadd %28, %52
+                32x4  %54 = @load_global (%53) (access=none, align_mul=8, align_offset=0)
+                64    %55 = pack_64_2x32 %54.zw
+                64    %56 = pack_64_2x32 %54.xy
+                64    %57 = ineg %56
+                64    %58 = iadd %55, %57
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13
+            64    %59 = phi b12: %49, b13: %58
+            64    %60 = load_const (0x0000000000000000)
+            1     %61 = ieq %29, %12 (0x0)
+            1     %62 = iand %22, %61
+            64    %63 = bcsel %62, %60 (0x0), %59
+            1     %64 = inot %13
+                        // succs: b15 b16
+            if %64 {
+                block b15:  // preds: b14
+                32    %65 = u2u32 %63
+                64    %66 = u2u64 %41
+                64    %67 = iadd %0, %27
+                64    %68 = ishl %66, %14 (0x2)
+                64    %69 = iadd %67, %68
+                            @store_global (%65, %69) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b17
+            } else {
+                block b16:  // preds: b14
+                64    %70 = u2u64 %41
+                64    %71 = iadd %0, %27
+                32    %72 = load_const (0x00000003)
+                64    %73 = ishl %70, %72 (0x3)
+                64    %74 = iadd %71, %73
+                            @store_global (%63, %74) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b17
+            }
+            block b17:  // preds: b15 b16
+            32    %75 = iadd %41, %10 (0x1)
+                        // succs: b8
+        }
+        block b18:  // preds: b9, succs: b20
+    } else {
+        block b19:  // preds: b0, succs: b20
+    }
+    block b20:  // preds: b18 b19, succs: b21
+    block b21:
+   */
+   static const uint32_t impl_0_nir[336] = {
+    0x00000062, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000a, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000a, 0xe4001744,
+    0xc4011744, 0xe4021744, 0xc4031744, 0xc4041744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0x243a6000, 0x00000000, 0x0006000a, 0x00000001,
+    0x0000002c, 0x00000000, 0x00000005, 0x00000000,
+    0x00000015, 0x00003605, 0xc4322000, 0x00000000,
+    0x000d0009, 0x00000e05, 0x24345000, 0x00000000,
+    0x000f000e, 0x00005605, 0xc4322000, 0x00000000,
+    0x00110009, 0x24345000, 0x00000000, 0x000f0012,
+    0x00009605, 0xc4322000, 0x00000000, 0x00140009,
+    0x24327000, 0x00000000, 0x000f0015, 0x00011605,
+    0xc4322000, 0x00000000, 0x00170009, 0x24345000,
+    0x00000000, 0x000f0018, 0xc431f000, 0x00000000,
+    0x000a0005, 0xc433f000, 0x00000000, 0x0007001a,
+    0xe438f000, 0x00000000, 0x0000001b, 0xc433f000,
+    0x00000000, 0x0003000a, 0xe438f000, 0x00000000,
+    0x0000001d, 0xe431f000, 0x00000000, 0x001c0004,
+    0xc4005354, 0x0000007c, 0x00000400, 0xe438f000,
+    0x00000000, 0x00000020, 0x00000001, 0x0000004c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000001,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x0000008c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001e0002, 0xe4351000,
+    0x00000000, 0x00110025, 0xe431f000, 0x00000000,
+    0x00270026, 0x00006894, 0x00000080, 0x000000a0,
+    0x00040001, 0x00000001, 0x00000000, 0x00000006,
+    0xe438f000, 0x00000000, 0x00000008, 0xe431f000,
+    0x00000000, 0x001e0002, 0x00007605, 0xe4351000,
+    0x00000000, 0x002c002a, 0xe431f000, 0x00000000,
+    0x002d002b, 0x00006894, 0x00000084, 0x000000b8,
+    0x00080001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0x00000000, 0x00000007, 0x00000000,
+    0x00000002, 0xc4000028, 0x0000000f, 0x00000031,
+    0x0000005e, 0x0000005d, 0x243a0000, 0x00000000,
+    0x00080033, 0x00000001, 0x000000d0, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0xc4351000, 0x00000000, 0x000d0033,
+    0xc431f000, 0x00000000, 0x0038000d, 0x00000001,
+    0x00000058, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x003c003b,
+    0xe431f000, 0x00000000, 0x003d001f, 0xe4005354,
+    0x000000f8, 0x00000800, 0x00000001, 0x00000000,
+    0x00000009, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x00420041,
+    0xe431f000, 0x00000000, 0x0043001f, 0xd0005354,
+    0x00000110, 0x00000800, 0xe4168000, 0x00000000,
+    0x5e000114, 0xe4368000, 0x00000000, 0x00000045,
+    0xe4349000, 0x00000000, 0x00000047, 0xe431f000,
+    0x00000000, 0x00480046, 0x00000000, 0x00000006,
+    0xe4000028, 0x0000003f, 0x0000003a, 0x00000049,
+    0x00000040, 0x00000f05, 0x24327000, 0x00000000,
+    0x000f0020, 0x24322000, 0x00000000, 0x004d0019,
+    0xe4273000, 0x00000000, 0x004c004e, 0x0000004b,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x00000140, 0x00000000, 0x00000001, 0x00000000,
+    0x00000006, 0xc438e000, 0x00000000, 0x0000004f,
+    0xe438f000, 0x00000000, 0x00000033, 0xe431f000,
+    0x00000000, 0x001e0002, 0xe4351000, 0x00000000,
+    0x00110053, 0xe431f000, 0x00000000, 0x00550054,
+    0x00006894, 0x00000148, 0x00000158, 0x00040001,
+    0x00000001, 0x00000000, 0x00000006, 0xe438f000,
+    0x00000000, 0x00000033, 0xe431f000, 0x00000000,
+    0x001e0002, 0x00007605, 0xe4351000, 0x00000000,
+    0x005a0058, 0xe431f000, 0x00000000, 0x005b0059,
+    0x00006894, 0x0000013c, 0x00000170, 0x00080001,
+    0x00000000, 0x00000001, 0xc431f000, 0x00000000,
+    0x000d0033, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+   nir_def *args[10] = { destination_base, destination_stride, query_data, first_query, num_queries, query_data_offset, query_stride, num_query_items, copy_flags, copy_item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx125_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx125_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = @load_param (param_idx=3)
+    32     %5 = load_const (0x00000004)
+    32     %6 = load_const (0x00000002)
+    32     %7 = ishl %4, %6 (0x2)
+    64     %8 = u2u64 %7
+    32     %9 = iadd %4, %5 (0x4)
+    1     %10 = ult %3, %9
+                // succs: b1 b11
+    if %10 {
+        block b1:   // preds: b0
+        32    %11 = load_const (0x00000003)
+        32    %12 = iadd %4, %11 (0x3)
+        1     %13 = ult %3, %12
+                    // succs: b2 b9
+        if %13 {
+            block b2:   // preds: b1
+            32    %14 = iadd %4, %6 (0x2)
+            1     %15 = ult %3, %14
+                        // succs: b3 b7
+            if %15 {
+                block b3:   // preds: b2
+                32    %16 = load_const (0x00000001)
+                32    %17 = iadd %4, %16 (0x1)
+                1     %18 = uge %3, %17
+                            // succs: b4 b5
+                if %18 {
+                    block b4:   // preds: b3
+                    64    %19 = iadd %2, %8
+                    32    %20 = @load_global (%19) (access=none, align_mul=4, align_offset=0)
+                    64    %21 = iadd %1, %8
+                                @store_global (%20, %21) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                // succs: b6
+                } else {
+                    block b5:  // preds: b3, succs: b6
+                }
+                block b6:  // preds: b4 b5, succs: b8
+            } else {
+                block b7:   // preds: b2
+                64    %22 = iadd %2, %8
+                32x2  %23 = @load_global (%22) (access=none, align_mul=8, align_offset=0)
+                64    %24 = iadd %1, %8
+                            @store_global (%23, %24) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                            // succs: b8
+            }
+            block b8:  // preds: b6 b7, succs: b10
+        } else {
+            block b9:   // preds: b1
+            64    %25 = iadd %2, %8
+            32x4  %26 = @load_global (%25) (access=none, align_mul=16, align_offset=0)
+            32x4  %27 = vec4 %26.x, %26.y, %26.z, %0
+            64    %28 = iadd %1, %8
+                        @store_global (%27, %28) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                        // succs: b10
+        }
+        block b10:  // preds: b8 b9, succs: b12
+    } else {
+        block b11:  // preds: b0
+        64    %29 = iadd %2, %8
+        32x4  %30 = @load_global (%29) (access=none, align_mul=16, align_offset=0)
+        64    %31 = iadd %1, %8
+                    @store_global (%30, %31) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                    // succs: b12
+    }
+    block b12:  // preds: b10 b11, succs: b13
+    block b13:
+   */
+   static const uint32_t impl_0_nir[168] = {
+    0x0000002e, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000004, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000b, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0xc4031744,
+    0x00009605, 0x00005605, 0xc4351000, 0x00000000,
+    0x00080006, 0xe438f000, 0x00000000, 0x00000009,
+    0xc431f000, 0x00000000, 0x00070006, 0x243a6000,
+    0x00000000, 0x000b0005, 0x00000001, 0x00000030,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00007605, 0xc431f000, 0x00000000, 0x000e0006,
+    0x243a6000, 0x00000000, 0x000f0005, 0x00000001,
+    0x00000040, 0x00000000, 0x00000003, 0x00000000,
+    0x00000002, 0xc431f000, 0x00000000, 0x00080006,
+    0x243a6000, 0x00000000, 0x00120005, 0x00000001,
+    0x0000004c, 0x00000000, 0x00000003, 0x00000000,
+    0x00000003, 0x00003605, 0xc431f000, 0x00000000,
+    0x00150006, 0x243a0000, 0x00000000, 0x00160005,
+    0x00000001, 0x0000005c, 0x00000000, 0x00000001,
+    0x00000000, 0x00000004, 0xe431f000, 0x00000000,
+    0x000a0004, 0xc4005354, 0x00000064, 0x00000400,
+    0xe431f000, 0x00000000, 0x000a0003, 0x00006894,
+    0x00000068, 0x0000006c, 0x00040001, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x00000004, 0xe431f000,
+    0x00000000, 0x000a0004, 0xc8005354, 0x0000007c,
+    0x00000800, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000080, 0x00000084, 0x00080003,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x00000090, 0x00001000, 0xd01d3000,
+    0x00000000, 0xe4000094, 0xe5000094, 0xe6000094,
+    0xe4000008, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000098, 0x0000009c, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000004, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x000000a8, 0x00001000, 0xe431f000,
+    0x00000000, 0x000a0003, 0x00006894, 0x000000ac,
+    0x000000b0, 0x0010000f, 0x00000000, 0x00000000,
+};
+   nir_def *args[4] = { dst_base, src_base, num_dwords, dword_offset };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx125_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+void
+gfx125_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = load_const (0x00000000)
+                // succs: b1
+    loop {
+        block b1:   // preds: b0 b16
+        32     %5 = phi b0: %4 (0x0), b16: %8
+        1      %6 = uge %5, %3
+                    // succs: b2 b3
+        if %6 {
+            block b2:// preds: b1
+            break
+            // succs: b17
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:   // preds: b3
+        32     %7 = load_const (0x00000010 = 16)
+        32     %8 = iadd %5, %7 (0x10)
+        1      %9 = ult %3, %8
+                    // succs: b5 b15
+        if %9 {
+            block b5:   // preds: b4
+            32    %10 = load_const (0x0000000c = 12)
+            32    %11 = iadd %5, %10 (0xc)
+            1     %12 = ult %3, %11
+                        // succs: b6 b13
+            if %12 {
+                block b6:   // preds: b5
+                32    %13 = load_const (0x00000008)
+                32    %14 = iadd %5, %13 (0x8)
+                1     %15 = ult %3, %14
+                            // succs: b7 b11
+                if %15 {
+                    block b7:   // preds: b6
+                    32    %16 = load_const (0x00000004)
+                    32    %17 = iadd %5, %16 (0x4)
+                    1     %18 = uge %3, %17
+                                // succs: b8 b9
+                    if %18 {
+                        block b8:   // preds: b7
+                        64    %19 = u2u64 %5
+                        64    %20 = iadd %2, %19
+                        32    %21 = @load_global (%20) (access=none, align_mul=4, align_offset=0)
+                        64    %22 = iadd %1, %19
+                                    @store_global (%21, %22) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                    // succs: b10
+                    } else {
+                        block b9:  // preds: b7, succs: b10
+                    }
+                    block b10:  // preds: b8 b9, succs: b12
+                } else {
+                    block b11:  // preds: b6
+                    64    %23 = u2u64 %5
+                    64    %24 = iadd %2, %23
+                    32x2  %25 = @load_global (%24) (access=none, align_mul=8, align_offset=0)
+                    64    %26 = iadd %1, %23
+                                @store_global (%25, %26) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                                // succs: b12
+                }
+                block b12:  // preds: b10 b11, succs: b14
+            } else {
+                block b13:  // preds: b5
+                64    %27 = u2u64 %5
+                64    %28 = iadd %2, %27
+                32x4  %29 = @load_global (%28) (access=none, align_mul=16, align_offset=0)
+                64    %30 = iadd %1, %27
+                32x4  %31 = vec4 %29.x, %29.y, %29.z, %0
+                            @store_global (%31, %30) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13, succs: b16
+        } else {
+            block b15:  // preds: b4
+            64    %32 = u2u64 %5
+            64    %33 = iadd %2, %32
+            32x4  %34 = @load_global (%33) (access=none, align_mul=16, align_offset=0)
+            64    %35 = iadd %1, %32
+                        @store_global (%34, %35) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                        // succs: b16
+        }
+        block b16:  // preds: b14 b15, succs: b1
+    }
+    block b17:  // preds: b2, succs: b18
+    block b18:
+   */
+   static const uint32_t impl_0_nir[197] = {
+    0x00000037, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000003, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x00000005, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0x00000e05,
+    0x00000002, 0x00000000, 0x00000005, 0x00000000,
+    0x00000002, 0xc4000028, 0x00000006, 0x00000001,
+    0x0000000e, 0x00000035, 0x243a0000, 0x00000000,
+    0x00050008, 0x00000001, 0x00000024, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000003, 0x00021605, 0xc431f000, 0x00000000,
+    0x000d0008, 0x243a6000, 0x00000000, 0x000e0005,
+    0x00000001, 0x0000003c, 0x00000000, 0x00000003,
+    0x00000000, 0x00000003, 0x00019605, 0xc431f000,
+    0x00000000, 0x00110008, 0x243a6000, 0x00000000,
+    0x00120005, 0x00000001, 0x0000004c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000003, 0x00011605,
+    0xc431f000, 0x00000000, 0x00150008, 0x243a6000,
+    0x00000000, 0x00160005, 0x00000001, 0x0000005c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00009605, 0xc431f000, 0x00000000, 0x00190008,
+    0x243a0000, 0x00000000, 0x001a0005, 0x00000001,
+    0x0000006c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001d0004, 0xc4005354,
+    0x00000078, 0x00000400, 0xe431f000, 0x00000000,
+    0x001d0003, 0x00006894, 0x0000007c, 0x00000080,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00240004, 0xc8005354,
+    0x00000094, 0x00000800, 0xe431f000, 0x00000000,
+    0x00240003, 0x00006894, 0x00000098, 0x0000009c,
+    0x00080003, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000006, 0xe438f000, 0x00000000,
+    0x00000008, 0xe431f000, 0x00000000, 0x002a0004,
+    0xd0005354, 0x000000ac, 0x00001000, 0xe431f000,
+    0x00000000, 0x002a0003, 0xd01d3000, 0x00000000,
+    0xe40000b0, 0xe50000b0, 0xe60000b0, 0xe4000008,
+    0x00006894, 0x000000b8, 0x000000b4, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00310004, 0xd0005354,
+    0x000000c8, 0x00001000, 0xe431f000, 0x00000000,
+    0x00310003, 0x00006894, 0x000000cc, 0x000000d0,
+    0x0010000f, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[3] = { dst_ptr, src_ptr, size };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
+struct vtn_bindgen_dummy {
+   vtn_bindgen_dummy() {
+      /* Format strings:
+       *
+       */
+const uint32_t printf_0_blob[1] = {
+    0x00000000,
+};
+      u_printf_singleton_init_or_ref();
+      u_printf_singleton_add_serialized((const void*)printf_0_blob, sizeof(printf_0_blob));
+   }
+
+   ~vtn_bindgen_dummy() {
+      u_printf_singleton_decref();
+   }
+};
+
+static vtn_bindgen_dummy vtn_bindgen_dummy_instance;
diff --git a/src/intel/shaders/intel_gfx125_shaders_binding.h b/src/intel/shaders/intel_gfx125_shaders_binding.h
new file mode 100644
index 00000000000..1cd88cfd027
--- /dev/null
+++ b/src/intel/shaders/intel_gfx125_shaders_binding.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#pragma once
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx125_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx125_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx125_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx125_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id);
+
+void
+gfx125_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx125_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx125_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx125_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx125_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx125_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx125_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
diff --git a/src/intel/shaders/intel_gfx200_shaders_binding.cpp b/src/intel/shaders/intel_gfx200_shaders_binding.cpp
new file mode 100644
index 00000000000..f764952c731
--- /dev/null
+++ b/src/intel/shaders/intel_gfx200_shaders_binding.cpp
@@ -0,0 +1,3844 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx20_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx20_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count)
+{
+   /*
+    block b0:  // preds:
+    64    %0 = @load_param (param_idx=0)
+    32    %1 = @load_param (param_idx=1)
+    32    %2 = load_const (0x00000002)
+    32    %3 = ishl %1, %2 (0x2)
+    32    %4 = load_const (0xffffffff = -1 = 4294967295)
+    32    %5 = iadd %4 (0xffffffff), %3
+    32    %6 = load_const (0x78080000 = 2013790208)
+    32    %7 = ior %6 (0x78080000), %5
+               @store_global (%7, %0) (wrmask=x, access=none, align_mul=4, align_offset=0)
+               // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[37] = {
+    0x0000000a, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000009, 0xe4001744,
+    0xc4011744, 0x00005605, 0xc4351000, 0x00000000,
+    0x00040003, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00050006, 0x78080e05, 0xc434e000, 0x00000000,
+    0x00070008, 0x00006894, 0x00000024, 0x00000008,
+    0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, buffer_count };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx20_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx20_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    32     %2 = undefined
+    32     %3 = undefined
+    64     %4 = @load_param (param_idx=0)
+    32     %5 = @load_param (param_idx=1)
+    32     %6 = @load_param (param_idx=2)
+    64     %7 = @load_param (param_idx=3)
+    32     %8 = @load_param (param_idx=4)
+    32     %9 = @load_param (param_idx=5)
+    64    %10 = load_const (0x0000000000000004)
+    64    %11 = load_const (0x0000000000000000)
+    1     %12 = ieq %7, %11 (0x0)
+    8     %13 = load_const (0x00)
+    8     %14 = load_const (0x01)
+    32    %15 = load_const (0x00000000)
+    32    %16 = b2i32 %12
+    32    %17 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %18 = iand %3, %17 (0xffffff00)
+    32    %19 = ior %18, %16
+    32    %20 = load_const (0x00000001)
+    32    %21 = load_const (0x00000008)
+    32    %22 = load_const (0x00000100 = 256)
+    32    %23 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %24 = iand %19, %23 (0xffff00ff)
+    32    %25 = ior %24, %22 (0x100)
+    16x2  %26 = unpack_32_2x16 %2
+    32    %27 = u2u32 %26.x
+    32    %28 = load_const (0x00000010 = 16)
+    32    %29 = ishl %27, %28 (0x10)
+    32    %30 = extract_u16 %25, %15 (0x0)
+    32    %31 = ior %30, %29
+    64    %32 = load_const (0x0000000000000008)
+    64    %33 = load_const (0x000000000000000c = 12)
+    32    %34 = iand %1, %17 (0xffffff00)
+    32    %35 = ior %34, %20 (0x1)
+    32    %36 = load_const (0x0000000d = 13)
+    8     %37 = u2u8 %26.y
+    16    %38 = load_const (0x0001)
+    16    %39 = extract_u8 %26.y, %38 (0x1)
+    8     %40 = u2u8 %39
+    32    %41 = u2u32 %37
+    32    %42 = ishl %41, %21 (0x8)
+    32    %43 = iand %35, %23 (0xffff00ff)
+    32    %44 = ior %43, %42
+    32    %45 = u2u32 %40
+    32    %46 = ishl %45, %28 (0x10)
+    32    %47 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32    %48 = iand %44, %47 (0xff00ffff)
+    32    %49 = ior %48, %46
+    8x4   %50 = unpack_32_4x8 %0
+    32    %51 = u2u32 %50.x
+    32    %52 = load_const (0x00000018 = 24)
+    32    %53 = ishl %51, %52 (0x18)
+    32    %54 = load_const (0x00ffffff = 16777215)
+    32    %55 = iand %49, %54 (0xffffff)
+    32    %56 = ior %55, %53
+    32x2  %57 = unpack_64_2x32 %7
+    64    %58 = u2u64 %9
+    8x4   %59 = unpack_32_4x8 %31
+    8     %60 = iand %59.x, %14 (0x1)
+    1     %61 = ine %60, %13 (0x0)
+    64    %62 = b2i64 %61
+    64    %63 = ishl %62, %36 (0xd)
+    64    %64 = ior %58, %63
+    8     %65 = iand %59.y, %14 (0x1)
+    1     %66 = ine %65, %13 (0x0)
+    64    %67 = b2i64 %66
+    32    %68 = load_const (0x0000000e = 14)
+    64    %69 = ishl %67, %68 (0xe)
+    64    %70 = ior %64, %69
+    64    %71 = u2u64 %5
+    64    %72 = ishl %71, %28 (0x10)
+    64    %73 = ior %70, %72
+    8x4   %74 = unpack_32_4x8 %56
+    8     %75 = iand %74.x, %14 (0x1)
+    1     %76 = ine %75, %13 (0x0)
+    64    %77 = b2i64 %76
+    32    %78 = load_const (0x00000019 = 25)
+    64    %79 = ishl %77, %78 (0x19)
+    64    %80 = ior %73, %79
+    64    %81 = u2u64 %6
+    32    %82 = load_const (0x0000001a = 26)
+    64    %83 = ishl %81, %82 (0x1a)
+    64    %84 = ior %80, %83
+    32    %85 = u2u32 %84
+                @store_global (%85, %4) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %86 = u2u32 %7
+    64    %87 = iadd %4, %10 (0x4)
+                @store_global (%86, %87) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %88 = mov %57.y
+    64    %89 = iadd %4, %32 (0x8)
+                @store_global (%88, %89) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %90 = iadd %4, %33 (0xc)
+                @store_global (%8, %90) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[264] = {
+    0x0000005d, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000006, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000005f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0xe4001744,
+    0xc4011744, 0xc4021744, 0xe4031744, 0xc4041744,
+    0xc4051744, 0x00009705, 0x00000f05, 0x24327000,
+    0x00000000, 0x000d0009, 0x00001405, 0x00003405,
+    0x00000e05, 0xc4225000, 0x00000000, 0x0000000e,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00130005,
+    0xc434e000, 0x00000000, 0x00120014, 0x00003605,
+    0x00011605, 0x00201605, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00190015, 0xc434e000, 0x00000000,
+    0x0018001a, 0xa83b8000, 0x00000000, 0x00000004,
+    0xc438e000, 0x00000000, 0x0000001c, 0x00021605,
+    0xc4351000, 0x00000000, 0x001e001d, 0xc4287000,
+    0x00000000, 0x0011001b, 0xc434e000, 0x00000000,
+    0x001f0020, 0x00011705, 0x00019705, 0xc4322000,
+    0x00000000, 0x00130003, 0xc434e000, 0x00000000,
+    0x00160024, 0x0001b605, 0x84390100, 0x00000000,
+    0x0000001c, 0x00003505, 0xa4288100, 0x00000000,
+    0x0028001c, 0x84390000, 0x00000000, 0x00000029,
+    0xc438e000, 0x00000000, 0x00000027, 0xc4351000,
+    0x00000000, 0x0017002b, 0xc4322000, 0x00000000,
+    0x00190025, 0xc434e000, 0x00000000, 0x002c002d,
+    0xc438e000, 0x00000000, 0x0000002a, 0xc4351000,
+    0x00000000, 0x001e002f, 0x00000605, 0xff00ffff,
+    0xc4322000, 0x00000000, 0x0031002e, 0xc434e000,
+    0x00000000, 0x00300032, 0x903bb000, 0x00000000,
+    0x00000002, 0xc438e000, 0x00000000, 0x00000034,
+    0x00031605, 0xc4351000, 0x00000000, 0x00360035,
+    0x00000605, 0x00ffffff, 0xc4322000, 0x00000000,
+    0x00380033, 0xc434e000, 0x00000000, 0x00370039,
+    0xc83bc000, 0x00000000, 0x00000009, 0xe438f000,
+    0x00000000, 0x0000000b, 0x903bb000, 0x00000000,
+    0x00000021, 0x84322000, 0x00000000, 0x0010003d,
+    0x24345000, 0x00000000, 0x000f003e, 0xe4226000,
+    0x00000000, 0x0000003f, 0xe4351000, 0x00000000,
+    0x00260040, 0xe434e000, 0x00000000, 0x0041003c,
+    0x84322100, 0x00000000, 0x0010003d, 0x24345000,
+    0x00000000, 0x000f0043, 0xe4226000, 0x00000000,
+    0x00000044, 0x0001d605, 0xe4351000, 0x00000000,
+    0x00460045, 0xe434e000, 0x00000000, 0x00470042,
+    0xe438f000, 0x00000000, 0x00000007, 0xe4351000,
+    0x00000000, 0x001e0049, 0xe434e000, 0x00000000,
+    0x004a0048, 0x903bb000, 0x00000000, 0x0000003a,
+    0x84322000, 0x00000000, 0x0010004c, 0x24345000,
+    0x00000000, 0x000f004d, 0xe4226000, 0x00000000,
+    0x0000004e, 0x00033605, 0xe4351000, 0x00000000,
+    0x0050004f, 0xe434e000, 0x00000000, 0x0051004b,
+    0xe438f000, 0x00000000, 0x00000008, 0x00035605,
+    0xe4351000, 0x00000000, 0x00540053, 0xe434e000,
+    0x00000000, 0x00550052, 0xc438e000, 0x00000000,
+    0x00000056, 0x00006894, 0x0000015c, 0x00000018,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000009,
+    0xe431f000, 0x00000000, 0x000c0006, 0x00006894,
+    0x00000160, 0x00000164, 0x00040001, 0xc435a100,
+    0x00000000, 0x0000003b, 0xe431f000, 0x00000000,
+    0x00220006, 0x00006894, 0x00000168, 0x0000016c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230006,
+    0x00006894, 0x00000028, 0x00000170, 0x00040001,
+};
+   nir_def *args[6] = { dst_ptr, mocs, buffer_idx, address, size, stride };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx20_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx20_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    64      %3 = @load_param (param_idx=0)
+    1       %4 = @load_param (param_idx=1)
+    1       %5 = @load_param (param_idx=2)
+    1       %6 = @load_param (param_idx=3)
+    32      %7 = @load_param (param_idx=4)
+    32      %8 = @load_param (param_idx=5)
+    32      %9 = @load_param (param_idx=6)
+    32     %10 = @load_param (param_idx=7)
+    32     %11 = @load_param (param_idx=8)
+    8      %12 = load_const (0x00)
+    8      %13 = load_const (0x01)
+    64     %14 = load_const (0x0000000000000004)
+    32     %15 = b2i32 %4
+    32     %16 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %17 = iand %2, %16 (0xffffff00)
+    32     %18 = ior %17, %15
+    32     %19 = load_const (0x00000008)
+    32     %20 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %21 = iand %18, %20 (0xffff00ff)
+    32     %22 = load_const (0x00000010 = 16)
+    32     %23 = load_const (0xff00ffff = -16711681 = 4278255615)
+    8x4    %24 = unpack_32_4x8 %1
+    32     %25 = u2u32 %24.x
+    32     %26 = load_const (0x00000018 = 24)
+    32     %27 = ishl %25, %26 (0x18)
+    32     %28 = load_const (0x00ffffff = 16777215)
+    32     %29 = load_const (0x00000000)
+    32     %30 = extract_u16 %21, %29 (0x0)
+    32     %31 = ior %30, %27
+    64     %32 = load_const (0x0000000000000008)
+    64     %33 = load_const (0x000000000000000c = 12)
+    64     %34 = load_const (0x0000000000000010 = 16)
+    64     %35 = load_const (0x0000000000000014 = 20)
+    64     %36 = load_const (0x0000000000000018 = 24)
+    16     %37 = u2u16 %24.y
+    16     %38 = u2u16 %24.z
+    16     %39 = ishl %38, %19 (0x8)
+    16     %40 = ior %37, %39
+    8      %41 = u2u8 %40
+    16     %42 = load_const (0x0001)
+    16     %43 = extract_u8 %40, %42 (0x1)
+    8      %44 = u2u8 %43
+    32     %45 = u2u32 %41
+    32     %46 = ishl %45, %19 (0x8)
+    32     %47 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %48 = iand %47 (0xffff0000), %0
+    32     %49 = ior %48, %46
+    32     %50 = u2u32 %44
+    32     %51 = ishl %50, %22 (0x10)
+    32     %52 = iand %49, %23 (0xff00ffff)
+    32     %53 = ior %52, %51
+    32     %54 = u2u32 %24.w
+    32     %55 = ishl %54, %26 (0x18)
+    32     %56 = iand %53, %28 (0xffffff)
+    32     %57 = ior %56, %55
+    8x4    %58 = unpack_32_4x8 %31
+    8      %59 = iand %58.x, %13 (0x1)
+    1      %60 = ine %59, %12 (0x0)
+    64     %61 = b2i64 %60
+    64     %62 = ishl %61, %19 (0x8)
+    32     %63 = unpack_64_2x32_split_x %62
+    32     %64 = load_const (0x00000005)
+    32     %65 = ior %63, %64 (0x5)
+    32     %66 = unpack_64_2x32_split_y %62
+    64     %67 = pack_64_2x32_split %65, %66
+    8      %68 = iand %58.y, %13 (0x1)
+    1      %69 = ine %68, %12 (0x0)
+    64     %70 = b2i64 %69
+    32     %71 = load_const (0x00000009)
+    64     %72 = ishl %70, %71 (0x9)
+    64     %73 = ior %67, %72
+    8      %74 = iand %58.z, %13 (0x1)
+    1      %75 = ine %74, %12 (0x0)
+    64     %76 = b2i64 %75
+    32     %77 = load_const (0x0000000a = 10)
+    64     %78 = ishl %76, %77 (0xa)
+    64     %79 = ior %73, %78
+    64     %80 = b2i64 %6
+    32     %81 = load_const (0x0000000d = 13)
+    64     %82 = ishl %80, %81 (0xd)
+    64     %83 = ior %79, %82
+    32     %84 = unpack_64_2x32_split_x %83
+    32     %85 = load_const (0x7b000000 = 2063597568)
+    32     %86 = ior %85 (0x7b000000), %84
+                 @store_global (%86, %3) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %87 = b2i64 %5
+    64     %88 = ishl %87, %19 (0x8)
+    8x4    %89 = unpack_32_4x8 %57
+    8      %90 = iand %89.x, %13 (0x1)
+    1      %91 = ine %90, %12 (0x0)
+    64     %92 = b2i64 %91
+    64     %93 = ishl %92, %71 (0x9)
+    64     %94 = ior %88, %93
+    32     %95 = u2u32 %94
+    64     %96 = iadd %3, %14 (0x4)
+                 @store_global (%95, %96) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %97 = iadd %3, %32 (0x8)
+                 @store_global (%7, %97) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %98 = iadd %3, %33 (0xc)
+                 @store_global (%8, %98) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %99 = iadd %3, %34 (0x10)
+                 @store_global (%9, %99) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %100 = iadd %3, %35 (0x14)
+                 @store_global (%10, %100) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %101 = iadd %3, %36 (0x18)
+                 @store_global (%11, %101) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                 // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[313] = {
+    0x00000068, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000006d, 0x00000607,
+    0x00000607, 0x00000607, 0xe4001744, 0x24011744,
+    0x24021744, 0x24031744, 0xc4041744, 0xc4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0x00001405,
+    0x00003405, 0x00009705, 0xc4225000, 0x00000000,
+    0x00000006, 0xffe01605, 0xc4322000, 0x00000000,
+    0x00120004, 0xc434e000, 0x00000000, 0x00110013,
+    0x00011605, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x00160014, 0x00021605, 0x00000605, 0xff00ffff,
+    0x903bb000, 0x00000000, 0x00000003, 0xc438e000,
+    0x00000000, 0x0000001a, 0x00031605, 0xc4351000,
+    0x00000000, 0x001c001b, 0x00000605, 0x00ffffff,
+    0x00000e05, 0xc4287000, 0x00000000, 0x001f0017,
+    0xc434e000, 0x00000000, 0x001d0020, 0x00011705,
+    0x00019705, 0x00021705, 0x00029705, 0x00031705,
+    0xa438d100, 0x00000000, 0x0000001a, 0xa438d200,
+    0x00000000, 0x0000001a, 0xa4351000, 0x00000000,
+    0x00150028, 0xa434e000, 0x00000000, 0x00290027,
+    0x84390000, 0x00000000, 0x0000002a, 0x00003505,
+    0xa4288000, 0x00000000, 0x002c002a, 0x84390000,
+    0x00000000, 0x0000002d, 0xc438e000, 0x00000000,
+    0x0000002b, 0xc4351000, 0x00000000, 0x0015002f,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x00020031,
+    0xc434e000, 0x00000000, 0x00300032, 0xc438e000,
+    0x00000000, 0x0000002e, 0xc4351000, 0x00000000,
+    0x00180034, 0xc4322000, 0x00000000, 0x00190033,
+    0xc434e000, 0x00000000, 0x00350036, 0xc438e300,
+    0x00000000, 0x0000001a, 0xc4351000, 0x00000000,
+    0x001c0038, 0xc4322000, 0x00000000, 0x001e0037,
+    0xc434e000, 0x00000000, 0x0039003a, 0x903bb000,
+    0x00000000, 0x00000021, 0x84322000, 0x00000000,
+    0x000f003c, 0x24345000, 0x00000000, 0x000e003d,
+    0xe4226000, 0x00000000, 0x0000003e, 0xe4351000,
+    0x00000000, 0x0015003f, 0xc43bd000, 0x00000000,
+    0x00000040, 0x0000b605, 0xc434e000, 0x00000000,
+    0x00420041, 0xc43be000, 0x00000000, 0x00000040,
+    0xe4369000, 0x00000000, 0x00440043, 0x84322100,
+    0x00000000, 0x000f003c, 0x24345000, 0x00000000,
+    0x000e0046, 0xe4226000, 0x00000000, 0x00000047,
+    0x00013605, 0xe4351000, 0x00000000, 0x00490048,
+    0xe434e000, 0x00000000, 0x004a0045, 0x84322200,
+    0x00000000, 0x000f003c, 0x24345000, 0x00000000,
+    0x000e004c, 0xe4226000, 0x00000000, 0x0000004d,
+    0x00015605, 0xe4351000, 0x00000000, 0x004f004e,
+    0xe434e000, 0x00000000, 0x0050004b, 0xe4226000,
+    0x00000000, 0x00000008, 0x0001b605, 0xe4351000,
+    0x00000000, 0x00530052, 0xe434e000, 0x00000000,
+    0x00540051, 0xc43bd000, 0x00000000, 0x00000055,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x00560057,
+    0x00006894, 0x00000160, 0x00000014, 0x00040001,
+    0xe4226000, 0x00000000, 0x00000007, 0xe4351000,
+    0x00000000, 0x00150059, 0x903bb000, 0x00000000,
+    0x0000003b, 0x84322000, 0x00000000, 0x000f005b,
+    0x24345000, 0x00000000, 0x000e005c, 0xe4226000,
+    0x00000000, 0x0000005d, 0xe4351000, 0x00000000,
+    0x0049005e, 0xe434e000, 0x00000000, 0x005f005a,
+    0xc438e000, 0x00000000, 0x00000060, 0xe431f000,
+    0x00000000, 0x00100005, 0x00006894, 0x00000184,
+    0x00000188, 0x00040001, 0xe431f000, 0x00000000,
+    0x00220005, 0x00006894, 0x00000024, 0x0000018c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230005,
+    0x00006894, 0x00000028, 0x00000190, 0x00040001,
+    0xe431f000, 0x00000000, 0x00240005, 0x00006894,
+    0x0000002c, 0x00000194, 0x00040001, 0xe431f000,
+    0x00000000, 0x00250005, 0x00006894, 0x00000030,
+    0x00000198, 0x00040001, 0xe431f000, 0x00000000,
+    0x00260005, 0x00006894, 0x00000034, 0x0000019c,
+    0x00040001,
+};
+   nir_def *args[9] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx20_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id);
+
+void
+gfx20_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    64      %3 = @load_param (param_idx=0)
+    1       %4 = @load_param (param_idx=1)
+    1       %5 = @load_param (param_idx=2)
+    1       %6 = @load_param (param_idx=3)
+    32      %7 = @load_param (param_idx=4)
+    32      %8 = @load_param (param_idx=5)
+    32      %9 = @load_param (param_idx=6)
+    32     %10 = @load_param (param_idx=7)
+    32     %11 = @load_param (param_idx=8)
+    32     %12 = @load_param (param_idx=9)
+    32     %13 = @load_param (param_idx=10)
+    32     %14 = @load_param (param_idx=11)
+    8      %15 = load_const (0x00)
+    8      %16 = load_const (0x01)
+    32     %17 = load_const (0x00000008)
+    64     %18 = load_const (0x0000000000000004)
+    32     %19 = b2i32 %4
+    32     %20 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %21 = iand %2, %20 (0xffffff00)
+    32     %22 = ior %21, %19
+    32     %23 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %24 = iand %22, %23 (0xffff00ff)
+    32     %25 = load_const (0x00000010 = 16)
+    32     %26 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32     %27 = load_const (0x00000018 = 24)
+    32     %28 = load_const (0x01000000 = 16777216)
+    32     %29 = load_const (0x00ffffff = 16777215)
+    32     %30 = load_const (0x00000000)
+    32     %31 = extract_u16 %24, %30 (0x0)
+    32     %32 = ior %31, %28 (0x1000000)
+    64     %33 = load_const (0x0000000000000008)
+    64     %34 = load_const (0x000000000000000c = 12)
+    64     %35 = load_const (0x0000000000000010 = 16)
+    64     %36 = load_const (0x0000000000000014 = 20)
+    64     %37 = load_const (0x0000000000000018 = 24)
+    64     %38 = load_const (0x000000000000001c = 28)
+    64     %39 = load_const (0x0000000000000020 = 32)
+    64     %40 = load_const (0x0000000000000024 = 36)
+    16x2   %41 = unpack_32_2x16 %0
+    8      %42 = u2u8 %41.x
+    16     %43 = load_const (0x0001)
+    16     %44 = extract_u8 %41.x, %43 (0x1)
+    8      %45 = u2u8 %44
+    32     %46 = u2u32 %42
+    32     %47 = ishl %46, %17 (0x8)
+    32     %48 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %49 = iand %48 (0xffff0000), %1
+    32     %50 = ior %49, %47
+    32     %51 = u2u32 %45
+    32     %52 = ishl %51, %25 (0x10)
+    32     %53 = iand %50, %26 (0xff00ffff)
+    32     %54 = ior %53, %52
+    8x4    %55 = unpack_32_4x8 %0
+    32     %56 = u2u32 %55.z
+    32     %57 = ishl %56, %27 (0x18)
+    32     %58 = iand %54, %29 (0xffffff)
+    32     %59 = ior %58, %57
+    8x4    %60 = unpack_32_4x8 %32
+    8      %61 = iand %60.x, %16 (0x1)
+    1      %62 = ine %61, %15 (0x0)
+    64     %63 = b2i64 %62
+    64     %64 = ishl %63, %17 (0x8)
+    32     %65 = unpack_64_2x32_split_x %64
+    32     %66 = ior %65, %17 (0x8)
+    32     %67 = unpack_64_2x32_split_y %64
+    64     %68 = pack_64_2x32_split %66, %67
+    8      %69 = iand %60.y, %16 (0x1)
+    1      %70 = ine %69, %15 (0x0)
+    64     %71 = b2i64 %70
+    32     %72 = load_const (0x00000009)
+    64     %73 = ishl %71, %72 (0x9)
+    64     %74 = ior %68, %73
+    8      %75 = iand %60.z, %16 (0x1)
+    1      %76 = ine %75, %15 (0x0)
+    64     %77 = b2i64 %76
+    32     %78 = load_const (0x0000000a = 10)
+    64     %79 = ishl %77, %78 (0xa)
+    64     %80 = ior %74, %79
+    8      %81 = iand %60.w, %16 (0x1)
+    1      %82 = ine %81, %15 (0x0)
+    64     %83 = b2i64 %82
+    32     %84 = load_const (0x0000000b = 11)
+    64     %85 = ishl %83, %84 (0xb)
+    64     %86 = ior %80, %85
+    64     %87 = b2i64 %6
+    32     %88 = load_const (0x0000000d = 13)
+    64     %89 = ishl %87, %88 (0xd)
+    64     %90 = ior %86, %89
+    32     %91 = unpack_64_2x32_split_x %90
+    32     %92 = load_const (0x7b000000 = 2063597568)
+    32     %93 = ior %92 (0x7b000000), %91
+                 @store_global (%93, %3) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %94 = b2i64 %5
+    64     %95 = ishl %94, %17 (0x8)
+    8x4    %96 = unpack_32_4x8 %59
+    8      %97 = iand %96.x, %16 (0x1)
+    1      %98 = ine %97, %15 (0x0)
+    64     %99 = b2i64 %98
+    64    %100 = ishl %99, %72 (0x9)
+    64    %101 = ior %95, %100
+    32    %102 = u2u32 %101
+    64    %103 = iadd %3, %18 (0x4)
+                 @store_global (%102, %103) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %104 = iadd %3, %33 (0x8)
+                 @store_global (%7, %104) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %105 = iadd %3, %34 (0xc)
+                 @store_global (%8, %105) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %106 = iadd %3, %35 (0x10)
+                 @store_global (%9, %106) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %107 = iadd %3, %36 (0x14)
+                 @store_global (%10, %107) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %108 = iadd %3, %37 (0x18)
+                 @store_global (%11, %108) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %109 = iadd %3, %38 (0x1c)
+                 @store_global (%12, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %110 = iadd %3, %39 (0x20)
+                 @store_global (%13, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %111 = iadd %3, %40 (0x24)
+                 @store_global (%14, %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                 // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[353] = {
+    0x00000072, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000007a, 0x00000607,
+    0x00000607, 0x00000607, 0xe4001744, 0x24011744,
+    0x24021744, 0x24031744, 0xc4041744, 0xc4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0xc40a1744, 0xc40b1744, 0x00001405, 0x00003405,
+    0x00011605, 0x00009705, 0xc4225000, 0x00000000,
+    0x00000006, 0xffe01605, 0xc4322000, 0x00000000,
+    0x00160004, 0xc434e000, 0x00000000, 0x00150017,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00190018,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0x00000e05,
+    0xc4287000, 0x00000000, 0x0020001a, 0xc434e000,
+    0x00000000, 0x001e0021, 0x00011705, 0x00019705,
+    0x00021705, 0x00029705, 0x00031705, 0x00039705,
+    0x00041705, 0x00049705, 0xa83b8000, 0x00000000,
+    0x00000002, 0x84390000, 0x00000000, 0x0000002b,
+    0x00003505, 0xa4288000, 0x00000000, 0x002d002b,
+    0x84390000, 0x00000000, 0x0000002e, 0xc438e000,
+    0x00000000, 0x0000002c, 0xc4351000, 0x00000000,
+    0x00130030, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x00030032, 0xc434e000, 0x00000000, 0x00310033,
+    0xc438e000, 0x00000000, 0x0000002f, 0xc4351000,
+    0x00000000, 0x001b0035, 0xc4322000, 0x00000000,
+    0x001c0034, 0xc434e000, 0x00000000, 0x00360037,
+    0x903bb000, 0x00000000, 0x00000002, 0xc438e200,
+    0x00000000, 0x00000039, 0xc4351000, 0x00000000,
+    0x001d003a, 0xc4322000, 0x00000000, 0x001f0038,
+    0xc434e000, 0x00000000, 0x003b003c, 0x903bb000,
+    0x00000000, 0x00000022, 0x84322000, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x0011003f,
+    0xe4226000, 0x00000000, 0x00000040, 0xe4351000,
+    0x00000000, 0x00130041, 0xc43bd000, 0x00000000,
+    0x00000042, 0xc434e000, 0x00000000, 0x00130043,
+    0xc43be000, 0x00000000, 0x00000042, 0xe4369000,
+    0x00000000, 0x00450044, 0x84322100, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x00110047,
+    0xe4226000, 0x00000000, 0x00000048, 0x00013605,
+    0xe4351000, 0x00000000, 0x004a0049, 0xe434e000,
+    0x00000000, 0x004b0046, 0x84322200, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x0011004d,
+    0xe4226000, 0x00000000, 0x0000004e, 0x00015605,
+    0xe4351000, 0x00000000, 0x0050004f, 0xe434e000,
+    0x00000000, 0x0051004c, 0x84322300, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x00110053,
+    0xe4226000, 0x00000000, 0x00000054, 0x00017605,
+    0xe4351000, 0x00000000, 0x00560055, 0xe434e000,
+    0x00000000, 0x00570052, 0xe4226000, 0x00000000,
+    0x00000008, 0x0001b605, 0xe4351000, 0x00000000,
+    0x005a0059, 0xe434e000, 0x00000000, 0x005b0058,
+    0xc43bd000, 0x00000000, 0x0000005c, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x005d005e, 0x00006894,
+    0x0000017c, 0x00000014, 0x00040001, 0xe4226000,
+    0x00000000, 0x00000007, 0xe4351000, 0x00000000,
+    0x00130060, 0x903bb000, 0x00000000, 0x0000003d,
+    0x84322000, 0x00000000, 0x00120062, 0x24345000,
+    0x00000000, 0x00110063, 0xe4226000, 0x00000000,
+    0x00000064, 0xe4351000, 0x00000000, 0x004a0065,
+    0xe434e000, 0x00000000, 0x00660061, 0xc438e000,
+    0x00000000, 0x00000067, 0xe431f000, 0x00000000,
+    0x00140005, 0x00006894, 0x000001a0, 0x000001a4,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230005,
+    0x00006894, 0x00000024, 0x000001a8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00240005, 0x00006894,
+    0x00000028, 0x000001ac, 0x00040001, 0xe431f000,
+    0x00000000, 0x00250005, 0x00006894, 0x0000002c,
+    0x000001b0, 0x00040001, 0xe431f000, 0x00000000,
+    0x00260005, 0x00006894, 0x00000030, 0x000001b4,
+    0x00040001, 0xe431f000, 0x00000000, 0x00270005,
+    0x00006894, 0x00000034, 0x000001b8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00280005, 0x00006894,
+    0x00000038, 0x000001bc, 0x00040001, 0xe431f000,
+    0x00000000, 0x00290005, 0x00006894, 0x0000003c,
+    0x000001c0, 0x00040001, 0xe431f000, 0x00000000,
+    0x002a0005, 0x00006894, 0x00000040, 0x000001c4,
+    0x00040001,
+};
+   nir_def *args[12] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location, param_base_vertex, param_base_instance, param_draw_id };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx20_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx20_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    64     %2 = @load_param (param_idx=0)
+    64     %3 = @load_param (param_idx=1)
+    64     %4 = load_const (0x0000000000000004)
+    64     %5 = load_const (0x0000000000000008)
+    8      %6 = load_const (0x00)
+    32     %7 = load_const (0x00000000)
+    32     %8 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %9 = iand %8 (0xffff0000), %1
+    32    %10 = load_const (0x0000000a = 10)
+    16x2  %11 = unpack_32_2x16 %0
+    32    %12 = u2u32 %11.x
+    32    %13 = load_const (0x00000010 = 16)
+    32    %14 = ishl %12, %13 (0x10)
+    32    %15 = extract_u16 %9, %7 (0x0)
+    32    %16 = ior %15, %14
+    8x4   %17 = unpack_32_4x8 %16
+    8     %18 = load_const (0x01)
+    8     %19 = iand %17.x, %18 (0x1)
+    1     %20 = ine %19, %6 (0x0)
+    64    %21 = b2i64 %20
+    64    %22 = ishl %21, %10 (0xa)
+    32    %23 = unpack_64_2x32_split_x %22
+    32    %24 = load_const (0x00000101 = 257)
+    32    %25 = ior %23, %24 (0x101)
+    32    %26 = unpack_64_2x32_split_y %22
+    64    %27 = pack_64_2x32_split %25, %26
+    8     %28 = iand %17.y, %18 (0x1)
+    1     %29 = ine %28, %6 (0x0)
+    64    %30 = b2i64 %29
+    32    %31 = load_const (0x0000000f = 15)
+    64    %32 = ishl %30, %31 (0xf)
+    64    %33 = ior %27, %32
+    32    %34 = unpack_64_2x32_split_x %33
+    32    %35 = load_const (0x18800000 = 411041792)
+    32    %36 = ior %34, %35 (0x18800000)
+                @store_global (%36, %2) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %37 = u2u32 %3
+    64    %38 = iadd %2, %4 (0x4)
+                @store_global (%37, %38) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %39 = unpack_64_2x32_split_y %3
+    64    %40 = iadd %2, %5 (0x8)
+                @store_global (%39, %40) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[124] = {
+    0x0000002b, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002c, 0x00000607,
+    0x00000607, 0xe4001744, 0xe4011744, 0x00009705,
+    0x00011705, 0x00001405, 0x00000e05, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0003000a, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000002, 0xc438e000,
+    0x00000000, 0x0000000d, 0x00021605, 0xc4351000,
+    0x00000000, 0x000f000e, 0xc4287000, 0x00000000,
+    0x0009000b, 0xc434e000, 0x00000000, 0x00100011,
+    0x903bb000, 0x00000000, 0x00000012, 0x00003405,
+    0x84322000, 0x00000000, 0x00140013, 0x24345000,
+    0x00000000, 0x00080015, 0xe4226000, 0x00000000,
+    0x00000016, 0xe4351000, 0x00000000, 0x000c0017,
+    0xc43bd000, 0x00000000, 0x00000018, 0x00203605,
+    0xc434e000, 0x00000000, 0x001a0019, 0xc43be000,
+    0x00000000, 0x00000018, 0xe4369000, 0x00000000,
+    0x001c001b, 0x84322100, 0x00000000, 0x00140013,
+    0x24345000, 0x00000000, 0x0008001e, 0xe4226000,
+    0x00000000, 0x0000001f, 0x0001f605, 0xe4351000,
+    0x00000000, 0x00210020, 0xe434e000, 0x00000000,
+    0x0022001d, 0xc43bd000, 0x00000000, 0x00000023,
+    0x18800e05, 0xc434e000, 0x00000000, 0x00250024,
+    0x00006894, 0x00000098, 0x00000010, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000005, 0xe431f000,
+    0x00000000, 0x00060004, 0x00006894, 0x0000009c,
+    0x000000a0, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x00070004,
+    0x00006894, 0x000000a4, 0x000000a8, 0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, addr };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx20_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx20_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    64      %5 = @load_param (param_idx=0)
+    64      %6 = @load_param (param_idx=1)
+    32      %7 = @load_param (param_idx=3)
+    32      %8 = @load_param (param_idx=4)
+    1       %9 = @load_param (param_idx=5)
+    1      %10 = @load_param (param_idx=6)
+    1      %11 = @load_param (param_idx=7)
+    8      %12 = load_const (0x00)
+    8      %13 = load_const (0x01)
+    1      %14 = inot %9
+                 // succs: b1 b2
+    if %14 {
+        block b1:    // preds: b0
+        32x4   %15 = @load_global (%6) (access=none, align_mul=4, align_offset=0)
+        32     %16 = load_const (0x00000008)
+        32     %17 = mov %15.x
+        64     %18 = load_const (0x0000000000000008)
+        32     %19 = mov %15.z
+        64     %20 = load_const (0x0000000000000004)
+        32     %21 = imul %15.y, %8
+        64     %22 = load_const (0x000000000000000c = 12)
+        32     %23 = mov %15.w
+        32     %24 = load_const (0x00000000)
+        32     %25 = b2i32 %10
+        32     %26 = load_const (0xffffff00 = -256 = 4294967040)
+        32     %27 = iand %4, %26 (0xffffff00)
+        32     %28 = ior %27, %25
+        32     %29 = load_const (0xffff00ff = -65281 = 4294902015)
+        32     %30 = iand %28, %29 (0xffff00ff)
+        32     %31 = load_const (0x00000010 = 16)
+        32     %32 = load_const (0xff00ffff = -16711681 = 4278255615)
+        32     %33 = load_const (0x00000018 = 24)
+        32     %34 = load_const (0x01000000 = 16777216)
+        32     %35 = load_const (0x00ffffff = 16777215)
+        32     %36 = extract_u16 %30, %24 (0x0)
+        32     %37 = ior %36, %34 (0x1000000)
+        64     %38 = load_const (0x0000000000000010 = 16)
+        64     %39 = load_const (0x0000000000000014 = 20)
+        64     %40 = load_const (0x0000000000000018 = 24)
+        64     %41 = load_const (0x000000000000001c = 28)
+        64     %42 = load_const (0x0000000000000020 = 32)
+        64     %43 = load_const (0x0000000000000024 = 36)
+        16x2   %44 = unpack_32_2x16 %2
+        8      %45 = u2u8 %44.x
+        16     %46 = load_const (0x0001)
+        16     %47 = extract_u8 %44.x, %46 (0x1)
+        8      %48 = u2u8 %47
+        32     %49 = u2u32 %45
+        32     %50 = ishl %49, %16 (0x8)
+        32     %51 = load_const (0xffff0000 = -65536 = 4294901760)
+        32     %52 = iand %51 (0xffff0000), %3
+        32     %53 = ior %52, %50
+        32     %54 = u2u32 %48
+        32     %55 = ishl %54, %31 (0x10)
+        32     %56 = iand %53, %32 (0xff00ffff)
+        32     %57 = ior %56, %55
+        8x4    %58 = unpack_32_4x8 %2
+        32     %59 = u2u32 %58.z
+        32     %60 = ishl %59, %33 (0x18)
+        32     %61 = iand %57, %35 (0xffffff)
+        32     %62 = ior %61, %60
+        8x4    %63 = unpack_32_4x8 %37
+        8      %64 = iand %63.x, %13 (0x1)
+        1      %65 = ine %64, %12 (0x0)
+        64     %66 = b2i64 %65
+        64     %67 = ishl %66, %16 (0x8)
+        32     %68 = unpack_64_2x32_split_x %67
+        32     %69 = ior %68, %16 (0x8)
+        32     %70 = unpack_64_2x32_split_y %67
+        64     %71 = pack_64_2x32_split %69, %70
+        8      %72 = iand %63.y, %13 (0x1)
+        1      %73 = ine %72, %12 (0x0)
+        64     %74 = b2i64 %73
+        32     %75 = load_const (0x00000009)
+        64     %76 = ishl %74, %75 (0x9)
+        64     %77 = ior %71, %76
+        8      %78 = iand %63.z, %13 (0x1)
+        1      %79 = ine %78, %12 (0x0)
+        64     %80 = b2i64 %79
+        32     %81 = load_const (0x0000000a = 10)
+        64     %82 = ishl %80, %81 (0xa)
+        64     %83 = ior %77, %82
+        8      %84 = iand %63.w, %13 (0x1)
+        1      %85 = ine %84, %12 (0x0)
+        64     %86 = b2i64 %85
+        32     %87 = load_const (0x0000000b = 11)
+        64     %88 = ishl %86, %87 (0xb)
+        64     %89 = ior %83, %88
+        64     %90 = b2i64 %11
+        32     %91 = load_const (0x0000000d = 13)
+        64     %92 = ishl %90, %91 (0xd)
+        64     %93 = ior %89, %92
+        32     %94 = unpack_64_2x32_split_x %93
+        32     %95 = load_const (0x7b000000 = 2063597568)
+        32     %96 = ior %95 (0x7b000000), %94
+                     @store_global (%96, %5) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64     %97 = b2i64 %9
+        64     %98 = ishl %97, %16 (0x8)
+        8x4    %99 = unpack_32_4x8 %62
+        8     %100 = iand %99.x, %13 (0x1)
+        1     %101 = ine %100, %12 (0x0)
+        64    %102 = b2i64 %101
+        64    %103 = ishl %102, %75 (0x9)
+        64    %104 = ior %98, %103
+        32    %105 = u2u32 %104
+        64    %106 = iadd %5, %20 (0x4)
+                     @store_global (%105, %106) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %107 = iadd %5, %18 (0x8)
+                     @store_global (%17, %107) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %108 = iadd %5, %22 (0xc)
+                     @store_global (%19, %108) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %109 = iadd %5, %38 (0x10)
+                     @store_global (%21, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %110 = iadd %5, %39 (0x14)
+                     @store_global (%23, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %111 = iadd %5, %40 (0x18)
+                     @store_global (%24 (0x0), %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %112 = iadd %5, %41 (0x1c)
+                     @store_global (%19, %112) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %113 = iadd %5, %42 (0x20)
+                     @store_global (%23, %113) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %114 = iadd %5, %43 (0x24)
+                     @store_global (%7, %114) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b3
+    } else {
+        block b2:    // preds: b0
+        32x4  %115 = @load_global (%6) (access=none, align_mul=4, align_offset=0)
+        32    %116 = load_const (0x00000008)
+        64    %117 = load_const (0x0000000000000004)
+        64    %118 = load_const (0x0000000000000010 = 16)
+        64    %119 = iadd %6, %118 (0x10)
+        32    %120 = @load_global (%119) (access=none, align_mul=4, align_offset=0)
+        32    %121 = load_const (0x00000010 = 16)
+        32    %122 = mov %115.x
+        64    %123 = load_const (0x0000000000000008)
+        32    %124 = mov %115.z
+        32    %125 = imul %115.y, %8
+        64    %126 = load_const (0x000000000000000c = 12)
+        32    %127 = mov %115.w
+        32    %128 = b2i32 %10
+        32    %129 = load_const (0xffffff00 = -256 = 4294967040)
+        32    %130 = iand %1, %129 (0xffffff00)
+        32    %131 = ior %130, %128
+        32    %132 = load_const (0xffff00ff = -65281 = 4294902015)
+        32    %133 = iand %131, %132 (0xffff00ff)
+        32    %134 = load_const (0xff00ffff = -16711681 = 4278255615)
+        32    %135 = load_const (0x00000018 = 24)
+        32    %136 = load_const (0x01000000 = 16777216)
+        32    %137 = load_const (0x00ffffff = 16777215)
+        32    %138 = load_const (0x00000000)
+        32    %139 = extract_u16 %133, %138 (0x0)
+        32    %140 = ior %139, %136 (0x1000000)
+        64    %141 = load_const (0x0000000000000014 = 20)
+        64    %142 = load_const (0x0000000000000018 = 24)
+        64    %143 = load_const (0x000000000000001c = 28)
+        64    %144 = load_const (0x0000000000000020 = 32)
+        64    %145 = load_const (0x0000000000000024 = 36)
+        16x2  %146 = unpack_32_2x16 %2
+        8     %147 = u2u8 %146.x
+        16    %148 = load_const (0x0001)
+        16    %149 = extract_u8 %146.x, %148 (0x1)
+        8     %150 = u2u8 %149
+        32    %151 = u2u32 %147
+        32    %152 = ishl %151, %116 (0x8)
+        32    %153 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %154 = iand %153 (0xffff0000), %0
+        32    %155 = ior %154, %152
+        32    %156 = u2u32 %150
+        32    %157 = ishl %156, %121 (0x10)
+        32    %158 = iand %155, %134 (0xff00ffff)
+        32    %159 = ior %158, %157
+        8x4   %160 = unpack_32_4x8 %2
+        32    %161 = u2u32 %160.z
+        32    %162 = ishl %161, %135 (0x18)
+        32    %163 = iand %159, %137 (0xffffff)
+        32    %164 = ior %163, %162
+        8x4   %165 = unpack_32_4x8 %140
+        8     %166 = iand %165.x, %13 (0x1)
+        1     %167 = ine %166, %12 (0x0)
+        64    %168 = b2i64 %167
+        64    %169 = ishl %168, %116 (0x8)
+        32    %170 = unpack_64_2x32_split_x %169
+        32    %171 = ior %170, %116 (0x8)
+        32    %172 = unpack_64_2x32_split_y %169
+        64    %173 = pack_64_2x32_split %171, %172
+        8     %174 = iand %165.y, %13 (0x1)
+        1     %175 = ine %174, %12 (0x0)
+        64    %176 = b2i64 %175
+        32    %177 = load_const (0x00000009)
+        64    %178 = ishl %176, %177 (0x9)
+        64    %179 = ior %173, %178
+        8     %180 = iand %165.z, %13 (0x1)
+        1     %181 = ine %180, %12 (0x0)
+        64    %182 = b2i64 %181
+        32    %183 = load_const (0x0000000a = 10)
+        64    %184 = ishl %182, %183 (0xa)
+        64    %185 = ior %179, %184
+        8     %186 = iand %165.w, %13 (0x1)
+        1     %187 = ine %186, %12 (0x0)
+        64    %188 = b2i64 %187
+        32    %189 = load_const (0x0000000b = 11)
+        64    %190 = ishl %188, %189 (0xb)
+        64    %191 = ior %185, %190
+        64    %192 = b2i64 %11
+        32    %193 = load_const (0x0000000d = 13)
+        64    %194 = ishl %192, %193 (0xd)
+        64    %195 = ior %191, %194
+        32    %196 = unpack_64_2x32_split_x %195
+        32    %197 = load_const (0x7b000000 = 2063597568)
+        32    %198 = ior %197 (0x7b000000), %196
+                     @store_global (%198, %5) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %199 = b2i64 %9
+        64    %200 = ishl %199, %116 (0x8)
+        8x4   %201 = unpack_32_4x8 %164
+        8     %202 = iand %201.x, %13 (0x1)
+        1     %203 = ine %202, %12 (0x0)
+        64    %204 = b2i64 %203
+        64    %205 = ishl %204, %177 (0x9)
+        64    %206 = ior %200, %205
+        32    %207 = u2u32 %206
+        64    %208 = iadd %5, %117 (0x4)
+                     @store_global (%207, %208) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %209 = iadd %5, %123 (0x8)
+                     @store_global (%122, %209) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %210 = iadd %5, %126 (0xc)
+                     @store_global (%124, %210) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %211 = iadd %5, %118 (0x10)
+                     @store_global (%125, %211) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %212 = iadd %5, %141 (0x14)
+                     @store_global (%120, %212) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %213 = iadd %5, %142 (0x18)
+                     @store_global (%127, %213) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %214 = iadd %5, %143 (0x1c)
+                     @store_global (%127, %214) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %215 = iadd %5, %144 (0x20)
+                     @store_global (%120, %215) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %216 = iadd %5, %145 (0x24)
+                     @store_global (%7, %216) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b3
+    }
+    block b3:  // preds: b1 b2, succs: b4
+    block b4:
+   */
+   static const uint32_t impl_0_nir[673] = {
+    0x000000de, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000b, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4031744, 0xc4041744,
+    0x24051744, 0x24061744, 0x24071744, 0x00001405,
+    0x00003405, 0x2434a000, 0x00000000, 0x0000000b,
+    0x00000001, 0x00000040, 0x00000000, 0x00000001,
+    0x00000000, 0x0000006e, 0xd0005354, 0x00000020,
+    0x00000400, 0x00011605, 0xc435a000, 0x00000000,
+    0x00000012, 0x00011705, 0xc435a200, 0x00000000,
+    0x00000012, 0x00009705, 0xc433f100, 0x00000000,
+    0x000a0012, 0x00019705, 0xc435a300, 0x00000000,
+    0x00000012, 0x00000e05, 0xc4225000, 0x00000000,
+    0x0000000c, 0xffe01605, 0xc4322000, 0x00000000,
+    0x001d0006, 0xc434e000, 0x00000000, 0x001c001e,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x0020001f,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x001b0021, 0xc434e000, 0x00000000,
+    0x00250027, 0x00021705, 0x00029705, 0x00031705,
+    0x00039705, 0x00041705, 0x00049705, 0xa83b8000,
+    0x00000000, 0x00000004, 0x84390000, 0x00000000,
+    0x0000002f, 0x00003505, 0xa4288000, 0x00000000,
+    0x0031002f, 0x84390000, 0x00000000, 0x00000032,
+    0xc438e000, 0x00000000, 0x00000030, 0xc4351000,
+    0x00000000, 0x00130034, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00050036, 0xc434e000, 0x00000000,
+    0x00350037, 0xc438e000, 0x00000000, 0x00000033,
+    0xc4351000, 0x00000000, 0x00220039, 0xc4322000,
+    0x00000000, 0x00230038, 0xc434e000, 0x00000000,
+    0x003a003b, 0x903bb000, 0x00000000, 0x00000004,
+    0xc438e200, 0x00000000, 0x0000003d, 0xc4351000,
+    0x00000000, 0x0024003e, 0xc4322000, 0x00000000,
+    0x0026003c, 0xc434e000, 0x00000000, 0x003f0040,
+    0x903bb000, 0x00000000, 0x00000028, 0x84322000,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e0043, 0xe4226000, 0x00000000, 0x00000044,
+    0xe4351000, 0x00000000, 0x00130045, 0xc43bd000,
+    0x00000000, 0x00000046, 0xc434e000, 0x00000000,
+    0x00130047, 0xc43be000, 0x00000000, 0x00000046,
+    0xe4369000, 0x00000000, 0x00490048, 0x84322100,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e004b, 0xe4226000, 0x00000000, 0x0000004c,
+    0x00013605, 0xe4351000, 0x00000000, 0x004e004d,
+    0xe434e000, 0x00000000, 0x004f004a, 0x84322200,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e0051, 0xe4226000, 0x00000000, 0x00000052,
+    0x00015605, 0xe4351000, 0x00000000, 0x00540053,
+    0xe434e000, 0x00000000, 0x00550050, 0x84322300,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e0057, 0xe4226000, 0x00000000, 0x00000058,
+    0x00017605, 0xe4351000, 0x00000000, 0x005a0059,
+    0xe434e000, 0x00000000, 0x005b0056, 0xe4226000,
+    0x00000000, 0x0000000d, 0x0001b605, 0xe4351000,
+    0x00000000, 0x005e005d, 0xe434e000, 0x00000000,
+    0x005f005c, 0xc43bd000, 0x00000000, 0x00000060,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x00610062,
+    0x00006894, 0x0000018c, 0x0000001c, 0x00040001,
+    0xe4226000, 0x00000000, 0x0000000b, 0xe4351000,
+    0x00000000, 0x00130064, 0x903bb000, 0x00000000,
+    0x00000041, 0x84322000, 0x00000000, 0x000f0066,
+    0x24345000, 0x00000000, 0x000e0067, 0xe4226000,
+    0x00000000, 0x00000068, 0xe4351000, 0x00000000,
+    0x004e0069, 0xe434e000, 0x00000000, 0x006a0065,
+    0xc438e000, 0x00000000, 0x0000006b, 0xe431f000,
+    0x00000000, 0x00170007, 0x00006894, 0x000001b0,
+    0x000001b4, 0x00040001, 0xe431f000, 0x00000000,
+    0x00150007, 0x00006894, 0x00000050, 0x000001b8,
+    0x00040001, 0xe431f000, 0x00000000, 0x00190007,
+    0x00006894, 0x00000058, 0x000001bc, 0x00040001,
+    0xe431f000, 0x00000000, 0x00290007, 0x00006894,
+    0x00000060, 0x000001c0, 0x00040001, 0xe431f000,
+    0x00000000, 0x002a0007, 0x00006894, 0x00000068,
+    0x000001c4, 0x00040001, 0xe431f000, 0x00000000,
+    0x002b0007, 0x00006894, 0x0000006c, 0x000001c8,
+    0x00040001, 0xe431f000, 0x00000000, 0x002c0007,
+    0x00006894, 0x00000058, 0x000001cc, 0x00040001,
+    0xe431f000, 0x00000000, 0x002d0007, 0x00006894,
+    0x00000068, 0x000001d0, 0x00040001, 0xe431f000,
+    0x00000000, 0x002e0007, 0x00006894, 0x00000024,
+    0x000001d4, 0x00040001, 0x00000001, 0x00000000,
+    0x00000070, 0xd0005354, 0x00000020, 0x00000400,
+    0x00011605, 0x00009705, 0x00021705, 0xe431f000,
+    0x00000000, 0x007a0008, 0xc4005354, 0x000001ec,
+    0x00000400, 0x00021605, 0xc435a000, 0x00000000,
+    0x00000077, 0x00011705, 0xc435a200, 0x00000000,
+    0x00000077, 0xc433f100, 0x00000000, 0x000a0077,
+    0x00019705, 0xc435a300, 0x00000000, 0x00000077,
+    0xc4225000, 0x00000000, 0x0000000c, 0xffe01605,
+    0xc4322000, 0x00000000, 0x00850003, 0xc434e000,
+    0x00000000, 0x00840086, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00880087, 0x00000605, 0xff00ffff,
+    0x00031605, 0x01000e05, 0x00000605, 0x00ffffff,
+    0x00000e05, 0xc4287000, 0x00000000, 0x008e0089,
+    0xc434e000, 0x00000000, 0x008c008f, 0x00029705,
+    0x00031705, 0x00039705, 0x00041705, 0x00049705,
+    0xa83b8000, 0x00000000, 0x00000004, 0x84390000,
+    0x00000000, 0x00000096, 0x00003505, 0xa4288000,
+    0x00000000, 0x00980096, 0x84390000, 0x00000000,
+    0x00000099, 0xc438e000, 0x00000000, 0x00000097,
+    0xc4351000, 0x00000000, 0x0078009b, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0002009d, 0xc434e000,
+    0x00000000, 0x009c009e, 0xc438e000, 0x00000000,
+    0x0000009a, 0xc4351000, 0x00000000, 0x007d00a0,
+    0xc4322000, 0x00000000, 0x008a009f, 0xc434e000,
+    0x00000000, 0x00a100a2, 0x903bb000, 0x00000000,
+    0x00000004, 0xc438e200, 0x00000000, 0x000000a4,
+    0xc4351000, 0x00000000, 0x008b00a5, 0xc4322000,
+    0x00000000, 0x008d00a3, 0xc434e000, 0x00000000,
+    0x00a600a7, 0x903bb000, 0x00000000, 0x00000090,
+    0x84322000, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00aa, 0xe4226000, 0x00000000,
+    0x000000ab, 0xe4351000, 0x00000000, 0x007800ac,
+    0xc43bd000, 0x00000000, 0x000000ad, 0xc434e000,
+    0x00000000, 0x007800ae, 0xc43be000, 0x00000000,
+    0x000000ad, 0xe4369000, 0x00000000, 0x00b000af,
+    0x84322100, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00b2, 0xe4226000, 0x00000000,
+    0x000000b3, 0x00013605, 0xe4351000, 0x00000000,
+    0x00b500b4, 0xe434e000, 0x00000000, 0x00b600b1,
+    0x84322200, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00b8, 0xe4226000, 0x00000000,
+    0x000000b9, 0x00015605, 0xe4351000, 0x00000000,
+    0x00bb00ba, 0xe434e000, 0x00000000, 0x00bc00b7,
+    0x84322300, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00be, 0xe4226000, 0x00000000,
+    0x000000bf, 0x00017605, 0xe4351000, 0x00000000,
+    0x00c100c0, 0xe434e000, 0x00000000, 0x00c200bd,
+    0xe4226000, 0x00000000, 0x0000000d, 0x0001b605,
+    0xe4351000, 0x00000000, 0x00c500c4, 0xe434e000,
+    0x00000000, 0x00c600c3, 0xc43bd000, 0x00000000,
+    0x000000c7, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00c800c9, 0x00006894, 0x00000328, 0x0000001c,
+    0x00040001, 0xe4226000, 0x00000000, 0x0000000b,
+    0xe4351000, 0x00000000, 0x007800cb, 0x903bb000,
+    0x00000000, 0x000000a8, 0x84322000, 0x00000000,
+    0x000f00cd, 0x24345000, 0x00000000, 0x000e00ce,
+    0xe4226000, 0x00000000, 0x000000cf, 0xe4351000,
+    0x00000000, 0x00b500d0, 0xe434e000, 0x00000000,
+    0x00d100cc, 0xc438e000, 0x00000000, 0x000000d2,
+    0xe431f000, 0x00000000, 0x00790007, 0x00006894,
+    0x0000034c, 0x00000350, 0x00040001, 0xe431f000,
+    0x00000000, 0x007f0007, 0x00006894, 0x000001f8,
+    0x00000354, 0x00040001, 0xe431f000, 0x00000000,
+    0x00820007, 0x00006894, 0x00000200, 0x00000358,
+    0x00040001, 0xe431f000, 0x00000000, 0x007a0007,
+    0x00006894, 0x00000204, 0x0000035c, 0x00040001,
+    0xe431f000, 0x00000000, 0x00910007, 0x00006894,
+    0x000001f0, 0x00000360, 0x00040001, 0xe431f000,
+    0x00000000, 0x00920007, 0x00006894, 0x0000020c,
+    0x00000364, 0x00040001, 0xe431f000, 0x00000000,
+    0x00930007, 0x00006894, 0x0000020c, 0x00000368,
+    0x00040001, 0xe431f000, 0x00000000, 0x00940007,
+    0x00006894, 0x000001f0, 0x0000036c, 0x00040001,
+    0xe431f000, 0x00000000, 0x00950007, 0x00006894,
+    0x00000024, 0x00000370, 0x00040001, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[11] = { dst_ptr, indirect_ptr, draw_id_ptr, draw_id, instance_multiplier, is_indexed, is_predicated, uses_tbimr, uses_base, uses_drawid, mocs };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx20_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx20_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    64      %9 = @load_param (param_idx=0)
+    64     %10 = @load_param (param_idx=2)
+    32     %11 = @load_param (param_idx=4)
+    64     %12 = @load_param (param_idx=5)
+    32     %13 = @load_param (param_idx=6)
+    32     %14 = @load_param (param_idx=7)
+    32     %15 = @load_param (param_idx=8)
+    32     %16 = @load_param (param_idx=9)
+    32     %17 = @load_param (param_idx=11)
+    32     %18 = @load_param (param_idx=12)
+    64     %19 = @load_param (param_idx=13)
+    64     %20 = @load_param (param_idx=14)
+    32     %21 = @load_param (param_idx=15)
+    32     %22 = iadd %13, %21
+    32     %23 = @load_global (%12) (access=none, align_mul=4, align_offset=0)
+    32     %24 = imul %21, %17
+    64     %25 = u2u64 %24
+    32     %26 = imul %22, %11
+    64     %27 = u2u64 %26
+    32     %28 = umin %23, %15
+    1      %29 = ult %22, %28
+                 // succs: b1 b5
+    if %29 {
+        block b1:    // preds: b0
+        32     %30 = load_const (0x00000001)
+        32     %31 = iand %16, %30 (0x1)
+        32     %32 = load_const (0x00000000)
+        1      %33 = ieq %31, %32 (0x0)
+        8      %34 = load_const (0x00)
+        8      %35 = load_const (0x01)
+        32     %36 = load_const (0x00000002)
+        32     %37 = iand %16, %36 (0x2)
+        32     %38 = load_const (0x00000040 = 64)
+                     // succs: b2 b3
+        if %33 {
+            block b2:    // preds: b1
+            64     %39 = iadd %10, %27
+            32x4   %40 = @load_global (%39) (access=none, align_mul=4, align_offset=0)
+            32     %41 = load_const (0x00000008)
+            32     %42 = mov %40.x
+            64     %43 = load_const (0x0000000000000008)
+            32     %44 = mov %40.z
+            64     %45 = load_const (0x0000000000000004)
+            32     %46 = imul %40.y, %14
+            64     %47 = load_const (0x000000000000000c = 12)
+            32     %48 = mov %40.w
+            64     %49 = iadd %9, %25
+            32     %50 = ushr %37, %30 (0x1)
+            32     %51 = load_const (0xffffff00 = -256 = 4294967040)
+            32     %52 = iand %8, %51 (0xffffff00)
+            32     %53 = ior %52, %50
+            32     %54 = load_const (0xffff00ff = -65281 = 4294902015)
+            32     %55 = iand %53, %54 (0xffff00ff)
+            32     %56 = load_const (0x00000006)
+            32     %57 = load_const (0x00000010 = 16)
+            32     %58 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32     %59 = load_const (0x00000018 = 24)
+            32     %60 = load_const (0x01000000 = 16777216)
+            32     %61 = load_const (0x00ffffff = 16777215)
+            32     %62 = extract_u16 %55, %32 (0x0)
+            32     %63 = ior %62, %60 (0x1000000)
+            32     %64 = iand %16, %38 (0x40)
+            32     %65 = ushr %64, %56 (0x6)
+            64     %66 = load_const (0x0000000000000010 = 16)
+            64     %67 = load_const (0x0000000000000014 = 20)
+            64     %68 = load_const (0x0000000000000018 = 24)
+            64     %69 = load_const (0x000000000000001c = 28)
+            64     %70 = load_const (0x0000000000000020 = 32)
+            64     %71 = load_const (0x0000000000000024 = 36)
+            16x2   %72 = unpack_32_2x16 %6
+            8      %73 = u2u8 %72.x
+            16     %74 = load_const (0x0001)
+            16     %75 = extract_u8 %72.x, %74 (0x1)
+            8      %76 = u2u8 %75
+            32     %77 = u2u32 %73
+            32     %78 = ishl %77, %41 (0x8)
+            32     %79 = load_const (0xffff0000 = -65536 = 4294901760)
+            32     %80 = iand %79 (0xffff0000), %7
+            32     %81 = ior %80, %78
+            32     %82 = u2u32 %76
+            32     %83 = ishl %82, %57 (0x10)
+            32     %84 = iand %81, %58 (0xff00ffff)
+            32     %85 = ior %84, %83
+            8x4    %86 = unpack_32_4x8 %6
+            32     %87 = u2u32 %86.z
+            32     %88 = ishl %87, %59 (0x18)
+            32     %89 = iand %85, %61 (0xffffff)
+            32     %90 = ior %89, %88
+            8x4    %91 = unpack_32_4x8 %63
+            8      %92 = iand %91.x, %35 (0x1)
+            1      %93 = ine %92, %34 (0x0)
+            64     %94 = b2i64 %93
+            64     %95 = ishl %94, %41 (0x8)
+            32     %96 = unpack_64_2x32_split_x %95
+            32     %97 = ior %96, %41 (0x8)
+            32     %98 = unpack_64_2x32_split_y %95
+            64     %99 = pack_64_2x32_split %97, %98
+            8     %100 = iand %91.y, %35 (0x1)
+            1     %101 = ine %100, %34 (0x0)
+            64    %102 = b2i64 %101
+            32    %103 = load_const (0x00000009)
+            64    %104 = ishl %102, %103 (0x9)
+            64    %105 = ior %99, %104
+            8     %106 = iand %91.z, %35 (0x1)
+            1     %107 = ine %106, %34 (0x0)
+            64    %108 = b2i64 %107
+            32    %109 = load_const (0x0000000a = 10)
+            64    %110 = ishl %108, %109 (0xa)
+            64    %111 = ior %105, %110
+            8     %112 = iand %91.w, %35 (0x1)
+            1     %113 = ine %112, %34 (0x0)
+            64    %114 = b2i64 %113
+            32    %115 = load_const (0x0000000b = 11)
+            64    %116 = ishl %114, %115 (0xb)
+            64    %117 = ior %111, %116
+            64    %118 = u2u64 %65
+            32    %119 = load_const (0x0000000d = 13)
+            64    %120 = ishl %118, %119 (0xd)
+            64    %121 = ior %117, %120
+            32    %122 = unpack_64_2x32_split_x %121
+            32    %123 = load_const (0x7b000000 = 2063597568)
+            32    %124 = ior %123 (0x7b000000), %122
+                         @store_global (%124, %49) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %125 = u2u64 %31
+            64    %126 = ishl %125, %41 (0x8)
+            8x4   %127 = unpack_32_4x8 %90
+            8     %128 = iand %127.x, %35 (0x1)
+            1     %129 = ine %128, %34 (0x0)
+            64    %130 = b2i64 %129
+            64    %131 = ishl %130, %103 (0x9)
+            64    %132 = ior %126, %131
+            32    %133 = u2u32 %132
+            64    %134 = iadd %49, %45 (0x4)
+                         @store_global (%133, %134) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %135 = iadd %49, %43 (0x8)
+                         @store_global (%42, %135) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %136 = iadd %49, %47 (0xc)
+                         @store_global (%44, %136) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %137 = iadd %49, %66 (0x10)
+                         @store_global (%46, %137) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %138 = iadd %49, %67 (0x14)
+                         @store_global (%48, %138) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %139 = iadd %49, %68 (0x18)
+                         @store_global (%32 (0x0), %139) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %140 = iadd %49, %69 (0x1c)
+                         @store_global (%44, %140) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %141 = iadd %49, %70 (0x20)
+                         @store_global (%48, %141) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %142 = iadd %49, %71 (0x24)
+                         @store_global (%22, %142) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b4
+        } else {
+            block b3:    // preds: b1
+            64    %143 = iadd %10, %27
+            32x4  %144 = @load_global (%143) (access=none, align_mul=4, align_offset=0)
+            32    %145 = load_const (0x00000008)
+            64    %146 = load_const (0x0000000000000004)
+            64    %147 = load_const (0x0000000000000010 = 16)
+            64    %148 = iadd %143, %147 (0x10)
+            32    %149 = @load_global (%148) (access=none, align_mul=4, align_offset=0)
+            32    %150 = load_const (0x00000010 = 16)
+            32    %151 = mov %144.x
+            64    %152 = load_const (0x0000000000000008)
+            32    %153 = mov %144.z
+            32    %154 = imul %144.y, %14
+            64    %155 = load_const (0x000000000000000c = 12)
+            32    %156 = mov %144.w
+            64    %157 = iadd %9, %25
+            32    %158 = ushr %37, %30 (0x1)
+            32    %159 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %160 = iand %5, %159 (0xffffff00)
+            32    %161 = ior %160, %158
+            32    %162 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %163 = iand %161, %162 (0xffff00ff)
+            32    %164 = load_const (0x00000006)
+            32    %165 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32    %166 = load_const (0x00000018 = 24)
+            32    %167 = load_const (0x01000000 = 16777216)
+            32    %168 = load_const (0x00ffffff = 16777215)
+            32    %169 = extract_u16 %163, %32 (0x0)
+            32    %170 = ior %169, %167 (0x1000000)
+            32    %171 = iand %16, %38 (0x40)
+            32    %172 = ushr %171, %164 (0x6)
+            64    %173 = load_const (0x0000000000000014 = 20)
+            64    %174 = load_const (0x0000000000000018 = 24)
+            64    %175 = load_const (0x000000000000001c = 28)
+            64    %176 = load_const (0x0000000000000020 = 32)
+            64    %177 = load_const (0x0000000000000024 = 36)
+            16x2  %178 = unpack_32_2x16 %6
+            8     %179 = u2u8 %178.x
+            16    %180 = load_const (0x0001)
+            16    %181 = extract_u8 %178.x, %180 (0x1)
+            8     %182 = u2u8 %181
+            32    %183 = u2u32 %179
+            32    %184 = ishl %183, %145 (0x8)
+            32    %185 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %186 = iand %185 (0xffff0000), %4
+            32    %187 = ior %186, %184
+            32    %188 = u2u32 %182
+            32    %189 = ishl %188, %150 (0x10)
+            32    %190 = iand %187, %165 (0xff00ffff)
+            32    %191 = ior %190, %189
+            8x4   %192 = unpack_32_4x8 %6
+            32    %193 = u2u32 %192.z
+            32    %194 = ishl %193, %166 (0x18)
+            32    %195 = iand %191, %168 (0xffffff)
+            32    %196 = ior %195, %194
+            8x4   %197 = unpack_32_4x8 %170
+            8     %198 = iand %197.x, %35 (0x1)
+            1     %199 = ine %198, %34 (0x0)
+            64    %200 = b2i64 %199
+            64    %201 = ishl %200, %145 (0x8)
+            32    %202 = unpack_64_2x32_split_x %201
+            32    %203 = ior %202, %145 (0x8)
+            32    %204 = unpack_64_2x32_split_y %201
+            64    %205 = pack_64_2x32_split %203, %204
+            8     %206 = iand %197.y, %35 (0x1)
+            1     %207 = ine %206, %34 (0x0)
+            64    %208 = b2i64 %207
+            32    %209 = load_const (0x00000009)
+            64    %210 = ishl %208, %209 (0x9)
+            64    %211 = ior %205, %210
+            8     %212 = iand %197.z, %35 (0x1)
+            1     %213 = ine %212, %34 (0x0)
+            64    %214 = b2i64 %213
+            32    %215 = load_const (0x0000000a = 10)
+            64    %216 = ishl %214, %215 (0xa)
+            64    %217 = ior %211, %216
+            8     %218 = iand %197.w, %35 (0x1)
+            1     %219 = ine %218, %34 (0x0)
+            64    %220 = b2i64 %219
+            32    %221 = load_const (0x0000000b = 11)
+            64    %222 = ishl %220, %221 (0xb)
+            64    %223 = ior %217, %222
+            64    %224 = u2u64 %172
+            32    %225 = load_const (0x0000000d = 13)
+            64    %226 = ishl %224, %225 (0xd)
+            64    %227 = ior %223, %226
+            32    %228 = unpack_64_2x32_split_x %227
+            32    %229 = load_const (0x7b000000 = 2063597568)
+            32    %230 = ior %229 (0x7b000000), %228
+                         @store_global (%230, %157) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %231 = u2u64 %31
+            64    %232 = ishl %231, %145 (0x8)
+            8x4   %233 = unpack_32_4x8 %196
+            8     %234 = iand %233.x, %35 (0x1)
+            1     %235 = ine %234, %34 (0x0)
+            64    %236 = b2i64 %235
+            64    %237 = ishl %236, %209 (0x9)
+            64    %238 = ior %232, %237
+            32    %239 = u2u32 %238
+            64    %240 = iadd %157, %146 (0x4)
+                         @store_global (%239, %240) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %241 = iadd %157, %152 (0x8)
+                         @store_global (%151, %241) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %242 = iadd %157, %155 (0xc)
+                         @store_global (%153, %242) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %243 = iadd %157, %147 (0x10)
+                         @store_global (%154, %243) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %244 = iadd %157, %173 (0x14)
+                         @store_global (%149, %244) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %245 = iadd %157, %174 (0x18)
+                         @store_global (%156, %245) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %246 = iadd %157, %175 (0x1c)
+                         @store_global (%156, %246) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %247 = iadd %157, %176 (0x20)
+                         @store_global (%149, %247) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %248 = iadd %157, %177 (0x24)
+                         @store_global (%22, %248) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b4
+        }
+        block b4:  // preds: b2 b3, succs: b6
+    } else {
+        block b5:  // preds: b0, succs: b6
+    }
+    block b6:    // preds: b4 b5
+    32    %249 = load_const (0x00000020 = 32)
+    32    %250 = iand %16, %249 (0x20)
+    32    %251 = load_const (0x00000000)
+    1     %252 = ieq %250, %251 (0x0)
+    8     %253 = load_const (0x00)
+    8     %254 = load_const (0x01)
+    1     %255 = ieq %23, %251 (0x0)
+    32    %256 = load_const (0xffffffff = -1 = 4294967295)
+    32    %257 = iadd %28, %256 (0xffffffff)
+    32    %258 = bcsel %255, %251 (0x0), %257
+    64    %259 = u2u64 %17
+    64    %260 = iadd %25, %259
+    64    %261 = bcsel %255, %25, %260
+    64    %262 = iadd %9, %261
+                 // succs: b7 b11
+    if %252 {
+        block b7:    // preds: b6
+        1     %263 = ieq %22, %258
+        1     %264 = ult %23, %15
+        1     %265 = iand %264, %263
+                     // succs: b8 b9
+        if %265 {
+            block b8:    // preds: b7
+            64    %266 = load_const (0x0000000000000004)
+            64    %267 = load_const (0x0000000000000008)
+            32    %268 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %269 = iand %268 (0xffff0000), %3
+            32    %270 = load_const (0x0000000a = 10)
+            16x2  %271 = unpack_32_2x16 %2
+            32    %272 = u2u32 %271.x
+            32    %273 = load_const (0x00000010 = 16)
+            32    %274 = ishl %272, %273 (0x10)
+            32    %275 = extract_u16 %269, %251 (0x0)
+            32    %276 = ior %275, %274
+            8x4   %277 = unpack_32_4x8 %276
+            8     %278 = iand %277.x, %254 (0x1)
+            1     %279 = ine %278, %253 (0x0)
+            64    %280 = b2i64 %279
+            64    %281 = ishl %280, %270 (0xa)
+            32    %282 = unpack_64_2x32_split_x %281
+            32    %283 = load_const (0x00000101 = 257)
+            32    %284 = ior %282, %283 (0x101)
+            32    %285 = unpack_64_2x32_split_y %281
+            64    %286 = pack_64_2x32_split %284, %285
+            8     %287 = iand %277.y, %254 (0x1)
+            1     %288 = ine %287, %253 (0x0)
+            64    %289 = b2i64 %288
+            32    %290 = load_const (0x0000000f = 15)
+            64    %291 = ishl %289, %290 (0xf)
+            64    %292 = ior %286, %291
+            32    %293 = unpack_64_2x32_split_x %292
+            32    %294 = load_const (0x18800000 = 411041792)
+            32    %295 = ior %293, %294 (0x18800000)
+                         @store_global (%295, %262) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %296 = u2u32 %20
+            64    %297 = iadd %262, %266 (0x4)
+                         @store_global (%296, %297) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %298 = unpack_64_2x32_split_y %20
+            64    %299 = iadd %262, %267 (0x8)
+                         @store_global (%298, %299) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b10
+        } else {
+            block b9:  // preds: b7, succs: b10
+        }
+        block b10:  // preds: b8 b9, succs: b18
+    } else {
+        block b11:   // preds: b6
+        1     %300 = ine %22, %258
+                     // succs: b12 b16
+        if %300 {
+            block b12:   // preds: b11
+            32    %301 = iadd %18, %256 (0xffffffff)
+            1     %302 = ieq %21, %301
+                         // succs: b13 b14
+            if %302 {
+                block b13:   // preds: b12
+                64    %303 = load_const (0x0000000000000004)
+                64    %304 = load_const (0x0000000000000008)
+                32    %305 = load_const (0xffff0000 = -65536 = 4294901760)
+                32    %306 = iand %305 (0xffff0000), %1
+                32    %307 = load_const (0x0000000a = 10)
+                16x2  %308 = unpack_32_2x16 %2
+                32    %309 = u2u32 %308.x
+                32    %310 = load_const (0x00000010 = 16)
+                32    %311 = ishl %309, %310 (0x10)
+                32    %312 = extract_u16 %306, %251 (0x0)
+                32    %313 = ior %312, %311
+                8x4   %314 = unpack_32_4x8 %313
+                8     %315 = iand %314.x, %254 (0x1)
+                1     %316 = ine %315, %253 (0x0)
+                64    %317 = b2i64 %316
+                64    %318 = ishl %317, %307 (0xa)
+                32    %319 = unpack_64_2x32_split_x %318
+                32    %320 = load_const (0x00000101 = 257)
+                32    %321 = ior %319, %320 (0x101)
+                32    %322 = unpack_64_2x32_split_y %318
+                64    %323 = pack_64_2x32_split %321, %322
+                8     %324 = iand %314.y, %254 (0x1)
+                1     %325 = ine %324, %253 (0x0)
+                64    %326 = b2i64 %325
+                32    %327 = load_const (0x0000000f = 15)
+                64    %328 = ishl %326, %327 (0xf)
+                64    %329 = ior %323, %328
+                32    %330 = unpack_64_2x32_split_x %329
+                32    %331 = load_const (0x18800000 = 411041792)
+                32    %332 = ior %330, %331 (0x18800000)
+                             @store_global (%332, %262) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %333 = u2u32 %19
+                64    %334 = iadd %262, %303 (0x4)
+                             @store_global (%333, %334) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %335 = unpack_64_2x32_split_y %19
+                64    %336 = iadd %262, %304 (0x8)
+                             @store_global (%335, %336) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                             // succs: b15
+            } else {
+                block b14:  // preds: b12, succs: b15
+            }
+            block b15:  // preds: b13 b14, succs: b17
+        } else {
+            block b16:   // preds: b11
+            64    %337 = load_const (0x0000000000000004)
+            64    %338 = load_const (0x0000000000000008)
+            32    %339 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %340 = iand %339 (0xffff0000), %0
+            32    %341 = load_const (0x0000000a = 10)
+            16x2  %342 = unpack_32_2x16 %2
+            32    %343 = u2u32 %342.x
+            32    %344 = load_const (0x00000010 = 16)
+            32    %345 = ishl %343, %344 (0x10)
+            32    %346 = extract_u16 %340, %251 (0x0)
+            32    %347 = ior %346, %345
+            8x4   %348 = unpack_32_4x8 %347
+            8     %349 = iand %348.x, %254 (0x1)
+            1     %350 = ine %349, %253 (0x0)
+            64    %351 = b2i64 %350
+            64    %352 = ishl %351, %341 (0xa)
+            32    %353 = unpack_64_2x32_split_x %352
+            32    %354 = load_const (0x00000101 = 257)
+            32    %355 = ior %353, %354 (0x101)
+            32    %356 = unpack_64_2x32_split_y %352
+            64    %357 = pack_64_2x32_split %355, %356
+            8     %358 = iand %348.y, %254 (0x1)
+            1     %359 = ine %358, %253 (0x0)
+            64    %360 = b2i64 %359
+            32    %361 = load_const (0x0000000f = 15)
+            64    %362 = ishl %360, %361 (0xf)
+            64    %363 = ior %357, %362
+            32    %364 = unpack_64_2x32_split_x %363
+            32    %365 = load_const (0x18800000 = 411041792)
+            32    %366 = ior %364, %365 (0x18800000)
+                         @store_global (%366, %262) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %367 = u2u32 %20
+            64    %368 = iadd %262, %337 (0x4)
+                         @store_global (%367, %368) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %369 = unpack_64_2x32_split_y %20
+            64    %370 = iadd %262, %338 (0x8)
+                         @store_global (%369, %370) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b17
+        }
+        block b17:  // preds: b15 b16, succs: b18
+    }
+    block b18:  // preds: b10 b17, succs: b19
+    block b19:
+   */
+   static const uint32_t impl_0_nir[1162] = {
+    0x00000187, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000010, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0x00000000, 0x0000001e, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4021744, 0xc4041744, 0xe4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0xc40b1744, 0xc40c1744, 0xe40d1744, 0xe40e1744,
+    0xc40f1744, 0xc431f000, 0x00000000, 0x0017000f,
+    0xc4005354, 0x00000038, 0x00000400, 0xc433f000,
+    0x00000000, 0x00130017, 0xe438f000, 0x00000000,
+    0x0000001a, 0xc433f000, 0x00000000, 0x000d0018,
+    0xe438f000, 0x00000000, 0x0000001c, 0xc43ae000,
+    0x00000000, 0x00110019, 0x243a6000, 0x00000000,
+    0x001e0018, 0x00000001, 0x0000007c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000009, 0x00003605,
+    0xc4322000, 0x00000000, 0x00210012, 0x00000e05,
+    0x24327000, 0x00000000, 0x00230022, 0x00001405,
+    0x00003405, 0x00005605, 0xc4322000, 0x00000000,
+    0x00270012, 0x00081605, 0x00000001, 0x00000090,
+    0x00000000, 0x00000001, 0x00000000, 0x00000072,
+    0xe431f000, 0x00000000, 0x001d000c, 0xd0005354,
+    0x000000ac, 0x00000400, 0x00011605, 0xc435a000,
+    0x00000000, 0x0000002c, 0x00011705, 0xc435a200,
+    0x00000000, 0x0000002c, 0x00009705, 0xc433f100,
+    0x00000000, 0x0010002c, 0x00019705, 0xc435a300,
+    0x00000000, 0x0000002c, 0xe431f000, 0x00000000,
+    0x001b000b, 0xc43cc000, 0x00000000, 0x00210028,
+    0xffe01605, 0xc4322000, 0x00000000, 0x0037000a,
+    0xc434e000, 0x00000000, 0x00360038, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x003a0039, 0x0000d605,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x0023003b, 0xc434e000, 0x00000000,
+    0x00400042, 0xc4322000, 0x00000000, 0x00290012,
+    0xc43cc000, 0x00000000, 0x003c0044, 0x00021705,
+    0x00029705, 0x00031705, 0x00039705, 0x00041705,
+    0x00049705, 0xa83b8000, 0x00000000, 0x00000008,
+    0x84390000, 0x00000000, 0x0000004c, 0x00003505,
+    0xa4288000, 0x00000000, 0x004e004c, 0x84390000,
+    0x00000000, 0x0000004f, 0xc438e000, 0x00000000,
+    0x0000004d, 0xc4351000, 0x00000000, 0x002d0051,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x00090053,
+    0xc434e000, 0x00000000, 0x00520054, 0xc438e000,
+    0x00000000, 0x00000050, 0xc4351000, 0x00000000,
+    0x003d0056, 0xc4322000, 0x00000000, 0x003e0055,
+    0xc434e000, 0x00000000, 0x00570058, 0x903bb000,
+    0x00000000, 0x00000008, 0xc438e200, 0x00000000,
+    0x0000005a, 0xc4351000, 0x00000000, 0x003f005b,
+    0xc4322000, 0x00000000, 0x00410059, 0xc434e000,
+    0x00000000, 0x005c005d, 0x903bb000, 0x00000000,
+    0x00000043, 0x84322000, 0x00000000, 0x0026005f,
+    0x24345000, 0x00000000, 0x00250060, 0xe4226000,
+    0x00000000, 0x00000061, 0xe4351000, 0x00000000,
+    0x002d0062, 0xc43bd000, 0x00000000, 0x00000063,
+    0xc434e000, 0x00000000, 0x002d0064, 0xc43be000,
+    0x00000000, 0x00000063, 0xe4369000, 0x00000000,
+    0x00660065, 0x84322100, 0x00000000, 0x0026005f,
+    0x24345000, 0x00000000, 0x00250068, 0xe4226000,
+    0x00000000, 0x00000069, 0x00013605, 0xe4351000,
+    0x00000000, 0x006b006a, 0xe434e000, 0x00000000,
+    0x006c0067, 0x84322200, 0x00000000, 0x0026005f,
+    0x24345000, 0x00000000, 0x0025006e, 0xe4226000,
+    0x00000000, 0x0000006f, 0x00015605, 0xe4351000,
+    0x00000000, 0x00710070, 0xe434e000, 0x00000000,
+    0x0072006d, 0x84322300, 0x00000000, 0x0026005f,
+    0x24345000, 0x00000000, 0x00250074, 0xe4226000,
+    0x00000000, 0x00000075, 0x00017605, 0xe4351000,
+    0x00000000, 0x00770076, 0xe434e000, 0x00000000,
+    0x00780073, 0xe438f000, 0x00000000, 0x00000045,
+    0x0001b605, 0xe4351000, 0x00000000, 0x007b007a,
+    0xe434e000, 0x00000000, 0x007c0079, 0xc43bd000,
+    0x00000000, 0x0000007d, 0x7b000e05, 0xc434e000,
+    0x00000000, 0x007e007f, 0x00006894, 0x00000200,
+    0x000000d4, 0x00040001, 0xe438f000, 0x00000000,
+    0x00000022, 0xe4351000, 0x00000000, 0x002d0081,
+    0x903bb000, 0x00000000, 0x0000005e, 0x84322000,
+    0x00000000, 0x00260083, 0x24345000, 0x00000000,
+    0x00250084, 0xe4226000, 0x00000000, 0x00000085,
+    0xe4351000, 0x00000000, 0x006b0086, 0xe434e000,
+    0x00000000, 0x00870082, 0xc438e000, 0x00000000,
+    0x00000088, 0xe431f000, 0x00000000, 0x00310035,
+    0x00006894, 0x00000224, 0x00000228, 0x00040001,
+    0xe431f000, 0x00000000, 0x002f0035, 0x00006894,
+    0x000000b8, 0x0000022c, 0x00040001, 0xe431f000,
+    0x00000000, 0x00330035, 0x00006894, 0x000000c0,
+    0x00000230, 0x00040001, 0xe431f000, 0x00000000,
+    0x00460035, 0x00006894, 0x000000c8, 0x00000234,
+    0x00040001, 0xe431f000, 0x00000000, 0x00470035,
+    0x00006894, 0x000000d0, 0x00000238, 0x00040001,
+    0xe431f000, 0x00000000, 0x00480035, 0x00006894,
+    0x0000008c, 0x0000023c, 0x00040001, 0xe431f000,
+    0x00000000, 0x00490035, 0x00006894, 0x000000c0,
+    0x00000240, 0x00040001, 0xe431f000, 0x00000000,
+    0x004a0035, 0x00006894, 0x000000d0, 0x00000244,
+    0x00040001, 0xe431f000, 0x00000000, 0x004b0035,
+    0x00006894, 0x00000060, 0x00000248, 0x00040001,
+    0x00000001, 0x00000000, 0x00000074, 0xe431f000,
+    0x00000000, 0x001d000c, 0xd0005354, 0x00000250,
+    0x00000400, 0x00011605, 0x00009705, 0x00021705,
+    0xe431f000, 0x00000000, 0x00980094, 0xc4005354,
+    0x00000264, 0x00000400, 0x00021605, 0xc435a000,
+    0x00000000, 0x00000095, 0x00011705, 0xc435a200,
+    0x00000000, 0x00000095, 0xc433f100, 0x00000000,
+    0x00100095, 0x00019705, 0xc435a300, 0x00000000,
+    0x00000095, 0xe431f000, 0x00000000, 0x001b000b,
+    0xc43cc000, 0x00000000, 0x00210028, 0xffe01605,
+    0xc4322000, 0x00000000, 0x00a40007, 0xc434e000,
+    0x00000000, 0x00a300a5, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00a700a6, 0x0000d605, 0x00000605,
+    0xff00ffff, 0x00031605, 0x01000e05, 0x00000605,
+    0x00ffffff, 0xc4287000, 0x00000000, 0x002300a8,
+    0xc434e000, 0x00000000, 0x00ac00ae, 0xc4322000,
+    0x00000000, 0x00290012, 0xc43cc000, 0x00000000,
+    0x00a900b0, 0x00029705, 0x00031705, 0x00039705,
+    0x00041705, 0x00049705, 0xa83b8000, 0x00000000,
+    0x00000008, 0x84390000, 0x00000000, 0x000000b7,
+    0x00003505, 0xa4288000, 0x00000000, 0x00b900b7,
+    0x84390000, 0x00000000, 0x000000ba, 0xc438e000,
+    0x00000000, 0x000000b8, 0xc4351000, 0x00000000,
+    0x009600bc, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x000600be, 0xc434e000, 0x00000000, 0x00bd00bf,
+    0xc438e000, 0x00000000, 0x000000bb, 0xc4351000,
+    0x00000000, 0x009b00c1, 0xc4322000, 0x00000000,
+    0x00aa00c0, 0xc434e000, 0x00000000, 0x00c200c3,
+    0x903bb000, 0x00000000, 0x00000008, 0xc438e200,
+    0x00000000, 0x000000c5, 0xc4351000, 0x00000000,
+    0x00ab00c6, 0xc4322000, 0x00000000, 0x00ad00c4,
+    0xc434e000, 0x00000000, 0x00c700c8, 0x903bb000,
+    0x00000000, 0x000000af, 0x84322000, 0x00000000,
+    0x002600ca, 0x24345000, 0x00000000, 0x002500cb,
+    0xe4226000, 0x00000000, 0x000000cc, 0xe4351000,
+    0x00000000, 0x009600cd, 0xc43bd000, 0x00000000,
+    0x000000ce, 0xc434e000, 0x00000000, 0x009600cf,
+    0xc43be000, 0x00000000, 0x000000ce, 0xe4369000,
+    0x00000000, 0x00d100d0, 0x84322100, 0x00000000,
+    0x002600ca, 0x24345000, 0x00000000, 0x002500d3,
+    0xe4226000, 0x00000000, 0x000000d4, 0x00013605,
+    0xe4351000, 0x00000000, 0x00d600d5, 0xe434e000,
+    0x00000000, 0x00d700d2, 0x84322200, 0x00000000,
+    0x002600ca, 0x24345000, 0x00000000, 0x002500d9,
+    0xe4226000, 0x00000000, 0x000000da, 0x00015605,
+    0xe4351000, 0x00000000, 0x00dc00db, 0xe434e000,
+    0x00000000, 0x00dd00d8, 0x84322300, 0x00000000,
+    0x002600ca, 0x24345000, 0x00000000, 0x002500df,
+    0xe4226000, 0x00000000, 0x000000e0, 0x00017605,
+    0xe4351000, 0x00000000, 0x00e200e1, 0xe434e000,
+    0x00000000, 0x00e300de, 0xe438f000, 0x00000000,
+    0x000000b1, 0x0001b605, 0xe4351000, 0x00000000,
+    0x00e600e5, 0xe434e000, 0x00000000, 0x00e700e4,
+    0xc43bd000, 0x00000000, 0x000000e8, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x00e900ea, 0x00006894,
+    0x000003ac, 0x00000288, 0x00040001, 0xe438f000,
+    0x00000000, 0x00000022, 0xe4351000, 0x00000000,
+    0x009600ec, 0x903bb000, 0x00000000, 0x000000c9,
+    0x84322000, 0x00000000, 0x002600ee, 0x24345000,
+    0x00000000, 0x002500ef, 0xe4226000, 0x00000000,
+    0x000000f0, 0xe4351000, 0x00000000, 0x00d600f1,
+    0xe434e000, 0x00000000, 0x00f200ed, 0xc438e000,
+    0x00000000, 0x000000f3, 0xe431f000, 0x00000000,
+    0x009700a2, 0x00006894, 0x000003d0, 0x000003d4,
+    0x00040001, 0xe431f000, 0x00000000, 0x009d00a2,
+    0x00006894, 0x00000270, 0x000003d8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00a000a2, 0x00006894,
+    0x00000278, 0x000003dc, 0x00040001, 0xe431f000,
+    0x00000000, 0x009800a2, 0x00006894, 0x0000027c,
+    0x000003e0, 0x00040001, 0xe431f000, 0x00000000,
+    0x00b200a2, 0x00006894, 0x00000268, 0x000003e4,
+    0x00040001, 0xe431f000, 0x00000000, 0x00b300a2,
+    0x00006894, 0x00000284, 0x000003e8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00b400a2, 0x00006894,
+    0x00000284, 0x000003ec, 0x00040001, 0xe431f000,
+    0x00000000, 0x00b500a2, 0x00006894, 0x00000268,
+    0x000003f0, 0x00040001, 0xe431f000, 0x00000000,
+    0x00b600a2, 0x00006894, 0x00000060, 0x000003f4,
+    0x00040001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x0000000e,
+    0x00041605, 0xc4322000, 0x00000000, 0x01010012,
+    0x00000e05, 0x24327000, 0x00000000, 0x01030102,
+    0x00001405, 0x00003405, 0x24327000, 0x00000000,
+    0x01030019, 0xfffff605, 0xc431f000, 0x00000000,
+    0x0108001e, 0xc4273000, 0x00000000, 0x01030107,
+    0x00000109, 0xe438f000, 0x00000000, 0x00000013,
+    0xe431f000, 0x00000000, 0x010b001b, 0xe4273000,
+    0x00000000, 0x001b0107, 0x0000010c, 0xe431f000,
+    0x00000000, 0x010d000b, 0x00000001, 0x00000410,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x24327000, 0x00000000, 0x010a0018, 0x243a6000,
+    0x00000000, 0x00110019, 0x24322000, 0x00000000,
+    0x01100111, 0x00000001, 0x00000448, 0x00000000,
+    0x00000001, 0x00000000, 0x00000025, 0x00009705,
+    0x00011705, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x00050116, 0x00015605, 0xa83b8000, 0x00000000,
+    0x00000004, 0xc438e000, 0x00000000, 0x00000119,
+    0x00021605, 0xc4351000, 0x00000000, 0x011b011a,
+    0xc4287000, 0x00000000, 0x01030117, 0xc434e000,
+    0x00000000, 0x011c011d, 0x903bb000, 0x00000000,
+    0x0000011e, 0x84322000, 0x00000000, 0x0106011f,
+    0x24345000, 0x00000000, 0x01050120, 0xe4226000,
+    0x00000000, 0x00000121, 0xe4351000, 0x00000000,
+    0x01180122, 0xc43bd000, 0x00000000, 0x00000123,
+    0x00203605, 0xc434e000, 0x00000000, 0x01250124,
+    0xc43be000, 0x00000000, 0x00000123, 0xe4369000,
+    0x00000000, 0x01270126, 0x84322100, 0x00000000,
+    0x0106011f, 0x24345000, 0x00000000, 0x01050129,
+    0xe4226000, 0x00000000, 0x0000012a, 0x0001f605,
+    0xe4351000, 0x00000000, 0x012c012b, 0xe434e000,
+    0x00000000, 0x012d0128, 0xc43bd000, 0x00000000,
+    0x0000012e, 0x18800e05, 0xc434e000, 0x00000000,
+    0x0130012f, 0x00006894, 0x000004c4, 0x00000438,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000016,
+    0xe431f000, 0x00000000, 0x0114010e, 0x00006894,
+    0x000004c8, 0x000004cc, 0x00040001, 0xc43be000,
+    0x00000000, 0x00000016, 0xe431f000, 0x00000000,
+    0x0115010e, 0x00006894, 0x000004d0, 0x000004d4,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000003, 0x00000000,
+    0x00000001, 0x24345000, 0x00000000, 0x010a0018,
+    0x00000001, 0x000004e4, 0x00000000, 0x00000003,
+    0x00000000, 0x00000002, 0xc431f000, 0x00000000,
+    0x01080014, 0x24327000, 0x00000000, 0x013b0017,
+    0x00000001, 0x000004f0, 0x00000000, 0x00000001,
+    0x00000000, 0x00000025, 0x00009705, 0x00011705,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x00030140,
+    0x00015605, 0xa83b8000, 0x00000000, 0x00000004,
+    0xc438e000, 0x00000000, 0x00000143, 0x00021605,
+    0xc4351000, 0x00000000, 0x01450144, 0xc4287000,
+    0x00000000, 0x01030141, 0xc434e000, 0x00000000,
+    0x01460147, 0x903bb000, 0x00000000, 0x00000148,
+    0x84322000, 0x00000000, 0x01060149, 0x24345000,
+    0x00000000, 0x0105014a, 0xe4226000, 0x00000000,
+    0x0000014b, 0xe4351000, 0x00000000, 0x0142014c,
+    0xc43bd000, 0x00000000, 0x0000014d, 0x00203605,
+    0xc434e000, 0x00000000, 0x014f014e, 0xc43be000,
+    0x00000000, 0x0000014d, 0xe4369000, 0x00000000,
+    0x01510150, 0x84322100, 0x00000000, 0x01060149,
+    0x24345000, 0x00000000, 0x01050153, 0xe4226000,
+    0x00000000, 0x00000154, 0x0001f605, 0xe4351000,
+    0x00000000, 0x01560155, 0xe434e000, 0x00000000,
+    0x01570152, 0xc43bd000, 0x00000000, 0x00000158,
+    0x18800e05, 0xc434e000, 0x00000000, 0x015a0159,
+    0x00006894, 0x0000056c, 0x00000438, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000015, 0xe431f000,
+    0x00000000, 0x013e010e, 0x00006894, 0x00000570,
+    0x00000574, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000015, 0xe431f000, 0x00000000, 0x013f010e,
+    0x00006894, 0x00000578, 0x0000057c, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000025,
+    0x00009705, 0x00011705, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00020165, 0x00015605, 0xa83b8000,
+    0x00000000, 0x00000004, 0xc438e000, 0x00000000,
+    0x00000168, 0x00021605, 0xc4351000, 0x00000000,
+    0x016a0169, 0xc4287000, 0x00000000, 0x01030166,
+    0xc434e000, 0x00000000, 0x016b016c, 0x903bb000,
+    0x00000000, 0x0000016d, 0x84322000, 0x00000000,
+    0x0106016e, 0x24345000, 0x00000000, 0x0105016f,
+    0xe4226000, 0x00000000, 0x00000170, 0xe4351000,
+    0x00000000, 0x01670171, 0xc43bd000, 0x00000000,
+    0x00000172, 0x00203605, 0xc434e000, 0x00000000,
+    0x01740173, 0xc43be000, 0x00000000, 0x00000172,
+    0xe4369000, 0x00000000, 0x01760175, 0x84322100,
+    0x00000000, 0x0106016e, 0x24345000, 0x00000000,
+    0x01050178, 0xe4226000, 0x00000000, 0x00000179,
+    0x0001f605, 0xe4351000, 0x00000000, 0x017b017a,
+    0xe434e000, 0x00000000, 0x017c0177, 0xc43bd000,
+    0x00000000, 0x0000017d, 0x18800e05, 0xc434e000,
+    0x00000000, 0x017f017e, 0x00006894, 0x00000600,
+    0x00000438, 0x00040001, 0xc438e000, 0x00000000,
+    0x00000016, 0xe431f000, 0x00000000, 0x0163010e,
+    0x00006894, 0x00000604, 0x00000608, 0x00040001,
+    0xc43be000, 0x00000000, 0x00000016, 0xe431f000,
+    0x00000000, 0x0164010e, 0x00006894, 0x0000060c,
+    0x00000610, 0x00040001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000,
+};
+   nir_def *args[16] = { dst_base, wa_insts_ptr, indirect_base, draw_id_base, indirect_stride, _draw_count, draw_base, instance_multiplier, max_draw_count, flags, mocs, _3dprim_size_B, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx20_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx20_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    32      %9 = undefined
+    32     %10 = undefined
+    32     %11 = undefined
+    32     %12 = undefined
+    32     %13 = undefined
+    32     %14 = undefined
+    32     %15 = undefined
+    32     %16 = undefined
+    32     %17 = undefined
+    32     %18 = undefined
+    32     %19 = undefined
+    64     %20 = load_const (0x0000000000000000)
+    32     %21 = load_const (0x00000000)
+    8      %22 = load_const (0x00)
+    32     %23 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %24 = load_const (0x00000001)
+    32     %25 = load_const (0x00000003)
+    32     %26 = load_const (0x00000008)
+    32     %27 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %28 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %29 = iand %28 (0xffff0000), %19
+    64     %30 = @load_param (param_idx=0)
+    64     %31 = @load_param (param_idx=1)
+    64     %32 = @load_param (param_idx=2)
+    32     %33 = @load_param (param_idx=3)
+    64     %34 = @load_param (param_idx=4)
+    32     %35 = @load_param (param_idx=5)
+    32     %36 = @load_param (param_idx=6)
+    32     %37 = @load_param (param_idx=7)
+    32     %38 = @load_param (param_idx=8)
+    64     %39 = @load_param (param_idx=9)
+    64     %40 = @load_param (param_idx=10)
+    32     %41 = @load_param (param_idx=11)
+    32     %42 = load_const (0x00000002)
+    32     %43 = extract_u8 %37, %42 (0x2)
+    32     %44 = load_const (0x00000004)
+    32     %45 = ishl %43, %42 (0x2)
+    32     %46 = extract_u8 %37, %25 (0x3)
+    32     %47 = iadd %35, %41
+    64     %48 = load_const (0x0000000000000004)
+    32     %49 = imul %41, %45
+    64     %50 = u2u64 %49
+    64     %51 = iadd %48 (0x4), %50
+    32     %52 = imul %47, %33
+    64     %53 = u2u64 %52
+    32     %54 = ishl %41, %25 (0x3)
+    64     %55 = u2u64 %54
+    1      %56 = ine %34, %20 (0x0)
+                 // succs: b1 b2
+    if %56 {
+        block b1:    // preds: b0
+        32     %57 = @load_global (%34) (access=none, align_mul=4, align_offset=0)
+        32     %58 = umin %36, %57
+                     // succs: b3
+    } else {
+        block b2:  // preds: b0, succs: b3
+    }
+    block b3:    // preds: b1 b2
+    32     %59 = phi b1: %58, b2: %36
+    1      %60 = ieq %41, %21 (0x0)
+                 // succs: b4 b5
+    if %60 {
+        block b4:    // preds: b3
+        8      %61 = load_const (0x01)
+        32     %62 = b2i32 %60
+        32     %63 = ishl %62, %26 (0x8)
+        32     %64 = iand %28 (0xffff0000), %18
+        32     %65 = ior %64, %63
+        16x2   %66 = unpack_32_2x16 %29
+        32     %67 = u2u32 %66.x
+        32     %68 = load_const (0x00000010 = 16)
+        32     %69 = ishl %67, %68 (0x10)
+        32     %70 = extract_u16 %65, %21 (0x0)
+        32     %71 = ior %70, %69
+        8x4    %72 = unpack_32_4x8 %71
+        8      %73 = iand %72.x, %61 (0x1)
+        1      %74 = ine %73, %22 (0x0)
+        64     %75 = b2i64 %74
+        8      %76 = iand %72.y, %61 (0x1)
+        1      %77 = ine %76, %22 (0x0)
+        64     %78 = b2i64 %77
+        64     %79 = ishl %78, %26 (0x8)
+        64     %80 = ior %75, %79
+        32     %81 = unpack_64_2x32_split_x %80
+        32     %82 = load_const (0x02800000 = 41943040)
+        32     %83 = ior %81, %82 (0x2800000)
+                     @store_global (%83, %30) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b6
+    } else {
+        block b5:  // preds: b3, succs: b6
+    }
+    block b6:    // preds: b4 b5
+    1      %84 = ult %47, %59
+                 // succs: b7 b29
+    if %84 {
+        block b7:    // preds: b6
+        32     %85 = iand %37, %24 (0x1)
+        1      %86 = ieq %85, %21 (0x0)
+        8      %87 = load_const (0x01)
+        32     %88 = iand %37, %42 (0x2)
+        32     %89 = load_const (0x00000040 = 64)
+        32     %90 = iand %37, %26 (0x8)
+        1      %91 = ine %90, %21 (0x0)
+        32     %92 = iand %37, %44 (0x4)
+        1      %93 = ine %92, %21 (0x0)
+        32     %94 = extract_u8 %37, %24 (0x1)
+                     // succs: b8 b18
+        if %86 {
+            block b8:    // preds: b7
+            64     %95 = load_const (0x0000000000000008)
+            32     %96 = umax %92, %90
+            1      %97 = ine %96, %21 (0x0)
+            64     %98 = iadd %30, %51
+                         // succs: b9 b16
+            if %97 {
+                block b9:    // preds: b8
+                32     %99 = ushr %90, %25 (0x3)
+                32    %100 = ushr %92, %42 (0x2)
+                32    %101 = iadd.nsw %99, %100
+                32    %102 = ishl %101, %42 (0x2)
+                32    %103 = load_const (0xffffffff = -1 = 4294967295)
+                32    %104 = iadd %103 (0xffffffff), %102
+                64    %105 = load_const (0x000000000000000c = 12)
+                64    %106 = load_const (0x0000000000000010 = 16)
+                32    %107 = load_const (0x00000010 = 16)
+                32    %108 = load_const (0x78080000 = 2013790208)
+                32    %109 = ior %108 (0x78080000), %104
+                             @store_global (%109, %98) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %110 = iadd %98, %48 (0x4)
+                             // succs: b10 b11
+                if %91 {
+                    block b10:   // preds: b9
+                    32    %111 = iadd %46, %24 (0x1)
+                    64    %112 = iadd %53, %95 (0x8)
+                    64    %113 = iadd %31, %112
+                    1     %114 = ieq %113, %20 (0x0)
+                    32    %115 = b2i32 %114
+                    32    %116 = iand %17, %23 (0xffffff00)
+                    32    %117 = ior %116, %115
+                    32    %118 = load_const (0x00000100 = 256)
+                    32    %119 = iand %117, %27 (0xffff00ff)
+                    32    %120 = ior %119, %118 (0x100)
+                    16x2  %121 = unpack_32_2x16 %16
+                    32    %122 = u2u32 %121.x
+                    32    %123 = ishl %122, %107 (0x10)
+                    32    %124 = extract_u16 %120, %21 (0x0)
+                    32    %125 = ior %124, %123
+                    32    %126 = iand %15, %23 (0xffffff00)
+                    32    %127 = ior %126, %24 (0x1)
+                    32    %128 = load_const (0x0000000d = 13)
+                    8     %129 = u2u8 %121.y
+                    16    %130 = load_const (0x0001)
+                    16    %131 = extract_u8 %121.y, %130 (0x1)
+                    8     %132 = u2u8 %131
+                    32    %133 = u2u32 %129
+                    32    %134 = ishl %133, %26 (0x8)
+                    32    %135 = iand %127, %27 (0xffff00ff)
+                    32    %136 = ior %135, %134
+                    32    %137 = u2u32 %132
+                    32    %138 = ishl %137, %107 (0x10)
+                    32    %139 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %140 = iand %136, %139 (0xff00ffff)
+                    32    %141 = ior %140, %138
+                    8x4   %142 = unpack_32_4x8 %14
+                    32    %143 = u2u32 %142.x
+                    32    %144 = load_const (0x00000018 = 24)
+                    32    %145 = ishl %143, %144 (0x18)
+                    32    %146 = load_const (0x00ffffff = 16777215)
+                    32    %147 = iand %141, %146 (0xffffff)
+                    32    %148 = ior %147, %145
+                    64    %149 = load_const (0x0000000000000014 = 20)
+                    32x2  %150 = unpack_64_2x32 %113
+                    8x4   %151 = unpack_32_4x8 %125
+                    8     %152 = iand %151.x, %87 (0x1)
+                    1     %153 = ine %152, %22 (0x0)
+                    64    %154 = b2i64 %153
+                    64    %155 = ishl %154, %128 (0xd)
+                    8     %156 = iand %151.y, %87 (0x1)
+                    1     %157 = ine %156, %22 (0x0)
+                    64    %158 = b2i64 %157
+                    32    %159 = load_const (0x0000000e = 14)
+                    64    %160 = ishl %158, %159 (0xe)
+                    64    %161 = ior %155, %160
+                    64    %162 = u2u64 %94
+                    64    %163 = ishl %162, %107 (0x10)
+                    64    %164 = ior %161, %163
+                    8x4   %165 = unpack_32_4x8 %148
+                    8     %166 = iand %165.x, %87 (0x1)
+                    1     %167 = ine %166, %22 (0x0)
+                    64    %168 = b2i64 %167
+                    32    %169 = load_const (0x00000019 = 25)
+                    64    %170 = ishl %168, %169 (0x19)
+                    64    %171 = ior %164, %170
+                    64    %172 = u2u64 %46
+                    32    %173 = load_const (0x0000001a = 26)
+                    64    %174 = ishl %172, %173 (0x1a)
+                    64    %175 = ior %171, %174
+                    32    %176 = u2u32 %175
+                                 @store_global (%176, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %177 = u2u32 %113
+                    64    %178 = iadd %98, %95 (0x8)
+                                 @store_global (%177, %178) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %179 = mov %150.y
+                    64    %180 = iadd %98, %105 (0xc)
+                                 @store_global (%179, %180) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %181 = iadd %98, %106 (0x10)
+                                 @store_global (%26 (0x8), %181) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %182 = iadd %98, %149 (0x14)
+                                 // succs: b12
+                } else {
+                    block b11:  // preds: b9, succs: b12
+                }
+                block b12:   // preds: b10 b11
+                32    %183 = phi b10: %111, b11: %46
+                64    %184 = phi b10: %182, b11: %110
+                             // succs: b13 b14
+                if %93 {
+                    block b13:   // preds: b12
+                    64    %185 = iadd %32, %55
+                                 @store_global (%47, %185) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %186 = ineg %85
+                    64    %187 = iadd %185, %48 (0x4)
+                                 @store_global (%186, %187) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %188 = ieq %185, %20 (0x0)
+                    32    %189 = b2i32 %188
+                    32    %190 = iand %13, %23 (0xffffff00)
+                    32    %191 = ior %190, %189
+                    32    %192 = load_const (0x00000100 = 256)
+                    32    %193 = iand %191, %27 (0xffff00ff)
+                    32    %194 = ior %193, %192 (0x100)
+                    16x2  %195 = unpack_32_2x16 %16
+                    32    %196 = u2u32 %195.x
+                    32    %197 = ishl %196, %107 (0x10)
+                    32    %198 = extract_u16 %194, %21 (0x0)
+                    32    %199 = ior %198, %197
+                    32    %200 = iand %12, %23 (0xffffff00)
+                    32    %201 = ior %200, %24 (0x1)
+                    32    %202 = load_const (0x0000000d = 13)
+                    8     %203 = u2u8 %195.y
+                    16    %204 = load_const (0x0001)
+                    16    %205 = extract_u8 %195.y, %204 (0x1)
+                    8     %206 = u2u8 %205
+                    32    %207 = u2u32 %203
+                    32    %208 = ishl %207, %26 (0x8)
+                    32    %209 = iand %201, %27 (0xffff00ff)
+                    32    %210 = ior %209, %208
+                    32    %211 = u2u32 %206
+                    32    %212 = ishl %211, %107 (0x10)
+                    32    %213 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %214 = iand %210, %213 (0xff00ffff)
+                    32    %215 = ior %214, %212
+                    8x4   %216 = unpack_32_4x8 %14
+                    32    %217 = u2u32 %216.x
+                    32    %218 = load_const (0x00000018 = 24)
+                    32    %219 = ishl %217, %218 (0x18)
+                    32    %220 = load_const (0x00ffffff = 16777215)
+                    32    %221 = iand %215, %220 (0xffffff)
+                    32    %222 = ior %221, %219
+                    32x2  %223 = unpack_64_2x32 %185
+                    8x4   %224 = unpack_32_4x8 %199
+                    8     %225 = iand %224.x, %87 (0x1)
+                    1     %226 = ine %225, %22 (0x0)
+                    64    %227 = b2i64 %226
+                    64    %228 = ishl %227, %202 (0xd)
+                    8     %229 = iand %224.y, %87 (0x1)
+                    1     %230 = ine %229, %22 (0x0)
+                    64    %231 = b2i64 %230
+                    32    %232 = load_const (0x0000000e = 14)
+                    64    %233 = ishl %231, %232 (0xe)
+                    64    %234 = ior %228, %233
+                    64    %235 = u2u64 %94
+                    64    %236 = ishl %235, %107 (0x10)
+                    64    %237 = ior %234, %236
+                    8x4   %238 = unpack_32_4x8 %222
+                    8     %239 = iand %238.x, %87 (0x1)
+                    1     %240 = ine %239, %22 (0x0)
+                    64    %241 = b2i64 %240
+                    32    %242 = load_const (0x00000019 = 25)
+                    64    %243 = ishl %241, %242 (0x19)
+                    64    %244 = ior %237, %243
+                    64    %245 = u2u64 %183
+                    32    %246 = load_const (0x0000001a = 26)
+                    64    %247 = ishl %245, %246 (0x1a)
+                    64    %248 = ior %244, %247
+                    32    %249 = u2u32 %248
+                                 @store_global (%249, %184) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %250 = u2u32 %185
+                    64    %251 = iadd %184, %48 (0x4)
+                                 @store_global (%250, %251) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %252 = mov %223.y
+                    64    %253 = iadd %184, %95 (0x8)
+                                 @store_global (%252, %253) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %254 = iadd %184, %105 (0xc)
+                                 @store_global (%26 (0x8), %254) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %255 = iadd %184, %106 (0x10)
+                                 // succs: b15
+                } else {
+                    block b14:  // preds: b12, succs: b15
+                }
+                block b15:   // preds: b13 b14
+                64    %256 = phi b13: %255, b14: %184
+                             // succs: b17
+            } else {
+                block b16:  // preds: b8, succs: b17
+            }
+            block b17:   // preds: b15 b16
+            64    %257 = phi b15: %256, b16: %98
+            64    %258 = iadd %31, %53
+            32x4  %259 = @load_global (%258) (access=none, align_mul=4, align_offset=0)
+            32    %260 = mov %259.x
+            32    %261 = mov %259.z
+            32    %262 = mov %259.y
+            64    %263 = load_const (0x000000000000000c = 12)
+            32    %264 = mov %259.w
+            32    %265 = ushr %88, %24 (0x1)
+            32    %266 = iand %11, %23 (0xffffff00)
+            32    %267 = ior %266, %265
+            32    %268 = iand %267, %27 (0xffff00ff)
+            32    %269 = load_const (0x00000006)
+            32    %270 = load_const (0x00000010 = 16)
+            32    %271 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %272 = unpack_32_4x8 %10
+            32    %273 = u2u32 %272.x
+            32    %274 = load_const (0x00000018 = 24)
+            32    %275 = ishl %273, %274 (0x18)
+            32    %276 = load_const (0x00ffffff = 16777215)
+            32    %277 = extract_u16 %268, %21 (0x0)
+            32    %278 = ior %277, %275
+            32    %279 = iand %37, %89 (0x40)
+            32    %280 = ushr %279, %269 (0x6)
+            64    %281 = load_const (0x0000000000000010 = 16)
+            64    %282 = load_const (0x0000000000000014 = 20)
+            64    %283 = load_const (0x0000000000000018 = 24)
+            16    %284 = u2u16 %272.y
+            16    %285 = u2u16 %272.z
+            16    %286 = ishl %285, %26 (0x8)
+            16    %287 = ior %284, %286
+            8     %288 = u2u8 %287
+            16    %289 = load_const (0x0001)
+            16    %290 = extract_u8 %287, %289 (0x1)
+            8     %291 = u2u8 %290
+            32    %292 = u2u32 %288
+            32    %293 = ishl %292, %26 (0x8)
+            32    %294 = iand %28 (0xffff0000), %9
+            32    %295 = ior %294, %293
+            32    %296 = u2u32 %291
+            32    %297 = ishl %296, %270 (0x10)
+            32    %298 = iand %295, %271 (0xff00ffff)
+            32    %299 = ior %298, %297
+            32    %300 = u2u32 %272.w
+            32    %301 = ishl %300, %274 (0x18)
+            32    %302 = iand %299, %276 (0xffffff)
+            32    %303 = ior %302, %301
+            8x4   %304 = unpack_32_4x8 %278
+            8     %305 = iand %304.x, %87 (0x1)
+            1     %306 = ine %305, %22 (0x0)
+            64    %307 = b2i64 %306
+            64    %308 = ishl %307, %26 (0x8)
+            32    %309 = unpack_64_2x32_split_x %308
+            32    %310 = load_const (0x00000005)
+            32    %311 = ior %309, %310 (0x5)
+            32    %312 = unpack_64_2x32_split_y %308
+            64    %313 = pack_64_2x32_split %311, %312
+            8     %314 = iand %304.y, %87 (0x1)
+            1     %315 = ine %314, %22 (0x0)
+            64    %316 = b2i64 %315
+            32    %317 = load_const (0x00000009)
+            64    %318 = ishl %316, %317 (0x9)
+            64    %319 = ior %313, %318
+            8     %320 = iand %304.z, %87 (0x1)
+            1     %321 = ine %320, %22 (0x0)
+            64    %322 = b2i64 %321
+            32    %323 = load_const (0x0000000a = 10)
+            64    %324 = ishl %322, %323 (0xa)
+            64    %325 = ior %319, %324
+            64    %326 = u2u64 %280
+            32    %327 = load_const (0x0000000d = 13)
+            64    %328 = ishl %326, %327 (0xd)
+            64    %329 = ior %325, %328
+            32    %330 = unpack_64_2x32_split_x %329
+            32    %331 = load_const (0x7b000000 = 2063597568)
+            32    %332 = ior %331 (0x7b000000), %330
+                         @store_global (%332, %257) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %333 = u2u64 %85
+            64    %334 = ishl %333, %26 (0x8)
+            8x4   %335 = unpack_32_4x8 %303
+            8     %336 = iand %335.x, %87 (0x1)
+            1     %337 = ine %336, %22 (0x0)
+            64    %338 = b2i64 %337
+            64    %339 = ishl %338, %317 (0x9)
+            64    %340 = ior %334, %339
+            32    %341 = u2u32 %340
+            64    %342 = iadd %257, %48 (0x4)
+                         @store_global (%341, %342) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %343 = iadd %257, %95 (0x8)
+                         @store_global (%260, %343) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %344 = iadd %257, %263 (0xc)
+                         @store_global (%261, %344) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %345 = iadd %257, %281 (0x10)
+                         @store_global (%262, %345) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %346 = iadd %257, %282 (0x14)
+                         @store_global (%264, %346) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %347 = iadd %257, %283 (0x18)
+                         @store_global (%21 (0x0), %347) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b28
+        } else {
+            block b18:   // preds: b7
+            64    %348 = load_const (0x000000000000000c = 12)
+            32    %349 = umax %92, %90
+            1     %350 = ine %349, %21 (0x0)
+            64    %351 = iadd %30, %51
+                         // succs: b19 b26
+            if %350 {
+                block b19:   // preds: b18
+                32    %352 = ushr %90, %25 (0x3)
+                32    %353 = ushr %92, %42 (0x2)
+                32    %354 = iadd.nsw %352, %353
+                32    %355 = ishl %354, %42 (0x2)
+                32    %356 = load_const (0xffffffff = -1 = 4294967295)
+                32    %357 = iadd %356 (0xffffffff), %355
+                64    %358 = load_const (0x0000000000000008)
+                64    %359 = load_const (0x0000000000000010 = 16)
+                32    %360 = load_const (0x00000010 = 16)
+                32    %361 = load_const (0x78080000 = 2013790208)
+                32    %362 = ior %361 (0x78080000), %357
+                             @store_global (%362, %351) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %363 = iadd %351, %48 (0x4)
+                             // succs: b20 b21
+                if %91 {
+                    block b20:   // preds: b19
+                    32    %364 = iadd %46, %24 (0x1)
+                    64    %365 = iadd %53, %348 (0xc)
+                    64    %366 = iadd %31, %365
+                    1     %367 = ieq %366, %20 (0x0)
+                    32    %368 = b2i32 %367
+                    32    %369 = iand %8, %23 (0xffffff00)
+                    32    %370 = ior %369, %368
+                    32    %371 = load_const (0x00000100 = 256)
+                    32    %372 = iand %370, %27 (0xffff00ff)
+                    32    %373 = ior %372, %371 (0x100)
+                    16x2  %374 = unpack_32_2x16 %16
+                    32    %375 = u2u32 %374.x
+                    32    %376 = ishl %375, %360 (0x10)
+                    32    %377 = extract_u16 %373, %21 (0x0)
+                    32    %378 = ior %377, %376
+                    32    %379 = iand %7, %23 (0xffffff00)
+                    32    %380 = ior %379, %24 (0x1)
+                    32    %381 = load_const (0x0000000d = 13)
+                    8     %382 = u2u8 %374.y
+                    16    %383 = load_const (0x0001)
+                    16    %384 = extract_u8 %374.y, %383 (0x1)
+                    8     %385 = u2u8 %384
+                    32    %386 = u2u32 %382
+                    32    %387 = ishl %386, %26 (0x8)
+                    32    %388 = iand %380, %27 (0xffff00ff)
+                    32    %389 = ior %388, %387
+                    32    %390 = u2u32 %385
+                    32    %391 = ishl %390, %360 (0x10)
+                    32    %392 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %393 = iand %389, %392 (0xff00ffff)
+                    32    %394 = ior %393, %391
+                    8x4   %395 = unpack_32_4x8 %14
+                    32    %396 = u2u32 %395.x
+                    32    %397 = load_const (0x00000018 = 24)
+                    32    %398 = ishl %396, %397 (0x18)
+                    32    %399 = load_const (0x00ffffff = 16777215)
+                    32    %400 = iand %394, %399 (0xffffff)
+                    32    %401 = ior %400, %398
+                    64    %402 = load_const (0x0000000000000014 = 20)
+                    32x2  %403 = unpack_64_2x32 %366
+                    8x4   %404 = unpack_32_4x8 %378
+                    8     %405 = iand %404.x, %87 (0x1)
+                    1     %406 = ine %405, %22 (0x0)
+                    64    %407 = b2i64 %406
+                    64    %408 = ishl %407, %381 (0xd)
+                    8     %409 = iand %404.y, %87 (0x1)
+                    1     %410 = ine %409, %22 (0x0)
+                    64    %411 = b2i64 %410
+                    32    %412 = load_const (0x0000000e = 14)
+                    64    %413 = ishl %411, %412 (0xe)
+                    64    %414 = ior %408, %413
+                    64    %415 = u2u64 %94
+                    64    %416 = ishl %415, %360 (0x10)
+                    64    %417 = ior %414, %416
+                    8x4   %418 = unpack_32_4x8 %401
+                    8     %419 = iand %418.x, %87 (0x1)
+                    1     %420 = ine %419, %22 (0x0)
+                    64    %421 = b2i64 %420
+                    32    %422 = load_const (0x00000019 = 25)
+                    64    %423 = ishl %421, %422 (0x19)
+                    64    %424 = ior %417, %423
+                    64    %425 = u2u64 %46
+                    32    %426 = load_const (0x0000001a = 26)
+                    64    %427 = ishl %425, %426 (0x1a)
+                    64    %428 = ior %424, %427
+                    32    %429 = u2u32 %428
+                                 @store_global (%429, %363) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %430 = u2u32 %366
+                    64    %431 = iadd %351, %358 (0x8)
+                                 @store_global (%430, %431) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %432 = mov %403.y
+                    64    %433 = iadd %351, %348 (0xc)
+                                 @store_global (%432, %433) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %434 = iadd %351, %359 (0x10)
+                                 @store_global (%26 (0x8), %434) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %435 = iadd %351, %402 (0x14)
+                                 // succs: b22
+                } else {
+                    block b21:  // preds: b19, succs: b22
+                }
+                block b22:   // preds: b20 b21
+                32    %436 = phi b20: %364, b21: %46
+                64    %437 = phi b20: %435, b21: %363
+                             // succs: b23 b24
+                if %93 {
+                    block b23:   // preds: b22
+                    64    %438 = iadd %32, %55
+                                 @store_global (%47, %438) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %439 = ineg %85
+                    64    %440 = iadd %438, %48 (0x4)
+                                 @store_global (%439, %440) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %441 = ieq %438, %20 (0x0)
+                    32    %442 = b2i32 %441
+                    32    %443 = iand %6, %23 (0xffffff00)
+                    32    %444 = ior %443, %442
+                    32    %445 = load_const (0x00000100 = 256)
+                    32    %446 = iand %444, %27 (0xffff00ff)
+                    32    %447 = ior %446, %445 (0x100)
+                    16x2  %448 = unpack_32_2x16 %16
+                    32    %449 = u2u32 %448.x
+                    32    %450 = ishl %449, %360 (0x10)
+                    32    %451 = extract_u16 %447, %21 (0x0)
+                    32    %452 = ior %451, %450
+                    32    %453 = iand %5, %23 (0xffffff00)
+                    32    %454 = ior %453, %24 (0x1)
+                    32    %455 = load_const (0x0000000d = 13)
+                    8     %456 = u2u8 %448.y
+                    16    %457 = load_const (0x0001)
+                    16    %458 = extract_u8 %448.y, %457 (0x1)
+                    8     %459 = u2u8 %458
+                    32    %460 = u2u32 %456
+                    32    %461 = ishl %460, %26 (0x8)
+                    32    %462 = iand %454, %27 (0xffff00ff)
+                    32    %463 = ior %462, %461
+                    32    %464 = u2u32 %459
+                    32    %465 = ishl %464, %360 (0x10)
+                    32    %466 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %467 = iand %463, %466 (0xff00ffff)
+                    32    %468 = ior %467, %465
+                    8x4   %469 = unpack_32_4x8 %14
+                    32    %470 = u2u32 %469.x
+                    32    %471 = load_const (0x00000018 = 24)
+                    32    %472 = ishl %470, %471 (0x18)
+                    32    %473 = load_const (0x00ffffff = 16777215)
+                    32    %474 = iand %468, %473 (0xffffff)
+                    32    %475 = ior %474, %472
+                    32x2  %476 = unpack_64_2x32 %438
+                    8x4   %477 = unpack_32_4x8 %452
+                    8     %478 = iand %477.x, %87 (0x1)
+                    1     %479 = ine %478, %22 (0x0)
+                    64    %480 = b2i64 %479
+                    64    %481 = ishl %480, %455 (0xd)
+                    8     %482 = iand %477.y, %87 (0x1)
+                    1     %483 = ine %482, %22 (0x0)
+                    64    %484 = b2i64 %483
+                    32    %485 = load_const (0x0000000e = 14)
+                    64    %486 = ishl %484, %485 (0xe)
+                    64    %487 = ior %481, %486
+                    64    %488 = u2u64 %94
+                    64    %489 = ishl %488, %360 (0x10)
+                    64    %490 = ior %487, %489
+                    8x4   %491 = unpack_32_4x8 %475
+                    8     %492 = iand %491.x, %87 (0x1)
+                    1     %493 = ine %492, %22 (0x0)
+                    64    %494 = b2i64 %493
+                    32    %495 = load_const (0x00000019 = 25)
+                    64    %496 = ishl %494, %495 (0x19)
+                    64    %497 = ior %490, %496
+                    64    %498 = u2u64 %436
+                    32    %499 = load_const (0x0000001a = 26)
+                    64    %500 = ishl %498, %499 (0x1a)
+                    64    %501 = ior %497, %500
+                    32    %502 = u2u32 %501
+                                 @store_global (%502, %437) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %503 = u2u32 %438
+                    64    %504 = iadd %437, %48 (0x4)
+                                 @store_global (%503, %504) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %505 = mov %476.y
+                    64    %506 = iadd %437, %358 (0x8)
+                                 @store_global (%505, %506) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %507 = iadd %437, %348 (0xc)
+                                 @store_global (%26 (0x8), %507) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %508 = iadd %437, %359 (0x10)
+                                 // succs: b25
+                } else {
+                    block b24:  // preds: b22, succs: b25
+                }
+                block b25:   // preds: b23 b24
+                64    %509 = phi b23: %508, b24: %437
+                             // succs: b27
+            } else {
+                block b26:  // preds: b18, succs: b27
+            }
+            block b27:   // preds: b25 b26
+            64    %510 = phi b25: %509, b26: %351
+            64    %511 = iadd %31, %53
+            32x4  %512 = @load_global (%511) (access=none, align_mul=4, align_offset=0)
+            64    %513 = load_const (0x0000000000000010 = 16)
+            64    %514 = iadd %511, %513 (0x10)
+            32    %515 = @load_global (%514) (access=none, align_mul=4, align_offset=0)
+            32    %516 = load_const (0x00000010 = 16)
+            32    %517 = mov %512.x
+            64    %518 = load_const (0x0000000000000008)
+            32    %519 = mov %512.z
+            32    %520 = mov %512.y
+            32    %521 = mov %512.w
+            32    %522 = ushr %88, %24 (0x1)
+            32    %523 = iand %4, %23 (0xffffff00)
+            32    %524 = ior %523, %522
+            32    %525 = iand %524, %27 (0xffff00ff)
+            32    %526 = load_const (0x00000006)
+            32    %527 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %528 = unpack_32_4x8 %10
+            32    %529 = u2u32 %528.x
+            32    %530 = load_const (0x00000018 = 24)
+            32    %531 = ishl %529, %530 (0x18)
+            32    %532 = load_const (0x00ffffff = 16777215)
+            32    %533 = extract_u16 %525, %21 (0x0)
+            32    %534 = ior %533, %531
+            32    %535 = iand %37, %89 (0x40)
+            32    %536 = ushr %535, %526 (0x6)
+            64    %537 = load_const (0x0000000000000014 = 20)
+            64    %538 = load_const (0x0000000000000018 = 24)
+            16    %539 = u2u16 %528.y
+            16    %540 = u2u16 %528.z
+            16    %541 = ishl %540, %26 (0x8)
+            16    %542 = ior %539, %541
+            8     %543 = u2u8 %542
+            16    %544 = load_const (0x0001)
+            16    %545 = extract_u8 %542, %544 (0x1)
+            8     %546 = u2u8 %545
+            32    %547 = u2u32 %543
+            32    %548 = ishl %547, %26 (0x8)
+            32    %549 = iand %28 (0xffff0000), %3
+            32    %550 = ior %549, %548
+            32    %551 = u2u32 %546
+            32    %552 = ishl %551, %516 (0x10)
+            32    %553 = iand %550, %527 (0xff00ffff)
+            32    %554 = ior %553, %552
+            32    %555 = u2u32 %528.w
+            32    %556 = ishl %555, %530 (0x18)
+            32    %557 = iand %554, %532 (0xffffff)
+            32    %558 = ior %557, %556
+            8x4   %559 = unpack_32_4x8 %534
+            8     %560 = iand %559.x, %87 (0x1)
+            1     %561 = ine %560, %22 (0x0)
+            64    %562 = b2i64 %561
+            64    %563 = ishl %562, %26 (0x8)
+            32    %564 = unpack_64_2x32_split_x %563
+            32    %565 = load_const (0x00000005)
+            32    %566 = ior %564, %565 (0x5)
+            32    %567 = unpack_64_2x32_split_y %563
+            64    %568 = pack_64_2x32_split %566, %567
+            8     %569 = iand %559.y, %87 (0x1)
+            1     %570 = ine %569, %22 (0x0)
+            64    %571 = b2i64 %570
+            32    %572 = load_const (0x00000009)
+            64    %573 = ishl %571, %572 (0x9)
+            64    %574 = ior %568, %573
+            8     %575 = iand %559.z, %87 (0x1)
+            1     %576 = ine %575, %22 (0x0)
+            64    %577 = b2i64 %576
+            32    %578 = load_const (0x0000000a = 10)
+            64    %579 = ishl %577, %578 (0xa)
+            64    %580 = ior %574, %579
+            64    %581 = u2u64 %536
+            32    %582 = load_const (0x0000000d = 13)
+            64    %583 = ishl %581, %582 (0xd)
+            64    %584 = ior %580, %583
+            32    %585 = unpack_64_2x32_split_x %584
+            32    %586 = load_const (0x7b000000 = 2063597568)
+            32    %587 = ior %586 (0x7b000000), %585
+                         @store_global (%587, %510) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %588 = u2u64 %85
+            64    %589 = ishl %588, %26 (0x8)
+            8x4   %590 = unpack_32_4x8 %558
+            8     %591 = iand %590.x, %87 (0x1)
+            1     %592 = ine %591, %22 (0x0)
+            64    %593 = b2i64 %592
+            64    %594 = ishl %593, %572 (0x9)
+            64    %595 = ior %589, %594
+            32    %596 = u2u32 %595
+            64    %597 = iadd %510, %48 (0x4)
+                         @store_global (%596, %597) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %598 = iadd %510, %518 (0x8)
+                         @store_global (%517, %598) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %599 = iadd %510, %348 (0xc)
+                         @store_global (%519, %599) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %600 = iadd %510, %513 (0x10)
+                         @store_global (%520, %600) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %601 = iadd %510, %537 (0x14)
+                         @store_global (%515, %601) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %602 = iadd %510, %538 (0x18)
+                         @store_global (%521, %602) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b28
+        }
+        block b28:  // preds: b17 b27, succs: b30
+    } else {
+        block b29:  // preds: b6, succs: b30
+    }
+    block b30:   // preds: b28 b29
+    1     %603 = ieq %59, %21 (0x0)
+    32    %604 = load_const (0xffffffff = -1 = 4294967295)
+    32    %605 = iadd %59, %604 (0xffffffff)
+    32    %606 = bcsel %603, %21 (0x0), %605
+    64    %607 = u2u64 %45
+    64    %608 = iadd %51, %607
+    64    %609 = bcsel %603, %51, %608
+    64    %610 = iadd %30, %609
+    1     %611 = ine %47, %606
+                 // succs: b31 b35
+    if %611 {
+        block b31:   // preds: b30
+        32    %612 = iadd %38, %604 (0xffffffff)
+        1     %613 = ieq %41, %612
+                     // succs: b32 b33
+        if %613 {
+            block b32:   // preds: b31
+            64    %614 = load_const (0x0000000000000008)
+            32    %615 = iand %28 (0xffff0000), %2
+            32    %616 = load_const (0x0000000a = 10)
+            16x2  %617 = unpack_32_2x16 %1
+            32    %618 = u2u32 %617.x
+            32    %619 = load_const (0x00000010 = 16)
+            32    %620 = ishl %618, %619 (0x10)
+            32    %621 = extract_u16 %615, %21 (0x0)
+            32    %622 = ior %621, %620
+            8x4   %623 = unpack_32_4x8 %622
+            8     %624 = load_const (0x01)
+            8     %625 = iand %623.x, %624 (0x1)
+            1     %626 = ine %625, %22 (0x0)
+            64    %627 = b2i64 %626
+            64    %628 = ishl %627, %616 (0xa)
+            32    %629 = unpack_64_2x32_split_x %628
+            32    %630 = load_const (0x00000101 = 257)
+            32    %631 = ior %629, %630 (0x101)
+            32    %632 = unpack_64_2x32_split_y %628
+            64    %633 = pack_64_2x32_split %631, %632
+            8     %634 = iand %623.y, %624 (0x1)
+            1     %635 = ine %634, %22 (0x0)
+            64    %636 = b2i64 %635
+            32    %637 = load_const (0x0000000f = 15)
+            64    %638 = ishl %636, %637 (0xf)
+            64    %639 = ior %633, %638
+            32    %640 = unpack_64_2x32_split_x %639
+            32    %641 = load_const (0x18800000 = 411041792)
+            32    %642 = ior %640, %641 (0x18800000)
+                         @store_global (%642, %610) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %643 = u2u32 %39
+            64    %644 = iadd %610, %48 (0x4)
+                         @store_global (%643, %644) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %645 = unpack_64_2x32_split_y %39
+            64    %646 = iadd %610, %614 (0x8)
+                         @store_global (%645, %646) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b34
+        } else {
+            block b33:  // preds: b31, succs: b34
+        }
+        block b34:  // preds: b32 b33, succs: b36
+    } else {
+        block b35:   // preds: b30
+        64    %647 = load_const (0x0000000000000008)
+        32    %648 = iand %28 (0xffff0000), %0
+        32    %649 = load_const (0x0000000a = 10)
+        16x2  %650 = unpack_32_2x16 %1
+        32    %651 = u2u32 %650.x
+        32    %652 = load_const (0x00000010 = 16)
+        32    %653 = ishl %651, %652 (0x10)
+        32    %654 = extract_u16 %648, %21 (0x0)
+        32    %655 = ior %654, %653
+        8x4   %656 = unpack_32_4x8 %655
+        8     %657 = load_const (0x01)
+        8     %658 = iand %656.x, %657 (0x1)
+        1     %659 = ine %658, %22 (0x0)
+        64    %660 = b2i64 %659
+        64    %661 = ishl %660, %649 (0xa)
+        32    %662 = unpack_64_2x32_split_x %661
+        32    %663 = load_const (0x00000101 = 257)
+        32    %664 = ior %662, %663 (0x101)
+        32    %665 = unpack_64_2x32_split_y %661
+        64    %666 = pack_64_2x32_split %664, %665
+        8     %667 = iand %656.y, %657 (0x1)
+        1     %668 = ine %667, %22 (0x0)
+        64    %669 = b2i64 %668
+        32    %670 = load_const (0x0000000f = 15)
+        64    %671 = ishl %669, %670 (0xf)
+        64    %672 = ior %666, %671
+        32    %673 = unpack_64_2x32_split_x %672
+        32    %674 = load_const (0x18800000 = 411041792)
+        32    %675 = ior %673, %674 (0x18800000)
+                     @store_global (%675, %610) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %676 = u2u32 %40
+        64    %677 = iadd %610, %48 (0x4)
+                     @store_global (%676, %677) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %678 = unpack_64_2x32_split_y %40
+        64    %679 = iadd %610, %647 (0x8)
+                     @store_global (%678, %679) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b36
+    }
+    block b36:  // preds: b34 b35, succs: b37
+    block b37:
+   */
+   static const uint32_t impl_0_nir[2143] = {
+    0x000002ce, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000009, 0x00000000, 0x00000039, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000f05,
+    0x00000e05, 0x00001405, 0xffe01605, 0x00003605,
+    0x00007605, 0x00011605, 0xe01ff605, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0015001e, 0xe4001744,
+    0xe4011744, 0xe4021744, 0xc4031744, 0xe4041744,
+    0xc4051744, 0xc4061744, 0xc4071744, 0xc4081744,
+    0xe4091744, 0xe40a1744, 0xc40b1744, 0x00005605,
+    0xc4288000, 0x00000000, 0x002c0027, 0x00009605,
+    0xc4351000, 0x00000000, 0x002c002d, 0xc4288000,
+    0x00000000, 0x001b0027, 0xc431f000, 0x00000000,
+    0x002b0025, 0x00009705, 0xc433f000, 0x00000000,
+    0x002f002b, 0xe438f000, 0x00000000, 0x00000033,
+    0xe431f000, 0x00000000, 0x00340032, 0xc433f000,
+    0x00000000, 0x00230031, 0xe438f000, 0x00000000,
+    0x00000036, 0xc4351000, 0x00000000, 0x001b002b,
+    0xe438f000, 0x00000000, 0x00000038, 0x24345000,
+    0x00000000, 0x00160024, 0x00000001, 0x000000e8,
+    0x00000000, 0x00000001, 0x00000000, 0x00000002,
+    0xc4005354, 0x00000090, 0x00000400, 0xc43ae000,
+    0x00000000, 0x003c0026, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000003d, 0x0000003b, 0x00000026, 0x0000003e,
+    0x24327000, 0x00000000, 0x0017002b, 0x00000001,
+    0x00000104, 0x00000000, 0x00000001, 0x00000000,
+    0x00000018, 0x00003405, 0xc4225000, 0x00000000,
+    0x00000041, 0xc4351000, 0x00000000, 0x001c0044,
+    0xc4322000, 0x00000000, 0x0014001e, 0xc434e000,
+    0x00000000, 0x00450046, 0xa83b8000, 0x00000000,
+    0x0000001f, 0xc438e000, 0x00000000, 0x00000048,
+    0x00021605, 0xc4351000, 0x00000000, 0x004a0049,
+    0xc4287000, 0x00000000, 0x00170047, 0xc434e000,
+    0x00000000, 0x004b004c, 0x903bb000, 0x00000000,
+    0x0000004d, 0x84322000, 0x00000000, 0x0043004e,
+    0x24345000, 0x00000000, 0x0018004f, 0xe4226000,
+    0x00000000, 0x00000050, 0x84322100, 0x00000000,
+    0x0043004e, 0x24345000, 0x00000000, 0x00180052,
+    0xe4226000, 0x00000000, 0x00000053, 0xe4351000,
+    0x00000000, 0x001c0054, 0xe434e000, 0x00000000,
+    0x00550051, 0xc43bd000, 0x00000000, 0x00000056,
+    0x02800e05, 0xc434e000, 0x00000000, 0x00580057,
+    0x00006894, 0x00000164, 0x00000080, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x243a6000, 0x00000000, 0x00400031,
+    0x00000001, 0x00000170, 0x00000000, 0x00000003,
+    0x00000000, 0x0000000a, 0xc4322000, 0x00000000,
+    0x001a0027, 0x24327000, 0x00000000, 0x0017005e,
+    0x00003405, 0xc4322000, 0x00000000, 0x002c0027,
+    0x00081605, 0xc4322000, 0x00000000, 0x001c0027,
+    0x24345000, 0x00000000, 0x00170063, 0xc4322000,
+    0x00000000, 0x002e0027, 0x24345000, 0x00000000,
+    0x00170065, 0xc4288000, 0x00000000, 0x001a0027,
+    0x00000001, 0x0000017c, 0x00000000, 0x00000003,
+    0x00000000, 0x00000004, 0x00011705, 0xc43ac000,
+    0x00000000, 0x00630065, 0x24345000, 0x00000000,
+    0x0017006a, 0xe431f000, 0x00000000, 0x00350020,
+    0x00000001, 0x000001ac, 0x00000000, 0x00000005,
+    0x00000000, 0x0000000d, 0xc47cc000, 0x00000000,
+    0x001b0063, 0x00000000, 0x002c0065, 0xc431f020,
+    0x00000000, 0x006f006e, 0xc4351000, 0x00000000,
+    0x002c0070, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00710072, 0x00019705, 0x00021705, 0x00021605,
+    0x78080e05, 0xc434e000, 0x00000000, 0x00730077,
+    0x00006894, 0x000001e0, 0x000001b0, 0x00040001,
+    0xe431f000, 0x00000000, 0x0032006c, 0x00000001,
+    0x00000190, 0x00000000, 0x00000001, 0x00000000,
+    0x0000004c, 0xc431f000, 0x00000000, 0x001a0030,
+    0xe471f000, 0x00000000, 0x00690037, 0x00000000,
+    0x007c0021, 0x24327000, 0x00000000, 0x0016007d,
+    0xc4225000, 0x00000000, 0x0000007e, 0xc4322000,
+    0x00000000, 0x00190013, 0xc434e000, 0x00000000,
+    0x007f0080, 0x00201605, 0xc4322000, 0x00000000,
+    0x001d0081, 0xc434e000, 0x00000000, 0x00820083,
+    0xa83b8000, 0x00000000, 0x00000012, 0xc438e000,
+    0x00000000, 0x00000085, 0xc4351000, 0x00000000,
+    0x00760086, 0xc4287000, 0x00000000, 0x00170084,
+    0xc434e000, 0x00000000, 0x00870088, 0xc4322000,
+    0x00000000, 0x00190011, 0xc434e000, 0x00000000,
+    0x001a008a, 0x0001b605, 0x84390100, 0x00000000,
+    0x00000085, 0x00003505, 0xa4288100, 0x00000000,
+    0x008e0085, 0x84390000, 0x00000000, 0x0000008f,
+    0xc438e000, 0x00000000, 0x0000008d, 0xc4351000,
+    0x00000000, 0x001c0091, 0xc4322000, 0x00000000,
+    0x001d008b, 0xc434e000, 0x00000000, 0x00920093,
+    0xc438e000, 0x00000000, 0x00000090, 0xc4351000,
+    0x00000000, 0x00760095, 0x00000605, 0xff00ffff,
+    0xc4322000, 0x00000000, 0x00970094, 0xc434e000,
+    0x00000000, 0x00960098, 0x903bb000, 0x00000000,
+    0x00000010, 0xc438e000, 0x00000000, 0x0000009a,
+    0x00031605, 0xc4351000, 0x00000000, 0x009c009b,
+    0x00000605, 0x00ffffff, 0xc4322000, 0x00000000,
+    0x009e0099, 0xc434e000, 0x00000000, 0x009d009f,
+    0x00029705, 0xc83bc000, 0x00000000, 0x0000007d,
+    0x903bb000, 0x00000000, 0x00000089, 0x84322000,
+    0x00000000, 0x006000a3, 0x24345000, 0x00000000,
+    0x001800a4, 0xe4226000, 0x00000000, 0x000000a5,
+    0xe4351000, 0x00000000, 0x008c00a6, 0x84322100,
+    0x00000000, 0x006000a3, 0x24345000, 0x00000000,
+    0x001800a8, 0xe4226000, 0x00000000, 0x000000a9,
+    0x0001d605, 0xe4351000, 0x00000000, 0x00ab00aa,
+    0xe434e000, 0x00000000, 0x00ac00a7, 0xe438f000,
+    0x00000000, 0x00000067, 0xe4351000, 0x00000000,
+    0x007600ae, 0xe434e000, 0x00000000, 0x00af00ad,
+    0x903bb000, 0x00000000, 0x000000a0, 0x84322000,
+    0x00000000, 0x006000b1, 0x24345000, 0x00000000,
+    0x001800b2, 0xe4226000, 0x00000000, 0x000000b3,
+    0x00033605, 0xe4351000, 0x00000000, 0x00b500b4,
+    0xe434e000, 0x00000000, 0x00b600b0, 0xe438f000,
+    0x00000000, 0x00000030, 0x00035605, 0xe4351000,
+    0x00000000, 0x00b900b8, 0xe434e000, 0x00000000,
+    0x00ba00b7, 0xc438e000, 0x00000000, 0x000000bb,
+    0x00006894, 0x000002f0, 0x000001e4, 0x00040001,
+    0xc438e000, 0x00000000, 0x0000007d, 0xe431f000,
+    0x00000000, 0x0069006c, 0x00006894, 0x000002f4,
+    0x000002f8, 0x00040001, 0xc435a100, 0x00000000,
+    0x000000a2, 0xe431f000, 0x00000000, 0x0074006c,
+    0x00006894, 0x000002fc, 0x00000300, 0x00040001,
+    0xe431f000, 0x00000000, 0x0075006c, 0x00006894,
+    0x00000070, 0x00000304, 0x00040001, 0xe431f000,
+    0x00000000, 0x00a1006c, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000007b, 0x0000007a, 0x00000030, 0x000000c3,
+    0xe4000028, 0x000000c2, 0x0000007a, 0x00000079,
+    0x000000c3, 0x00000001, 0x00000198, 0x00000000,
+    0x00000001, 0x00000000, 0x0000004d, 0xe431f000,
+    0x00000000, 0x00390022, 0x00006894, 0x000000c4,
+    0x00000320, 0x00040001, 0xc4349000, 0x00000000,
+    0x0000005e, 0xe431f000, 0x00000000, 0x003200c8,
+    0x00006894, 0x00000324, 0x00000328, 0x00040001,
+    0x24327000, 0x00000000, 0x001600c8, 0xc4225000,
+    0x00000000, 0x000000cb, 0xc4322000, 0x00000000,
+    0x0019000f, 0xc434e000, 0x00000000, 0x00cc00cd,
+    0x00201605, 0xc4322000, 0x00000000, 0x001d00ce,
+    0xc434e000, 0x00000000, 0x00cf00d0, 0xa83b8000,
+    0x00000000, 0x00000012, 0xc438e000, 0x00000000,
+    0x000000d2, 0xc4351000, 0x00000000, 0x007600d3,
+    0xc4287000, 0x00000000, 0x001700d1, 0xc434e000,
+    0x00000000, 0x00d400d5, 0xc4322000, 0x00000000,
+    0x0019000e, 0xc434e000, 0x00000000, 0x001a00d7,
+    0x0001b605, 0x84390100, 0x00000000, 0x000000d2,
+    0x00003505, 0xa4288100, 0x00000000, 0x00db00d2,
+    0x84390000, 0x00000000, 0x000000dc, 0xc438e000,
+    0x00000000, 0x000000da, 0xc4351000, 0x00000000,
+    0x001c00de, 0xc4322000, 0x00000000, 0x001d00d8,
+    0xc434e000, 0x00000000, 0x00df00e0, 0xc438e000,
+    0x00000000, 0x000000dd, 0xc4351000, 0x00000000,
+    0x007600e2, 0x00000605, 0xff00ffff, 0xc4322000,
+    0x00000000, 0x00e400e1, 0xc434e000, 0x00000000,
+    0x00e300e5, 0x903bb000, 0x00000000, 0x00000010,
+    0xc438e000, 0x00000000, 0x000000e7, 0x00031605,
+    0xc4351000, 0x00000000, 0x00e900e8, 0x00000605,
+    0x00ffffff, 0xc4322000, 0x00000000, 0x00eb00e6,
+    0xc434e000, 0x00000000, 0x00ea00ec, 0xc83bc000,
+    0x00000000, 0x000000c8, 0x903bb000, 0x00000000,
+    0x000000d6, 0x84322000, 0x00000000, 0x006000ef,
+    0x24345000, 0x00000000, 0x001800f0, 0xe4226000,
+    0x00000000, 0x000000f1, 0xe4351000, 0x00000000,
+    0x00d900f2, 0x84322100, 0x00000000, 0x006000ef,
+    0x24345000, 0x00000000, 0x001800f4, 0xe4226000,
+    0x00000000, 0x000000f5, 0x0001d605, 0xe4351000,
+    0x00000000, 0x00f700f6, 0xe434e000, 0x00000000,
+    0x00f800f3, 0xe438f000, 0x00000000, 0x00000067,
+    0xe4351000, 0x00000000, 0x007600fa, 0xe434e000,
+    0x00000000, 0x00fb00f9, 0x903bb000, 0x00000000,
+    0x000000ed, 0x84322000, 0x00000000, 0x006000fd,
+    0x24345000, 0x00000000, 0x001800fe, 0xe4226000,
+    0x00000000, 0x000000ff, 0x00033605, 0xe4351000,
+    0x00000000, 0x01010100, 0xe434e000, 0x00000000,
+    0x010200fc, 0xe438f000, 0x00000000, 0x000000c5,
+    0x00035605, 0xe4351000, 0x00000000, 0x01050104,
+    0xe434e000, 0x00000000, 0x01060103, 0xc438e000,
+    0x00000000, 0x00000107, 0x00006894, 0x00000420,
+    0x00000318, 0x00040001, 0xc438e000, 0x00000000,
+    0x000000c8, 0xe431f000, 0x00000000, 0x003200c6,
+    0x00006894, 0x00000424, 0x00000428, 0x00040001,
+    0xc435a100, 0x00000000, 0x000000ee, 0xe431f000,
+    0x00000000, 0x006900c6, 0x00006894, 0x0000042c,
+    0x00000430, 0x00040001, 0xe431f000, 0x00000000,
+    0x007400c6, 0x00006894, 0x00000070, 0x00000434,
+    0x00040001, 0xe431f000, 0x00000000, 0x007500c6,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0xe4000028, 0x0000010e, 0x000000c7,
+    0x000000c6, 0x0000010f, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000062, 0xe4000028,
+    0x00000111, 0x00000110, 0x0000006c, 0x00000112,
+    0xe431f000, 0x00000000, 0x00370021, 0xd0005354,
+    0x00000454, 0x00000400, 0xc435a000, 0x00000000,
+    0x00000116, 0xc435a200, 0x00000000, 0x00000116,
+    0xc435a100, 0x00000000, 0x00000116, 0x00019705,
+    0xc435a300, 0x00000000, 0x00000116, 0xc43cc000,
+    0x00000000, 0x001a0061, 0xc4322000, 0x00000000,
+    0x0019000d, 0xc434e000, 0x00000000, 0x011c011d,
+    0xc4322000, 0x00000000, 0x001d011e, 0x0000d605,
+    0x00021605, 0x00000605, 0xff00ffff, 0x903bb000,
+    0x00000000, 0x0000000c, 0xc438e000, 0x00000000,
+    0x00000123, 0x00031605, 0xc4351000, 0x00000000,
+    0x01250124, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x0017011f, 0xc434e000, 0x00000000,
+    0x01260128, 0xc4322000, 0x00000000, 0x00620027,
+    0xc43cc000, 0x00000000, 0x0120012a, 0x00021705,
+    0x00029705, 0x00031705, 0xa438d100, 0x00000000,
+    0x00000123, 0xa438d200, 0x00000000, 0x00000123,
+    0xa4351000, 0x00000000, 0x001c0130, 0xa434e000,
+    0x00000000, 0x0131012f, 0x84390000, 0x00000000,
+    0x00000132, 0x00003505, 0xa4288000, 0x00000000,
+    0x01340132, 0x84390000, 0x00000000, 0x00000135,
+    0xc438e000, 0x00000000, 0x00000133, 0xc4351000,
+    0x00000000, 0x001c0137, 0xc4322000, 0x00000000,
+    0x000b001e, 0xc434e000, 0x00000000, 0x01380139,
+    0xc438e000, 0x00000000, 0x00000136, 0xc4351000,
+    0x00000000, 0x0121013b, 0xc4322000, 0x00000000,
+    0x0122013a, 0xc434e000, 0x00000000, 0x013c013d,
+    0xc438e300, 0x00000000, 0x00000123, 0xc4351000,
+    0x00000000, 0x0125013f, 0xc4322000, 0x00000000,
+    0x0127013e, 0xc434e000, 0x00000000, 0x01400141,
+    0x903bb000, 0x00000000, 0x00000129, 0x84322000,
+    0x00000000, 0x00600143, 0x24345000, 0x00000000,
+    0x00180144, 0xe4226000, 0x00000000, 0x00000145,
+    0xe4351000, 0x00000000, 0x001c0146, 0xc43bd000,
+    0x00000000, 0x00000147, 0x0000b605, 0xc434e000,
+    0x00000000, 0x01490148, 0xc43be000, 0x00000000,
+    0x00000147, 0xe4369000, 0x00000000, 0x014b014a,
+    0x84322100, 0x00000000, 0x00600143, 0x24345000,
+    0x00000000, 0x0018014d, 0xe4226000, 0x00000000,
+    0x0000014e, 0x00013605, 0xe4351000, 0x00000000,
+    0x0150014f, 0xe434e000, 0x00000000, 0x0151014c,
+    0x84322200, 0x00000000, 0x00600143, 0x24345000,
+    0x00000000, 0x00180153, 0xe4226000, 0x00000000,
+    0x00000154, 0x00015605, 0xe4351000, 0x00000000,
+    0x01560155, 0xe434e000, 0x00000000, 0x01570152,
+    0xe438f000, 0x00000000, 0x0000012b, 0x0001b605,
+    0xe4351000, 0x00000000, 0x015a0159, 0xe434e000,
+    0x00000000, 0x015b0158, 0xc43bd000, 0x00000000,
+    0x0000015c, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x015d015e, 0x00006894, 0x0000057c, 0x00000450,
+    0x00040001, 0xe438f000, 0x00000000, 0x0000005e,
+    0xe4351000, 0x00000000, 0x001c0160, 0x903bb000,
+    0x00000000, 0x00000142, 0x84322000, 0x00000000,
+    0x00600162, 0x24345000, 0x00000000, 0x00180163,
+    0xe4226000, 0x00000000, 0x00000164, 0xe4351000,
+    0x00000000, 0x01500165, 0xe434e000, 0x00000000,
+    0x01660161, 0xc438e000, 0x00000000, 0x00000167,
+    0xe431f000, 0x00000000, 0x00320114, 0x00006894,
+    0x000005a0, 0x000005a4, 0x00040001, 0xe431f000,
+    0x00000000, 0x00690114, 0x00006894, 0x0000045c,
+    0x000005a8, 0x00040001, 0xe431f000, 0x00000000,
+    0x011a0114, 0x00006894, 0x00000460, 0x000005ac,
+    0x00040001, 0xe431f000, 0x00000000, 0x012c0114,
+    0x00006894, 0x00000464, 0x000005b0, 0x00040001,
+    0xe431f000, 0x00000000, 0x012d0114, 0x00006894,
+    0x0000046c, 0x000005b4, 0x00040001, 0xe431f000,
+    0x00000000, 0x012e0114, 0x00006894, 0x0000005c,
+    0x000005b8, 0x00040001, 0x00000003, 0x00000000,
+    0x00000004, 0x00019705, 0xc43ac000, 0x00000000,
+    0x00630065, 0x24345000, 0x00000000, 0x00170171,
+    0xe431f000, 0x00000000, 0x00350020, 0x00000001,
+    0x000005c8, 0x00000000, 0x00000005, 0x00000000,
+    0x0000000d, 0xc47cc000, 0x00000000, 0x001b0063,
+    0x00000000, 0x002c0065, 0xc431f020, 0x00000000,
+    0x01760175, 0xc4351000, 0x00000000, 0x002c0177,
+    0xfffff605, 0xc431f000, 0x00000000, 0x01780179,
+    0x00011705, 0x00021705, 0x00021605, 0x78080e05,
+    0xc434e000, 0x00000000, 0x017a017e, 0x00006894,
+    0x000005fc, 0x000005cc, 0x00040001, 0xe431f000,
+    0x00000000, 0x00320173, 0x00000001, 0x00000190,
+    0x00000000, 0x00000001, 0x00000000, 0x0000004c,
+    0xc431f000, 0x00000000, 0x001a0030, 0xe471f000,
+    0x00000000, 0x01700037, 0x00000000, 0x01830021,
+    0x24327000, 0x00000000, 0x00160184, 0xc4225000,
+    0x00000000, 0x00000185, 0xc4322000, 0x00000000,
+    0x0019000a, 0xc434e000, 0x00000000, 0x01860187,
+    0x00201605, 0xc4322000, 0x00000000, 0x001d0188,
+    0xc434e000, 0x00000000, 0x0189018a, 0xa83b8000,
+    0x00000000, 0x00000012, 0xc438e000, 0x00000000,
+    0x0000018c, 0xc4351000, 0x00000000, 0x017d018d,
+    0xc4287000, 0x00000000, 0x0017018b, 0xc434e000,
+    0x00000000, 0x018e018f, 0xc4322000, 0x00000000,
+    0x00190009, 0xc434e000, 0x00000000, 0x001a0191,
+    0x0001b605, 0x84390100, 0x00000000, 0x0000018c,
+    0x00003505, 0xa4288100, 0x00000000, 0x0195018c,
+    0x84390000, 0x00000000, 0x00000196, 0xc438e000,
+    0x00000000, 0x00000194, 0xc4351000, 0x00000000,
+    0x001c0198, 0xc4322000, 0x00000000, 0x001d0192,
+    0xc434e000, 0x00000000, 0x0199019a, 0xc438e000,
+    0x00000000, 0x00000197, 0xc4351000, 0x00000000,
+    0x017d019c, 0x00000605, 0xff00ffff, 0xc4322000,
+    0x00000000, 0x019e019b, 0xc434e000, 0x00000000,
+    0x019d019f, 0x903bb000, 0x00000000, 0x00000010,
+    0xc438e000, 0x00000000, 0x000001a1, 0x00031605,
+    0xc4351000, 0x00000000, 0x01a301a2, 0x00000605,
+    0x00ffffff, 0xc4322000, 0x00000000, 0x01a501a0,
+    0xc434e000, 0x00000000, 0x01a401a6, 0x00029705,
+    0xc83bc000, 0x00000000, 0x00000184, 0x903bb000,
+    0x00000000, 0x00000190, 0x84322000, 0x00000000,
+    0x006001aa, 0x24345000, 0x00000000, 0x001801ab,
+    0xe4226000, 0x00000000, 0x000001ac, 0xe4351000,
+    0x00000000, 0x019301ad, 0x84322100, 0x00000000,
+    0x006001aa, 0x24345000, 0x00000000, 0x001801af,
+    0xe4226000, 0x00000000, 0x000001b0, 0x0001d605,
+    0xe4351000, 0x00000000, 0x01b201b1, 0xe434e000,
+    0x00000000, 0x01b301ae, 0xe438f000, 0x00000000,
+    0x00000067, 0xe4351000, 0x00000000, 0x017d01b5,
+    0xe434e000, 0x00000000, 0x01b601b4, 0x903bb000,
+    0x00000000, 0x000001a7, 0x84322000, 0x00000000,
+    0x006001b8, 0x24345000, 0x00000000, 0x001801b9,
+    0xe4226000, 0x00000000, 0x000001ba, 0x00033605,
+    0xe4351000, 0x00000000, 0x01bc01bb, 0xe434e000,
+    0x00000000, 0x01bd01b7, 0xe438f000, 0x00000000,
+    0x00000030, 0x00035605, 0xe4351000, 0x00000000,
+    0x01c001bf, 0xe434e000, 0x00000000, 0x01c101be,
+    0xc438e000, 0x00000000, 0x000001c2, 0x00006894,
+    0x0000070c, 0x00000600, 0x00040001, 0xc438e000,
+    0x00000000, 0x00000184, 0xe431f000, 0x00000000,
+    0x017b0173, 0x00006894, 0x00000710, 0x00000714,
+    0x00040001, 0xc435a100, 0x00000000, 0x000001a9,
+    0xe431f000, 0x00000000, 0x01700173, 0x00006894,
+    0x00000718, 0x0000071c, 0x00040001, 0xe431f000,
+    0x00000000, 0x017c0173, 0x00006894, 0x00000070,
+    0x00000720, 0x00040001, 0xe431f000, 0x00000000,
+    0x01a80173, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0xc4000028, 0x00000182,
+    0x00000181, 0x00000030, 0x000001ca, 0xe4000028,
+    0x000001c9, 0x00000181, 0x00000180, 0x000001ca,
+    0x00000001, 0x00000198, 0x00000000, 0x00000001,
+    0x00000000, 0x0000004d, 0xe431f000, 0x00000000,
+    0x00390022, 0x00006894, 0x000000c4, 0x0000073c,
+    0x00040001, 0xc4349000, 0x00000000, 0x0000005e,
+    0xe431f000, 0x00000000, 0x003201cf, 0x00006894,
+    0x00000740, 0x00000744, 0x00040001, 0x24327000,
+    0x00000000, 0x001601cf, 0xc4225000, 0x00000000,
+    0x000001d2, 0xc4322000, 0x00000000, 0x00190008,
+    0xc434e000, 0x00000000, 0x01d301d4, 0x00201605,
+    0xc4322000, 0x00000000, 0x001d01d5, 0xc434e000,
+    0x00000000, 0x01d601d7, 0xa83b8000, 0x00000000,
+    0x00000012, 0xc438e000, 0x00000000, 0x000001d9,
+    0xc4351000, 0x00000000, 0x017d01da, 0xc4287000,
+    0x00000000, 0x001701d8, 0xc434e000, 0x00000000,
+    0x01db01dc, 0xc4322000, 0x00000000, 0x00190007,
+    0xc434e000, 0x00000000, 0x001a01de, 0x0001b605,
+    0x84390100, 0x00000000, 0x000001d9, 0x00003505,
+    0xa4288100, 0x00000000, 0x01e201d9, 0x84390000,
+    0x00000000, 0x000001e3, 0xc438e000, 0x00000000,
+    0x000001e1, 0xc4351000, 0x00000000, 0x001c01e5,
+    0xc4322000, 0x00000000, 0x001d01df, 0xc434e000,
+    0x00000000, 0x01e601e7, 0xc438e000, 0x00000000,
+    0x000001e4, 0xc4351000, 0x00000000, 0x017d01e9,
+    0x00000605, 0xff00ffff, 0xc4322000, 0x00000000,
+    0x01eb01e8, 0xc434e000, 0x00000000, 0x01ea01ec,
+    0x903bb000, 0x00000000, 0x00000010, 0xc438e000,
+    0x00000000, 0x000001ee, 0x00031605, 0xc4351000,
+    0x00000000, 0x01f001ef, 0x00000605, 0x00ffffff,
+    0xc4322000, 0x00000000, 0x01f201ed, 0xc434e000,
+    0x00000000, 0x01f101f3, 0xc83bc000, 0x00000000,
+    0x000001cf, 0x903bb000, 0x00000000, 0x000001dd,
+    0x84322000, 0x00000000, 0x006001f6, 0x24345000,
+    0x00000000, 0x001801f7, 0xe4226000, 0x00000000,
+    0x000001f8, 0xe4351000, 0x00000000, 0x01e001f9,
+    0x84322100, 0x00000000, 0x006001f6, 0x24345000,
+    0x00000000, 0x001801fb, 0xe4226000, 0x00000000,
+    0x000001fc, 0x0001d605, 0xe4351000, 0x00000000,
+    0x01fe01fd, 0xe434e000, 0x00000000, 0x01ff01fa,
+    0xe438f000, 0x00000000, 0x00000067, 0xe4351000,
+    0x00000000, 0x017d0201, 0xe434e000, 0x00000000,
+    0x02020200, 0x903bb000, 0x00000000, 0x000001f4,
+    0x84322000, 0x00000000, 0x00600204, 0x24345000,
+    0x00000000, 0x00180205, 0xe4226000, 0x00000000,
+    0x00000206, 0x00033605, 0xe4351000, 0x00000000,
+    0x02080207, 0xe434e000, 0x00000000, 0x02090203,
+    0xe438f000, 0x00000000, 0x000001cc, 0x00035605,
+    0xe4351000, 0x00000000, 0x020c020b, 0xe434e000,
+    0x00000000, 0x020d020a, 0xc438e000, 0x00000000,
+    0x0000020e, 0x00006894, 0x0000083c, 0x00000734,
+    0x00040001, 0xc438e000, 0x00000000, 0x000001cf,
+    0xe431f000, 0x00000000, 0x003201cd, 0x00006894,
+    0x00000840, 0x00000844, 0x00040001, 0xc435a100,
+    0x00000000, 0x000001f5, 0xe431f000, 0x00000000,
+    0x017b01cd, 0x00006894, 0x00000848, 0x0000084c,
+    0x00040001, 0xe431f000, 0x00000000, 0x017001cd,
+    0x00006894, 0x00000070, 0x00000850, 0x00040001,
+    0xe431f000, 0x00000000, 0x017c01cd, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x00000215, 0x000001ce, 0x000001cd,
+    0x00000216, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000064, 0xe4000028, 0x00000218,
+    0x00000217, 0x00000173, 0x00000219, 0xe431f000,
+    0x00000000, 0x00370021, 0xd0005354, 0x00000870,
+    0x00000400, 0x00021705, 0xe431f000, 0x00000000,
+    0x021e021c, 0xc4005354, 0x0000087c, 0x00000400,
+    0x00021605, 0xc435a000, 0x00000000, 0x0000021d,
+    0x00011705, 0xc435a200, 0x00000000, 0x0000021d,
+    0xc435a100, 0x00000000, 0x0000021d, 0xc435a300,
+    0x00000000, 0x0000021d, 0xc43cc000, 0x00000000,
+    0x001a0061, 0xc4322000, 0x00000000, 0x00190006,
+    0xc434e000, 0x00000000, 0x02270228, 0xc4322000,
+    0x00000000, 0x001d0229, 0x0000d605, 0x00000605,
+    0xff00ffff, 0x903bb000, 0x00000000, 0x0000000c,
+    0xc438e000, 0x00000000, 0x0000022d, 0x00031605,
+    0xc4351000, 0x00000000, 0x022f022e, 0x00000605,
+    0x00ffffff, 0xc4287000, 0x00000000, 0x0017022a,
+    0xc434e000, 0x00000000, 0x02300232, 0xc4322000,
+    0x00000000, 0x00620027, 0xc43cc000, 0x00000000,
+    0x022b0234, 0x00029705, 0x00031705, 0xa438d100,
+    0x00000000, 0x0000022d, 0xa438d200, 0x00000000,
+    0x0000022d, 0xa4351000, 0x00000000, 0x001c0239,
+    0xa434e000, 0x00000000, 0x023a0238, 0x84390000,
+    0x00000000, 0x0000023b, 0x00003505, 0xa4288000,
+    0x00000000, 0x023d023b, 0x84390000, 0x00000000,
+    0x0000023e, 0xc438e000, 0x00000000, 0x0000023c,
+    0xc4351000, 0x00000000, 0x001c0240, 0xc4322000,
+    0x00000000, 0x0005001e, 0xc434e000, 0x00000000,
+    0x02410242, 0xc438e000, 0x00000000, 0x0000023f,
+    0xc4351000, 0x00000000, 0x02210244, 0xc4322000,
+    0x00000000, 0x022c0243, 0xc434e000, 0x00000000,
+    0x02450246, 0xc438e300, 0x00000000, 0x0000022d,
+    0xc4351000, 0x00000000, 0x022f0248, 0xc4322000,
+    0x00000000, 0x02310247, 0xc434e000, 0x00000000,
+    0x0249024a, 0x903bb000, 0x00000000, 0x00000233,
+    0x84322000, 0x00000000, 0x0060024c, 0x24345000,
+    0x00000000, 0x0018024d, 0xe4226000, 0x00000000,
+    0x0000024e, 0xe4351000, 0x00000000, 0x001c024f,
+    0xc43bd000, 0x00000000, 0x00000250, 0x0000b605,
+    0xc434e000, 0x00000000, 0x02520251, 0xc43be000,
+    0x00000000, 0x00000250, 0xe4369000, 0x00000000,
+    0x02540253, 0x84322100, 0x00000000, 0x0060024c,
+    0x24345000, 0x00000000, 0x00180256, 0xe4226000,
+    0x00000000, 0x00000257, 0x00013605, 0xe4351000,
+    0x00000000, 0x02590258, 0xe434e000, 0x00000000,
+    0x025a0255, 0x84322200, 0x00000000, 0x0060024c,
+    0x24345000, 0x00000000, 0x0018025c, 0xe4226000,
+    0x00000000, 0x0000025d, 0x00015605, 0xe4351000,
+    0x00000000, 0x025f025e, 0xe434e000, 0x00000000,
+    0x0260025b, 0xe438f000, 0x00000000, 0x00000235,
+    0x0001b605, 0xe4351000, 0x00000000, 0x02630262,
+    0xe434e000, 0x00000000, 0x02640261, 0xc43bd000,
+    0x00000000, 0x00000265, 0x7b000e05, 0xc434e000,
+    0x00000000, 0x02660267, 0x00006894, 0x000009a0,
+    0x0000086c, 0x00040001, 0xe438f000, 0x00000000,
+    0x0000005e, 0xe4351000, 0x00000000, 0x001c0269,
+    0x903bb000, 0x00000000, 0x0000024b, 0x84322000,
+    0x00000000, 0x0060026b, 0x24345000, 0x00000000,
+    0x0018026c, 0xe4226000, 0x00000000, 0x0000026d,
+    0xe4351000, 0x00000000, 0x0259026e, 0xe434e000,
+    0x00000000, 0x026f026a, 0xc438e000, 0x00000000,
+    0x00000270, 0xe431f000, 0x00000000, 0x0032021b,
+    0x00006894, 0x000009c4, 0x000009c8, 0x00040001,
+    0xe431f000, 0x00000000, 0x0223021b, 0x00006894,
+    0x00000888, 0x000009cc, 0x00040001, 0xe431f000,
+    0x00000000, 0x0170021b, 0x00006894, 0x00000890,
+    0x000009d0, 0x00040001, 0xe431f000, 0x00000000,
+    0x021e021b, 0x00006894, 0x00000894, 0x000009d4,
+    0x00040001, 0xe431f000, 0x00000000, 0x0236021b,
+    0x00006894, 0x00000880, 0x000009d8, 0x00040001,
+    0xe431f000, 0x00000000, 0x0237021b, 0x00006894,
+    0x00000898, 0x000009dc, 0x00040001, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x24327000, 0x00000000,
+    0x00170040, 0xfffff605, 0xc431f000, 0x00000000,
+    0x027c0040, 0xc4273000, 0x00000000, 0x0017027b,
+    0x0000027d, 0xe438f000, 0x00000000, 0x0000002f,
+    0xe431f000, 0x00000000, 0x027f0035, 0xe4273000,
+    0x00000000, 0x0035027b, 0x00000280, 0xe431f000,
+    0x00000000, 0x02810020, 0x24345000, 0x00000000,
+    0x027e0031, 0x00000001, 0x00000a0c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000002, 0xc431f000,
+    0x00000000, 0x027c0028, 0x24327000, 0x00000000,
+    0x0285002b, 0x00000001, 0x00000a18, 0x00000000,
+    0x00000001, 0x00000000, 0x00000024, 0x00011705,
+    0xc4322000, 0x00000000, 0x0004001e, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000003, 0xc438e000,
+    0x00000000, 0x0000028b, 0x00021605, 0xc4351000,
+    0x00000000, 0x028d028c, 0xc4287000, 0x00000000,
+    0x00170289, 0xc434e000, 0x00000000, 0x028e028f,
+    0x903bb000, 0x00000000, 0x00000290, 0x00003405,
+    0x84322000, 0x00000000, 0x02920291, 0x24345000,
+    0x00000000, 0x00180293, 0xe4226000, 0x00000000,
+    0x00000294, 0xe4351000, 0x00000000, 0x028a0295,
+    0xc43bd000, 0x00000000, 0x00000296, 0x00203605,
+    0xc434e000, 0x00000000, 0x02980297, 0xc43be000,
+    0x00000000, 0x00000296, 0xe4369000, 0x00000000,
+    0x029a0299, 0x84322100, 0x00000000, 0x02920291,
+    0x24345000, 0x00000000, 0x0018029c, 0xe4226000,
+    0x00000000, 0x0000029d, 0x0001f605, 0xe4351000,
+    0x00000000, 0x029f029e, 0xe434e000, 0x00000000,
+    0x02a0029b, 0xc43bd000, 0x00000000, 0x000002a1,
+    0x18800e05, 0xc434e000, 0x00000000, 0x02a302a2,
+    0x00006894, 0x00000a90, 0x00000a08, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000029, 0xe431f000,
+    0x00000000, 0x00320282, 0x00006894, 0x00000a94,
+    0x00000a98, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000029, 0xe431f000, 0x00000000, 0x02880282,
+    0x00006894, 0x00000a9c, 0x00000aa0, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000024,
+    0x00011705, 0xc4322000, 0x00000000, 0x0002001e,
+    0x00015605, 0xa83b8000, 0x00000000, 0x00000003,
+    0xc438e000, 0x00000000, 0x000002af, 0x00021605,
+    0xc4351000, 0x00000000, 0x02b102b0, 0xc4287000,
+    0x00000000, 0x001702ad, 0xc434e000, 0x00000000,
+    0x02b202b3, 0x903bb000, 0x00000000, 0x000002b4,
+    0x00003405, 0x84322000, 0x00000000, 0x02b602b5,
+    0x24345000, 0x00000000, 0x001802b7, 0xe4226000,
+    0x00000000, 0x000002b8, 0xe4351000, 0x00000000,
+    0x02ae02b9, 0xc43bd000, 0x00000000, 0x000002ba,
+    0x00203605, 0xc434e000, 0x00000000, 0x02bc02bb,
+    0xc43be000, 0x00000000, 0x000002ba, 0xe4369000,
+    0x00000000, 0x02be02bd, 0x84322100, 0x00000000,
+    0x02b602b5, 0x24345000, 0x00000000, 0x001802c0,
+    0xe4226000, 0x00000000, 0x000002c1, 0x0001f605,
+    0xe4351000, 0x00000000, 0x02c302c2, 0xe434e000,
+    0x00000000, 0x02c402bf, 0xc43bd000, 0x00000000,
+    0x000002c5, 0x18800e05, 0xc434e000, 0x00000000,
+    0x02c702c6, 0x00006894, 0x00000b20, 0x00000a08,
+    0x00040001, 0xc438e000, 0x00000000, 0x0000002a,
+    0xe431f000, 0x00000000, 0x00320282, 0x00006894,
+    0x00000b24, 0x00000b28, 0x00040001, 0xc43be000,
+    0x00000000, 0x0000002a, 0xe431f000, 0x00000000,
+    0x02ac0282, 0x00006894, 0x00000b2c, 0x00000b30,
+    0x00040001, 0x00000000, 0x00000000,
+};
+   nir_def *args[12] = { dst_base, indirect_base, draw_id_base, indirect_stride, indirect_draw_count, draw_base, max_draw_count, flags, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx20_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx20_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx)
+{
+   /*
+    block b0:   // preds:
+    64     %0 = @load_param (param_idx=0)
+    32     %1 = @load_param (param_idx=1)
+    64     %2 = @load_param (param_idx=2)
+    32     %3 = @load_param (param_idx=3)
+    32     %4 = @load_param (param_idx=4)
+    32     %5 = @load_param (param_idx=6)
+    32     %6 = @load_param (param_idx=7)
+    32     %7 = @load_param (param_idx=8)
+    32     %8 = @load_param (param_idx=9)
+    1      %9 = ult %8, %4
+                // succs: b1 b19
+    if %9 {
+        block b1:   // preds: b0
+        32    %10 = load_const (0x00000001)
+        32    %11 = iand %7, %10 (0x1)
+        32    %12 = load_const (0x00000000)
+        1     %13 = ine %11, %12 (0x0)
+        32    %14 = load_const (0x00000002)
+        32    %15 = iand %7, %14 (0x2)
+        1     %16 = ine %15, %12 (0x0)
+        32    %17 = load_const (0x00000004)
+        32    %18 = iand %7, %17 (0x4)
+        1     %19 = ieq %18, %12 (0x0)
+        32    %20 = load_const (0x00000008)
+        32    %21 = iand %7, %20 (0x8)
+        1     %22 = ine %21, %12 (0x0)
+        32    %23 = iadd %3, %8
+        32    %24 = imul %23, %5
+        64    %25 = u2u64 %24
+        32    %26 = imul %8, %1
+        64    %27 = u2u64 %26
+        64    %28 = iadd %2, %25
+        32    %29 = @load_global (%28) (access=none, align_mul=4, align_offset=0)
+        64    %30 = u2u64 %29
+                    // succs: b2 b6
+        if %16 {
+            block b2:   // preds: b1
+            1     %31 = inot %13
+                        // succs: b3 b4
+            if %31 {
+                block b3:   // preds: b2
+                64    %32 = u2u64 %6
+                64    %33 = iadd %0, %27
+                64    %34 = ishl %32, %14 (0x2)
+                64    %35 = iadd %33, %34
+                            @store_global (%29, %35) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b5
+            } else {
+                block b4:   // preds: b2
+                64    %36 = u2u64 %6
+                64    %37 = iadd %0, %27
+                32    %38 = load_const (0x00000003)
+                64    %39 = ishl %36, %38 (0x3)
+                64    %40 = iadd %37, %39
+                            @store_global (%30, %40) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b5
+            }
+            block b5:  // preds: b3 b4, succs: b7
+        } else {
+            block b6:  // preds: b1, succs: b7
+        }
+        block b7:  // preds: b5 b6, succs: b8
+        loop {
+            block b8:   // preds: b7 b17
+            32    %41 = phi b7: %12 (0x0), b17: %75
+            1     %42 = uge %41, %6
+                        // succs: b9 b10
+            if %42 {
+                block b9:// preds: b8
+                break
+                // succs: b18
+            } else {
+                block b10:  // preds: b8, succs: b11
+            }
+            block b11:  // preds: b10
+            32    %43 = ishl %41, %10 (0x1)
+            32    %44 = iadd %10 (0x1), %43
+                        // succs: b12 b13
+            if %19 {
+                block b12:  // preds: b11
+                64    %45 = u2u64 %44
+                32    %46 = load_const (0x00000003)
+                64    %47 = ishl %45, %46 (0x3)
+                64    %48 = iadd %28, %47
+                64    %49 = @load_global (%48) (access=none, align_mul=8, align_offset=0)
+                            // succs: b14
+            } else {
+                block b13:  // preds: b11
+                64    %50 = u2u64 %44
+                32    %51 = load_const (0x00000003)
+                64    %52 = ishl %50, %51 (0x3)
+                64    %53 = iadd %28, %52
+                32x4  %54 = @load_global (%53) (access=none, align_mul=8, align_offset=0)
+                64    %55 = pack_64_2x32 %54.zw
+                64    %56 = pack_64_2x32 %54.xy
+                64    %57 = ineg %56
+                64    %58 = iadd %55, %57
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13
+            64    %59 = phi b12: %49, b13: %58
+            64    %60 = load_const (0x0000000000000000)
+            1     %61 = ieq %29, %12 (0x0)
+            1     %62 = iand %22, %61
+            64    %63 = bcsel %62, %60 (0x0), %59
+            1     %64 = inot %13
+                        // succs: b15 b16
+            if %64 {
+                block b15:  // preds: b14
+                32    %65 = u2u32 %63
+                64    %66 = u2u64 %41
+                64    %67 = iadd %0, %27
+                64    %68 = ishl %66, %14 (0x2)
+                64    %69 = iadd %67, %68
+                            @store_global (%65, %69) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b17
+            } else {
+                block b16:  // preds: b14
+                64    %70 = u2u64 %41
+                64    %71 = iadd %0, %27
+                32    %72 = load_const (0x00000003)
+                64    %73 = ishl %70, %72 (0x3)
+                64    %74 = iadd %71, %73
+                            @store_global (%63, %74) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b17
+            }
+            block b17:  // preds: b15 b16
+            32    %75 = iadd %41, %10 (0x1)
+                        // succs: b8
+        }
+        block b18:  // preds: b9, succs: b20
+    } else {
+        block b19:  // preds: b0, succs: b20
+    }
+    block b20:  // preds: b18 b19, succs: b21
+    block b21:
+   */
+   static const uint32_t impl_0_nir[336] = {
+    0x00000062, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000a, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000a, 0xe4001744,
+    0xc4011744, 0xe4021744, 0xc4031744, 0xc4041744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0x243a6000, 0x00000000, 0x0006000a, 0x00000001,
+    0x0000002c, 0x00000000, 0x00000005, 0x00000000,
+    0x00000015, 0x00003605, 0xc4322000, 0x00000000,
+    0x000d0009, 0x00000e05, 0x24345000, 0x00000000,
+    0x000f000e, 0x00005605, 0xc4322000, 0x00000000,
+    0x00110009, 0x24345000, 0x00000000, 0x000f0012,
+    0x00009605, 0xc4322000, 0x00000000, 0x00140009,
+    0x24327000, 0x00000000, 0x000f0015, 0x00011605,
+    0xc4322000, 0x00000000, 0x00170009, 0x24345000,
+    0x00000000, 0x000f0018, 0xc431f000, 0x00000000,
+    0x000a0005, 0xc433f000, 0x00000000, 0x0007001a,
+    0xe438f000, 0x00000000, 0x0000001b, 0xc433f000,
+    0x00000000, 0x0003000a, 0xe438f000, 0x00000000,
+    0x0000001d, 0xe431f000, 0x00000000, 0x001c0004,
+    0xc4005354, 0x0000007c, 0x00000400, 0xe438f000,
+    0x00000000, 0x00000020, 0x00000001, 0x0000004c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000001,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x0000008c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001e0002, 0xe4351000,
+    0x00000000, 0x00110025, 0xe431f000, 0x00000000,
+    0x00270026, 0x00006894, 0x00000080, 0x000000a0,
+    0x00040001, 0x00000001, 0x00000000, 0x00000006,
+    0xe438f000, 0x00000000, 0x00000008, 0xe431f000,
+    0x00000000, 0x001e0002, 0x00007605, 0xe4351000,
+    0x00000000, 0x002c002a, 0xe431f000, 0x00000000,
+    0x002d002b, 0x00006894, 0x00000084, 0x000000b8,
+    0x00080001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0x00000000, 0x00000007, 0x00000000,
+    0x00000002, 0xc4000028, 0x0000000f, 0x00000031,
+    0x0000005e, 0x0000005d, 0x243a0000, 0x00000000,
+    0x00080033, 0x00000001, 0x000000d0, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0xc4351000, 0x00000000, 0x000d0033,
+    0xc431f000, 0x00000000, 0x0038000d, 0x00000001,
+    0x00000058, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x003c003b,
+    0xe431f000, 0x00000000, 0x003d001f, 0xe4005354,
+    0x000000f8, 0x00000800, 0x00000001, 0x00000000,
+    0x00000009, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x00420041,
+    0xe431f000, 0x00000000, 0x0043001f, 0xd0005354,
+    0x00000110, 0x00000800, 0xe4168000, 0x00000000,
+    0x5e000114, 0xe4368000, 0x00000000, 0x00000045,
+    0xe4349000, 0x00000000, 0x00000047, 0xe431f000,
+    0x00000000, 0x00480046, 0x00000000, 0x00000006,
+    0xe4000028, 0x0000003f, 0x0000003a, 0x00000049,
+    0x00000040, 0x00000f05, 0x24327000, 0x00000000,
+    0x000f0020, 0x24322000, 0x00000000, 0x004d0019,
+    0xe4273000, 0x00000000, 0x004c004e, 0x0000004b,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x00000140, 0x00000000, 0x00000001, 0x00000000,
+    0x00000006, 0xc438e000, 0x00000000, 0x0000004f,
+    0xe438f000, 0x00000000, 0x00000033, 0xe431f000,
+    0x00000000, 0x001e0002, 0xe4351000, 0x00000000,
+    0x00110053, 0xe431f000, 0x00000000, 0x00550054,
+    0x00006894, 0x00000148, 0x00000158, 0x00040001,
+    0x00000001, 0x00000000, 0x00000006, 0xe438f000,
+    0x00000000, 0x00000033, 0xe431f000, 0x00000000,
+    0x001e0002, 0x00007605, 0xe4351000, 0x00000000,
+    0x005a0058, 0xe431f000, 0x00000000, 0x005b0059,
+    0x00006894, 0x0000013c, 0x00000170, 0x00080001,
+    0x00000000, 0x00000001, 0xc431f000, 0x00000000,
+    0x000d0033, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+   nir_def *args[10] = { destination_base, destination_stride, query_data, first_query, num_queries, query_data_offset, query_stride, num_query_items, copy_flags, copy_item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx20_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx20_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = @load_param (param_idx=3)
+    32     %5 = load_const (0x00000004)
+    32     %6 = load_const (0x00000002)
+    32     %7 = ishl %4, %6 (0x2)
+    64     %8 = u2u64 %7
+    32     %9 = iadd %4, %5 (0x4)
+    1     %10 = ult %3, %9
+                // succs: b1 b11
+    if %10 {
+        block b1:   // preds: b0
+        32    %11 = load_const (0x00000003)
+        32    %12 = iadd %4, %11 (0x3)
+        1     %13 = ult %3, %12
+                    // succs: b2 b9
+        if %13 {
+            block b2:   // preds: b1
+            32    %14 = iadd %4, %6 (0x2)
+            1     %15 = ult %3, %14
+                        // succs: b3 b7
+            if %15 {
+                block b3:   // preds: b2
+                32    %16 = load_const (0x00000001)
+                32    %17 = iadd %4, %16 (0x1)
+                1     %18 = uge %3, %17
+                            // succs: b4 b5
+                if %18 {
+                    block b4:   // preds: b3
+                    64    %19 = iadd %2, %8
+                    32    %20 = @load_global (%19) (access=none, align_mul=4, align_offset=0)
+                    64    %21 = iadd %1, %8
+                                @store_global (%20, %21) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                // succs: b6
+                } else {
+                    block b5:  // preds: b3, succs: b6
+                }
+                block b6:  // preds: b4 b5, succs: b8
+            } else {
+                block b7:   // preds: b2
+                64    %22 = iadd %2, %8
+                32x2  %23 = @load_global (%22) (access=none, align_mul=8, align_offset=0)
+                64    %24 = iadd %1, %8
+                            @store_global (%23, %24) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                            // succs: b8
+            }
+            block b8:  // preds: b6 b7, succs: b10
+        } else {
+            block b9:   // preds: b1
+            64    %25 = iadd %2, %8
+            32x4  %26 = @load_global (%25) (access=none, align_mul=16, align_offset=0)
+            32x4  %27 = vec4 %26.x, %26.y, %26.z, %0
+            64    %28 = iadd %1, %8
+                        @store_global (%27, %28) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                        // succs: b10
+        }
+        block b10:  // preds: b8 b9, succs: b12
+    } else {
+        block b11:  // preds: b0
+        64    %29 = iadd %2, %8
+        32x4  %30 = @load_global (%29) (access=none, align_mul=16, align_offset=0)
+        64    %31 = iadd %1, %8
+                    @store_global (%30, %31) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                    // succs: b12
+    }
+    block b12:  // preds: b10 b11, succs: b13
+    block b13:
+   */
+   static const uint32_t impl_0_nir[168] = {
+    0x0000002e, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000004, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000b, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0xc4031744,
+    0x00009605, 0x00005605, 0xc4351000, 0x00000000,
+    0x00080006, 0xe438f000, 0x00000000, 0x00000009,
+    0xc431f000, 0x00000000, 0x00070006, 0x243a6000,
+    0x00000000, 0x000b0005, 0x00000001, 0x00000030,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00007605, 0xc431f000, 0x00000000, 0x000e0006,
+    0x243a6000, 0x00000000, 0x000f0005, 0x00000001,
+    0x00000040, 0x00000000, 0x00000003, 0x00000000,
+    0x00000002, 0xc431f000, 0x00000000, 0x00080006,
+    0x243a6000, 0x00000000, 0x00120005, 0x00000001,
+    0x0000004c, 0x00000000, 0x00000003, 0x00000000,
+    0x00000003, 0x00003605, 0xc431f000, 0x00000000,
+    0x00150006, 0x243a0000, 0x00000000, 0x00160005,
+    0x00000001, 0x0000005c, 0x00000000, 0x00000001,
+    0x00000000, 0x00000004, 0xe431f000, 0x00000000,
+    0x000a0004, 0xc4005354, 0x00000064, 0x00000400,
+    0xe431f000, 0x00000000, 0x000a0003, 0x00006894,
+    0x00000068, 0x0000006c, 0x00040001, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x00000004, 0xe431f000,
+    0x00000000, 0x000a0004, 0xc8005354, 0x0000007c,
+    0x00000800, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000080, 0x00000084, 0x00080003,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x00000090, 0x00001000, 0xd01d3000,
+    0x00000000, 0xe4000094, 0xe5000094, 0xe6000094,
+    0xe4000008, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000098, 0x0000009c, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000004, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x000000a8, 0x00001000, 0xe431f000,
+    0x00000000, 0x000a0003, 0x00006894, 0x000000ac,
+    0x000000b0, 0x0010000f, 0x00000000, 0x00000000,
+};
+   nir_def *args[4] = { dst_base, src_base, num_dwords, dword_offset };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx20_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+void
+gfx20_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = load_const (0x00000000)
+                // succs: b1
+    loop {
+        block b1:   // preds: b0 b16
+        32     %5 = phi b0: %4 (0x0), b16: %8
+        1      %6 = uge %5, %3
+                    // succs: b2 b3
+        if %6 {
+            block b2:// preds: b1
+            break
+            // succs: b17
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:   // preds: b3
+        32     %7 = load_const (0x00000010 = 16)
+        32     %8 = iadd %5, %7 (0x10)
+        1      %9 = ult %3, %8
+                    // succs: b5 b15
+        if %9 {
+            block b5:   // preds: b4
+            32    %10 = load_const (0x0000000c = 12)
+            32    %11 = iadd %5, %10 (0xc)
+            1     %12 = ult %3, %11
+                        // succs: b6 b13
+            if %12 {
+                block b6:   // preds: b5
+                32    %13 = load_const (0x00000008)
+                32    %14 = iadd %5, %13 (0x8)
+                1     %15 = ult %3, %14
+                            // succs: b7 b11
+                if %15 {
+                    block b7:   // preds: b6
+                    32    %16 = load_const (0x00000004)
+                    32    %17 = iadd %5, %16 (0x4)
+                    1     %18 = uge %3, %17
+                                // succs: b8 b9
+                    if %18 {
+                        block b8:   // preds: b7
+                        64    %19 = u2u64 %5
+                        64    %20 = iadd %2, %19
+                        32    %21 = @load_global (%20) (access=none, align_mul=4, align_offset=0)
+                        64    %22 = iadd %1, %19
+                                    @store_global (%21, %22) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                    // succs: b10
+                    } else {
+                        block b9:  // preds: b7, succs: b10
+                    }
+                    block b10:  // preds: b8 b9, succs: b12
+                } else {
+                    block b11:  // preds: b6
+                    64    %23 = u2u64 %5
+                    64    %24 = iadd %2, %23
+                    32x2  %25 = @load_global (%24) (access=none, align_mul=8, align_offset=0)
+                    64    %26 = iadd %1, %23
+                                @store_global (%25, %26) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                                // succs: b12
+                }
+                block b12:  // preds: b10 b11, succs: b14
+            } else {
+                block b13:  // preds: b5
+                64    %27 = u2u64 %5
+                64    %28 = iadd %2, %27
+                32x4  %29 = @load_global (%28) (access=none, align_mul=16, align_offset=0)
+                64    %30 = iadd %1, %27
+                32x4  %31 = vec4 %29.x, %29.y, %29.z, %0
+                            @store_global (%31, %30) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13, succs: b16
+        } else {
+            block b15:  // preds: b4
+            64    %32 = u2u64 %5
+            64    %33 = iadd %2, %32
+            32x4  %34 = @load_global (%33) (access=none, align_mul=16, align_offset=0)
+            64    %35 = iadd %1, %32
+                        @store_global (%34, %35) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                        // succs: b16
+        }
+        block b16:  // preds: b14 b15, succs: b1
+    }
+    block b17:  // preds: b2, succs: b18
+    block b18:
+   */
+   static const uint32_t impl_0_nir[197] = {
+    0x00000037, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000003, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x00000005, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0x00000e05,
+    0x00000002, 0x00000000, 0x00000005, 0x00000000,
+    0x00000002, 0xc4000028, 0x00000006, 0x00000001,
+    0x0000000e, 0x00000035, 0x243a0000, 0x00000000,
+    0x00050008, 0x00000001, 0x00000024, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000003, 0x00021605, 0xc431f000, 0x00000000,
+    0x000d0008, 0x243a6000, 0x00000000, 0x000e0005,
+    0x00000001, 0x0000003c, 0x00000000, 0x00000003,
+    0x00000000, 0x00000003, 0x00019605, 0xc431f000,
+    0x00000000, 0x00110008, 0x243a6000, 0x00000000,
+    0x00120005, 0x00000001, 0x0000004c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000003, 0x00011605,
+    0xc431f000, 0x00000000, 0x00150008, 0x243a6000,
+    0x00000000, 0x00160005, 0x00000001, 0x0000005c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00009605, 0xc431f000, 0x00000000, 0x00190008,
+    0x243a0000, 0x00000000, 0x001a0005, 0x00000001,
+    0x0000006c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001d0004, 0xc4005354,
+    0x00000078, 0x00000400, 0xe431f000, 0x00000000,
+    0x001d0003, 0x00006894, 0x0000007c, 0x00000080,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00240004, 0xc8005354,
+    0x00000094, 0x00000800, 0xe431f000, 0x00000000,
+    0x00240003, 0x00006894, 0x00000098, 0x0000009c,
+    0x00080003, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000006, 0xe438f000, 0x00000000,
+    0x00000008, 0xe431f000, 0x00000000, 0x002a0004,
+    0xd0005354, 0x000000ac, 0x00001000, 0xe431f000,
+    0x00000000, 0x002a0003, 0xd01d3000, 0x00000000,
+    0xe40000b0, 0xe50000b0, 0xe60000b0, 0xe4000008,
+    0x00006894, 0x000000b8, 0x000000b4, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00310004, 0xd0005354,
+    0x000000c8, 0x00001000, 0xe431f000, 0x00000000,
+    0x00310003, 0x00006894, 0x000000cc, 0x000000d0,
+    0x0010000f, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[3] = { dst_ptr, src_ptr, size };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
+struct vtn_bindgen_dummy {
+   vtn_bindgen_dummy() {
+      /* Format strings:
+       *
+       */
+const uint32_t printf_0_blob[1] = {
+    0x00000000,
+};
+      u_printf_singleton_init_or_ref();
+      u_printf_singleton_add_serialized((const void*)printf_0_blob, sizeof(printf_0_blob));
+   }
+
+   ~vtn_bindgen_dummy() {
+      u_printf_singleton_decref();
+   }
+};
+
+static vtn_bindgen_dummy vtn_bindgen_dummy_instance;
diff --git a/src/intel/shaders/intel_gfx200_shaders_binding.h b/src/intel/shaders/intel_gfx200_shaders_binding.h
new file mode 100644
index 00000000000..783edcf6263
--- /dev/null
+++ b/src/intel/shaders/intel_gfx200_shaders_binding.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#pragma once
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx20_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx20_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx20_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx20_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id);
+
+void
+gfx20_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx20_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx20_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx20_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx20_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx20_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx20_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
diff --git a/src/intel/shaders/intel_gfx300_shaders_binding.cpp b/src/intel/shaders/intel_gfx300_shaders_binding.cpp
new file mode 100644
index 00000000000..712506fa21e
--- /dev/null
+++ b/src/intel/shaders/intel_gfx300_shaders_binding.cpp
@@ -0,0 +1,3844 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx30_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx30_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count)
+{
+   /*
+    block b0:  // preds:
+    64    %0 = @load_param (param_idx=0)
+    32    %1 = @load_param (param_idx=1)
+    32    %2 = load_const (0x00000002)
+    32    %3 = ishl %1, %2 (0x2)
+    32    %4 = load_const (0xffffffff = -1 = 4294967295)
+    32    %5 = iadd %4 (0xffffffff), %3
+    32    %6 = load_const (0x78080000 = 2013790208)
+    32    %7 = ior %6 (0x78080000), %5
+               @store_global (%7, %0) (wrmask=x, access=none, align_mul=4, align_offset=0)
+               // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[37] = {
+    0x0000000a, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000009, 0xe4001744,
+    0xc4011744, 0x00005605, 0xc4351000, 0x00000000,
+    0x00040003, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00050006, 0x78080e05, 0xc434e000, 0x00000000,
+    0x00070008, 0x00006894, 0x00000024, 0x00000008,
+    0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, buffer_count };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx30_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx30_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    32     %2 = undefined
+    32     %3 = undefined
+    64     %4 = @load_param (param_idx=0)
+    32     %5 = @load_param (param_idx=1)
+    32     %6 = @load_param (param_idx=2)
+    64     %7 = @load_param (param_idx=3)
+    32     %8 = @load_param (param_idx=4)
+    32     %9 = @load_param (param_idx=5)
+    64    %10 = load_const (0x0000000000000004)
+    64    %11 = load_const (0x0000000000000000)
+    1     %12 = ieq %7, %11 (0x0)
+    8     %13 = load_const (0x00)
+    8     %14 = load_const (0x01)
+    32    %15 = load_const (0x00000000)
+    32    %16 = b2i32 %12
+    32    %17 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %18 = iand %3, %17 (0xffffff00)
+    32    %19 = ior %18, %16
+    32    %20 = load_const (0x00000001)
+    32    %21 = load_const (0x00000008)
+    32    %22 = load_const (0x00000100 = 256)
+    32    %23 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %24 = iand %19, %23 (0xffff00ff)
+    32    %25 = ior %24, %22 (0x100)
+    16x2  %26 = unpack_32_2x16 %2
+    32    %27 = u2u32 %26.x
+    32    %28 = load_const (0x00000010 = 16)
+    32    %29 = ishl %27, %28 (0x10)
+    32    %30 = extract_u16 %25, %15 (0x0)
+    32    %31 = ior %30, %29
+    64    %32 = load_const (0x0000000000000008)
+    64    %33 = load_const (0x000000000000000c = 12)
+    32    %34 = iand %1, %17 (0xffffff00)
+    32    %35 = ior %34, %20 (0x1)
+    32    %36 = load_const (0x0000000d = 13)
+    8     %37 = u2u8 %26.y
+    16    %38 = load_const (0x0001)
+    16    %39 = extract_u8 %26.y, %38 (0x1)
+    8     %40 = u2u8 %39
+    32    %41 = u2u32 %37
+    32    %42 = ishl %41, %21 (0x8)
+    32    %43 = iand %35, %23 (0xffff00ff)
+    32    %44 = ior %43, %42
+    32    %45 = u2u32 %40
+    32    %46 = ishl %45, %28 (0x10)
+    32    %47 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32    %48 = iand %44, %47 (0xff00ffff)
+    32    %49 = ior %48, %46
+    8x4   %50 = unpack_32_4x8 %0
+    32    %51 = u2u32 %50.x
+    32    %52 = load_const (0x00000018 = 24)
+    32    %53 = ishl %51, %52 (0x18)
+    32    %54 = load_const (0x00ffffff = 16777215)
+    32    %55 = iand %49, %54 (0xffffff)
+    32    %56 = ior %55, %53
+    32x2  %57 = unpack_64_2x32 %7
+    64    %58 = u2u64 %9
+    8x4   %59 = unpack_32_4x8 %31
+    8     %60 = iand %59.x, %14 (0x1)
+    1     %61 = ine %60, %13 (0x0)
+    64    %62 = b2i64 %61
+    64    %63 = ishl %62, %36 (0xd)
+    64    %64 = ior %58, %63
+    8     %65 = iand %59.y, %14 (0x1)
+    1     %66 = ine %65, %13 (0x0)
+    64    %67 = b2i64 %66
+    32    %68 = load_const (0x0000000e = 14)
+    64    %69 = ishl %67, %68 (0xe)
+    64    %70 = ior %64, %69
+    64    %71 = u2u64 %5
+    64    %72 = ishl %71, %28 (0x10)
+    64    %73 = ior %70, %72
+    8x4   %74 = unpack_32_4x8 %56
+    8     %75 = iand %74.x, %14 (0x1)
+    1     %76 = ine %75, %13 (0x0)
+    64    %77 = b2i64 %76
+    32    %78 = load_const (0x00000019 = 25)
+    64    %79 = ishl %77, %78 (0x19)
+    64    %80 = ior %73, %79
+    64    %81 = u2u64 %6
+    32    %82 = load_const (0x0000001a = 26)
+    64    %83 = ishl %81, %82 (0x1a)
+    64    %84 = ior %80, %83
+    32    %85 = u2u32 %84
+                @store_global (%85, %4) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %86 = u2u32 %7
+    64    %87 = iadd %4, %10 (0x4)
+                @store_global (%86, %87) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %88 = mov %57.y
+    64    %89 = iadd %4, %32 (0x8)
+                @store_global (%88, %89) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %90 = iadd %4, %33 (0xc)
+                @store_global (%8, %90) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[264] = {
+    0x0000005d, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000006, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000005f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0xe4001744,
+    0xc4011744, 0xc4021744, 0xe4031744, 0xc4041744,
+    0xc4051744, 0x00009705, 0x00000f05, 0x24327000,
+    0x00000000, 0x000d0009, 0x00001405, 0x00003405,
+    0x00000e05, 0xc4225000, 0x00000000, 0x0000000e,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00130005,
+    0xc434e000, 0x00000000, 0x00120014, 0x00003605,
+    0x00011605, 0x00201605, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00190015, 0xc434e000, 0x00000000,
+    0x0018001a, 0xa83b8000, 0x00000000, 0x00000004,
+    0xc438e000, 0x00000000, 0x0000001c, 0x00021605,
+    0xc4351000, 0x00000000, 0x001e001d, 0xc4287000,
+    0x00000000, 0x0011001b, 0xc434e000, 0x00000000,
+    0x001f0020, 0x00011705, 0x00019705, 0xc4322000,
+    0x00000000, 0x00130003, 0xc434e000, 0x00000000,
+    0x00160024, 0x0001b605, 0x84390100, 0x00000000,
+    0x0000001c, 0x00003505, 0xa4288100, 0x00000000,
+    0x0028001c, 0x84390000, 0x00000000, 0x00000029,
+    0xc438e000, 0x00000000, 0x00000027, 0xc4351000,
+    0x00000000, 0x0017002b, 0xc4322000, 0x00000000,
+    0x00190025, 0xc434e000, 0x00000000, 0x002c002d,
+    0xc438e000, 0x00000000, 0x0000002a, 0xc4351000,
+    0x00000000, 0x001e002f, 0x00000605, 0xff00ffff,
+    0xc4322000, 0x00000000, 0x0031002e, 0xc434e000,
+    0x00000000, 0x00300032, 0x903bb000, 0x00000000,
+    0x00000002, 0xc438e000, 0x00000000, 0x00000034,
+    0x00031605, 0xc4351000, 0x00000000, 0x00360035,
+    0x00000605, 0x00ffffff, 0xc4322000, 0x00000000,
+    0x00380033, 0xc434e000, 0x00000000, 0x00370039,
+    0xc83bc000, 0x00000000, 0x00000009, 0xe438f000,
+    0x00000000, 0x0000000b, 0x903bb000, 0x00000000,
+    0x00000021, 0x84322000, 0x00000000, 0x0010003d,
+    0x24345000, 0x00000000, 0x000f003e, 0xe4226000,
+    0x00000000, 0x0000003f, 0xe4351000, 0x00000000,
+    0x00260040, 0xe434e000, 0x00000000, 0x0041003c,
+    0x84322100, 0x00000000, 0x0010003d, 0x24345000,
+    0x00000000, 0x000f0043, 0xe4226000, 0x00000000,
+    0x00000044, 0x0001d605, 0xe4351000, 0x00000000,
+    0x00460045, 0xe434e000, 0x00000000, 0x00470042,
+    0xe438f000, 0x00000000, 0x00000007, 0xe4351000,
+    0x00000000, 0x001e0049, 0xe434e000, 0x00000000,
+    0x004a0048, 0x903bb000, 0x00000000, 0x0000003a,
+    0x84322000, 0x00000000, 0x0010004c, 0x24345000,
+    0x00000000, 0x000f004d, 0xe4226000, 0x00000000,
+    0x0000004e, 0x00033605, 0xe4351000, 0x00000000,
+    0x0050004f, 0xe434e000, 0x00000000, 0x0051004b,
+    0xe438f000, 0x00000000, 0x00000008, 0x00035605,
+    0xe4351000, 0x00000000, 0x00540053, 0xe434e000,
+    0x00000000, 0x00550052, 0xc438e000, 0x00000000,
+    0x00000056, 0x00006894, 0x0000015c, 0x00000018,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000009,
+    0xe431f000, 0x00000000, 0x000c0006, 0x00006894,
+    0x00000160, 0x00000164, 0x00040001, 0xc435a100,
+    0x00000000, 0x0000003b, 0xe431f000, 0x00000000,
+    0x00220006, 0x00006894, 0x00000168, 0x0000016c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230006,
+    0x00006894, 0x00000028, 0x00000170, 0x00040001,
+};
+   nir_def *args[6] = { dst_ptr, mocs, buffer_idx, address, size, stride };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx30_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx30_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    64      %3 = @load_param (param_idx=0)
+    1       %4 = @load_param (param_idx=1)
+    1       %5 = @load_param (param_idx=2)
+    1       %6 = @load_param (param_idx=3)
+    32      %7 = @load_param (param_idx=4)
+    32      %8 = @load_param (param_idx=5)
+    32      %9 = @load_param (param_idx=6)
+    32     %10 = @load_param (param_idx=7)
+    32     %11 = @load_param (param_idx=8)
+    8      %12 = load_const (0x00)
+    8      %13 = load_const (0x01)
+    64     %14 = load_const (0x0000000000000004)
+    32     %15 = b2i32 %4
+    32     %16 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %17 = iand %2, %16 (0xffffff00)
+    32     %18 = ior %17, %15
+    32     %19 = load_const (0x00000008)
+    32     %20 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %21 = iand %18, %20 (0xffff00ff)
+    32     %22 = load_const (0x00000010 = 16)
+    32     %23 = load_const (0xff00ffff = -16711681 = 4278255615)
+    8x4    %24 = unpack_32_4x8 %1
+    32     %25 = u2u32 %24.x
+    32     %26 = load_const (0x00000018 = 24)
+    32     %27 = ishl %25, %26 (0x18)
+    32     %28 = load_const (0x00ffffff = 16777215)
+    32     %29 = load_const (0x00000000)
+    32     %30 = extract_u16 %21, %29 (0x0)
+    32     %31 = ior %30, %27
+    64     %32 = load_const (0x0000000000000008)
+    64     %33 = load_const (0x000000000000000c = 12)
+    64     %34 = load_const (0x0000000000000010 = 16)
+    64     %35 = load_const (0x0000000000000014 = 20)
+    64     %36 = load_const (0x0000000000000018 = 24)
+    16     %37 = u2u16 %24.y
+    16     %38 = u2u16 %24.z
+    16     %39 = ishl %38, %19 (0x8)
+    16     %40 = ior %37, %39
+    8      %41 = u2u8 %40
+    16     %42 = load_const (0x0001)
+    16     %43 = extract_u8 %40, %42 (0x1)
+    8      %44 = u2u8 %43
+    32     %45 = u2u32 %41
+    32     %46 = ishl %45, %19 (0x8)
+    32     %47 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %48 = iand %47 (0xffff0000), %0
+    32     %49 = ior %48, %46
+    32     %50 = u2u32 %44
+    32     %51 = ishl %50, %22 (0x10)
+    32     %52 = iand %49, %23 (0xff00ffff)
+    32     %53 = ior %52, %51
+    32     %54 = u2u32 %24.w
+    32     %55 = ishl %54, %26 (0x18)
+    32     %56 = iand %53, %28 (0xffffff)
+    32     %57 = ior %56, %55
+    8x4    %58 = unpack_32_4x8 %31
+    8      %59 = iand %58.x, %13 (0x1)
+    1      %60 = ine %59, %12 (0x0)
+    64     %61 = b2i64 %60
+    64     %62 = ishl %61, %19 (0x8)
+    32     %63 = unpack_64_2x32_split_x %62
+    32     %64 = load_const (0x00000005)
+    32     %65 = ior %63, %64 (0x5)
+    32     %66 = unpack_64_2x32_split_y %62
+    64     %67 = pack_64_2x32_split %65, %66
+    8      %68 = iand %58.y, %13 (0x1)
+    1      %69 = ine %68, %12 (0x0)
+    64     %70 = b2i64 %69
+    32     %71 = load_const (0x00000009)
+    64     %72 = ishl %70, %71 (0x9)
+    64     %73 = ior %67, %72
+    8      %74 = iand %58.z, %13 (0x1)
+    1      %75 = ine %74, %12 (0x0)
+    64     %76 = b2i64 %75
+    32     %77 = load_const (0x0000000a = 10)
+    64     %78 = ishl %76, %77 (0xa)
+    64     %79 = ior %73, %78
+    64     %80 = b2i64 %6
+    32     %81 = load_const (0x0000000d = 13)
+    64     %82 = ishl %80, %81 (0xd)
+    64     %83 = ior %79, %82
+    32     %84 = unpack_64_2x32_split_x %83
+    32     %85 = load_const (0x7b000000 = 2063597568)
+    32     %86 = ior %85 (0x7b000000), %84
+                 @store_global (%86, %3) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %87 = b2i64 %5
+    64     %88 = ishl %87, %19 (0x8)
+    8x4    %89 = unpack_32_4x8 %57
+    8      %90 = iand %89.x, %13 (0x1)
+    1      %91 = ine %90, %12 (0x0)
+    64     %92 = b2i64 %91
+    64     %93 = ishl %92, %71 (0x9)
+    64     %94 = ior %88, %93
+    32     %95 = u2u32 %94
+    64     %96 = iadd %3, %14 (0x4)
+                 @store_global (%95, %96) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %97 = iadd %3, %32 (0x8)
+                 @store_global (%7, %97) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %98 = iadd %3, %33 (0xc)
+                 @store_global (%8, %98) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %99 = iadd %3, %34 (0x10)
+                 @store_global (%9, %99) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %100 = iadd %3, %35 (0x14)
+                 @store_global (%10, %100) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %101 = iadd %3, %36 (0x18)
+                 @store_global (%11, %101) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                 // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[313] = {
+    0x00000068, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000006d, 0x00000607,
+    0x00000607, 0x00000607, 0xe4001744, 0x24011744,
+    0x24021744, 0x24031744, 0xc4041744, 0xc4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0x00001405,
+    0x00003405, 0x00009705, 0xc4225000, 0x00000000,
+    0x00000006, 0xffe01605, 0xc4322000, 0x00000000,
+    0x00120004, 0xc434e000, 0x00000000, 0x00110013,
+    0x00011605, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x00160014, 0x00021605, 0x00000605, 0xff00ffff,
+    0x903bb000, 0x00000000, 0x00000003, 0xc438e000,
+    0x00000000, 0x0000001a, 0x00031605, 0xc4351000,
+    0x00000000, 0x001c001b, 0x00000605, 0x00ffffff,
+    0x00000e05, 0xc4287000, 0x00000000, 0x001f0017,
+    0xc434e000, 0x00000000, 0x001d0020, 0x00011705,
+    0x00019705, 0x00021705, 0x00029705, 0x00031705,
+    0xa438d100, 0x00000000, 0x0000001a, 0xa438d200,
+    0x00000000, 0x0000001a, 0xa4351000, 0x00000000,
+    0x00150028, 0xa434e000, 0x00000000, 0x00290027,
+    0x84390000, 0x00000000, 0x0000002a, 0x00003505,
+    0xa4288000, 0x00000000, 0x002c002a, 0x84390000,
+    0x00000000, 0x0000002d, 0xc438e000, 0x00000000,
+    0x0000002b, 0xc4351000, 0x00000000, 0x0015002f,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x00020031,
+    0xc434e000, 0x00000000, 0x00300032, 0xc438e000,
+    0x00000000, 0x0000002e, 0xc4351000, 0x00000000,
+    0x00180034, 0xc4322000, 0x00000000, 0x00190033,
+    0xc434e000, 0x00000000, 0x00350036, 0xc438e300,
+    0x00000000, 0x0000001a, 0xc4351000, 0x00000000,
+    0x001c0038, 0xc4322000, 0x00000000, 0x001e0037,
+    0xc434e000, 0x00000000, 0x0039003a, 0x903bb000,
+    0x00000000, 0x00000021, 0x84322000, 0x00000000,
+    0x000f003c, 0x24345000, 0x00000000, 0x000e003d,
+    0xe4226000, 0x00000000, 0x0000003e, 0xe4351000,
+    0x00000000, 0x0015003f, 0xc43bd000, 0x00000000,
+    0x00000040, 0x0000b605, 0xc434e000, 0x00000000,
+    0x00420041, 0xc43be000, 0x00000000, 0x00000040,
+    0xe4369000, 0x00000000, 0x00440043, 0x84322100,
+    0x00000000, 0x000f003c, 0x24345000, 0x00000000,
+    0x000e0046, 0xe4226000, 0x00000000, 0x00000047,
+    0x00013605, 0xe4351000, 0x00000000, 0x00490048,
+    0xe434e000, 0x00000000, 0x004a0045, 0x84322200,
+    0x00000000, 0x000f003c, 0x24345000, 0x00000000,
+    0x000e004c, 0xe4226000, 0x00000000, 0x0000004d,
+    0x00015605, 0xe4351000, 0x00000000, 0x004f004e,
+    0xe434e000, 0x00000000, 0x0050004b, 0xe4226000,
+    0x00000000, 0x00000008, 0x0001b605, 0xe4351000,
+    0x00000000, 0x00530052, 0xe434e000, 0x00000000,
+    0x00540051, 0xc43bd000, 0x00000000, 0x00000055,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x00560057,
+    0x00006894, 0x00000160, 0x00000014, 0x00040001,
+    0xe4226000, 0x00000000, 0x00000007, 0xe4351000,
+    0x00000000, 0x00150059, 0x903bb000, 0x00000000,
+    0x0000003b, 0x84322000, 0x00000000, 0x000f005b,
+    0x24345000, 0x00000000, 0x000e005c, 0xe4226000,
+    0x00000000, 0x0000005d, 0xe4351000, 0x00000000,
+    0x0049005e, 0xe434e000, 0x00000000, 0x005f005a,
+    0xc438e000, 0x00000000, 0x00000060, 0xe431f000,
+    0x00000000, 0x00100005, 0x00006894, 0x00000184,
+    0x00000188, 0x00040001, 0xe431f000, 0x00000000,
+    0x00220005, 0x00006894, 0x00000024, 0x0000018c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230005,
+    0x00006894, 0x00000028, 0x00000190, 0x00040001,
+    0xe431f000, 0x00000000, 0x00240005, 0x00006894,
+    0x0000002c, 0x00000194, 0x00040001, 0xe431f000,
+    0x00000000, 0x00250005, 0x00006894, 0x00000030,
+    0x00000198, 0x00040001, 0xe431f000, 0x00000000,
+    0x00260005, 0x00006894, 0x00000034, 0x0000019c,
+    0x00040001,
+};
+   nir_def *args[9] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx30_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id);
+
+void
+gfx30_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    64      %3 = @load_param (param_idx=0)
+    1       %4 = @load_param (param_idx=1)
+    1       %5 = @load_param (param_idx=2)
+    1       %6 = @load_param (param_idx=3)
+    32      %7 = @load_param (param_idx=4)
+    32      %8 = @load_param (param_idx=5)
+    32      %9 = @load_param (param_idx=6)
+    32     %10 = @load_param (param_idx=7)
+    32     %11 = @load_param (param_idx=8)
+    32     %12 = @load_param (param_idx=9)
+    32     %13 = @load_param (param_idx=10)
+    32     %14 = @load_param (param_idx=11)
+    8      %15 = load_const (0x00)
+    8      %16 = load_const (0x01)
+    32     %17 = load_const (0x00000008)
+    64     %18 = load_const (0x0000000000000004)
+    32     %19 = b2i32 %4
+    32     %20 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %21 = iand %2, %20 (0xffffff00)
+    32     %22 = ior %21, %19
+    32     %23 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %24 = iand %22, %23 (0xffff00ff)
+    32     %25 = load_const (0x00000010 = 16)
+    32     %26 = load_const (0xff00ffff = -16711681 = 4278255615)
+    32     %27 = load_const (0x00000018 = 24)
+    32     %28 = load_const (0x01000000 = 16777216)
+    32     %29 = load_const (0x00ffffff = 16777215)
+    32     %30 = load_const (0x00000000)
+    32     %31 = extract_u16 %24, %30 (0x0)
+    32     %32 = ior %31, %28 (0x1000000)
+    64     %33 = load_const (0x0000000000000008)
+    64     %34 = load_const (0x000000000000000c = 12)
+    64     %35 = load_const (0x0000000000000010 = 16)
+    64     %36 = load_const (0x0000000000000014 = 20)
+    64     %37 = load_const (0x0000000000000018 = 24)
+    64     %38 = load_const (0x000000000000001c = 28)
+    64     %39 = load_const (0x0000000000000020 = 32)
+    64     %40 = load_const (0x0000000000000024 = 36)
+    16x2   %41 = unpack_32_2x16 %0
+    8      %42 = u2u8 %41.x
+    16     %43 = load_const (0x0001)
+    16     %44 = extract_u8 %41.x, %43 (0x1)
+    8      %45 = u2u8 %44
+    32     %46 = u2u32 %42
+    32     %47 = ishl %46, %17 (0x8)
+    32     %48 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %49 = iand %48 (0xffff0000), %1
+    32     %50 = ior %49, %47
+    32     %51 = u2u32 %45
+    32     %52 = ishl %51, %25 (0x10)
+    32     %53 = iand %50, %26 (0xff00ffff)
+    32     %54 = ior %53, %52
+    8x4    %55 = unpack_32_4x8 %0
+    32     %56 = u2u32 %55.z
+    32     %57 = ishl %56, %27 (0x18)
+    32     %58 = iand %54, %29 (0xffffff)
+    32     %59 = ior %58, %57
+    8x4    %60 = unpack_32_4x8 %32
+    8      %61 = iand %60.x, %16 (0x1)
+    1      %62 = ine %61, %15 (0x0)
+    64     %63 = b2i64 %62
+    64     %64 = ishl %63, %17 (0x8)
+    32     %65 = unpack_64_2x32_split_x %64
+    32     %66 = ior %65, %17 (0x8)
+    32     %67 = unpack_64_2x32_split_y %64
+    64     %68 = pack_64_2x32_split %66, %67
+    8      %69 = iand %60.y, %16 (0x1)
+    1      %70 = ine %69, %15 (0x0)
+    64     %71 = b2i64 %70
+    32     %72 = load_const (0x00000009)
+    64     %73 = ishl %71, %72 (0x9)
+    64     %74 = ior %68, %73
+    8      %75 = iand %60.z, %16 (0x1)
+    1      %76 = ine %75, %15 (0x0)
+    64     %77 = b2i64 %76
+    32     %78 = load_const (0x0000000a = 10)
+    64     %79 = ishl %77, %78 (0xa)
+    64     %80 = ior %74, %79
+    8      %81 = iand %60.w, %16 (0x1)
+    1      %82 = ine %81, %15 (0x0)
+    64     %83 = b2i64 %82
+    32     %84 = load_const (0x0000000b = 11)
+    64     %85 = ishl %83, %84 (0xb)
+    64     %86 = ior %80, %85
+    64     %87 = b2i64 %6
+    32     %88 = load_const (0x0000000d = 13)
+    64     %89 = ishl %87, %88 (0xd)
+    64     %90 = ior %86, %89
+    32     %91 = unpack_64_2x32_split_x %90
+    32     %92 = load_const (0x7b000000 = 2063597568)
+    32     %93 = ior %92 (0x7b000000), %91
+                 @store_global (%93, %3) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64     %94 = b2i64 %5
+    64     %95 = ishl %94, %17 (0x8)
+    8x4    %96 = unpack_32_4x8 %59
+    8      %97 = iand %96.x, %16 (0x1)
+    1      %98 = ine %97, %15 (0x0)
+    64     %99 = b2i64 %98
+    64    %100 = ishl %99, %72 (0x9)
+    64    %101 = ior %95, %100
+    32    %102 = u2u32 %101
+    64    %103 = iadd %3, %18 (0x4)
+                 @store_global (%102, %103) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %104 = iadd %3, %33 (0x8)
+                 @store_global (%7, %104) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %105 = iadd %3, %34 (0xc)
+                 @store_global (%8, %105) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %106 = iadd %3, %35 (0x10)
+                 @store_global (%9, %106) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %107 = iadd %3, %36 (0x14)
+                 @store_global (%10, %107) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %108 = iadd %3, %37 (0x18)
+                 @store_global (%11, %108) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %109 = iadd %3, %38 (0x1c)
+                 @store_global (%12, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %110 = iadd %3, %39 (0x20)
+                 @store_global (%13, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %111 = iadd %3, %40 (0x24)
+                 @store_global (%14, %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                 // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[353] = {
+    0x00000072, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000007a, 0x00000607,
+    0x00000607, 0x00000607, 0xe4001744, 0x24011744,
+    0x24021744, 0x24031744, 0xc4041744, 0xc4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0xc40a1744, 0xc40b1744, 0x00001405, 0x00003405,
+    0x00011605, 0x00009705, 0xc4225000, 0x00000000,
+    0x00000006, 0xffe01605, 0xc4322000, 0x00000000,
+    0x00160004, 0xc434e000, 0x00000000, 0x00150017,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00190018,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0x00000e05,
+    0xc4287000, 0x00000000, 0x0020001a, 0xc434e000,
+    0x00000000, 0x001e0021, 0x00011705, 0x00019705,
+    0x00021705, 0x00029705, 0x00031705, 0x00039705,
+    0x00041705, 0x00049705, 0xa83b8000, 0x00000000,
+    0x00000002, 0x84390000, 0x00000000, 0x0000002b,
+    0x00003505, 0xa4288000, 0x00000000, 0x002d002b,
+    0x84390000, 0x00000000, 0x0000002e, 0xc438e000,
+    0x00000000, 0x0000002c, 0xc4351000, 0x00000000,
+    0x00130030, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x00030032, 0xc434e000, 0x00000000, 0x00310033,
+    0xc438e000, 0x00000000, 0x0000002f, 0xc4351000,
+    0x00000000, 0x001b0035, 0xc4322000, 0x00000000,
+    0x001c0034, 0xc434e000, 0x00000000, 0x00360037,
+    0x903bb000, 0x00000000, 0x00000002, 0xc438e200,
+    0x00000000, 0x00000039, 0xc4351000, 0x00000000,
+    0x001d003a, 0xc4322000, 0x00000000, 0x001f0038,
+    0xc434e000, 0x00000000, 0x003b003c, 0x903bb000,
+    0x00000000, 0x00000022, 0x84322000, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x0011003f,
+    0xe4226000, 0x00000000, 0x00000040, 0xe4351000,
+    0x00000000, 0x00130041, 0xc43bd000, 0x00000000,
+    0x00000042, 0xc434e000, 0x00000000, 0x00130043,
+    0xc43be000, 0x00000000, 0x00000042, 0xe4369000,
+    0x00000000, 0x00450044, 0x84322100, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x00110047,
+    0xe4226000, 0x00000000, 0x00000048, 0x00013605,
+    0xe4351000, 0x00000000, 0x004a0049, 0xe434e000,
+    0x00000000, 0x004b0046, 0x84322200, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x0011004d,
+    0xe4226000, 0x00000000, 0x0000004e, 0x00015605,
+    0xe4351000, 0x00000000, 0x0050004f, 0xe434e000,
+    0x00000000, 0x0051004c, 0x84322300, 0x00000000,
+    0x0012003e, 0x24345000, 0x00000000, 0x00110053,
+    0xe4226000, 0x00000000, 0x00000054, 0x00017605,
+    0xe4351000, 0x00000000, 0x00560055, 0xe434e000,
+    0x00000000, 0x00570052, 0xe4226000, 0x00000000,
+    0x00000008, 0x0001b605, 0xe4351000, 0x00000000,
+    0x005a0059, 0xe434e000, 0x00000000, 0x005b0058,
+    0xc43bd000, 0x00000000, 0x0000005c, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x005d005e, 0x00006894,
+    0x0000017c, 0x00000014, 0x00040001, 0xe4226000,
+    0x00000000, 0x00000007, 0xe4351000, 0x00000000,
+    0x00130060, 0x903bb000, 0x00000000, 0x0000003d,
+    0x84322000, 0x00000000, 0x00120062, 0x24345000,
+    0x00000000, 0x00110063, 0xe4226000, 0x00000000,
+    0x00000064, 0xe4351000, 0x00000000, 0x004a0065,
+    0xe434e000, 0x00000000, 0x00660061, 0xc438e000,
+    0x00000000, 0x00000067, 0xe431f000, 0x00000000,
+    0x00140005, 0x00006894, 0x000001a0, 0x000001a4,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230005,
+    0x00006894, 0x00000024, 0x000001a8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00240005, 0x00006894,
+    0x00000028, 0x000001ac, 0x00040001, 0xe431f000,
+    0x00000000, 0x00250005, 0x00006894, 0x0000002c,
+    0x000001b0, 0x00040001, 0xe431f000, 0x00000000,
+    0x00260005, 0x00006894, 0x00000030, 0x000001b4,
+    0x00040001, 0xe431f000, 0x00000000, 0x00270005,
+    0x00006894, 0x00000034, 0x000001b8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00280005, 0x00006894,
+    0x00000038, 0x000001bc, 0x00040001, 0xe431f000,
+    0x00000000, 0x00290005, 0x00006894, 0x0000003c,
+    0x000001c0, 0x00040001, 0xe431f000, 0x00000000,
+    0x002a0005, 0x00006894, 0x00000040, 0x000001c4,
+    0x00040001,
+};
+   nir_def *args[12] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location, param_base_vertex, param_base_instance, param_draw_id };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx30_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx30_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    64     %2 = @load_param (param_idx=0)
+    64     %3 = @load_param (param_idx=1)
+    64     %4 = load_const (0x0000000000000004)
+    64     %5 = load_const (0x0000000000000008)
+    8      %6 = load_const (0x00)
+    32     %7 = load_const (0x00000000)
+    32     %8 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %9 = iand %8 (0xffff0000), %1
+    32    %10 = load_const (0x0000000a = 10)
+    16x2  %11 = unpack_32_2x16 %0
+    32    %12 = u2u32 %11.x
+    32    %13 = load_const (0x00000010 = 16)
+    32    %14 = ishl %12, %13 (0x10)
+    32    %15 = extract_u16 %9, %7 (0x0)
+    32    %16 = ior %15, %14
+    8x4   %17 = unpack_32_4x8 %16
+    8     %18 = load_const (0x01)
+    8     %19 = iand %17.x, %18 (0x1)
+    1     %20 = ine %19, %6 (0x0)
+    64    %21 = b2i64 %20
+    64    %22 = ishl %21, %10 (0xa)
+    32    %23 = unpack_64_2x32_split_x %22
+    32    %24 = load_const (0x00000101 = 257)
+    32    %25 = ior %23, %24 (0x101)
+    32    %26 = unpack_64_2x32_split_y %22
+    64    %27 = pack_64_2x32_split %25, %26
+    8     %28 = iand %17.y, %18 (0x1)
+    1     %29 = ine %28, %6 (0x0)
+    64    %30 = b2i64 %29
+    32    %31 = load_const (0x0000000f = 15)
+    64    %32 = ishl %30, %31 (0xf)
+    64    %33 = ior %27, %32
+    32    %34 = unpack_64_2x32_split_x %33
+    32    %35 = load_const (0x18800000 = 411041792)
+    32    %36 = ior %34, %35 (0x18800000)
+                @store_global (%36, %2) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %37 = u2u32 %3
+    64    %38 = iadd %2, %4 (0x4)
+                @store_global (%37, %38) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %39 = unpack_64_2x32_split_y %3
+    64    %40 = iadd %2, %5 (0x8)
+                @store_global (%39, %40) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[124] = {
+    0x0000002b, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002c, 0x00000607,
+    0x00000607, 0xe4001744, 0xe4011744, 0x00009705,
+    0x00011705, 0x00001405, 0x00000e05, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0003000a, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000002, 0xc438e000,
+    0x00000000, 0x0000000d, 0x00021605, 0xc4351000,
+    0x00000000, 0x000f000e, 0xc4287000, 0x00000000,
+    0x0009000b, 0xc434e000, 0x00000000, 0x00100011,
+    0x903bb000, 0x00000000, 0x00000012, 0x00003405,
+    0x84322000, 0x00000000, 0x00140013, 0x24345000,
+    0x00000000, 0x00080015, 0xe4226000, 0x00000000,
+    0x00000016, 0xe4351000, 0x00000000, 0x000c0017,
+    0xc43bd000, 0x00000000, 0x00000018, 0x00203605,
+    0xc434e000, 0x00000000, 0x001a0019, 0xc43be000,
+    0x00000000, 0x00000018, 0xe4369000, 0x00000000,
+    0x001c001b, 0x84322100, 0x00000000, 0x00140013,
+    0x24345000, 0x00000000, 0x0008001e, 0xe4226000,
+    0x00000000, 0x0000001f, 0x0001f605, 0xe4351000,
+    0x00000000, 0x00210020, 0xe434e000, 0x00000000,
+    0x0022001d, 0xc43bd000, 0x00000000, 0x00000023,
+    0x18800e05, 0xc434e000, 0x00000000, 0x00250024,
+    0x00006894, 0x00000098, 0x00000010, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000005, 0xe431f000,
+    0x00000000, 0x00060004, 0x00006894, 0x0000009c,
+    0x000000a0, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x00070004,
+    0x00006894, 0x000000a4, 0x000000a8, 0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, addr };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx30_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx30_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    64      %5 = @load_param (param_idx=0)
+    64      %6 = @load_param (param_idx=1)
+    32      %7 = @load_param (param_idx=3)
+    32      %8 = @load_param (param_idx=4)
+    1       %9 = @load_param (param_idx=5)
+    1      %10 = @load_param (param_idx=6)
+    1      %11 = @load_param (param_idx=7)
+    8      %12 = load_const (0x00)
+    8      %13 = load_const (0x01)
+    1      %14 = inot %9
+                 // succs: b1 b2
+    if %14 {
+        block b1:    // preds: b0
+        32x4   %15 = @load_global (%6) (access=none, align_mul=4, align_offset=0)
+        32     %16 = load_const (0x00000008)
+        32     %17 = mov %15.x
+        64     %18 = load_const (0x0000000000000008)
+        32     %19 = mov %15.z
+        64     %20 = load_const (0x0000000000000004)
+        32     %21 = imul %15.y, %8
+        64     %22 = load_const (0x000000000000000c = 12)
+        32     %23 = mov %15.w
+        32     %24 = load_const (0x00000000)
+        32     %25 = b2i32 %10
+        32     %26 = load_const (0xffffff00 = -256 = 4294967040)
+        32     %27 = iand %4, %26 (0xffffff00)
+        32     %28 = ior %27, %25
+        32     %29 = load_const (0xffff00ff = -65281 = 4294902015)
+        32     %30 = iand %28, %29 (0xffff00ff)
+        32     %31 = load_const (0x00000010 = 16)
+        32     %32 = load_const (0xff00ffff = -16711681 = 4278255615)
+        32     %33 = load_const (0x00000018 = 24)
+        32     %34 = load_const (0x01000000 = 16777216)
+        32     %35 = load_const (0x00ffffff = 16777215)
+        32     %36 = extract_u16 %30, %24 (0x0)
+        32     %37 = ior %36, %34 (0x1000000)
+        64     %38 = load_const (0x0000000000000010 = 16)
+        64     %39 = load_const (0x0000000000000014 = 20)
+        64     %40 = load_const (0x0000000000000018 = 24)
+        64     %41 = load_const (0x000000000000001c = 28)
+        64     %42 = load_const (0x0000000000000020 = 32)
+        64     %43 = load_const (0x0000000000000024 = 36)
+        16x2   %44 = unpack_32_2x16 %2
+        8      %45 = u2u8 %44.x
+        16     %46 = load_const (0x0001)
+        16     %47 = extract_u8 %44.x, %46 (0x1)
+        8      %48 = u2u8 %47
+        32     %49 = u2u32 %45
+        32     %50 = ishl %49, %16 (0x8)
+        32     %51 = load_const (0xffff0000 = -65536 = 4294901760)
+        32     %52 = iand %51 (0xffff0000), %3
+        32     %53 = ior %52, %50
+        32     %54 = u2u32 %48
+        32     %55 = ishl %54, %31 (0x10)
+        32     %56 = iand %53, %32 (0xff00ffff)
+        32     %57 = ior %56, %55
+        8x4    %58 = unpack_32_4x8 %2
+        32     %59 = u2u32 %58.z
+        32     %60 = ishl %59, %33 (0x18)
+        32     %61 = iand %57, %35 (0xffffff)
+        32     %62 = ior %61, %60
+        8x4    %63 = unpack_32_4x8 %37
+        8      %64 = iand %63.x, %13 (0x1)
+        1      %65 = ine %64, %12 (0x0)
+        64     %66 = b2i64 %65
+        64     %67 = ishl %66, %16 (0x8)
+        32     %68 = unpack_64_2x32_split_x %67
+        32     %69 = ior %68, %16 (0x8)
+        32     %70 = unpack_64_2x32_split_y %67
+        64     %71 = pack_64_2x32_split %69, %70
+        8      %72 = iand %63.y, %13 (0x1)
+        1      %73 = ine %72, %12 (0x0)
+        64     %74 = b2i64 %73
+        32     %75 = load_const (0x00000009)
+        64     %76 = ishl %74, %75 (0x9)
+        64     %77 = ior %71, %76
+        8      %78 = iand %63.z, %13 (0x1)
+        1      %79 = ine %78, %12 (0x0)
+        64     %80 = b2i64 %79
+        32     %81 = load_const (0x0000000a = 10)
+        64     %82 = ishl %80, %81 (0xa)
+        64     %83 = ior %77, %82
+        8      %84 = iand %63.w, %13 (0x1)
+        1      %85 = ine %84, %12 (0x0)
+        64     %86 = b2i64 %85
+        32     %87 = load_const (0x0000000b = 11)
+        64     %88 = ishl %86, %87 (0xb)
+        64     %89 = ior %83, %88
+        64     %90 = b2i64 %11
+        32     %91 = load_const (0x0000000d = 13)
+        64     %92 = ishl %90, %91 (0xd)
+        64     %93 = ior %89, %92
+        32     %94 = unpack_64_2x32_split_x %93
+        32     %95 = load_const (0x7b000000 = 2063597568)
+        32     %96 = ior %95 (0x7b000000), %94
+                     @store_global (%96, %5) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64     %97 = b2i64 %9
+        64     %98 = ishl %97, %16 (0x8)
+        8x4    %99 = unpack_32_4x8 %62
+        8     %100 = iand %99.x, %13 (0x1)
+        1     %101 = ine %100, %12 (0x0)
+        64    %102 = b2i64 %101
+        64    %103 = ishl %102, %75 (0x9)
+        64    %104 = ior %98, %103
+        32    %105 = u2u32 %104
+        64    %106 = iadd %5, %20 (0x4)
+                     @store_global (%105, %106) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %107 = iadd %5, %18 (0x8)
+                     @store_global (%17, %107) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %108 = iadd %5, %22 (0xc)
+                     @store_global (%19, %108) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %109 = iadd %5, %38 (0x10)
+                     @store_global (%21, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %110 = iadd %5, %39 (0x14)
+                     @store_global (%23, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %111 = iadd %5, %40 (0x18)
+                     @store_global (%24 (0x0), %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %112 = iadd %5, %41 (0x1c)
+                     @store_global (%19, %112) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %113 = iadd %5, %42 (0x20)
+                     @store_global (%23, %113) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %114 = iadd %5, %43 (0x24)
+                     @store_global (%7, %114) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b3
+    } else {
+        block b2:    // preds: b0
+        32x4  %115 = @load_global (%6) (access=none, align_mul=4, align_offset=0)
+        32    %116 = load_const (0x00000008)
+        64    %117 = load_const (0x0000000000000004)
+        64    %118 = load_const (0x0000000000000010 = 16)
+        64    %119 = iadd %6, %118 (0x10)
+        32    %120 = @load_global (%119) (access=none, align_mul=4, align_offset=0)
+        32    %121 = load_const (0x00000010 = 16)
+        32    %122 = mov %115.x
+        64    %123 = load_const (0x0000000000000008)
+        32    %124 = mov %115.z
+        32    %125 = imul %115.y, %8
+        64    %126 = load_const (0x000000000000000c = 12)
+        32    %127 = mov %115.w
+        32    %128 = b2i32 %10
+        32    %129 = load_const (0xffffff00 = -256 = 4294967040)
+        32    %130 = iand %1, %129 (0xffffff00)
+        32    %131 = ior %130, %128
+        32    %132 = load_const (0xffff00ff = -65281 = 4294902015)
+        32    %133 = iand %131, %132 (0xffff00ff)
+        32    %134 = load_const (0xff00ffff = -16711681 = 4278255615)
+        32    %135 = load_const (0x00000018 = 24)
+        32    %136 = load_const (0x01000000 = 16777216)
+        32    %137 = load_const (0x00ffffff = 16777215)
+        32    %138 = load_const (0x00000000)
+        32    %139 = extract_u16 %133, %138 (0x0)
+        32    %140 = ior %139, %136 (0x1000000)
+        64    %141 = load_const (0x0000000000000014 = 20)
+        64    %142 = load_const (0x0000000000000018 = 24)
+        64    %143 = load_const (0x000000000000001c = 28)
+        64    %144 = load_const (0x0000000000000020 = 32)
+        64    %145 = load_const (0x0000000000000024 = 36)
+        16x2  %146 = unpack_32_2x16 %2
+        8     %147 = u2u8 %146.x
+        16    %148 = load_const (0x0001)
+        16    %149 = extract_u8 %146.x, %148 (0x1)
+        8     %150 = u2u8 %149
+        32    %151 = u2u32 %147
+        32    %152 = ishl %151, %116 (0x8)
+        32    %153 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %154 = iand %153 (0xffff0000), %0
+        32    %155 = ior %154, %152
+        32    %156 = u2u32 %150
+        32    %157 = ishl %156, %121 (0x10)
+        32    %158 = iand %155, %134 (0xff00ffff)
+        32    %159 = ior %158, %157
+        8x4   %160 = unpack_32_4x8 %2
+        32    %161 = u2u32 %160.z
+        32    %162 = ishl %161, %135 (0x18)
+        32    %163 = iand %159, %137 (0xffffff)
+        32    %164 = ior %163, %162
+        8x4   %165 = unpack_32_4x8 %140
+        8     %166 = iand %165.x, %13 (0x1)
+        1     %167 = ine %166, %12 (0x0)
+        64    %168 = b2i64 %167
+        64    %169 = ishl %168, %116 (0x8)
+        32    %170 = unpack_64_2x32_split_x %169
+        32    %171 = ior %170, %116 (0x8)
+        32    %172 = unpack_64_2x32_split_y %169
+        64    %173 = pack_64_2x32_split %171, %172
+        8     %174 = iand %165.y, %13 (0x1)
+        1     %175 = ine %174, %12 (0x0)
+        64    %176 = b2i64 %175
+        32    %177 = load_const (0x00000009)
+        64    %178 = ishl %176, %177 (0x9)
+        64    %179 = ior %173, %178
+        8     %180 = iand %165.z, %13 (0x1)
+        1     %181 = ine %180, %12 (0x0)
+        64    %182 = b2i64 %181
+        32    %183 = load_const (0x0000000a = 10)
+        64    %184 = ishl %182, %183 (0xa)
+        64    %185 = ior %179, %184
+        8     %186 = iand %165.w, %13 (0x1)
+        1     %187 = ine %186, %12 (0x0)
+        64    %188 = b2i64 %187
+        32    %189 = load_const (0x0000000b = 11)
+        64    %190 = ishl %188, %189 (0xb)
+        64    %191 = ior %185, %190
+        64    %192 = b2i64 %11
+        32    %193 = load_const (0x0000000d = 13)
+        64    %194 = ishl %192, %193 (0xd)
+        64    %195 = ior %191, %194
+        32    %196 = unpack_64_2x32_split_x %195
+        32    %197 = load_const (0x7b000000 = 2063597568)
+        32    %198 = ior %197 (0x7b000000), %196
+                     @store_global (%198, %5) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %199 = b2i64 %9
+        64    %200 = ishl %199, %116 (0x8)
+        8x4   %201 = unpack_32_4x8 %164
+        8     %202 = iand %201.x, %13 (0x1)
+        1     %203 = ine %202, %12 (0x0)
+        64    %204 = b2i64 %203
+        64    %205 = ishl %204, %177 (0x9)
+        64    %206 = ior %200, %205
+        32    %207 = u2u32 %206
+        64    %208 = iadd %5, %117 (0x4)
+                     @store_global (%207, %208) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %209 = iadd %5, %123 (0x8)
+                     @store_global (%122, %209) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %210 = iadd %5, %126 (0xc)
+                     @store_global (%124, %210) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %211 = iadd %5, %118 (0x10)
+                     @store_global (%125, %211) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %212 = iadd %5, %141 (0x14)
+                     @store_global (%120, %212) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %213 = iadd %5, %142 (0x18)
+                     @store_global (%127, %213) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %214 = iadd %5, %143 (0x1c)
+                     @store_global (%127, %214) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %215 = iadd %5, %144 (0x20)
+                     @store_global (%120, %215) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %216 = iadd %5, %145 (0x24)
+                     @store_global (%7, %216) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b3
+    }
+    block b3:  // preds: b1 b2, succs: b4
+    block b4:
+   */
+   static const uint32_t impl_0_nir[673] = {
+    0x000000de, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000b, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000f, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4031744, 0xc4041744,
+    0x24051744, 0x24061744, 0x24071744, 0x00001405,
+    0x00003405, 0x2434a000, 0x00000000, 0x0000000b,
+    0x00000001, 0x00000040, 0x00000000, 0x00000001,
+    0x00000000, 0x0000006e, 0xd0005354, 0x00000020,
+    0x00000400, 0x00011605, 0xc435a000, 0x00000000,
+    0x00000012, 0x00011705, 0xc435a200, 0x00000000,
+    0x00000012, 0x00009705, 0xc433f100, 0x00000000,
+    0x000a0012, 0x00019705, 0xc435a300, 0x00000000,
+    0x00000012, 0x00000e05, 0xc4225000, 0x00000000,
+    0x0000000c, 0xffe01605, 0xc4322000, 0x00000000,
+    0x001d0006, 0xc434e000, 0x00000000, 0x001c001e,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x0020001f,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x001b0021, 0xc434e000, 0x00000000,
+    0x00250027, 0x00021705, 0x00029705, 0x00031705,
+    0x00039705, 0x00041705, 0x00049705, 0xa83b8000,
+    0x00000000, 0x00000004, 0x84390000, 0x00000000,
+    0x0000002f, 0x00003505, 0xa4288000, 0x00000000,
+    0x0031002f, 0x84390000, 0x00000000, 0x00000032,
+    0xc438e000, 0x00000000, 0x00000030, 0xc4351000,
+    0x00000000, 0x00130034, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00050036, 0xc434e000, 0x00000000,
+    0x00350037, 0xc438e000, 0x00000000, 0x00000033,
+    0xc4351000, 0x00000000, 0x00220039, 0xc4322000,
+    0x00000000, 0x00230038, 0xc434e000, 0x00000000,
+    0x003a003b, 0x903bb000, 0x00000000, 0x00000004,
+    0xc438e200, 0x00000000, 0x0000003d, 0xc4351000,
+    0x00000000, 0x0024003e, 0xc4322000, 0x00000000,
+    0x0026003c, 0xc434e000, 0x00000000, 0x003f0040,
+    0x903bb000, 0x00000000, 0x00000028, 0x84322000,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e0043, 0xe4226000, 0x00000000, 0x00000044,
+    0xe4351000, 0x00000000, 0x00130045, 0xc43bd000,
+    0x00000000, 0x00000046, 0xc434e000, 0x00000000,
+    0x00130047, 0xc43be000, 0x00000000, 0x00000046,
+    0xe4369000, 0x00000000, 0x00490048, 0x84322100,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e004b, 0xe4226000, 0x00000000, 0x0000004c,
+    0x00013605, 0xe4351000, 0x00000000, 0x004e004d,
+    0xe434e000, 0x00000000, 0x004f004a, 0x84322200,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e0051, 0xe4226000, 0x00000000, 0x00000052,
+    0x00015605, 0xe4351000, 0x00000000, 0x00540053,
+    0xe434e000, 0x00000000, 0x00550050, 0x84322300,
+    0x00000000, 0x000f0042, 0x24345000, 0x00000000,
+    0x000e0057, 0xe4226000, 0x00000000, 0x00000058,
+    0x00017605, 0xe4351000, 0x00000000, 0x005a0059,
+    0xe434e000, 0x00000000, 0x005b0056, 0xe4226000,
+    0x00000000, 0x0000000d, 0x0001b605, 0xe4351000,
+    0x00000000, 0x005e005d, 0xe434e000, 0x00000000,
+    0x005f005c, 0xc43bd000, 0x00000000, 0x00000060,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x00610062,
+    0x00006894, 0x0000018c, 0x0000001c, 0x00040001,
+    0xe4226000, 0x00000000, 0x0000000b, 0xe4351000,
+    0x00000000, 0x00130064, 0x903bb000, 0x00000000,
+    0x00000041, 0x84322000, 0x00000000, 0x000f0066,
+    0x24345000, 0x00000000, 0x000e0067, 0xe4226000,
+    0x00000000, 0x00000068, 0xe4351000, 0x00000000,
+    0x004e0069, 0xe434e000, 0x00000000, 0x006a0065,
+    0xc438e000, 0x00000000, 0x0000006b, 0xe431f000,
+    0x00000000, 0x00170007, 0x00006894, 0x000001b0,
+    0x000001b4, 0x00040001, 0xe431f000, 0x00000000,
+    0x00150007, 0x00006894, 0x00000050, 0x000001b8,
+    0x00040001, 0xe431f000, 0x00000000, 0x00190007,
+    0x00006894, 0x00000058, 0x000001bc, 0x00040001,
+    0xe431f000, 0x00000000, 0x00290007, 0x00006894,
+    0x00000060, 0x000001c0, 0x00040001, 0xe431f000,
+    0x00000000, 0x002a0007, 0x00006894, 0x00000068,
+    0x000001c4, 0x00040001, 0xe431f000, 0x00000000,
+    0x002b0007, 0x00006894, 0x0000006c, 0x000001c8,
+    0x00040001, 0xe431f000, 0x00000000, 0x002c0007,
+    0x00006894, 0x00000058, 0x000001cc, 0x00040001,
+    0xe431f000, 0x00000000, 0x002d0007, 0x00006894,
+    0x00000068, 0x000001d0, 0x00040001, 0xe431f000,
+    0x00000000, 0x002e0007, 0x00006894, 0x00000024,
+    0x000001d4, 0x00040001, 0x00000001, 0x00000000,
+    0x00000070, 0xd0005354, 0x00000020, 0x00000400,
+    0x00011605, 0x00009705, 0x00021705, 0xe431f000,
+    0x00000000, 0x007a0008, 0xc4005354, 0x000001ec,
+    0x00000400, 0x00021605, 0xc435a000, 0x00000000,
+    0x00000077, 0x00011705, 0xc435a200, 0x00000000,
+    0x00000077, 0xc433f100, 0x00000000, 0x000a0077,
+    0x00019705, 0xc435a300, 0x00000000, 0x00000077,
+    0xc4225000, 0x00000000, 0x0000000c, 0xffe01605,
+    0xc4322000, 0x00000000, 0x00850003, 0xc434e000,
+    0x00000000, 0x00840086, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00880087, 0x00000605, 0xff00ffff,
+    0x00031605, 0x01000e05, 0x00000605, 0x00ffffff,
+    0x00000e05, 0xc4287000, 0x00000000, 0x008e0089,
+    0xc434e000, 0x00000000, 0x008c008f, 0x00029705,
+    0x00031705, 0x00039705, 0x00041705, 0x00049705,
+    0xa83b8000, 0x00000000, 0x00000004, 0x84390000,
+    0x00000000, 0x00000096, 0x00003505, 0xa4288000,
+    0x00000000, 0x00980096, 0x84390000, 0x00000000,
+    0x00000099, 0xc438e000, 0x00000000, 0x00000097,
+    0xc4351000, 0x00000000, 0x0078009b, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0002009d, 0xc434e000,
+    0x00000000, 0x009c009e, 0xc438e000, 0x00000000,
+    0x0000009a, 0xc4351000, 0x00000000, 0x007d00a0,
+    0xc4322000, 0x00000000, 0x008a009f, 0xc434e000,
+    0x00000000, 0x00a100a2, 0x903bb000, 0x00000000,
+    0x00000004, 0xc438e200, 0x00000000, 0x000000a4,
+    0xc4351000, 0x00000000, 0x008b00a5, 0xc4322000,
+    0x00000000, 0x008d00a3, 0xc434e000, 0x00000000,
+    0x00a600a7, 0x903bb000, 0x00000000, 0x00000090,
+    0x84322000, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00aa, 0xe4226000, 0x00000000,
+    0x000000ab, 0xe4351000, 0x00000000, 0x007800ac,
+    0xc43bd000, 0x00000000, 0x000000ad, 0xc434e000,
+    0x00000000, 0x007800ae, 0xc43be000, 0x00000000,
+    0x000000ad, 0xe4369000, 0x00000000, 0x00b000af,
+    0x84322100, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00b2, 0xe4226000, 0x00000000,
+    0x000000b3, 0x00013605, 0xe4351000, 0x00000000,
+    0x00b500b4, 0xe434e000, 0x00000000, 0x00b600b1,
+    0x84322200, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00b8, 0xe4226000, 0x00000000,
+    0x000000b9, 0x00015605, 0xe4351000, 0x00000000,
+    0x00bb00ba, 0xe434e000, 0x00000000, 0x00bc00b7,
+    0x84322300, 0x00000000, 0x000f00a9, 0x24345000,
+    0x00000000, 0x000e00be, 0xe4226000, 0x00000000,
+    0x000000bf, 0x00017605, 0xe4351000, 0x00000000,
+    0x00c100c0, 0xe434e000, 0x00000000, 0x00c200bd,
+    0xe4226000, 0x00000000, 0x0000000d, 0x0001b605,
+    0xe4351000, 0x00000000, 0x00c500c4, 0xe434e000,
+    0x00000000, 0x00c600c3, 0xc43bd000, 0x00000000,
+    0x000000c7, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00c800c9, 0x00006894, 0x00000328, 0x0000001c,
+    0x00040001, 0xe4226000, 0x00000000, 0x0000000b,
+    0xe4351000, 0x00000000, 0x007800cb, 0x903bb000,
+    0x00000000, 0x000000a8, 0x84322000, 0x00000000,
+    0x000f00cd, 0x24345000, 0x00000000, 0x000e00ce,
+    0xe4226000, 0x00000000, 0x000000cf, 0xe4351000,
+    0x00000000, 0x00b500d0, 0xe434e000, 0x00000000,
+    0x00d100cc, 0xc438e000, 0x00000000, 0x000000d2,
+    0xe431f000, 0x00000000, 0x00790007, 0x00006894,
+    0x0000034c, 0x00000350, 0x00040001, 0xe431f000,
+    0x00000000, 0x007f0007, 0x00006894, 0x000001f8,
+    0x00000354, 0x00040001, 0xe431f000, 0x00000000,
+    0x00820007, 0x00006894, 0x00000200, 0x00000358,
+    0x00040001, 0xe431f000, 0x00000000, 0x007a0007,
+    0x00006894, 0x00000204, 0x0000035c, 0x00040001,
+    0xe431f000, 0x00000000, 0x00910007, 0x00006894,
+    0x000001f0, 0x00000360, 0x00040001, 0xe431f000,
+    0x00000000, 0x00920007, 0x00006894, 0x0000020c,
+    0x00000364, 0x00040001, 0xe431f000, 0x00000000,
+    0x00930007, 0x00006894, 0x0000020c, 0x00000368,
+    0x00040001, 0xe431f000, 0x00000000, 0x00940007,
+    0x00006894, 0x000001f0, 0x0000036c, 0x00040001,
+    0xe431f000, 0x00000000, 0x00950007, 0x00006894,
+    0x00000024, 0x00000370, 0x00040001, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[11] = { dst_ptr, indirect_ptr, draw_id_ptr, draw_id, instance_multiplier, is_indexed, is_predicated, uses_tbimr, uses_base, uses_drawid, mocs };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx30_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx30_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    64      %9 = @load_param (param_idx=0)
+    64     %10 = @load_param (param_idx=2)
+    32     %11 = @load_param (param_idx=4)
+    64     %12 = @load_param (param_idx=5)
+    32     %13 = @load_param (param_idx=6)
+    32     %14 = @load_param (param_idx=7)
+    32     %15 = @load_param (param_idx=8)
+    32     %16 = @load_param (param_idx=9)
+    32     %17 = @load_param (param_idx=11)
+    32     %18 = @load_param (param_idx=12)
+    64     %19 = @load_param (param_idx=13)
+    64     %20 = @load_param (param_idx=14)
+    32     %21 = @load_param (param_idx=15)
+    32     %22 = iadd %13, %21
+    32     %23 = @load_global (%12) (access=none, align_mul=4, align_offset=0)
+    32     %24 = imul %21, %17
+    64     %25 = u2u64 %24
+    32     %26 = imul %22, %11
+    64     %27 = u2u64 %26
+    32     %28 = umin %23, %15
+    1      %29 = ult %22, %28
+                 // succs: b1 b5
+    if %29 {
+        block b1:    // preds: b0
+        32     %30 = load_const (0x00000001)
+        32     %31 = iand %16, %30 (0x1)
+        32     %32 = load_const (0x00000000)
+        1      %33 = ieq %31, %32 (0x0)
+        8      %34 = load_const (0x00)
+        8      %35 = load_const (0x01)
+        32     %36 = load_const (0x00000002)
+        32     %37 = iand %16, %36 (0x2)
+        32     %38 = load_const (0x00000040 = 64)
+                     // succs: b2 b3
+        if %33 {
+            block b2:    // preds: b1
+            64     %39 = iadd %10, %27
+            32x4   %40 = @load_global (%39) (access=none, align_mul=4, align_offset=0)
+            32     %41 = load_const (0x00000008)
+            32     %42 = mov %40.x
+            64     %43 = load_const (0x0000000000000008)
+            32     %44 = mov %40.z
+            64     %45 = load_const (0x0000000000000004)
+            32     %46 = imul %40.y, %14
+            64     %47 = load_const (0x000000000000000c = 12)
+            32     %48 = mov %40.w
+            64     %49 = iadd %9, %25
+            32     %50 = ushr %37, %30 (0x1)
+            32     %51 = load_const (0xffffff00 = -256 = 4294967040)
+            32     %52 = iand %8, %51 (0xffffff00)
+            32     %53 = ior %52, %50
+            32     %54 = load_const (0xffff00ff = -65281 = 4294902015)
+            32     %55 = iand %53, %54 (0xffff00ff)
+            32     %56 = load_const (0x00000006)
+            32     %57 = load_const (0x00000010 = 16)
+            32     %58 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32     %59 = load_const (0x00000018 = 24)
+            32     %60 = load_const (0x01000000 = 16777216)
+            32     %61 = load_const (0x00ffffff = 16777215)
+            32     %62 = extract_u16 %55, %32 (0x0)
+            32     %63 = ior %62, %60 (0x1000000)
+            32     %64 = iand %16, %38 (0x40)
+            32     %65 = ushr %64, %56 (0x6)
+            64     %66 = load_const (0x0000000000000010 = 16)
+            64     %67 = load_const (0x0000000000000014 = 20)
+            64     %68 = load_const (0x0000000000000018 = 24)
+            64     %69 = load_const (0x000000000000001c = 28)
+            64     %70 = load_const (0x0000000000000020 = 32)
+            64     %71 = load_const (0x0000000000000024 = 36)
+            16x2   %72 = unpack_32_2x16 %6
+            8      %73 = u2u8 %72.x
+            16     %74 = load_const (0x0001)
+            16     %75 = extract_u8 %72.x, %74 (0x1)
+            8      %76 = u2u8 %75
+            32     %77 = u2u32 %73
+            32     %78 = ishl %77, %41 (0x8)
+            32     %79 = load_const (0xffff0000 = -65536 = 4294901760)
+            32     %80 = iand %79 (0xffff0000), %7
+            32     %81 = ior %80, %78
+            32     %82 = u2u32 %76
+            32     %83 = ishl %82, %57 (0x10)
+            32     %84 = iand %81, %58 (0xff00ffff)
+            32     %85 = ior %84, %83
+            8x4    %86 = unpack_32_4x8 %6
+            32     %87 = u2u32 %86.z
+            32     %88 = ishl %87, %59 (0x18)
+            32     %89 = iand %85, %61 (0xffffff)
+            32     %90 = ior %89, %88
+            8x4    %91 = unpack_32_4x8 %63
+            8      %92 = iand %91.x, %35 (0x1)
+            1      %93 = ine %92, %34 (0x0)
+            64     %94 = b2i64 %93
+            64     %95 = ishl %94, %41 (0x8)
+            32     %96 = unpack_64_2x32_split_x %95
+            32     %97 = ior %96, %41 (0x8)
+            32     %98 = unpack_64_2x32_split_y %95
+            64     %99 = pack_64_2x32_split %97, %98
+            8     %100 = iand %91.y, %35 (0x1)
+            1     %101 = ine %100, %34 (0x0)
+            64    %102 = b2i64 %101
+            32    %103 = load_const (0x00000009)
+            64    %104 = ishl %102, %103 (0x9)
+            64    %105 = ior %99, %104
+            8     %106 = iand %91.z, %35 (0x1)
+            1     %107 = ine %106, %34 (0x0)
+            64    %108 = b2i64 %107
+            32    %109 = load_const (0x0000000a = 10)
+            64    %110 = ishl %108, %109 (0xa)
+            64    %111 = ior %105, %110
+            8     %112 = iand %91.w, %35 (0x1)
+            1     %113 = ine %112, %34 (0x0)
+            64    %114 = b2i64 %113
+            32    %115 = load_const (0x0000000b = 11)
+            64    %116 = ishl %114, %115 (0xb)
+            64    %117 = ior %111, %116
+            64    %118 = u2u64 %65
+            32    %119 = load_const (0x0000000d = 13)
+            64    %120 = ishl %118, %119 (0xd)
+            64    %121 = ior %117, %120
+            32    %122 = unpack_64_2x32_split_x %121
+            32    %123 = load_const (0x7b000000 = 2063597568)
+            32    %124 = ior %123 (0x7b000000), %122
+                         @store_global (%124, %49) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %125 = u2u64 %31
+            64    %126 = ishl %125, %41 (0x8)
+            8x4   %127 = unpack_32_4x8 %90
+            8     %128 = iand %127.x, %35 (0x1)
+            1     %129 = ine %128, %34 (0x0)
+            64    %130 = b2i64 %129
+            64    %131 = ishl %130, %103 (0x9)
+            64    %132 = ior %126, %131
+            32    %133 = u2u32 %132
+            64    %134 = iadd %49, %45 (0x4)
+                         @store_global (%133, %134) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %135 = iadd %49, %43 (0x8)
+                         @store_global (%42, %135) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %136 = iadd %49, %47 (0xc)
+                         @store_global (%44, %136) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %137 = iadd %49, %66 (0x10)
+                         @store_global (%46, %137) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %138 = iadd %49, %67 (0x14)
+                         @store_global (%48, %138) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %139 = iadd %49, %68 (0x18)
+                         @store_global (%32 (0x0), %139) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %140 = iadd %49, %69 (0x1c)
+                         @store_global (%44, %140) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %141 = iadd %49, %70 (0x20)
+                         @store_global (%48, %141) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %142 = iadd %49, %71 (0x24)
+                         @store_global (%22, %142) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b4
+        } else {
+            block b3:    // preds: b1
+            64    %143 = iadd %10, %27
+            32x4  %144 = @load_global (%143) (access=none, align_mul=4, align_offset=0)
+            32    %145 = load_const (0x00000008)
+            64    %146 = load_const (0x0000000000000004)
+            64    %147 = load_const (0x0000000000000010 = 16)
+            64    %148 = iadd %143, %147 (0x10)
+            32    %149 = @load_global (%148) (access=none, align_mul=4, align_offset=0)
+            32    %150 = load_const (0x00000010 = 16)
+            32    %151 = mov %144.x
+            64    %152 = load_const (0x0000000000000008)
+            32    %153 = mov %144.z
+            32    %154 = imul %144.y, %14
+            64    %155 = load_const (0x000000000000000c = 12)
+            32    %156 = mov %144.w
+            64    %157 = iadd %9, %25
+            32    %158 = ushr %37, %30 (0x1)
+            32    %159 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %160 = iand %5, %159 (0xffffff00)
+            32    %161 = ior %160, %158
+            32    %162 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %163 = iand %161, %162 (0xffff00ff)
+            32    %164 = load_const (0x00000006)
+            32    %165 = load_const (0xff00ffff = -16711681 = 4278255615)
+            32    %166 = load_const (0x00000018 = 24)
+            32    %167 = load_const (0x01000000 = 16777216)
+            32    %168 = load_const (0x00ffffff = 16777215)
+            32    %169 = extract_u16 %163, %32 (0x0)
+            32    %170 = ior %169, %167 (0x1000000)
+            32    %171 = iand %16, %38 (0x40)
+            32    %172 = ushr %171, %164 (0x6)
+            64    %173 = load_const (0x0000000000000014 = 20)
+            64    %174 = load_const (0x0000000000000018 = 24)
+            64    %175 = load_const (0x000000000000001c = 28)
+            64    %176 = load_const (0x0000000000000020 = 32)
+            64    %177 = load_const (0x0000000000000024 = 36)
+            16x2  %178 = unpack_32_2x16 %6
+            8     %179 = u2u8 %178.x
+            16    %180 = load_const (0x0001)
+            16    %181 = extract_u8 %178.x, %180 (0x1)
+            8     %182 = u2u8 %181
+            32    %183 = u2u32 %179
+            32    %184 = ishl %183, %145 (0x8)
+            32    %185 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %186 = iand %185 (0xffff0000), %4
+            32    %187 = ior %186, %184
+            32    %188 = u2u32 %182
+            32    %189 = ishl %188, %150 (0x10)
+            32    %190 = iand %187, %165 (0xff00ffff)
+            32    %191 = ior %190, %189
+            8x4   %192 = unpack_32_4x8 %6
+            32    %193 = u2u32 %192.z
+            32    %194 = ishl %193, %166 (0x18)
+            32    %195 = iand %191, %168 (0xffffff)
+            32    %196 = ior %195, %194
+            8x4   %197 = unpack_32_4x8 %170
+            8     %198 = iand %197.x, %35 (0x1)
+            1     %199 = ine %198, %34 (0x0)
+            64    %200 = b2i64 %199
+            64    %201 = ishl %200, %145 (0x8)
+            32    %202 = unpack_64_2x32_split_x %201
+            32    %203 = ior %202, %145 (0x8)
+            32    %204 = unpack_64_2x32_split_y %201
+            64    %205 = pack_64_2x32_split %203, %204
+            8     %206 = iand %197.y, %35 (0x1)
+            1     %207 = ine %206, %34 (0x0)
+            64    %208 = b2i64 %207
+            32    %209 = load_const (0x00000009)
+            64    %210 = ishl %208, %209 (0x9)
+            64    %211 = ior %205, %210
+            8     %212 = iand %197.z, %35 (0x1)
+            1     %213 = ine %212, %34 (0x0)
+            64    %214 = b2i64 %213
+            32    %215 = load_const (0x0000000a = 10)
+            64    %216 = ishl %214, %215 (0xa)
+            64    %217 = ior %211, %216
+            8     %218 = iand %197.w, %35 (0x1)
+            1     %219 = ine %218, %34 (0x0)
+            64    %220 = b2i64 %219
+            32    %221 = load_const (0x0000000b = 11)
+            64    %222 = ishl %220, %221 (0xb)
+            64    %223 = ior %217, %222
+            64    %224 = u2u64 %172
+            32    %225 = load_const (0x0000000d = 13)
+            64    %226 = ishl %224, %225 (0xd)
+            64    %227 = ior %223, %226
+            32    %228 = unpack_64_2x32_split_x %227
+            32    %229 = load_const (0x7b000000 = 2063597568)
+            32    %230 = ior %229 (0x7b000000), %228
+                         @store_global (%230, %157) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %231 = u2u64 %31
+            64    %232 = ishl %231, %145 (0x8)
+            8x4   %233 = unpack_32_4x8 %196
+            8     %234 = iand %233.x, %35 (0x1)
+            1     %235 = ine %234, %34 (0x0)
+            64    %236 = b2i64 %235
+            64    %237 = ishl %236, %209 (0x9)
+            64    %238 = ior %232, %237
+            32    %239 = u2u32 %238
+            64    %240 = iadd %157, %146 (0x4)
+                         @store_global (%239, %240) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %241 = iadd %157, %152 (0x8)
+                         @store_global (%151, %241) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %242 = iadd %157, %155 (0xc)
+                         @store_global (%153, %242) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %243 = iadd %157, %147 (0x10)
+                         @store_global (%154, %243) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %244 = iadd %157, %173 (0x14)
+                         @store_global (%149, %244) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %245 = iadd %157, %174 (0x18)
+                         @store_global (%156, %245) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %246 = iadd %157, %175 (0x1c)
+                         @store_global (%156, %246) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %247 = iadd %157, %176 (0x20)
+                         @store_global (%149, %247) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %248 = iadd %157, %177 (0x24)
+                         @store_global (%22, %248) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b4
+        }
+        block b4:  // preds: b2 b3, succs: b6
+    } else {
+        block b5:  // preds: b0, succs: b6
+    }
+    block b6:    // preds: b4 b5
+    32    %249 = load_const (0x00000020 = 32)
+    32    %250 = iand %16, %249 (0x20)
+    32    %251 = load_const (0x00000000)
+    1     %252 = ieq %250, %251 (0x0)
+    8     %253 = load_const (0x00)
+    8     %254 = load_const (0x01)
+    1     %255 = ieq %23, %251 (0x0)
+    32    %256 = load_const (0xffffffff = -1 = 4294967295)
+    32    %257 = iadd %28, %256 (0xffffffff)
+    32    %258 = bcsel %255, %251 (0x0), %257
+    64    %259 = u2u64 %17
+    64    %260 = iadd %25, %259
+    64    %261 = bcsel %255, %25, %260
+    64    %262 = iadd %9, %261
+                 // succs: b7 b11
+    if %252 {
+        block b7:    // preds: b6
+        1     %263 = ieq %22, %258
+        1     %264 = ult %23, %15
+        1     %265 = iand %264, %263
+                     // succs: b8 b9
+        if %265 {
+            block b8:    // preds: b7
+            64    %266 = load_const (0x0000000000000004)
+            64    %267 = load_const (0x0000000000000008)
+            32    %268 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %269 = iand %268 (0xffff0000), %3
+            32    %270 = load_const (0x0000000a = 10)
+            16x2  %271 = unpack_32_2x16 %2
+            32    %272 = u2u32 %271.x
+            32    %273 = load_const (0x00000010 = 16)
+            32    %274 = ishl %272, %273 (0x10)
+            32    %275 = extract_u16 %269, %251 (0x0)
+            32    %276 = ior %275, %274
+            8x4   %277 = unpack_32_4x8 %276
+            8     %278 = iand %277.x, %254 (0x1)
+            1     %279 = ine %278, %253 (0x0)
+            64    %280 = b2i64 %279
+            64    %281 = ishl %280, %270 (0xa)
+            32    %282 = unpack_64_2x32_split_x %281
+            32    %283 = load_const (0x00000101 = 257)
+            32    %284 = ior %282, %283 (0x101)
+            32    %285 = unpack_64_2x32_split_y %281
+            64    %286 = pack_64_2x32_split %284, %285
+            8     %287 = iand %277.y, %254 (0x1)
+            1     %288 = ine %287, %253 (0x0)
+            64    %289 = b2i64 %288
+            32    %290 = load_const (0x0000000f = 15)
+            64    %291 = ishl %289, %290 (0xf)
+            64    %292 = ior %286, %291
+            32    %293 = unpack_64_2x32_split_x %292
+            32    %294 = load_const (0x18800000 = 411041792)
+            32    %295 = ior %293, %294 (0x18800000)
+                         @store_global (%295, %262) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %296 = u2u32 %20
+            64    %297 = iadd %262, %266 (0x4)
+                         @store_global (%296, %297) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %298 = unpack_64_2x32_split_y %20
+            64    %299 = iadd %262, %267 (0x8)
+                         @store_global (%298, %299) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b10
+        } else {
+            block b9:  // preds: b7, succs: b10
+        }
+        block b10:  // preds: b8 b9, succs: b18
+    } else {
+        block b11:   // preds: b6
+        1     %300 = ine %22, %258
+                     // succs: b12 b16
+        if %300 {
+            block b12:   // preds: b11
+            32    %301 = iadd %18, %256 (0xffffffff)
+            1     %302 = ieq %21, %301
+                         // succs: b13 b14
+            if %302 {
+                block b13:   // preds: b12
+                64    %303 = load_const (0x0000000000000004)
+                64    %304 = load_const (0x0000000000000008)
+                32    %305 = load_const (0xffff0000 = -65536 = 4294901760)
+                32    %306 = iand %305 (0xffff0000), %1
+                32    %307 = load_const (0x0000000a = 10)
+                16x2  %308 = unpack_32_2x16 %2
+                32    %309 = u2u32 %308.x
+                32    %310 = load_const (0x00000010 = 16)
+                32    %311 = ishl %309, %310 (0x10)
+                32    %312 = extract_u16 %306, %251 (0x0)
+                32    %313 = ior %312, %311
+                8x4   %314 = unpack_32_4x8 %313
+                8     %315 = iand %314.x, %254 (0x1)
+                1     %316 = ine %315, %253 (0x0)
+                64    %317 = b2i64 %316
+                64    %318 = ishl %317, %307 (0xa)
+                32    %319 = unpack_64_2x32_split_x %318
+                32    %320 = load_const (0x00000101 = 257)
+                32    %321 = ior %319, %320 (0x101)
+                32    %322 = unpack_64_2x32_split_y %318
+                64    %323 = pack_64_2x32_split %321, %322
+                8     %324 = iand %314.y, %254 (0x1)
+                1     %325 = ine %324, %253 (0x0)
+                64    %326 = b2i64 %325
+                32    %327 = load_const (0x0000000f = 15)
+                64    %328 = ishl %326, %327 (0xf)
+                64    %329 = ior %323, %328
+                32    %330 = unpack_64_2x32_split_x %329
+                32    %331 = load_const (0x18800000 = 411041792)
+                32    %332 = ior %330, %331 (0x18800000)
+                             @store_global (%332, %262) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %333 = u2u32 %19
+                64    %334 = iadd %262, %303 (0x4)
+                             @store_global (%333, %334) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %335 = unpack_64_2x32_split_y %19
+                64    %336 = iadd %262, %304 (0x8)
+                             @store_global (%335, %336) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                             // succs: b15
+            } else {
+                block b14:  // preds: b12, succs: b15
+            }
+            block b15:  // preds: b13 b14, succs: b17
+        } else {
+            block b16:   // preds: b11
+            64    %337 = load_const (0x0000000000000004)
+            64    %338 = load_const (0x0000000000000008)
+            32    %339 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %340 = iand %339 (0xffff0000), %0
+            32    %341 = load_const (0x0000000a = 10)
+            16x2  %342 = unpack_32_2x16 %2
+            32    %343 = u2u32 %342.x
+            32    %344 = load_const (0x00000010 = 16)
+            32    %345 = ishl %343, %344 (0x10)
+            32    %346 = extract_u16 %340, %251 (0x0)
+            32    %347 = ior %346, %345
+            8x4   %348 = unpack_32_4x8 %347
+            8     %349 = iand %348.x, %254 (0x1)
+            1     %350 = ine %349, %253 (0x0)
+            64    %351 = b2i64 %350
+            64    %352 = ishl %351, %341 (0xa)
+            32    %353 = unpack_64_2x32_split_x %352
+            32    %354 = load_const (0x00000101 = 257)
+            32    %355 = ior %353, %354 (0x101)
+            32    %356 = unpack_64_2x32_split_y %352
+            64    %357 = pack_64_2x32_split %355, %356
+            8     %358 = iand %348.y, %254 (0x1)
+            1     %359 = ine %358, %253 (0x0)
+            64    %360 = b2i64 %359
+            32    %361 = load_const (0x0000000f = 15)
+            64    %362 = ishl %360, %361 (0xf)
+            64    %363 = ior %357, %362
+            32    %364 = unpack_64_2x32_split_x %363
+            32    %365 = load_const (0x18800000 = 411041792)
+            32    %366 = ior %364, %365 (0x18800000)
+                         @store_global (%366, %262) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %367 = u2u32 %20
+            64    %368 = iadd %262, %337 (0x4)
+                         @store_global (%367, %368) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %369 = unpack_64_2x32_split_y %20
+            64    %370 = iadd %262, %338 (0x8)
+                         @store_global (%369, %370) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b17
+        }
+        block b17:  // preds: b15 b16, succs: b18
+    }
+    block b18:  // preds: b10 b17, succs: b19
+    block b19:
+   */
+   static const uint32_t impl_0_nir[1162] = {
+    0x00000187, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000010, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0x00000000, 0x0000001e, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4021744, 0xc4041744, 0xe4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0xc40b1744, 0xc40c1744, 0xe40d1744, 0xe40e1744,
+    0xc40f1744, 0xc431f000, 0x00000000, 0x0017000f,
+    0xc4005354, 0x00000038, 0x00000400, 0xc433f000,
+    0x00000000, 0x00130017, 0xe438f000, 0x00000000,
+    0x0000001a, 0xc433f000, 0x00000000, 0x000d0018,
+    0xe438f000, 0x00000000, 0x0000001c, 0xc43ae000,
+    0x00000000, 0x00110019, 0x243a6000, 0x00000000,
+    0x001e0018, 0x00000001, 0x0000007c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000009, 0x00003605,
+    0xc4322000, 0x00000000, 0x00210012, 0x00000e05,
+    0x24327000, 0x00000000, 0x00230022, 0x00001405,
+    0x00003405, 0x00005605, 0xc4322000, 0x00000000,
+    0x00270012, 0x00081605, 0x00000001, 0x00000090,
+    0x00000000, 0x00000001, 0x00000000, 0x00000072,
+    0xe431f000, 0x00000000, 0x001d000c, 0xd0005354,
+    0x000000ac, 0x00000400, 0x00011605, 0xc435a000,
+    0x00000000, 0x0000002c, 0x00011705, 0xc435a200,
+    0x00000000, 0x0000002c, 0x00009705, 0xc433f100,
+    0x00000000, 0x0010002c, 0x00019705, 0xc435a300,
+    0x00000000, 0x0000002c, 0xe431f000, 0x00000000,
+    0x001b000b, 0xc43cc000, 0x00000000, 0x00210028,
+    0xffe01605, 0xc4322000, 0x00000000, 0x0037000a,
+    0xc434e000, 0x00000000, 0x00360038, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x003a0039, 0x0000d605,
+    0x00021605, 0x00000605, 0xff00ffff, 0x00031605,
+    0x01000e05, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x0023003b, 0xc434e000, 0x00000000,
+    0x00400042, 0xc4322000, 0x00000000, 0x00290012,
+    0xc43cc000, 0x00000000, 0x003c0044, 0x00021705,
+    0x00029705, 0x00031705, 0x00039705, 0x00041705,
+    0x00049705, 0xa83b8000, 0x00000000, 0x00000008,
+    0x84390000, 0x00000000, 0x0000004c, 0x00003505,
+    0xa4288000, 0x00000000, 0x004e004c, 0x84390000,
+    0x00000000, 0x0000004f, 0xc438e000, 0x00000000,
+    0x0000004d, 0xc4351000, 0x00000000, 0x002d0051,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x00090053,
+    0xc434e000, 0x00000000, 0x00520054, 0xc438e000,
+    0x00000000, 0x00000050, 0xc4351000, 0x00000000,
+    0x003d0056, 0xc4322000, 0x00000000, 0x003e0055,
+    0xc434e000, 0x00000000, 0x00570058, 0x903bb000,
+    0x00000000, 0x00000008, 0xc438e200, 0x00000000,
+    0x0000005a, 0xc4351000, 0x00000000, 0x003f005b,
+    0xc4322000, 0x00000000, 0x00410059, 0xc434e000,
+    0x00000000, 0x005c005d, 0x903bb000, 0x00000000,
+    0x00000043, 0x84322000, 0x00000000, 0x0026005f,
+    0x24345000, 0x00000000, 0x00250060, 0xe4226000,
+    0x00000000, 0x00000061, 0xe4351000, 0x00000000,
+    0x002d0062, 0xc43bd000, 0x00000000, 0x00000063,
+    0xc434e000, 0x00000000, 0x002d0064, 0xc43be000,
+    0x00000000, 0x00000063, 0xe4369000, 0x00000000,
+    0x00660065, 0x84322100, 0x00000000, 0x0026005f,
+    0x24345000, 0x00000000, 0x00250068, 0xe4226000,
+    0x00000000, 0x00000069, 0x00013605, 0xe4351000,
+    0x00000000, 0x006b006a, 0xe434e000, 0x00000000,
+    0x006c0067, 0x84322200, 0x00000000, 0x0026005f,
+    0x24345000, 0x00000000, 0x0025006e, 0xe4226000,
+    0x00000000, 0x0000006f, 0x00015605, 0xe4351000,
+    0x00000000, 0x00710070, 0xe434e000, 0x00000000,
+    0x0072006d, 0x84322300, 0x00000000, 0x0026005f,
+    0x24345000, 0x00000000, 0x00250074, 0xe4226000,
+    0x00000000, 0x00000075, 0x00017605, 0xe4351000,
+    0x00000000, 0x00770076, 0xe434e000, 0x00000000,
+    0x00780073, 0xe438f000, 0x00000000, 0x00000045,
+    0x0001b605, 0xe4351000, 0x00000000, 0x007b007a,
+    0xe434e000, 0x00000000, 0x007c0079, 0xc43bd000,
+    0x00000000, 0x0000007d, 0x7b000e05, 0xc434e000,
+    0x00000000, 0x007e007f, 0x00006894, 0x00000200,
+    0x000000d4, 0x00040001, 0xe438f000, 0x00000000,
+    0x00000022, 0xe4351000, 0x00000000, 0x002d0081,
+    0x903bb000, 0x00000000, 0x0000005e, 0x84322000,
+    0x00000000, 0x00260083, 0x24345000, 0x00000000,
+    0x00250084, 0xe4226000, 0x00000000, 0x00000085,
+    0xe4351000, 0x00000000, 0x006b0086, 0xe434e000,
+    0x00000000, 0x00870082, 0xc438e000, 0x00000000,
+    0x00000088, 0xe431f000, 0x00000000, 0x00310035,
+    0x00006894, 0x00000224, 0x00000228, 0x00040001,
+    0xe431f000, 0x00000000, 0x002f0035, 0x00006894,
+    0x000000b8, 0x0000022c, 0x00040001, 0xe431f000,
+    0x00000000, 0x00330035, 0x00006894, 0x000000c0,
+    0x00000230, 0x00040001, 0xe431f000, 0x00000000,
+    0x00460035, 0x00006894, 0x000000c8, 0x00000234,
+    0x00040001, 0xe431f000, 0x00000000, 0x00470035,
+    0x00006894, 0x000000d0, 0x00000238, 0x00040001,
+    0xe431f000, 0x00000000, 0x00480035, 0x00006894,
+    0x0000008c, 0x0000023c, 0x00040001, 0xe431f000,
+    0x00000000, 0x00490035, 0x00006894, 0x000000c0,
+    0x00000240, 0x00040001, 0xe431f000, 0x00000000,
+    0x004a0035, 0x00006894, 0x000000d0, 0x00000244,
+    0x00040001, 0xe431f000, 0x00000000, 0x004b0035,
+    0x00006894, 0x00000060, 0x00000248, 0x00040001,
+    0x00000001, 0x00000000, 0x00000074, 0xe431f000,
+    0x00000000, 0x001d000c, 0xd0005354, 0x00000250,
+    0x00000400, 0x00011605, 0x00009705, 0x00021705,
+    0xe431f000, 0x00000000, 0x00980094, 0xc4005354,
+    0x00000264, 0x00000400, 0x00021605, 0xc435a000,
+    0x00000000, 0x00000095, 0x00011705, 0xc435a200,
+    0x00000000, 0x00000095, 0xc433f100, 0x00000000,
+    0x00100095, 0x00019705, 0xc435a300, 0x00000000,
+    0x00000095, 0xe431f000, 0x00000000, 0x001b000b,
+    0xc43cc000, 0x00000000, 0x00210028, 0xffe01605,
+    0xc4322000, 0x00000000, 0x00a40007, 0xc434e000,
+    0x00000000, 0x00a300a5, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00a700a6, 0x0000d605, 0x00000605,
+    0xff00ffff, 0x00031605, 0x01000e05, 0x00000605,
+    0x00ffffff, 0xc4287000, 0x00000000, 0x002300a8,
+    0xc434e000, 0x00000000, 0x00ac00ae, 0xc4322000,
+    0x00000000, 0x00290012, 0xc43cc000, 0x00000000,
+    0x00a900b0, 0x00029705, 0x00031705, 0x00039705,
+    0x00041705, 0x00049705, 0xa83b8000, 0x00000000,
+    0x00000008, 0x84390000, 0x00000000, 0x000000b7,
+    0x00003505, 0xa4288000, 0x00000000, 0x00b900b7,
+    0x84390000, 0x00000000, 0x000000ba, 0xc438e000,
+    0x00000000, 0x000000b8, 0xc4351000, 0x00000000,
+    0x009600bc, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x000600be, 0xc434e000, 0x00000000, 0x00bd00bf,
+    0xc438e000, 0x00000000, 0x000000bb, 0xc4351000,
+    0x00000000, 0x009b00c1, 0xc4322000, 0x00000000,
+    0x00aa00c0, 0xc434e000, 0x00000000, 0x00c200c3,
+    0x903bb000, 0x00000000, 0x00000008, 0xc438e200,
+    0x00000000, 0x000000c5, 0xc4351000, 0x00000000,
+    0x00ab00c6, 0xc4322000, 0x00000000, 0x00ad00c4,
+    0xc434e000, 0x00000000, 0x00c700c8, 0x903bb000,
+    0x00000000, 0x000000af, 0x84322000, 0x00000000,
+    0x002600ca, 0x24345000, 0x00000000, 0x002500cb,
+    0xe4226000, 0x00000000, 0x000000cc, 0xe4351000,
+    0x00000000, 0x009600cd, 0xc43bd000, 0x00000000,
+    0x000000ce, 0xc434e000, 0x00000000, 0x009600cf,
+    0xc43be000, 0x00000000, 0x000000ce, 0xe4369000,
+    0x00000000, 0x00d100d0, 0x84322100, 0x00000000,
+    0x002600ca, 0x24345000, 0x00000000, 0x002500d3,
+    0xe4226000, 0x00000000, 0x000000d4, 0x00013605,
+    0xe4351000, 0x00000000, 0x00d600d5, 0xe434e000,
+    0x00000000, 0x00d700d2, 0x84322200, 0x00000000,
+    0x002600ca, 0x24345000, 0x00000000, 0x002500d9,
+    0xe4226000, 0x00000000, 0x000000da, 0x00015605,
+    0xe4351000, 0x00000000, 0x00dc00db, 0xe434e000,
+    0x00000000, 0x00dd00d8, 0x84322300, 0x00000000,
+    0x002600ca, 0x24345000, 0x00000000, 0x002500df,
+    0xe4226000, 0x00000000, 0x000000e0, 0x00017605,
+    0xe4351000, 0x00000000, 0x00e200e1, 0xe434e000,
+    0x00000000, 0x00e300de, 0xe438f000, 0x00000000,
+    0x000000b1, 0x0001b605, 0xe4351000, 0x00000000,
+    0x00e600e5, 0xe434e000, 0x00000000, 0x00e700e4,
+    0xc43bd000, 0x00000000, 0x000000e8, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x00e900ea, 0x00006894,
+    0x000003ac, 0x00000288, 0x00040001, 0xe438f000,
+    0x00000000, 0x00000022, 0xe4351000, 0x00000000,
+    0x009600ec, 0x903bb000, 0x00000000, 0x000000c9,
+    0x84322000, 0x00000000, 0x002600ee, 0x24345000,
+    0x00000000, 0x002500ef, 0xe4226000, 0x00000000,
+    0x000000f0, 0xe4351000, 0x00000000, 0x00d600f1,
+    0xe434e000, 0x00000000, 0x00f200ed, 0xc438e000,
+    0x00000000, 0x000000f3, 0xe431f000, 0x00000000,
+    0x009700a2, 0x00006894, 0x000003d0, 0x000003d4,
+    0x00040001, 0xe431f000, 0x00000000, 0x009d00a2,
+    0x00006894, 0x00000270, 0x000003d8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00a000a2, 0x00006894,
+    0x00000278, 0x000003dc, 0x00040001, 0xe431f000,
+    0x00000000, 0x009800a2, 0x00006894, 0x0000027c,
+    0x000003e0, 0x00040001, 0xe431f000, 0x00000000,
+    0x00b200a2, 0x00006894, 0x00000268, 0x000003e4,
+    0x00040001, 0xe431f000, 0x00000000, 0x00b300a2,
+    0x00006894, 0x00000284, 0x000003e8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00b400a2, 0x00006894,
+    0x00000284, 0x000003ec, 0x00040001, 0xe431f000,
+    0x00000000, 0x00b500a2, 0x00006894, 0x00000268,
+    0x000003f0, 0x00040001, 0xe431f000, 0x00000000,
+    0x00b600a2, 0x00006894, 0x00000060, 0x000003f4,
+    0x00040001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x0000000e,
+    0x00041605, 0xc4322000, 0x00000000, 0x01010012,
+    0x00000e05, 0x24327000, 0x00000000, 0x01030102,
+    0x00001405, 0x00003405, 0x24327000, 0x00000000,
+    0x01030019, 0xfffff605, 0xc431f000, 0x00000000,
+    0x0108001e, 0xc4273000, 0x00000000, 0x01030107,
+    0x00000109, 0xe438f000, 0x00000000, 0x00000013,
+    0xe431f000, 0x00000000, 0x010b001b, 0xe4273000,
+    0x00000000, 0x001b0107, 0x0000010c, 0xe431f000,
+    0x00000000, 0x010d000b, 0x00000001, 0x00000410,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x24327000, 0x00000000, 0x010a0018, 0x243a6000,
+    0x00000000, 0x00110019, 0x24322000, 0x00000000,
+    0x01100111, 0x00000001, 0x00000448, 0x00000000,
+    0x00000001, 0x00000000, 0x00000025, 0x00009705,
+    0x00011705, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x00050116, 0x00015605, 0xa83b8000, 0x00000000,
+    0x00000004, 0xc438e000, 0x00000000, 0x00000119,
+    0x00021605, 0xc4351000, 0x00000000, 0x011b011a,
+    0xc4287000, 0x00000000, 0x01030117, 0xc434e000,
+    0x00000000, 0x011c011d, 0x903bb000, 0x00000000,
+    0x0000011e, 0x84322000, 0x00000000, 0x0106011f,
+    0x24345000, 0x00000000, 0x01050120, 0xe4226000,
+    0x00000000, 0x00000121, 0xe4351000, 0x00000000,
+    0x01180122, 0xc43bd000, 0x00000000, 0x00000123,
+    0x00203605, 0xc434e000, 0x00000000, 0x01250124,
+    0xc43be000, 0x00000000, 0x00000123, 0xe4369000,
+    0x00000000, 0x01270126, 0x84322100, 0x00000000,
+    0x0106011f, 0x24345000, 0x00000000, 0x01050129,
+    0xe4226000, 0x00000000, 0x0000012a, 0x0001f605,
+    0xe4351000, 0x00000000, 0x012c012b, 0xe434e000,
+    0x00000000, 0x012d0128, 0xc43bd000, 0x00000000,
+    0x0000012e, 0x18800e05, 0xc434e000, 0x00000000,
+    0x0130012f, 0x00006894, 0x000004c4, 0x00000438,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000016,
+    0xe431f000, 0x00000000, 0x0114010e, 0x00006894,
+    0x000004c8, 0x000004cc, 0x00040001, 0xc43be000,
+    0x00000000, 0x00000016, 0xe431f000, 0x00000000,
+    0x0115010e, 0x00006894, 0x000004d0, 0x000004d4,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000003, 0x00000000,
+    0x00000001, 0x24345000, 0x00000000, 0x010a0018,
+    0x00000001, 0x000004e4, 0x00000000, 0x00000003,
+    0x00000000, 0x00000002, 0xc431f000, 0x00000000,
+    0x01080014, 0x24327000, 0x00000000, 0x013b0017,
+    0x00000001, 0x000004f0, 0x00000000, 0x00000001,
+    0x00000000, 0x00000025, 0x00009705, 0x00011705,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x00030140,
+    0x00015605, 0xa83b8000, 0x00000000, 0x00000004,
+    0xc438e000, 0x00000000, 0x00000143, 0x00021605,
+    0xc4351000, 0x00000000, 0x01450144, 0xc4287000,
+    0x00000000, 0x01030141, 0xc434e000, 0x00000000,
+    0x01460147, 0x903bb000, 0x00000000, 0x00000148,
+    0x84322000, 0x00000000, 0x01060149, 0x24345000,
+    0x00000000, 0x0105014a, 0xe4226000, 0x00000000,
+    0x0000014b, 0xe4351000, 0x00000000, 0x0142014c,
+    0xc43bd000, 0x00000000, 0x0000014d, 0x00203605,
+    0xc434e000, 0x00000000, 0x014f014e, 0xc43be000,
+    0x00000000, 0x0000014d, 0xe4369000, 0x00000000,
+    0x01510150, 0x84322100, 0x00000000, 0x01060149,
+    0x24345000, 0x00000000, 0x01050153, 0xe4226000,
+    0x00000000, 0x00000154, 0x0001f605, 0xe4351000,
+    0x00000000, 0x01560155, 0xe434e000, 0x00000000,
+    0x01570152, 0xc43bd000, 0x00000000, 0x00000158,
+    0x18800e05, 0xc434e000, 0x00000000, 0x015a0159,
+    0x00006894, 0x0000056c, 0x00000438, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000015, 0xe431f000,
+    0x00000000, 0x013e010e, 0x00006894, 0x00000570,
+    0x00000574, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000015, 0xe431f000, 0x00000000, 0x013f010e,
+    0x00006894, 0x00000578, 0x0000057c, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000025,
+    0x00009705, 0x00011705, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00020165, 0x00015605, 0xa83b8000,
+    0x00000000, 0x00000004, 0xc438e000, 0x00000000,
+    0x00000168, 0x00021605, 0xc4351000, 0x00000000,
+    0x016a0169, 0xc4287000, 0x00000000, 0x01030166,
+    0xc434e000, 0x00000000, 0x016b016c, 0x903bb000,
+    0x00000000, 0x0000016d, 0x84322000, 0x00000000,
+    0x0106016e, 0x24345000, 0x00000000, 0x0105016f,
+    0xe4226000, 0x00000000, 0x00000170, 0xe4351000,
+    0x00000000, 0x01670171, 0xc43bd000, 0x00000000,
+    0x00000172, 0x00203605, 0xc434e000, 0x00000000,
+    0x01740173, 0xc43be000, 0x00000000, 0x00000172,
+    0xe4369000, 0x00000000, 0x01760175, 0x84322100,
+    0x00000000, 0x0106016e, 0x24345000, 0x00000000,
+    0x01050178, 0xe4226000, 0x00000000, 0x00000179,
+    0x0001f605, 0xe4351000, 0x00000000, 0x017b017a,
+    0xe434e000, 0x00000000, 0x017c0177, 0xc43bd000,
+    0x00000000, 0x0000017d, 0x18800e05, 0xc434e000,
+    0x00000000, 0x017f017e, 0x00006894, 0x00000600,
+    0x00000438, 0x00040001, 0xc438e000, 0x00000000,
+    0x00000016, 0xe431f000, 0x00000000, 0x0163010e,
+    0x00006894, 0x00000604, 0x00000608, 0x00040001,
+    0xc43be000, 0x00000000, 0x00000016, 0xe431f000,
+    0x00000000, 0x0164010e, 0x00006894, 0x0000060c,
+    0x00000610, 0x00040001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000,
+};
+   nir_def *args[16] = { dst_base, wa_insts_ptr, indirect_base, draw_id_base, indirect_stride, _draw_count, draw_base, instance_multiplier, max_draw_count, flags, mocs, _3dprim_size_B, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx30_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx30_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    32      %9 = undefined
+    32     %10 = undefined
+    32     %11 = undefined
+    32     %12 = undefined
+    32     %13 = undefined
+    32     %14 = undefined
+    32     %15 = undefined
+    32     %16 = undefined
+    32     %17 = undefined
+    32     %18 = undefined
+    32     %19 = undefined
+    64     %20 = load_const (0x0000000000000000)
+    32     %21 = load_const (0x00000000)
+    8      %22 = load_const (0x00)
+    32     %23 = load_const (0xffffff00 = -256 = 4294967040)
+    32     %24 = load_const (0x00000001)
+    32     %25 = load_const (0x00000003)
+    32     %26 = load_const (0x00000008)
+    32     %27 = load_const (0xffff00ff = -65281 = 4294902015)
+    32     %28 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %29 = iand %28 (0xffff0000), %19
+    64     %30 = @load_param (param_idx=0)
+    64     %31 = @load_param (param_idx=1)
+    64     %32 = @load_param (param_idx=2)
+    32     %33 = @load_param (param_idx=3)
+    64     %34 = @load_param (param_idx=4)
+    32     %35 = @load_param (param_idx=5)
+    32     %36 = @load_param (param_idx=6)
+    32     %37 = @load_param (param_idx=7)
+    32     %38 = @load_param (param_idx=8)
+    64     %39 = @load_param (param_idx=9)
+    64     %40 = @load_param (param_idx=10)
+    32     %41 = @load_param (param_idx=11)
+    32     %42 = load_const (0x00000002)
+    32     %43 = extract_u8 %37, %42 (0x2)
+    32     %44 = load_const (0x00000004)
+    32     %45 = ishl %43, %42 (0x2)
+    32     %46 = extract_u8 %37, %25 (0x3)
+    32     %47 = iadd %35, %41
+    64     %48 = load_const (0x0000000000000004)
+    32     %49 = imul %41, %45
+    64     %50 = u2u64 %49
+    64     %51 = iadd %48 (0x4), %50
+    32     %52 = imul %47, %33
+    64     %53 = u2u64 %52
+    32     %54 = ishl %41, %25 (0x3)
+    64     %55 = u2u64 %54
+    1      %56 = ine %34, %20 (0x0)
+                 // succs: b1 b2
+    if %56 {
+        block b1:    // preds: b0
+        32     %57 = @load_global (%34) (access=none, align_mul=4, align_offset=0)
+        32     %58 = umin %36, %57
+                     // succs: b3
+    } else {
+        block b2:  // preds: b0, succs: b3
+    }
+    block b3:    // preds: b1 b2
+    32     %59 = phi b1: %58, b2: %36
+    1      %60 = ieq %41, %21 (0x0)
+                 // succs: b4 b5
+    if %60 {
+        block b4:    // preds: b3
+        8      %61 = load_const (0x01)
+        32     %62 = b2i32 %60
+        32     %63 = ishl %62, %26 (0x8)
+        32     %64 = iand %28 (0xffff0000), %18
+        32     %65 = ior %64, %63
+        16x2   %66 = unpack_32_2x16 %29
+        32     %67 = u2u32 %66.x
+        32     %68 = load_const (0x00000010 = 16)
+        32     %69 = ishl %67, %68 (0x10)
+        32     %70 = extract_u16 %65, %21 (0x0)
+        32     %71 = ior %70, %69
+        8x4    %72 = unpack_32_4x8 %71
+        8      %73 = iand %72.x, %61 (0x1)
+        1      %74 = ine %73, %22 (0x0)
+        64     %75 = b2i64 %74
+        8      %76 = iand %72.y, %61 (0x1)
+        1      %77 = ine %76, %22 (0x0)
+        64     %78 = b2i64 %77
+        64     %79 = ishl %78, %26 (0x8)
+        64     %80 = ior %75, %79
+        32     %81 = unpack_64_2x32_split_x %80
+        32     %82 = load_const (0x02800000 = 41943040)
+        32     %83 = ior %81, %82 (0x2800000)
+                     @store_global (%83, %30) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b6
+    } else {
+        block b5:  // preds: b3, succs: b6
+    }
+    block b6:    // preds: b4 b5
+    1      %84 = ult %47, %59
+                 // succs: b7 b29
+    if %84 {
+        block b7:    // preds: b6
+        32     %85 = iand %37, %24 (0x1)
+        1      %86 = ieq %85, %21 (0x0)
+        8      %87 = load_const (0x01)
+        32     %88 = iand %37, %42 (0x2)
+        32     %89 = load_const (0x00000040 = 64)
+        32     %90 = iand %37, %26 (0x8)
+        1      %91 = ine %90, %21 (0x0)
+        32     %92 = iand %37, %44 (0x4)
+        1      %93 = ine %92, %21 (0x0)
+        32     %94 = extract_u8 %37, %24 (0x1)
+                     // succs: b8 b18
+        if %86 {
+            block b8:    // preds: b7
+            64     %95 = load_const (0x0000000000000008)
+            32     %96 = umax %92, %90
+            1      %97 = ine %96, %21 (0x0)
+            64     %98 = iadd %30, %51
+                         // succs: b9 b16
+            if %97 {
+                block b9:    // preds: b8
+                32     %99 = ushr %90, %25 (0x3)
+                32    %100 = ushr %92, %42 (0x2)
+                32    %101 = iadd.nsw %99, %100
+                32    %102 = ishl %101, %42 (0x2)
+                32    %103 = load_const (0xffffffff = -1 = 4294967295)
+                32    %104 = iadd %103 (0xffffffff), %102
+                64    %105 = load_const (0x000000000000000c = 12)
+                64    %106 = load_const (0x0000000000000010 = 16)
+                32    %107 = load_const (0x00000010 = 16)
+                32    %108 = load_const (0x78080000 = 2013790208)
+                32    %109 = ior %108 (0x78080000), %104
+                             @store_global (%109, %98) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %110 = iadd %98, %48 (0x4)
+                             // succs: b10 b11
+                if %91 {
+                    block b10:   // preds: b9
+                    32    %111 = iadd %46, %24 (0x1)
+                    64    %112 = iadd %53, %95 (0x8)
+                    64    %113 = iadd %31, %112
+                    1     %114 = ieq %113, %20 (0x0)
+                    32    %115 = b2i32 %114
+                    32    %116 = iand %17, %23 (0xffffff00)
+                    32    %117 = ior %116, %115
+                    32    %118 = load_const (0x00000100 = 256)
+                    32    %119 = iand %117, %27 (0xffff00ff)
+                    32    %120 = ior %119, %118 (0x100)
+                    16x2  %121 = unpack_32_2x16 %16
+                    32    %122 = u2u32 %121.x
+                    32    %123 = ishl %122, %107 (0x10)
+                    32    %124 = extract_u16 %120, %21 (0x0)
+                    32    %125 = ior %124, %123
+                    32    %126 = iand %15, %23 (0xffffff00)
+                    32    %127 = ior %126, %24 (0x1)
+                    32    %128 = load_const (0x0000000d = 13)
+                    8     %129 = u2u8 %121.y
+                    16    %130 = load_const (0x0001)
+                    16    %131 = extract_u8 %121.y, %130 (0x1)
+                    8     %132 = u2u8 %131
+                    32    %133 = u2u32 %129
+                    32    %134 = ishl %133, %26 (0x8)
+                    32    %135 = iand %127, %27 (0xffff00ff)
+                    32    %136 = ior %135, %134
+                    32    %137 = u2u32 %132
+                    32    %138 = ishl %137, %107 (0x10)
+                    32    %139 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %140 = iand %136, %139 (0xff00ffff)
+                    32    %141 = ior %140, %138
+                    8x4   %142 = unpack_32_4x8 %14
+                    32    %143 = u2u32 %142.x
+                    32    %144 = load_const (0x00000018 = 24)
+                    32    %145 = ishl %143, %144 (0x18)
+                    32    %146 = load_const (0x00ffffff = 16777215)
+                    32    %147 = iand %141, %146 (0xffffff)
+                    32    %148 = ior %147, %145
+                    64    %149 = load_const (0x0000000000000014 = 20)
+                    32x2  %150 = unpack_64_2x32 %113
+                    8x4   %151 = unpack_32_4x8 %125
+                    8     %152 = iand %151.x, %87 (0x1)
+                    1     %153 = ine %152, %22 (0x0)
+                    64    %154 = b2i64 %153
+                    64    %155 = ishl %154, %128 (0xd)
+                    8     %156 = iand %151.y, %87 (0x1)
+                    1     %157 = ine %156, %22 (0x0)
+                    64    %158 = b2i64 %157
+                    32    %159 = load_const (0x0000000e = 14)
+                    64    %160 = ishl %158, %159 (0xe)
+                    64    %161 = ior %155, %160
+                    64    %162 = u2u64 %94
+                    64    %163 = ishl %162, %107 (0x10)
+                    64    %164 = ior %161, %163
+                    8x4   %165 = unpack_32_4x8 %148
+                    8     %166 = iand %165.x, %87 (0x1)
+                    1     %167 = ine %166, %22 (0x0)
+                    64    %168 = b2i64 %167
+                    32    %169 = load_const (0x00000019 = 25)
+                    64    %170 = ishl %168, %169 (0x19)
+                    64    %171 = ior %164, %170
+                    64    %172 = u2u64 %46
+                    32    %173 = load_const (0x0000001a = 26)
+                    64    %174 = ishl %172, %173 (0x1a)
+                    64    %175 = ior %171, %174
+                    32    %176 = u2u32 %175
+                                 @store_global (%176, %110) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %177 = u2u32 %113
+                    64    %178 = iadd %98, %95 (0x8)
+                                 @store_global (%177, %178) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %179 = mov %150.y
+                    64    %180 = iadd %98, %105 (0xc)
+                                 @store_global (%179, %180) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %181 = iadd %98, %106 (0x10)
+                                 @store_global (%26 (0x8), %181) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %182 = iadd %98, %149 (0x14)
+                                 // succs: b12
+                } else {
+                    block b11:  // preds: b9, succs: b12
+                }
+                block b12:   // preds: b10 b11
+                32    %183 = phi b10: %111, b11: %46
+                64    %184 = phi b10: %182, b11: %110
+                             // succs: b13 b14
+                if %93 {
+                    block b13:   // preds: b12
+                    64    %185 = iadd %32, %55
+                                 @store_global (%47, %185) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %186 = ineg %85
+                    64    %187 = iadd %185, %48 (0x4)
+                                 @store_global (%186, %187) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %188 = ieq %185, %20 (0x0)
+                    32    %189 = b2i32 %188
+                    32    %190 = iand %13, %23 (0xffffff00)
+                    32    %191 = ior %190, %189
+                    32    %192 = load_const (0x00000100 = 256)
+                    32    %193 = iand %191, %27 (0xffff00ff)
+                    32    %194 = ior %193, %192 (0x100)
+                    16x2  %195 = unpack_32_2x16 %16
+                    32    %196 = u2u32 %195.x
+                    32    %197 = ishl %196, %107 (0x10)
+                    32    %198 = extract_u16 %194, %21 (0x0)
+                    32    %199 = ior %198, %197
+                    32    %200 = iand %12, %23 (0xffffff00)
+                    32    %201 = ior %200, %24 (0x1)
+                    32    %202 = load_const (0x0000000d = 13)
+                    8     %203 = u2u8 %195.y
+                    16    %204 = load_const (0x0001)
+                    16    %205 = extract_u8 %195.y, %204 (0x1)
+                    8     %206 = u2u8 %205
+                    32    %207 = u2u32 %203
+                    32    %208 = ishl %207, %26 (0x8)
+                    32    %209 = iand %201, %27 (0xffff00ff)
+                    32    %210 = ior %209, %208
+                    32    %211 = u2u32 %206
+                    32    %212 = ishl %211, %107 (0x10)
+                    32    %213 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %214 = iand %210, %213 (0xff00ffff)
+                    32    %215 = ior %214, %212
+                    8x4   %216 = unpack_32_4x8 %14
+                    32    %217 = u2u32 %216.x
+                    32    %218 = load_const (0x00000018 = 24)
+                    32    %219 = ishl %217, %218 (0x18)
+                    32    %220 = load_const (0x00ffffff = 16777215)
+                    32    %221 = iand %215, %220 (0xffffff)
+                    32    %222 = ior %221, %219
+                    32x2  %223 = unpack_64_2x32 %185
+                    8x4   %224 = unpack_32_4x8 %199
+                    8     %225 = iand %224.x, %87 (0x1)
+                    1     %226 = ine %225, %22 (0x0)
+                    64    %227 = b2i64 %226
+                    64    %228 = ishl %227, %202 (0xd)
+                    8     %229 = iand %224.y, %87 (0x1)
+                    1     %230 = ine %229, %22 (0x0)
+                    64    %231 = b2i64 %230
+                    32    %232 = load_const (0x0000000e = 14)
+                    64    %233 = ishl %231, %232 (0xe)
+                    64    %234 = ior %228, %233
+                    64    %235 = u2u64 %94
+                    64    %236 = ishl %235, %107 (0x10)
+                    64    %237 = ior %234, %236
+                    8x4   %238 = unpack_32_4x8 %222
+                    8     %239 = iand %238.x, %87 (0x1)
+                    1     %240 = ine %239, %22 (0x0)
+                    64    %241 = b2i64 %240
+                    32    %242 = load_const (0x00000019 = 25)
+                    64    %243 = ishl %241, %242 (0x19)
+                    64    %244 = ior %237, %243
+                    64    %245 = u2u64 %183
+                    32    %246 = load_const (0x0000001a = 26)
+                    64    %247 = ishl %245, %246 (0x1a)
+                    64    %248 = ior %244, %247
+                    32    %249 = u2u32 %248
+                                 @store_global (%249, %184) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %250 = u2u32 %185
+                    64    %251 = iadd %184, %48 (0x4)
+                                 @store_global (%250, %251) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %252 = mov %223.y
+                    64    %253 = iadd %184, %95 (0x8)
+                                 @store_global (%252, %253) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %254 = iadd %184, %105 (0xc)
+                                 @store_global (%26 (0x8), %254) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %255 = iadd %184, %106 (0x10)
+                                 // succs: b15
+                } else {
+                    block b14:  // preds: b12, succs: b15
+                }
+                block b15:   // preds: b13 b14
+                64    %256 = phi b13: %255, b14: %184
+                             // succs: b17
+            } else {
+                block b16:  // preds: b8, succs: b17
+            }
+            block b17:   // preds: b15 b16
+            64    %257 = phi b15: %256, b16: %98
+            64    %258 = iadd %31, %53
+            32x4  %259 = @load_global (%258) (access=none, align_mul=4, align_offset=0)
+            32    %260 = mov %259.x
+            32    %261 = mov %259.z
+            32    %262 = mov %259.y
+            64    %263 = load_const (0x000000000000000c = 12)
+            32    %264 = mov %259.w
+            32    %265 = ushr %88, %24 (0x1)
+            32    %266 = iand %11, %23 (0xffffff00)
+            32    %267 = ior %266, %265
+            32    %268 = iand %267, %27 (0xffff00ff)
+            32    %269 = load_const (0x00000006)
+            32    %270 = load_const (0x00000010 = 16)
+            32    %271 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %272 = unpack_32_4x8 %10
+            32    %273 = u2u32 %272.x
+            32    %274 = load_const (0x00000018 = 24)
+            32    %275 = ishl %273, %274 (0x18)
+            32    %276 = load_const (0x00ffffff = 16777215)
+            32    %277 = extract_u16 %268, %21 (0x0)
+            32    %278 = ior %277, %275
+            32    %279 = iand %37, %89 (0x40)
+            32    %280 = ushr %279, %269 (0x6)
+            64    %281 = load_const (0x0000000000000010 = 16)
+            64    %282 = load_const (0x0000000000000014 = 20)
+            64    %283 = load_const (0x0000000000000018 = 24)
+            16    %284 = u2u16 %272.y
+            16    %285 = u2u16 %272.z
+            16    %286 = ishl %285, %26 (0x8)
+            16    %287 = ior %284, %286
+            8     %288 = u2u8 %287
+            16    %289 = load_const (0x0001)
+            16    %290 = extract_u8 %287, %289 (0x1)
+            8     %291 = u2u8 %290
+            32    %292 = u2u32 %288
+            32    %293 = ishl %292, %26 (0x8)
+            32    %294 = iand %28 (0xffff0000), %9
+            32    %295 = ior %294, %293
+            32    %296 = u2u32 %291
+            32    %297 = ishl %296, %270 (0x10)
+            32    %298 = iand %295, %271 (0xff00ffff)
+            32    %299 = ior %298, %297
+            32    %300 = u2u32 %272.w
+            32    %301 = ishl %300, %274 (0x18)
+            32    %302 = iand %299, %276 (0xffffff)
+            32    %303 = ior %302, %301
+            8x4   %304 = unpack_32_4x8 %278
+            8     %305 = iand %304.x, %87 (0x1)
+            1     %306 = ine %305, %22 (0x0)
+            64    %307 = b2i64 %306
+            64    %308 = ishl %307, %26 (0x8)
+            32    %309 = unpack_64_2x32_split_x %308
+            32    %310 = load_const (0x00000005)
+            32    %311 = ior %309, %310 (0x5)
+            32    %312 = unpack_64_2x32_split_y %308
+            64    %313 = pack_64_2x32_split %311, %312
+            8     %314 = iand %304.y, %87 (0x1)
+            1     %315 = ine %314, %22 (0x0)
+            64    %316 = b2i64 %315
+            32    %317 = load_const (0x00000009)
+            64    %318 = ishl %316, %317 (0x9)
+            64    %319 = ior %313, %318
+            8     %320 = iand %304.z, %87 (0x1)
+            1     %321 = ine %320, %22 (0x0)
+            64    %322 = b2i64 %321
+            32    %323 = load_const (0x0000000a = 10)
+            64    %324 = ishl %322, %323 (0xa)
+            64    %325 = ior %319, %324
+            64    %326 = u2u64 %280
+            32    %327 = load_const (0x0000000d = 13)
+            64    %328 = ishl %326, %327 (0xd)
+            64    %329 = ior %325, %328
+            32    %330 = unpack_64_2x32_split_x %329
+            32    %331 = load_const (0x7b000000 = 2063597568)
+            32    %332 = ior %331 (0x7b000000), %330
+                         @store_global (%332, %257) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %333 = u2u64 %85
+            64    %334 = ishl %333, %26 (0x8)
+            8x4   %335 = unpack_32_4x8 %303
+            8     %336 = iand %335.x, %87 (0x1)
+            1     %337 = ine %336, %22 (0x0)
+            64    %338 = b2i64 %337
+            64    %339 = ishl %338, %317 (0x9)
+            64    %340 = ior %334, %339
+            32    %341 = u2u32 %340
+            64    %342 = iadd %257, %48 (0x4)
+                         @store_global (%341, %342) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %343 = iadd %257, %95 (0x8)
+                         @store_global (%260, %343) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %344 = iadd %257, %263 (0xc)
+                         @store_global (%261, %344) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %345 = iadd %257, %281 (0x10)
+                         @store_global (%262, %345) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %346 = iadd %257, %282 (0x14)
+                         @store_global (%264, %346) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %347 = iadd %257, %283 (0x18)
+                         @store_global (%21 (0x0), %347) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b28
+        } else {
+            block b18:   // preds: b7
+            64    %348 = load_const (0x000000000000000c = 12)
+            32    %349 = umax %92, %90
+            1     %350 = ine %349, %21 (0x0)
+            64    %351 = iadd %30, %51
+                         // succs: b19 b26
+            if %350 {
+                block b19:   // preds: b18
+                32    %352 = ushr %90, %25 (0x3)
+                32    %353 = ushr %92, %42 (0x2)
+                32    %354 = iadd.nsw %352, %353
+                32    %355 = ishl %354, %42 (0x2)
+                32    %356 = load_const (0xffffffff = -1 = 4294967295)
+                32    %357 = iadd %356 (0xffffffff), %355
+                64    %358 = load_const (0x0000000000000008)
+                64    %359 = load_const (0x0000000000000010 = 16)
+                32    %360 = load_const (0x00000010 = 16)
+                32    %361 = load_const (0x78080000 = 2013790208)
+                32    %362 = ior %361 (0x78080000), %357
+                             @store_global (%362, %351) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %363 = iadd %351, %48 (0x4)
+                             // succs: b20 b21
+                if %91 {
+                    block b20:   // preds: b19
+                    32    %364 = iadd %46, %24 (0x1)
+                    64    %365 = iadd %53, %348 (0xc)
+                    64    %366 = iadd %31, %365
+                    1     %367 = ieq %366, %20 (0x0)
+                    32    %368 = b2i32 %367
+                    32    %369 = iand %8, %23 (0xffffff00)
+                    32    %370 = ior %369, %368
+                    32    %371 = load_const (0x00000100 = 256)
+                    32    %372 = iand %370, %27 (0xffff00ff)
+                    32    %373 = ior %372, %371 (0x100)
+                    16x2  %374 = unpack_32_2x16 %16
+                    32    %375 = u2u32 %374.x
+                    32    %376 = ishl %375, %360 (0x10)
+                    32    %377 = extract_u16 %373, %21 (0x0)
+                    32    %378 = ior %377, %376
+                    32    %379 = iand %7, %23 (0xffffff00)
+                    32    %380 = ior %379, %24 (0x1)
+                    32    %381 = load_const (0x0000000d = 13)
+                    8     %382 = u2u8 %374.y
+                    16    %383 = load_const (0x0001)
+                    16    %384 = extract_u8 %374.y, %383 (0x1)
+                    8     %385 = u2u8 %384
+                    32    %386 = u2u32 %382
+                    32    %387 = ishl %386, %26 (0x8)
+                    32    %388 = iand %380, %27 (0xffff00ff)
+                    32    %389 = ior %388, %387
+                    32    %390 = u2u32 %385
+                    32    %391 = ishl %390, %360 (0x10)
+                    32    %392 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %393 = iand %389, %392 (0xff00ffff)
+                    32    %394 = ior %393, %391
+                    8x4   %395 = unpack_32_4x8 %14
+                    32    %396 = u2u32 %395.x
+                    32    %397 = load_const (0x00000018 = 24)
+                    32    %398 = ishl %396, %397 (0x18)
+                    32    %399 = load_const (0x00ffffff = 16777215)
+                    32    %400 = iand %394, %399 (0xffffff)
+                    32    %401 = ior %400, %398
+                    64    %402 = load_const (0x0000000000000014 = 20)
+                    32x2  %403 = unpack_64_2x32 %366
+                    8x4   %404 = unpack_32_4x8 %378
+                    8     %405 = iand %404.x, %87 (0x1)
+                    1     %406 = ine %405, %22 (0x0)
+                    64    %407 = b2i64 %406
+                    64    %408 = ishl %407, %381 (0xd)
+                    8     %409 = iand %404.y, %87 (0x1)
+                    1     %410 = ine %409, %22 (0x0)
+                    64    %411 = b2i64 %410
+                    32    %412 = load_const (0x0000000e = 14)
+                    64    %413 = ishl %411, %412 (0xe)
+                    64    %414 = ior %408, %413
+                    64    %415 = u2u64 %94
+                    64    %416 = ishl %415, %360 (0x10)
+                    64    %417 = ior %414, %416
+                    8x4   %418 = unpack_32_4x8 %401
+                    8     %419 = iand %418.x, %87 (0x1)
+                    1     %420 = ine %419, %22 (0x0)
+                    64    %421 = b2i64 %420
+                    32    %422 = load_const (0x00000019 = 25)
+                    64    %423 = ishl %421, %422 (0x19)
+                    64    %424 = ior %417, %423
+                    64    %425 = u2u64 %46
+                    32    %426 = load_const (0x0000001a = 26)
+                    64    %427 = ishl %425, %426 (0x1a)
+                    64    %428 = ior %424, %427
+                    32    %429 = u2u32 %428
+                                 @store_global (%429, %363) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %430 = u2u32 %366
+                    64    %431 = iadd %351, %358 (0x8)
+                                 @store_global (%430, %431) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %432 = mov %403.y
+                    64    %433 = iadd %351, %348 (0xc)
+                                 @store_global (%432, %433) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %434 = iadd %351, %359 (0x10)
+                                 @store_global (%26 (0x8), %434) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %435 = iadd %351, %402 (0x14)
+                                 // succs: b22
+                } else {
+                    block b21:  // preds: b19, succs: b22
+                }
+                block b22:   // preds: b20 b21
+                32    %436 = phi b20: %364, b21: %46
+                64    %437 = phi b20: %435, b21: %363
+                             // succs: b23 b24
+                if %93 {
+                    block b23:   // preds: b22
+                    64    %438 = iadd %32, %55
+                                 @store_global (%47, %438) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %439 = ineg %85
+                    64    %440 = iadd %438, %48 (0x4)
+                                 @store_global (%439, %440) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %441 = ieq %438, %20 (0x0)
+                    32    %442 = b2i32 %441
+                    32    %443 = iand %6, %23 (0xffffff00)
+                    32    %444 = ior %443, %442
+                    32    %445 = load_const (0x00000100 = 256)
+                    32    %446 = iand %444, %27 (0xffff00ff)
+                    32    %447 = ior %446, %445 (0x100)
+                    16x2  %448 = unpack_32_2x16 %16
+                    32    %449 = u2u32 %448.x
+                    32    %450 = ishl %449, %360 (0x10)
+                    32    %451 = extract_u16 %447, %21 (0x0)
+                    32    %452 = ior %451, %450
+                    32    %453 = iand %5, %23 (0xffffff00)
+                    32    %454 = ior %453, %24 (0x1)
+                    32    %455 = load_const (0x0000000d = 13)
+                    8     %456 = u2u8 %448.y
+                    16    %457 = load_const (0x0001)
+                    16    %458 = extract_u8 %448.y, %457 (0x1)
+                    8     %459 = u2u8 %458
+                    32    %460 = u2u32 %456
+                    32    %461 = ishl %460, %26 (0x8)
+                    32    %462 = iand %454, %27 (0xffff00ff)
+                    32    %463 = ior %462, %461
+                    32    %464 = u2u32 %459
+                    32    %465 = ishl %464, %360 (0x10)
+                    32    %466 = load_const (0xff00ffff = -16711681 = 4278255615)
+                    32    %467 = iand %463, %466 (0xff00ffff)
+                    32    %468 = ior %467, %465
+                    8x4   %469 = unpack_32_4x8 %14
+                    32    %470 = u2u32 %469.x
+                    32    %471 = load_const (0x00000018 = 24)
+                    32    %472 = ishl %470, %471 (0x18)
+                    32    %473 = load_const (0x00ffffff = 16777215)
+                    32    %474 = iand %468, %473 (0xffffff)
+                    32    %475 = ior %474, %472
+                    32x2  %476 = unpack_64_2x32 %438
+                    8x4   %477 = unpack_32_4x8 %452
+                    8     %478 = iand %477.x, %87 (0x1)
+                    1     %479 = ine %478, %22 (0x0)
+                    64    %480 = b2i64 %479
+                    64    %481 = ishl %480, %455 (0xd)
+                    8     %482 = iand %477.y, %87 (0x1)
+                    1     %483 = ine %482, %22 (0x0)
+                    64    %484 = b2i64 %483
+                    32    %485 = load_const (0x0000000e = 14)
+                    64    %486 = ishl %484, %485 (0xe)
+                    64    %487 = ior %481, %486
+                    64    %488 = u2u64 %94
+                    64    %489 = ishl %488, %360 (0x10)
+                    64    %490 = ior %487, %489
+                    8x4   %491 = unpack_32_4x8 %475
+                    8     %492 = iand %491.x, %87 (0x1)
+                    1     %493 = ine %492, %22 (0x0)
+                    64    %494 = b2i64 %493
+                    32    %495 = load_const (0x00000019 = 25)
+                    64    %496 = ishl %494, %495 (0x19)
+                    64    %497 = ior %490, %496
+                    64    %498 = u2u64 %436
+                    32    %499 = load_const (0x0000001a = 26)
+                    64    %500 = ishl %498, %499 (0x1a)
+                    64    %501 = ior %497, %500
+                    32    %502 = u2u32 %501
+                                 @store_global (%502, %437) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %503 = u2u32 %438
+                    64    %504 = iadd %437, %48 (0x4)
+                                 @store_global (%503, %504) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %505 = mov %476.y
+                    64    %506 = iadd %437, %358 (0x8)
+                                 @store_global (%505, %506) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %507 = iadd %437, %348 (0xc)
+                                 @store_global (%26 (0x8), %507) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %508 = iadd %437, %359 (0x10)
+                                 // succs: b25
+                } else {
+                    block b24:  // preds: b22, succs: b25
+                }
+                block b25:   // preds: b23 b24
+                64    %509 = phi b23: %508, b24: %437
+                             // succs: b27
+            } else {
+                block b26:  // preds: b18, succs: b27
+            }
+            block b27:   // preds: b25 b26
+            64    %510 = phi b25: %509, b26: %351
+            64    %511 = iadd %31, %53
+            32x4  %512 = @load_global (%511) (access=none, align_mul=4, align_offset=0)
+            64    %513 = load_const (0x0000000000000010 = 16)
+            64    %514 = iadd %511, %513 (0x10)
+            32    %515 = @load_global (%514) (access=none, align_mul=4, align_offset=0)
+            32    %516 = load_const (0x00000010 = 16)
+            32    %517 = mov %512.x
+            64    %518 = load_const (0x0000000000000008)
+            32    %519 = mov %512.z
+            32    %520 = mov %512.y
+            32    %521 = mov %512.w
+            32    %522 = ushr %88, %24 (0x1)
+            32    %523 = iand %4, %23 (0xffffff00)
+            32    %524 = ior %523, %522
+            32    %525 = iand %524, %27 (0xffff00ff)
+            32    %526 = load_const (0x00000006)
+            32    %527 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %528 = unpack_32_4x8 %10
+            32    %529 = u2u32 %528.x
+            32    %530 = load_const (0x00000018 = 24)
+            32    %531 = ishl %529, %530 (0x18)
+            32    %532 = load_const (0x00ffffff = 16777215)
+            32    %533 = extract_u16 %525, %21 (0x0)
+            32    %534 = ior %533, %531
+            32    %535 = iand %37, %89 (0x40)
+            32    %536 = ushr %535, %526 (0x6)
+            64    %537 = load_const (0x0000000000000014 = 20)
+            64    %538 = load_const (0x0000000000000018 = 24)
+            16    %539 = u2u16 %528.y
+            16    %540 = u2u16 %528.z
+            16    %541 = ishl %540, %26 (0x8)
+            16    %542 = ior %539, %541
+            8     %543 = u2u8 %542
+            16    %544 = load_const (0x0001)
+            16    %545 = extract_u8 %542, %544 (0x1)
+            8     %546 = u2u8 %545
+            32    %547 = u2u32 %543
+            32    %548 = ishl %547, %26 (0x8)
+            32    %549 = iand %28 (0xffff0000), %3
+            32    %550 = ior %549, %548
+            32    %551 = u2u32 %546
+            32    %552 = ishl %551, %516 (0x10)
+            32    %553 = iand %550, %527 (0xff00ffff)
+            32    %554 = ior %553, %552
+            32    %555 = u2u32 %528.w
+            32    %556 = ishl %555, %530 (0x18)
+            32    %557 = iand %554, %532 (0xffffff)
+            32    %558 = ior %557, %556
+            8x4   %559 = unpack_32_4x8 %534
+            8     %560 = iand %559.x, %87 (0x1)
+            1     %561 = ine %560, %22 (0x0)
+            64    %562 = b2i64 %561
+            64    %563 = ishl %562, %26 (0x8)
+            32    %564 = unpack_64_2x32_split_x %563
+            32    %565 = load_const (0x00000005)
+            32    %566 = ior %564, %565 (0x5)
+            32    %567 = unpack_64_2x32_split_y %563
+            64    %568 = pack_64_2x32_split %566, %567
+            8     %569 = iand %559.y, %87 (0x1)
+            1     %570 = ine %569, %22 (0x0)
+            64    %571 = b2i64 %570
+            32    %572 = load_const (0x00000009)
+            64    %573 = ishl %571, %572 (0x9)
+            64    %574 = ior %568, %573
+            8     %575 = iand %559.z, %87 (0x1)
+            1     %576 = ine %575, %22 (0x0)
+            64    %577 = b2i64 %576
+            32    %578 = load_const (0x0000000a = 10)
+            64    %579 = ishl %577, %578 (0xa)
+            64    %580 = ior %574, %579
+            64    %581 = u2u64 %536
+            32    %582 = load_const (0x0000000d = 13)
+            64    %583 = ishl %581, %582 (0xd)
+            64    %584 = ior %580, %583
+            32    %585 = unpack_64_2x32_split_x %584
+            32    %586 = load_const (0x7b000000 = 2063597568)
+            32    %587 = ior %586 (0x7b000000), %585
+                         @store_global (%587, %510) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %588 = u2u64 %85
+            64    %589 = ishl %588, %26 (0x8)
+            8x4   %590 = unpack_32_4x8 %558
+            8     %591 = iand %590.x, %87 (0x1)
+            1     %592 = ine %591, %22 (0x0)
+            64    %593 = b2i64 %592
+            64    %594 = ishl %593, %572 (0x9)
+            64    %595 = ior %589, %594
+            32    %596 = u2u32 %595
+            64    %597 = iadd %510, %48 (0x4)
+                         @store_global (%596, %597) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %598 = iadd %510, %518 (0x8)
+                         @store_global (%517, %598) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %599 = iadd %510, %348 (0xc)
+                         @store_global (%519, %599) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %600 = iadd %510, %513 (0x10)
+                         @store_global (%520, %600) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %601 = iadd %510, %537 (0x14)
+                         @store_global (%515, %601) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %602 = iadd %510, %538 (0x18)
+                         @store_global (%521, %602) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b28
+        }
+        block b28:  // preds: b17 b27, succs: b30
+    } else {
+        block b29:  // preds: b6, succs: b30
+    }
+    block b30:   // preds: b28 b29
+    1     %603 = ieq %59, %21 (0x0)
+    32    %604 = load_const (0xffffffff = -1 = 4294967295)
+    32    %605 = iadd %59, %604 (0xffffffff)
+    32    %606 = bcsel %603, %21 (0x0), %605
+    64    %607 = u2u64 %45
+    64    %608 = iadd %51, %607
+    64    %609 = bcsel %603, %51, %608
+    64    %610 = iadd %30, %609
+    1     %611 = ine %47, %606
+                 // succs: b31 b35
+    if %611 {
+        block b31:   // preds: b30
+        32    %612 = iadd %38, %604 (0xffffffff)
+        1     %613 = ieq %41, %612
+                     // succs: b32 b33
+        if %613 {
+            block b32:   // preds: b31
+            64    %614 = load_const (0x0000000000000008)
+            32    %615 = iand %28 (0xffff0000), %2
+            32    %616 = load_const (0x0000000a = 10)
+            16x2  %617 = unpack_32_2x16 %1
+            32    %618 = u2u32 %617.x
+            32    %619 = load_const (0x00000010 = 16)
+            32    %620 = ishl %618, %619 (0x10)
+            32    %621 = extract_u16 %615, %21 (0x0)
+            32    %622 = ior %621, %620
+            8x4   %623 = unpack_32_4x8 %622
+            8     %624 = load_const (0x01)
+            8     %625 = iand %623.x, %624 (0x1)
+            1     %626 = ine %625, %22 (0x0)
+            64    %627 = b2i64 %626
+            64    %628 = ishl %627, %616 (0xa)
+            32    %629 = unpack_64_2x32_split_x %628
+            32    %630 = load_const (0x00000101 = 257)
+            32    %631 = ior %629, %630 (0x101)
+            32    %632 = unpack_64_2x32_split_y %628
+            64    %633 = pack_64_2x32_split %631, %632
+            8     %634 = iand %623.y, %624 (0x1)
+            1     %635 = ine %634, %22 (0x0)
+            64    %636 = b2i64 %635
+            32    %637 = load_const (0x0000000f = 15)
+            64    %638 = ishl %636, %637 (0xf)
+            64    %639 = ior %633, %638
+            32    %640 = unpack_64_2x32_split_x %639
+            32    %641 = load_const (0x18800000 = 411041792)
+            32    %642 = ior %640, %641 (0x18800000)
+                         @store_global (%642, %610) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %643 = u2u32 %39
+            64    %644 = iadd %610, %48 (0x4)
+                         @store_global (%643, %644) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %645 = unpack_64_2x32_split_y %39
+            64    %646 = iadd %610, %614 (0x8)
+                         @store_global (%645, %646) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b34
+        } else {
+            block b33:  // preds: b31, succs: b34
+        }
+        block b34:  // preds: b32 b33, succs: b36
+    } else {
+        block b35:   // preds: b30
+        64    %647 = load_const (0x0000000000000008)
+        32    %648 = iand %28 (0xffff0000), %0
+        32    %649 = load_const (0x0000000a = 10)
+        16x2  %650 = unpack_32_2x16 %1
+        32    %651 = u2u32 %650.x
+        32    %652 = load_const (0x00000010 = 16)
+        32    %653 = ishl %651, %652 (0x10)
+        32    %654 = extract_u16 %648, %21 (0x0)
+        32    %655 = ior %654, %653
+        8x4   %656 = unpack_32_4x8 %655
+        8     %657 = load_const (0x01)
+        8     %658 = iand %656.x, %657 (0x1)
+        1     %659 = ine %658, %22 (0x0)
+        64    %660 = b2i64 %659
+        64    %661 = ishl %660, %649 (0xa)
+        32    %662 = unpack_64_2x32_split_x %661
+        32    %663 = load_const (0x00000101 = 257)
+        32    %664 = ior %662, %663 (0x101)
+        32    %665 = unpack_64_2x32_split_y %661
+        64    %666 = pack_64_2x32_split %664, %665
+        8     %667 = iand %656.y, %657 (0x1)
+        1     %668 = ine %667, %22 (0x0)
+        64    %669 = b2i64 %668
+        32    %670 = load_const (0x0000000f = 15)
+        64    %671 = ishl %669, %670 (0xf)
+        64    %672 = ior %666, %671
+        32    %673 = unpack_64_2x32_split_x %672
+        32    %674 = load_const (0x18800000 = 411041792)
+        32    %675 = ior %673, %674 (0x18800000)
+                     @store_global (%675, %610) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %676 = u2u32 %40
+        64    %677 = iadd %610, %48 (0x4)
+                     @store_global (%676, %677) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %678 = unpack_64_2x32_split_y %40
+        64    %679 = iadd %610, %647 (0x8)
+                     @store_global (%678, %679) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b36
+    }
+    block b36:  // preds: b34 b35, succs: b37
+    block b37:
+   */
+   static const uint32_t impl_0_nir[2143] = {
+    0x000002ce, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000009, 0x00000000, 0x00000039, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000f05,
+    0x00000e05, 0x00001405, 0xffe01605, 0x00003605,
+    0x00007605, 0x00011605, 0xe01ff605, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0015001e, 0xe4001744,
+    0xe4011744, 0xe4021744, 0xc4031744, 0xe4041744,
+    0xc4051744, 0xc4061744, 0xc4071744, 0xc4081744,
+    0xe4091744, 0xe40a1744, 0xc40b1744, 0x00005605,
+    0xc4288000, 0x00000000, 0x002c0027, 0x00009605,
+    0xc4351000, 0x00000000, 0x002c002d, 0xc4288000,
+    0x00000000, 0x001b0027, 0xc431f000, 0x00000000,
+    0x002b0025, 0x00009705, 0xc433f000, 0x00000000,
+    0x002f002b, 0xe438f000, 0x00000000, 0x00000033,
+    0xe431f000, 0x00000000, 0x00340032, 0xc433f000,
+    0x00000000, 0x00230031, 0xe438f000, 0x00000000,
+    0x00000036, 0xc4351000, 0x00000000, 0x001b002b,
+    0xe438f000, 0x00000000, 0x00000038, 0x24345000,
+    0x00000000, 0x00160024, 0x00000001, 0x000000e8,
+    0x00000000, 0x00000001, 0x00000000, 0x00000002,
+    0xc4005354, 0x00000090, 0x00000400, 0xc43ae000,
+    0x00000000, 0x003c0026, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000003d, 0x0000003b, 0x00000026, 0x0000003e,
+    0x24327000, 0x00000000, 0x0017002b, 0x00000001,
+    0x00000104, 0x00000000, 0x00000001, 0x00000000,
+    0x00000018, 0x00003405, 0xc4225000, 0x00000000,
+    0x00000041, 0xc4351000, 0x00000000, 0x001c0044,
+    0xc4322000, 0x00000000, 0x0014001e, 0xc434e000,
+    0x00000000, 0x00450046, 0xa83b8000, 0x00000000,
+    0x0000001f, 0xc438e000, 0x00000000, 0x00000048,
+    0x00021605, 0xc4351000, 0x00000000, 0x004a0049,
+    0xc4287000, 0x00000000, 0x00170047, 0xc434e000,
+    0x00000000, 0x004b004c, 0x903bb000, 0x00000000,
+    0x0000004d, 0x84322000, 0x00000000, 0x0043004e,
+    0x24345000, 0x00000000, 0x0018004f, 0xe4226000,
+    0x00000000, 0x00000050, 0x84322100, 0x00000000,
+    0x0043004e, 0x24345000, 0x00000000, 0x00180052,
+    0xe4226000, 0x00000000, 0x00000053, 0xe4351000,
+    0x00000000, 0x001c0054, 0xe434e000, 0x00000000,
+    0x00550051, 0xc43bd000, 0x00000000, 0x00000056,
+    0x02800e05, 0xc434e000, 0x00000000, 0x00580057,
+    0x00006894, 0x00000164, 0x00000080, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x243a6000, 0x00000000, 0x00400031,
+    0x00000001, 0x00000170, 0x00000000, 0x00000003,
+    0x00000000, 0x0000000a, 0xc4322000, 0x00000000,
+    0x001a0027, 0x24327000, 0x00000000, 0x0017005e,
+    0x00003405, 0xc4322000, 0x00000000, 0x002c0027,
+    0x00081605, 0xc4322000, 0x00000000, 0x001c0027,
+    0x24345000, 0x00000000, 0x00170063, 0xc4322000,
+    0x00000000, 0x002e0027, 0x24345000, 0x00000000,
+    0x00170065, 0xc4288000, 0x00000000, 0x001a0027,
+    0x00000001, 0x0000017c, 0x00000000, 0x00000003,
+    0x00000000, 0x00000004, 0x00011705, 0xc43ac000,
+    0x00000000, 0x00630065, 0x24345000, 0x00000000,
+    0x0017006a, 0xe431f000, 0x00000000, 0x00350020,
+    0x00000001, 0x000001ac, 0x00000000, 0x00000005,
+    0x00000000, 0x0000000d, 0xc47cc000, 0x00000000,
+    0x001b0063, 0x00000000, 0x002c0065, 0xc431f020,
+    0x00000000, 0x006f006e, 0xc4351000, 0x00000000,
+    0x002c0070, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00710072, 0x00019705, 0x00021705, 0x00021605,
+    0x78080e05, 0xc434e000, 0x00000000, 0x00730077,
+    0x00006894, 0x000001e0, 0x000001b0, 0x00040001,
+    0xe431f000, 0x00000000, 0x0032006c, 0x00000001,
+    0x00000190, 0x00000000, 0x00000001, 0x00000000,
+    0x0000004c, 0xc431f000, 0x00000000, 0x001a0030,
+    0xe471f000, 0x00000000, 0x00690037, 0x00000000,
+    0x007c0021, 0x24327000, 0x00000000, 0x0016007d,
+    0xc4225000, 0x00000000, 0x0000007e, 0xc4322000,
+    0x00000000, 0x00190013, 0xc434e000, 0x00000000,
+    0x007f0080, 0x00201605, 0xc4322000, 0x00000000,
+    0x001d0081, 0xc434e000, 0x00000000, 0x00820083,
+    0xa83b8000, 0x00000000, 0x00000012, 0xc438e000,
+    0x00000000, 0x00000085, 0xc4351000, 0x00000000,
+    0x00760086, 0xc4287000, 0x00000000, 0x00170084,
+    0xc434e000, 0x00000000, 0x00870088, 0xc4322000,
+    0x00000000, 0x00190011, 0xc434e000, 0x00000000,
+    0x001a008a, 0x0001b605, 0x84390100, 0x00000000,
+    0x00000085, 0x00003505, 0xa4288100, 0x00000000,
+    0x008e0085, 0x84390000, 0x00000000, 0x0000008f,
+    0xc438e000, 0x00000000, 0x0000008d, 0xc4351000,
+    0x00000000, 0x001c0091, 0xc4322000, 0x00000000,
+    0x001d008b, 0xc434e000, 0x00000000, 0x00920093,
+    0xc438e000, 0x00000000, 0x00000090, 0xc4351000,
+    0x00000000, 0x00760095, 0x00000605, 0xff00ffff,
+    0xc4322000, 0x00000000, 0x00970094, 0xc434e000,
+    0x00000000, 0x00960098, 0x903bb000, 0x00000000,
+    0x00000010, 0xc438e000, 0x00000000, 0x0000009a,
+    0x00031605, 0xc4351000, 0x00000000, 0x009c009b,
+    0x00000605, 0x00ffffff, 0xc4322000, 0x00000000,
+    0x009e0099, 0xc434e000, 0x00000000, 0x009d009f,
+    0x00029705, 0xc83bc000, 0x00000000, 0x0000007d,
+    0x903bb000, 0x00000000, 0x00000089, 0x84322000,
+    0x00000000, 0x006000a3, 0x24345000, 0x00000000,
+    0x001800a4, 0xe4226000, 0x00000000, 0x000000a5,
+    0xe4351000, 0x00000000, 0x008c00a6, 0x84322100,
+    0x00000000, 0x006000a3, 0x24345000, 0x00000000,
+    0x001800a8, 0xe4226000, 0x00000000, 0x000000a9,
+    0x0001d605, 0xe4351000, 0x00000000, 0x00ab00aa,
+    0xe434e000, 0x00000000, 0x00ac00a7, 0xe438f000,
+    0x00000000, 0x00000067, 0xe4351000, 0x00000000,
+    0x007600ae, 0xe434e000, 0x00000000, 0x00af00ad,
+    0x903bb000, 0x00000000, 0x000000a0, 0x84322000,
+    0x00000000, 0x006000b1, 0x24345000, 0x00000000,
+    0x001800b2, 0xe4226000, 0x00000000, 0x000000b3,
+    0x00033605, 0xe4351000, 0x00000000, 0x00b500b4,
+    0xe434e000, 0x00000000, 0x00b600b0, 0xe438f000,
+    0x00000000, 0x00000030, 0x00035605, 0xe4351000,
+    0x00000000, 0x00b900b8, 0xe434e000, 0x00000000,
+    0x00ba00b7, 0xc438e000, 0x00000000, 0x000000bb,
+    0x00006894, 0x000002f0, 0x000001e4, 0x00040001,
+    0xc438e000, 0x00000000, 0x0000007d, 0xe431f000,
+    0x00000000, 0x0069006c, 0x00006894, 0x000002f4,
+    0x000002f8, 0x00040001, 0xc435a100, 0x00000000,
+    0x000000a2, 0xe431f000, 0x00000000, 0x0074006c,
+    0x00006894, 0x000002fc, 0x00000300, 0x00040001,
+    0xe431f000, 0x00000000, 0x0075006c, 0x00006894,
+    0x00000070, 0x00000304, 0x00040001, 0xe431f000,
+    0x00000000, 0x00a1006c, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000007b, 0x0000007a, 0x00000030, 0x000000c3,
+    0xe4000028, 0x000000c2, 0x0000007a, 0x00000079,
+    0x000000c3, 0x00000001, 0x00000198, 0x00000000,
+    0x00000001, 0x00000000, 0x0000004d, 0xe431f000,
+    0x00000000, 0x00390022, 0x00006894, 0x000000c4,
+    0x00000320, 0x00040001, 0xc4349000, 0x00000000,
+    0x0000005e, 0xe431f000, 0x00000000, 0x003200c8,
+    0x00006894, 0x00000324, 0x00000328, 0x00040001,
+    0x24327000, 0x00000000, 0x001600c8, 0xc4225000,
+    0x00000000, 0x000000cb, 0xc4322000, 0x00000000,
+    0x0019000f, 0xc434e000, 0x00000000, 0x00cc00cd,
+    0x00201605, 0xc4322000, 0x00000000, 0x001d00ce,
+    0xc434e000, 0x00000000, 0x00cf00d0, 0xa83b8000,
+    0x00000000, 0x00000012, 0xc438e000, 0x00000000,
+    0x000000d2, 0xc4351000, 0x00000000, 0x007600d3,
+    0xc4287000, 0x00000000, 0x001700d1, 0xc434e000,
+    0x00000000, 0x00d400d5, 0xc4322000, 0x00000000,
+    0x0019000e, 0xc434e000, 0x00000000, 0x001a00d7,
+    0x0001b605, 0x84390100, 0x00000000, 0x000000d2,
+    0x00003505, 0xa4288100, 0x00000000, 0x00db00d2,
+    0x84390000, 0x00000000, 0x000000dc, 0xc438e000,
+    0x00000000, 0x000000da, 0xc4351000, 0x00000000,
+    0x001c00de, 0xc4322000, 0x00000000, 0x001d00d8,
+    0xc434e000, 0x00000000, 0x00df00e0, 0xc438e000,
+    0x00000000, 0x000000dd, 0xc4351000, 0x00000000,
+    0x007600e2, 0x00000605, 0xff00ffff, 0xc4322000,
+    0x00000000, 0x00e400e1, 0xc434e000, 0x00000000,
+    0x00e300e5, 0x903bb000, 0x00000000, 0x00000010,
+    0xc438e000, 0x00000000, 0x000000e7, 0x00031605,
+    0xc4351000, 0x00000000, 0x00e900e8, 0x00000605,
+    0x00ffffff, 0xc4322000, 0x00000000, 0x00eb00e6,
+    0xc434e000, 0x00000000, 0x00ea00ec, 0xc83bc000,
+    0x00000000, 0x000000c8, 0x903bb000, 0x00000000,
+    0x000000d6, 0x84322000, 0x00000000, 0x006000ef,
+    0x24345000, 0x00000000, 0x001800f0, 0xe4226000,
+    0x00000000, 0x000000f1, 0xe4351000, 0x00000000,
+    0x00d900f2, 0x84322100, 0x00000000, 0x006000ef,
+    0x24345000, 0x00000000, 0x001800f4, 0xe4226000,
+    0x00000000, 0x000000f5, 0x0001d605, 0xe4351000,
+    0x00000000, 0x00f700f6, 0xe434e000, 0x00000000,
+    0x00f800f3, 0xe438f000, 0x00000000, 0x00000067,
+    0xe4351000, 0x00000000, 0x007600fa, 0xe434e000,
+    0x00000000, 0x00fb00f9, 0x903bb000, 0x00000000,
+    0x000000ed, 0x84322000, 0x00000000, 0x006000fd,
+    0x24345000, 0x00000000, 0x001800fe, 0xe4226000,
+    0x00000000, 0x000000ff, 0x00033605, 0xe4351000,
+    0x00000000, 0x01010100, 0xe434e000, 0x00000000,
+    0x010200fc, 0xe438f000, 0x00000000, 0x000000c5,
+    0x00035605, 0xe4351000, 0x00000000, 0x01050104,
+    0xe434e000, 0x00000000, 0x01060103, 0xc438e000,
+    0x00000000, 0x00000107, 0x00006894, 0x00000420,
+    0x00000318, 0x00040001, 0xc438e000, 0x00000000,
+    0x000000c8, 0xe431f000, 0x00000000, 0x003200c6,
+    0x00006894, 0x00000424, 0x00000428, 0x00040001,
+    0xc435a100, 0x00000000, 0x000000ee, 0xe431f000,
+    0x00000000, 0x006900c6, 0x00006894, 0x0000042c,
+    0x00000430, 0x00040001, 0xe431f000, 0x00000000,
+    0x007400c6, 0x00006894, 0x00000070, 0x00000434,
+    0x00040001, 0xe431f000, 0x00000000, 0x007500c6,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0xe4000028, 0x0000010e, 0x000000c7,
+    0x000000c6, 0x0000010f, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000062, 0xe4000028,
+    0x00000111, 0x00000110, 0x0000006c, 0x00000112,
+    0xe431f000, 0x00000000, 0x00370021, 0xd0005354,
+    0x00000454, 0x00000400, 0xc435a000, 0x00000000,
+    0x00000116, 0xc435a200, 0x00000000, 0x00000116,
+    0xc435a100, 0x00000000, 0x00000116, 0x00019705,
+    0xc435a300, 0x00000000, 0x00000116, 0xc43cc000,
+    0x00000000, 0x001a0061, 0xc4322000, 0x00000000,
+    0x0019000d, 0xc434e000, 0x00000000, 0x011c011d,
+    0xc4322000, 0x00000000, 0x001d011e, 0x0000d605,
+    0x00021605, 0x00000605, 0xff00ffff, 0x903bb000,
+    0x00000000, 0x0000000c, 0xc438e000, 0x00000000,
+    0x00000123, 0x00031605, 0xc4351000, 0x00000000,
+    0x01250124, 0x00000605, 0x00ffffff, 0xc4287000,
+    0x00000000, 0x0017011f, 0xc434e000, 0x00000000,
+    0x01260128, 0xc4322000, 0x00000000, 0x00620027,
+    0xc43cc000, 0x00000000, 0x0120012a, 0x00021705,
+    0x00029705, 0x00031705, 0xa438d100, 0x00000000,
+    0x00000123, 0xa438d200, 0x00000000, 0x00000123,
+    0xa4351000, 0x00000000, 0x001c0130, 0xa434e000,
+    0x00000000, 0x0131012f, 0x84390000, 0x00000000,
+    0x00000132, 0x00003505, 0xa4288000, 0x00000000,
+    0x01340132, 0x84390000, 0x00000000, 0x00000135,
+    0xc438e000, 0x00000000, 0x00000133, 0xc4351000,
+    0x00000000, 0x001c0137, 0xc4322000, 0x00000000,
+    0x000b001e, 0xc434e000, 0x00000000, 0x01380139,
+    0xc438e000, 0x00000000, 0x00000136, 0xc4351000,
+    0x00000000, 0x0121013b, 0xc4322000, 0x00000000,
+    0x0122013a, 0xc434e000, 0x00000000, 0x013c013d,
+    0xc438e300, 0x00000000, 0x00000123, 0xc4351000,
+    0x00000000, 0x0125013f, 0xc4322000, 0x00000000,
+    0x0127013e, 0xc434e000, 0x00000000, 0x01400141,
+    0x903bb000, 0x00000000, 0x00000129, 0x84322000,
+    0x00000000, 0x00600143, 0x24345000, 0x00000000,
+    0x00180144, 0xe4226000, 0x00000000, 0x00000145,
+    0xe4351000, 0x00000000, 0x001c0146, 0xc43bd000,
+    0x00000000, 0x00000147, 0x0000b605, 0xc434e000,
+    0x00000000, 0x01490148, 0xc43be000, 0x00000000,
+    0x00000147, 0xe4369000, 0x00000000, 0x014b014a,
+    0x84322100, 0x00000000, 0x00600143, 0x24345000,
+    0x00000000, 0x0018014d, 0xe4226000, 0x00000000,
+    0x0000014e, 0x00013605, 0xe4351000, 0x00000000,
+    0x0150014f, 0xe434e000, 0x00000000, 0x0151014c,
+    0x84322200, 0x00000000, 0x00600143, 0x24345000,
+    0x00000000, 0x00180153, 0xe4226000, 0x00000000,
+    0x00000154, 0x00015605, 0xe4351000, 0x00000000,
+    0x01560155, 0xe434e000, 0x00000000, 0x01570152,
+    0xe438f000, 0x00000000, 0x0000012b, 0x0001b605,
+    0xe4351000, 0x00000000, 0x015a0159, 0xe434e000,
+    0x00000000, 0x015b0158, 0xc43bd000, 0x00000000,
+    0x0000015c, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x015d015e, 0x00006894, 0x0000057c, 0x00000450,
+    0x00040001, 0xe438f000, 0x00000000, 0x0000005e,
+    0xe4351000, 0x00000000, 0x001c0160, 0x903bb000,
+    0x00000000, 0x00000142, 0x84322000, 0x00000000,
+    0x00600162, 0x24345000, 0x00000000, 0x00180163,
+    0xe4226000, 0x00000000, 0x00000164, 0xe4351000,
+    0x00000000, 0x01500165, 0xe434e000, 0x00000000,
+    0x01660161, 0xc438e000, 0x00000000, 0x00000167,
+    0xe431f000, 0x00000000, 0x00320114, 0x00006894,
+    0x000005a0, 0x000005a4, 0x00040001, 0xe431f000,
+    0x00000000, 0x00690114, 0x00006894, 0x0000045c,
+    0x000005a8, 0x00040001, 0xe431f000, 0x00000000,
+    0x011a0114, 0x00006894, 0x00000460, 0x000005ac,
+    0x00040001, 0xe431f000, 0x00000000, 0x012c0114,
+    0x00006894, 0x00000464, 0x000005b0, 0x00040001,
+    0xe431f000, 0x00000000, 0x012d0114, 0x00006894,
+    0x0000046c, 0x000005b4, 0x00040001, 0xe431f000,
+    0x00000000, 0x012e0114, 0x00006894, 0x0000005c,
+    0x000005b8, 0x00040001, 0x00000003, 0x00000000,
+    0x00000004, 0x00019705, 0xc43ac000, 0x00000000,
+    0x00630065, 0x24345000, 0x00000000, 0x00170171,
+    0xe431f000, 0x00000000, 0x00350020, 0x00000001,
+    0x000005c8, 0x00000000, 0x00000005, 0x00000000,
+    0x0000000d, 0xc47cc000, 0x00000000, 0x001b0063,
+    0x00000000, 0x002c0065, 0xc431f020, 0x00000000,
+    0x01760175, 0xc4351000, 0x00000000, 0x002c0177,
+    0xfffff605, 0xc431f000, 0x00000000, 0x01780179,
+    0x00011705, 0x00021705, 0x00021605, 0x78080e05,
+    0xc434e000, 0x00000000, 0x017a017e, 0x00006894,
+    0x000005fc, 0x000005cc, 0x00040001, 0xe431f000,
+    0x00000000, 0x00320173, 0x00000001, 0x00000190,
+    0x00000000, 0x00000001, 0x00000000, 0x0000004c,
+    0xc431f000, 0x00000000, 0x001a0030, 0xe471f000,
+    0x00000000, 0x01700037, 0x00000000, 0x01830021,
+    0x24327000, 0x00000000, 0x00160184, 0xc4225000,
+    0x00000000, 0x00000185, 0xc4322000, 0x00000000,
+    0x0019000a, 0xc434e000, 0x00000000, 0x01860187,
+    0x00201605, 0xc4322000, 0x00000000, 0x001d0188,
+    0xc434e000, 0x00000000, 0x0189018a, 0xa83b8000,
+    0x00000000, 0x00000012, 0xc438e000, 0x00000000,
+    0x0000018c, 0xc4351000, 0x00000000, 0x017d018d,
+    0xc4287000, 0x00000000, 0x0017018b, 0xc434e000,
+    0x00000000, 0x018e018f, 0xc4322000, 0x00000000,
+    0x00190009, 0xc434e000, 0x00000000, 0x001a0191,
+    0x0001b605, 0x84390100, 0x00000000, 0x0000018c,
+    0x00003505, 0xa4288100, 0x00000000, 0x0195018c,
+    0x84390000, 0x00000000, 0x00000196, 0xc438e000,
+    0x00000000, 0x00000194, 0xc4351000, 0x00000000,
+    0x001c0198, 0xc4322000, 0x00000000, 0x001d0192,
+    0xc434e000, 0x00000000, 0x0199019a, 0xc438e000,
+    0x00000000, 0x00000197, 0xc4351000, 0x00000000,
+    0x017d019c, 0x00000605, 0xff00ffff, 0xc4322000,
+    0x00000000, 0x019e019b, 0xc434e000, 0x00000000,
+    0x019d019f, 0x903bb000, 0x00000000, 0x00000010,
+    0xc438e000, 0x00000000, 0x000001a1, 0x00031605,
+    0xc4351000, 0x00000000, 0x01a301a2, 0x00000605,
+    0x00ffffff, 0xc4322000, 0x00000000, 0x01a501a0,
+    0xc434e000, 0x00000000, 0x01a401a6, 0x00029705,
+    0xc83bc000, 0x00000000, 0x00000184, 0x903bb000,
+    0x00000000, 0x00000190, 0x84322000, 0x00000000,
+    0x006001aa, 0x24345000, 0x00000000, 0x001801ab,
+    0xe4226000, 0x00000000, 0x000001ac, 0xe4351000,
+    0x00000000, 0x019301ad, 0x84322100, 0x00000000,
+    0x006001aa, 0x24345000, 0x00000000, 0x001801af,
+    0xe4226000, 0x00000000, 0x000001b0, 0x0001d605,
+    0xe4351000, 0x00000000, 0x01b201b1, 0xe434e000,
+    0x00000000, 0x01b301ae, 0xe438f000, 0x00000000,
+    0x00000067, 0xe4351000, 0x00000000, 0x017d01b5,
+    0xe434e000, 0x00000000, 0x01b601b4, 0x903bb000,
+    0x00000000, 0x000001a7, 0x84322000, 0x00000000,
+    0x006001b8, 0x24345000, 0x00000000, 0x001801b9,
+    0xe4226000, 0x00000000, 0x000001ba, 0x00033605,
+    0xe4351000, 0x00000000, 0x01bc01bb, 0xe434e000,
+    0x00000000, 0x01bd01b7, 0xe438f000, 0x00000000,
+    0x00000030, 0x00035605, 0xe4351000, 0x00000000,
+    0x01c001bf, 0xe434e000, 0x00000000, 0x01c101be,
+    0xc438e000, 0x00000000, 0x000001c2, 0x00006894,
+    0x0000070c, 0x00000600, 0x00040001, 0xc438e000,
+    0x00000000, 0x00000184, 0xe431f000, 0x00000000,
+    0x017b0173, 0x00006894, 0x00000710, 0x00000714,
+    0x00040001, 0xc435a100, 0x00000000, 0x000001a9,
+    0xe431f000, 0x00000000, 0x01700173, 0x00006894,
+    0x00000718, 0x0000071c, 0x00040001, 0xe431f000,
+    0x00000000, 0x017c0173, 0x00006894, 0x00000070,
+    0x00000720, 0x00040001, 0xe431f000, 0x00000000,
+    0x01a80173, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0xc4000028, 0x00000182,
+    0x00000181, 0x00000030, 0x000001ca, 0xe4000028,
+    0x000001c9, 0x00000181, 0x00000180, 0x000001ca,
+    0x00000001, 0x00000198, 0x00000000, 0x00000001,
+    0x00000000, 0x0000004d, 0xe431f000, 0x00000000,
+    0x00390022, 0x00006894, 0x000000c4, 0x0000073c,
+    0x00040001, 0xc4349000, 0x00000000, 0x0000005e,
+    0xe431f000, 0x00000000, 0x003201cf, 0x00006894,
+    0x00000740, 0x00000744, 0x00040001, 0x24327000,
+    0x00000000, 0x001601cf, 0xc4225000, 0x00000000,
+    0x000001d2, 0xc4322000, 0x00000000, 0x00190008,
+    0xc434e000, 0x00000000, 0x01d301d4, 0x00201605,
+    0xc4322000, 0x00000000, 0x001d01d5, 0xc434e000,
+    0x00000000, 0x01d601d7, 0xa83b8000, 0x00000000,
+    0x00000012, 0xc438e000, 0x00000000, 0x000001d9,
+    0xc4351000, 0x00000000, 0x017d01da, 0xc4287000,
+    0x00000000, 0x001701d8, 0xc434e000, 0x00000000,
+    0x01db01dc, 0xc4322000, 0x00000000, 0x00190007,
+    0xc434e000, 0x00000000, 0x001a01de, 0x0001b605,
+    0x84390100, 0x00000000, 0x000001d9, 0x00003505,
+    0xa4288100, 0x00000000, 0x01e201d9, 0x84390000,
+    0x00000000, 0x000001e3, 0xc438e000, 0x00000000,
+    0x000001e1, 0xc4351000, 0x00000000, 0x001c01e5,
+    0xc4322000, 0x00000000, 0x001d01df, 0xc434e000,
+    0x00000000, 0x01e601e7, 0xc438e000, 0x00000000,
+    0x000001e4, 0xc4351000, 0x00000000, 0x017d01e9,
+    0x00000605, 0xff00ffff, 0xc4322000, 0x00000000,
+    0x01eb01e8, 0xc434e000, 0x00000000, 0x01ea01ec,
+    0x903bb000, 0x00000000, 0x00000010, 0xc438e000,
+    0x00000000, 0x000001ee, 0x00031605, 0xc4351000,
+    0x00000000, 0x01f001ef, 0x00000605, 0x00ffffff,
+    0xc4322000, 0x00000000, 0x01f201ed, 0xc434e000,
+    0x00000000, 0x01f101f3, 0xc83bc000, 0x00000000,
+    0x000001cf, 0x903bb000, 0x00000000, 0x000001dd,
+    0x84322000, 0x00000000, 0x006001f6, 0x24345000,
+    0x00000000, 0x001801f7, 0xe4226000, 0x00000000,
+    0x000001f8, 0xe4351000, 0x00000000, 0x01e001f9,
+    0x84322100, 0x00000000, 0x006001f6, 0x24345000,
+    0x00000000, 0x001801fb, 0xe4226000, 0x00000000,
+    0x000001fc, 0x0001d605, 0xe4351000, 0x00000000,
+    0x01fe01fd, 0xe434e000, 0x00000000, 0x01ff01fa,
+    0xe438f000, 0x00000000, 0x00000067, 0xe4351000,
+    0x00000000, 0x017d0201, 0xe434e000, 0x00000000,
+    0x02020200, 0x903bb000, 0x00000000, 0x000001f4,
+    0x84322000, 0x00000000, 0x00600204, 0x24345000,
+    0x00000000, 0x00180205, 0xe4226000, 0x00000000,
+    0x00000206, 0x00033605, 0xe4351000, 0x00000000,
+    0x02080207, 0xe434e000, 0x00000000, 0x02090203,
+    0xe438f000, 0x00000000, 0x000001cc, 0x00035605,
+    0xe4351000, 0x00000000, 0x020c020b, 0xe434e000,
+    0x00000000, 0x020d020a, 0xc438e000, 0x00000000,
+    0x0000020e, 0x00006894, 0x0000083c, 0x00000734,
+    0x00040001, 0xc438e000, 0x00000000, 0x000001cf,
+    0xe431f000, 0x00000000, 0x003201cd, 0x00006894,
+    0x00000840, 0x00000844, 0x00040001, 0xc435a100,
+    0x00000000, 0x000001f5, 0xe431f000, 0x00000000,
+    0x017b01cd, 0x00006894, 0x00000848, 0x0000084c,
+    0x00040001, 0xe431f000, 0x00000000, 0x017001cd,
+    0x00006894, 0x00000070, 0x00000850, 0x00040001,
+    0xe431f000, 0x00000000, 0x017c01cd, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x00000215, 0x000001ce, 0x000001cd,
+    0x00000216, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000064, 0xe4000028, 0x00000218,
+    0x00000217, 0x00000173, 0x00000219, 0xe431f000,
+    0x00000000, 0x00370021, 0xd0005354, 0x00000870,
+    0x00000400, 0x00021705, 0xe431f000, 0x00000000,
+    0x021e021c, 0xc4005354, 0x0000087c, 0x00000400,
+    0x00021605, 0xc435a000, 0x00000000, 0x0000021d,
+    0x00011705, 0xc435a200, 0x00000000, 0x0000021d,
+    0xc435a100, 0x00000000, 0x0000021d, 0xc435a300,
+    0x00000000, 0x0000021d, 0xc43cc000, 0x00000000,
+    0x001a0061, 0xc4322000, 0x00000000, 0x00190006,
+    0xc434e000, 0x00000000, 0x02270228, 0xc4322000,
+    0x00000000, 0x001d0229, 0x0000d605, 0x00000605,
+    0xff00ffff, 0x903bb000, 0x00000000, 0x0000000c,
+    0xc438e000, 0x00000000, 0x0000022d, 0x00031605,
+    0xc4351000, 0x00000000, 0x022f022e, 0x00000605,
+    0x00ffffff, 0xc4287000, 0x00000000, 0x0017022a,
+    0xc434e000, 0x00000000, 0x02300232, 0xc4322000,
+    0x00000000, 0x00620027, 0xc43cc000, 0x00000000,
+    0x022b0234, 0x00029705, 0x00031705, 0xa438d100,
+    0x00000000, 0x0000022d, 0xa438d200, 0x00000000,
+    0x0000022d, 0xa4351000, 0x00000000, 0x001c0239,
+    0xa434e000, 0x00000000, 0x023a0238, 0x84390000,
+    0x00000000, 0x0000023b, 0x00003505, 0xa4288000,
+    0x00000000, 0x023d023b, 0x84390000, 0x00000000,
+    0x0000023e, 0xc438e000, 0x00000000, 0x0000023c,
+    0xc4351000, 0x00000000, 0x001c0240, 0xc4322000,
+    0x00000000, 0x0005001e, 0xc434e000, 0x00000000,
+    0x02410242, 0xc438e000, 0x00000000, 0x0000023f,
+    0xc4351000, 0x00000000, 0x02210244, 0xc4322000,
+    0x00000000, 0x022c0243, 0xc434e000, 0x00000000,
+    0x02450246, 0xc438e300, 0x00000000, 0x0000022d,
+    0xc4351000, 0x00000000, 0x022f0248, 0xc4322000,
+    0x00000000, 0x02310247, 0xc434e000, 0x00000000,
+    0x0249024a, 0x903bb000, 0x00000000, 0x00000233,
+    0x84322000, 0x00000000, 0x0060024c, 0x24345000,
+    0x00000000, 0x0018024d, 0xe4226000, 0x00000000,
+    0x0000024e, 0xe4351000, 0x00000000, 0x001c024f,
+    0xc43bd000, 0x00000000, 0x00000250, 0x0000b605,
+    0xc434e000, 0x00000000, 0x02520251, 0xc43be000,
+    0x00000000, 0x00000250, 0xe4369000, 0x00000000,
+    0x02540253, 0x84322100, 0x00000000, 0x0060024c,
+    0x24345000, 0x00000000, 0x00180256, 0xe4226000,
+    0x00000000, 0x00000257, 0x00013605, 0xe4351000,
+    0x00000000, 0x02590258, 0xe434e000, 0x00000000,
+    0x025a0255, 0x84322200, 0x00000000, 0x0060024c,
+    0x24345000, 0x00000000, 0x0018025c, 0xe4226000,
+    0x00000000, 0x0000025d, 0x00015605, 0xe4351000,
+    0x00000000, 0x025f025e, 0xe434e000, 0x00000000,
+    0x0260025b, 0xe438f000, 0x00000000, 0x00000235,
+    0x0001b605, 0xe4351000, 0x00000000, 0x02630262,
+    0xe434e000, 0x00000000, 0x02640261, 0xc43bd000,
+    0x00000000, 0x00000265, 0x7b000e05, 0xc434e000,
+    0x00000000, 0x02660267, 0x00006894, 0x000009a0,
+    0x0000086c, 0x00040001, 0xe438f000, 0x00000000,
+    0x0000005e, 0xe4351000, 0x00000000, 0x001c0269,
+    0x903bb000, 0x00000000, 0x0000024b, 0x84322000,
+    0x00000000, 0x0060026b, 0x24345000, 0x00000000,
+    0x0018026c, 0xe4226000, 0x00000000, 0x0000026d,
+    0xe4351000, 0x00000000, 0x0259026e, 0xe434e000,
+    0x00000000, 0x026f026a, 0xc438e000, 0x00000000,
+    0x00000270, 0xe431f000, 0x00000000, 0x0032021b,
+    0x00006894, 0x000009c4, 0x000009c8, 0x00040001,
+    0xe431f000, 0x00000000, 0x0223021b, 0x00006894,
+    0x00000888, 0x000009cc, 0x00040001, 0xe431f000,
+    0x00000000, 0x0170021b, 0x00006894, 0x00000890,
+    0x000009d0, 0x00040001, 0xe431f000, 0x00000000,
+    0x021e021b, 0x00006894, 0x00000894, 0x000009d4,
+    0x00040001, 0xe431f000, 0x00000000, 0x0236021b,
+    0x00006894, 0x00000880, 0x000009d8, 0x00040001,
+    0xe431f000, 0x00000000, 0x0237021b, 0x00006894,
+    0x00000898, 0x000009dc, 0x00040001, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x24327000, 0x00000000,
+    0x00170040, 0xfffff605, 0xc431f000, 0x00000000,
+    0x027c0040, 0xc4273000, 0x00000000, 0x0017027b,
+    0x0000027d, 0xe438f000, 0x00000000, 0x0000002f,
+    0xe431f000, 0x00000000, 0x027f0035, 0xe4273000,
+    0x00000000, 0x0035027b, 0x00000280, 0xe431f000,
+    0x00000000, 0x02810020, 0x24345000, 0x00000000,
+    0x027e0031, 0x00000001, 0x00000a0c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000002, 0xc431f000,
+    0x00000000, 0x027c0028, 0x24327000, 0x00000000,
+    0x0285002b, 0x00000001, 0x00000a18, 0x00000000,
+    0x00000001, 0x00000000, 0x00000024, 0x00011705,
+    0xc4322000, 0x00000000, 0x0004001e, 0x00015605,
+    0xa83b8000, 0x00000000, 0x00000003, 0xc438e000,
+    0x00000000, 0x0000028b, 0x00021605, 0xc4351000,
+    0x00000000, 0x028d028c, 0xc4287000, 0x00000000,
+    0x00170289, 0xc434e000, 0x00000000, 0x028e028f,
+    0x903bb000, 0x00000000, 0x00000290, 0x00003405,
+    0x84322000, 0x00000000, 0x02920291, 0x24345000,
+    0x00000000, 0x00180293, 0xe4226000, 0x00000000,
+    0x00000294, 0xe4351000, 0x00000000, 0x028a0295,
+    0xc43bd000, 0x00000000, 0x00000296, 0x00203605,
+    0xc434e000, 0x00000000, 0x02980297, 0xc43be000,
+    0x00000000, 0x00000296, 0xe4369000, 0x00000000,
+    0x029a0299, 0x84322100, 0x00000000, 0x02920291,
+    0x24345000, 0x00000000, 0x0018029c, 0xe4226000,
+    0x00000000, 0x0000029d, 0x0001f605, 0xe4351000,
+    0x00000000, 0x029f029e, 0xe434e000, 0x00000000,
+    0x02a0029b, 0xc43bd000, 0x00000000, 0x000002a1,
+    0x18800e05, 0xc434e000, 0x00000000, 0x02a302a2,
+    0x00006894, 0x00000a90, 0x00000a08, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000029, 0xe431f000,
+    0x00000000, 0x00320282, 0x00006894, 0x00000a94,
+    0x00000a98, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000029, 0xe431f000, 0x00000000, 0x02880282,
+    0x00006894, 0x00000a9c, 0x00000aa0, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000024,
+    0x00011705, 0xc4322000, 0x00000000, 0x0002001e,
+    0x00015605, 0xa83b8000, 0x00000000, 0x00000003,
+    0xc438e000, 0x00000000, 0x000002af, 0x00021605,
+    0xc4351000, 0x00000000, 0x02b102b0, 0xc4287000,
+    0x00000000, 0x001702ad, 0xc434e000, 0x00000000,
+    0x02b202b3, 0x903bb000, 0x00000000, 0x000002b4,
+    0x00003405, 0x84322000, 0x00000000, 0x02b602b5,
+    0x24345000, 0x00000000, 0x001802b7, 0xe4226000,
+    0x00000000, 0x000002b8, 0xe4351000, 0x00000000,
+    0x02ae02b9, 0xc43bd000, 0x00000000, 0x000002ba,
+    0x00203605, 0xc434e000, 0x00000000, 0x02bc02bb,
+    0xc43be000, 0x00000000, 0x000002ba, 0xe4369000,
+    0x00000000, 0x02be02bd, 0x84322100, 0x00000000,
+    0x02b602b5, 0x24345000, 0x00000000, 0x001802c0,
+    0xe4226000, 0x00000000, 0x000002c1, 0x0001f605,
+    0xe4351000, 0x00000000, 0x02c302c2, 0xe434e000,
+    0x00000000, 0x02c402bf, 0xc43bd000, 0x00000000,
+    0x000002c5, 0x18800e05, 0xc434e000, 0x00000000,
+    0x02c702c6, 0x00006894, 0x00000b20, 0x00000a08,
+    0x00040001, 0xc438e000, 0x00000000, 0x0000002a,
+    0xe431f000, 0x00000000, 0x00320282, 0x00006894,
+    0x00000b24, 0x00000b28, 0x00040001, 0xc43be000,
+    0x00000000, 0x0000002a, 0xe431f000, 0x00000000,
+    0x02ac0282, 0x00006894, 0x00000b2c, 0x00000b30,
+    0x00040001, 0x00000000, 0x00000000,
+};
+   nir_def *args[12] = { dst_base, indirect_base, draw_id_base, indirect_stride, indirect_draw_count, draw_base, max_draw_count, flags, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx30_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx30_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx)
+{
+   /*
+    block b0:   // preds:
+    64     %0 = @load_param (param_idx=0)
+    32     %1 = @load_param (param_idx=1)
+    64     %2 = @load_param (param_idx=2)
+    32     %3 = @load_param (param_idx=3)
+    32     %4 = @load_param (param_idx=4)
+    32     %5 = @load_param (param_idx=6)
+    32     %6 = @load_param (param_idx=7)
+    32     %7 = @load_param (param_idx=8)
+    32     %8 = @load_param (param_idx=9)
+    1      %9 = ult %8, %4
+                // succs: b1 b19
+    if %9 {
+        block b1:   // preds: b0
+        32    %10 = load_const (0x00000001)
+        32    %11 = iand %7, %10 (0x1)
+        32    %12 = load_const (0x00000000)
+        1     %13 = ine %11, %12 (0x0)
+        32    %14 = load_const (0x00000002)
+        32    %15 = iand %7, %14 (0x2)
+        1     %16 = ine %15, %12 (0x0)
+        32    %17 = load_const (0x00000004)
+        32    %18 = iand %7, %17 (0x4)
+        1     %19 = ieq %18, %12 (0x0)
+        32    %20 = load_const (0x00000008)
+        32    %21 = iand %7, %20 (0x8)
+        1     %22 = ine %21, %12 (0x0)
+        32    %23 = iadd %3, %8
+        32    %24 = imul %23, %5
+        64    %25 = u2u64 %24
+        32    %26 = imul %8, %1
+        64    %27 = u2u64 %26
+        64    %28 = iadd %2, %25
+        32    %29 = @load_global (%28) (access=none, align_mul=4, align_offset=0)
+        64    %30 = u2u64 %29
+                    // succs: b2 b6
+        if %16 {
+            block b2:   // preds: b1
+            1     %31 = inot %13
+                        // succs: b3 b4
+            if %31 {
+                block b3:   // preds: b2
+                64    %32 = u2u64 %6
+                64    %33 = iadd %0, %27
+                64    %34 = ishl %32, %14 (0x2)
+                64    %35 = iadd %33, %34
+                            @store_global (%29, %35) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b5
+            } else {
+                block b4:   // preds: b2
+                64    %36 = u2u64 %6
+                64    %37 = iadd %0, %27
+                32    %38 = load_const (0x00000003)
+                64    %39 = ishl %36, %38 (0x3)
+                64    %40 = iadd %37, %39
+                            @store_global (%30, %40) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b5
+            }
+            block b5:  // preds: b3 b4, succs: b7
+        } else {
+            block b6:  // preds: b1, succs: b7
+        }
+        block b7:  // preds: b5 b6, succs: b8
+        loop {
+            block b8:   // preds: b7 b17
+            32    %41 = phi b7: %12 (0x0), b17: %75
+            1     %42 = uge %41, %6
+                        // succs: b9 b10
+            if %42 {
+                block b9:// preds: b8
+                break
+                // succs: b18
+            } else {
+                block b10:  // preds: b8, succs: b11
+            }
+            block b11:  // preds: b10
+            32    %43 = ishl %41, %10 (0x1)
+            32    %44 = iadd %10 (0x1), %43
+                        // succs: b12 b13
+            if %19 {
+                block b12:  // preds: b11
+                64    %45 = u2u64 %44
+                32    %46 = load_const (0x00000003)
+                64    %47 = ishl %45, %46 (0x3)
+                64    %48 = iadd %28, %47
+                64    %49 = @load_global (%48) (access=none, align_mul=8, align_offset=0)
+                            // succs: b14
+            } else {
+                block b13:  // preds: b11
+                64    %50 = u2u64 %44
+                32    %51 = load_const (0x00000003)
+                64    %52 = ishl %50, %51 (0x3)
+                64    %53 = iadd %28, %52
+                32x4  %54 = @load_global (%53) (access=none, align_mul=8, align_offset=0)
+                64    %55 = pack_64_2x32 %54.zw
+                64    %56 = pack_64_2x32 %54.xy
+                64    %57 = ineg %56
+                64    %58 = iadd %55, %57
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13
+            64    %59 = phi b12: %49, b13: %58
+            64    %60 = load_const (0x0000000000000000)
+            1     %61 = ieq %29, %12 (0x0)
+            1     %62 = iand %22, %61
+            64    %63 = bcsel %62, %60 (0x0), %59
+            1     %64 = inot %13
+                        // succs: b15 b16
+            if %64 {
+                block b15:  // preds: b14
+                32    %65 = u2u32 %63
+                64    %66 = u2u64 %41
+                64    %67 = iadd %0, %27
+                64    %68 = ishl %66, %14 (0x2)
+                64    %69 = iadd %67, %68
+                            @store_global (%65, %69) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b17
+            } else {
+                block b16:  // preds: b14
+                64    %70 = u2u64 %41
+                64    %71 = iadd %0, %27
+                32    %72 = load_const (0x00000003)
+                64    %73 = ishl %70, %72 (0x3)
+                64    %74 = iadd %71, %73
+                            @store_global (%63, %74) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b17
+            }
+            block b17:  // preds: b15 b16
+            32    %75 = iadd %41, %10 (0x1)
+                        // succs: b8
+        }
+        block b18:  // preds: b9, succs: b20
+    } else {
+        block b19:  // preds: b0, succs: b20
+    }
+    block b20:  // preds: b18 b19, succs: b21
+    block b21:
+   */
+   static const uint32_t impl_0_nir[336] = {
+    0x00000062, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000a, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000a, 0xe4001744,
+    0xc4011744, 0xe4021744, 0xc4031744, 0xc4041744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0x243a6000, 0x00000000, 0x0006000a, 0x00000001,
+    0x0000002c, 0x00000000, 0x00000005, 0x00000000,
+    0x00000015, 0x00003605, 0xc4322000, 0x00000000,
+    0x000d0009, 0x00000e05, 0x24345000, 0x00000000,
+    0x000f000e, 0x00005605, 0xc4322000, 0x00000000,
+    0x00110009, 0x24345000, 0x00000000, 0x000f0012,
+    0x00009605, 0xc4322000, 0x00000000, 0x00140009,
+    0x24327000, 0x00000000, 0x000f0015, 0x00011605,
+    0xc4322000, 0x00000000, 0x00170009, 0x24345000,
+    0x00000000, 0x000f0018, 0xc431f000, 0x00000000,
+    0x000a0005, 0xc433f000, 0x00000000, 0x0007001a,
+    0xe438f000, 0x00000000, 0x0000001b, 0xc433f000,
+    0x00000000, 0x0003000a, 0xe438f000, 0x00000000,
+    0x0000001d, 0xe431f000, 0x00000000, 0x001c0004,
+    0xc4005354, 0x0000007c, 0x00000400, 0xe438f000,
+    0x00000000, 0x00000020, 0x00000001, 0x0000004c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000001,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x0000008c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001e0002, 0xe4351000,
+    0x00000000, 0x00110025, 0xe431f000, 0x00000000,
+    0x00270026, 0x00006894, 0x00000080, 0x000000a0,
+    0x00040001, 0x00000001, 0x00000000, 0x00000006,
+    0xe438f000, 0x00000000, 0x00000008, 0xe431f000,
+    0x00000000, 0x001e0002, 0x00007605, 0xe4351000,
+    0x00000000, 0x002c002a, 0xe431f000, 0x00000000,
+    0x002d002b, 0x00006894, 0x00000084, 0x000000b8,
+    0x00080001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0x00000000, 0x00000007, 0x00000000,
+    0x00000002, 0xc4000028, 0x0000000f, 0x00000031,
+    0x0000005e, 0x0000005d, 0x243a0000, 0x00000000,
+    0x00080033, 0x00000001, 0x000000d0, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0xc4351000, 0x00000000, 0x000d0033,
+    0xc431f000, 0x00000000, 0x0038000d, 0x00000001,
+    0x00000058, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x003c003b,
+    0xe431f000, 0x00000000, 0x003d001f, 0xe4005354,
+    0x000000f8, 0x00000800, 0x00000001, 0x00000000,
+    0x00000009, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x00420041,
+    0xe431f000, 0x00000000, 0x0043001f, 0xd0005354,
+    0x00000110, 0x00000800, 0xe4168000, 0x00000000,
+    0x5e000114, 0xe4368000, 0x00000000, 0x00000045,
+    0xe4349000, 0x00000000, 0x00000047, 0xe431f000,
+    0x00000000, 0x00480046, 0x00000000, 0x00000006,
+    0xe4000028, 0x0000003f, 0x0000003a, 0x00000049,
+    0x00000040, 0x00000f05, 0x24327000, 0x00000000,
+    0x000f0020, 0x24322000, 0x00000000, 0x004d0019,
+    0xe4273000, 0x00000000, 0x004c004e, 0x0000004b,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x00000140, 0x00000000, 0x00000001, 0x00000000,
+    0x00000006, 0xc438e000, 0x00000000, 0x0000004f,
+    0xe438f000, 0x00000000, 0x00000033, 0xe431f000,
+    0x00000000, 0x001e0002, 0xe4351000, 0x00000000,
+    0x00110053, 0xe431f000, 0x00000000, 0x00550054,
+    0x00006894, 0x00000148, 0x00000158, 0x00040001,
+    0x00000001, 0x00000000, 0x00000006, 0xe438f000,
+    0x00000000, 0x00000033, 0xe431f000, 0x00000000,
+    0x001e0002, 0x00007605, 0xe4351000, 0x00000000,
+    0x005a0058, 0xe431f000, 0x00000000, 0x005b0059,
+    0x00006894, 0x0000013c, 0x00000170, 0x00080001,
+    0x00000000, 0x00000001, 0xc431f000, 0x00000000,
+    0x000d0033, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+   nir_def *args[10] = { destination_base, destination_stride, query_data, first_query, num_queries, query_data_offset, query_stride, num_query_items, copy_flags, copy_item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx30_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx30_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = @load_param (param_idx=3)
+    32     %5 = load_const (0x00000004)
+    32     %6 = load_const (0x00000002)
+    32     %7 = ishl %4, %6 (0x2)
+    64     %8 = u2u64 %7
+    32     %9 = iadd %4, %5 (0x4)
+    1     %10 = ult %3, %9
+                // succs: b1 b11
+    if %10 {
+        block b1:   // preds: b0
+        32    %11 = load_const (0x00000003)
+        32    %12 = iadd %4, %11 (0x3)
+        1     %13 = ult %3, %12
+                    // succs: b2 b9
+        if %13 {
+            block b2:   // preds: b1
+            32    %14 = iadd %4, %6 (0x2)
+            1     %15 = ult %3, %14
+                        // succs: b3 b7
+            if %15 {
+                block b3:   // preds: b2
+                32    %16 = load_const (0x00000001)
+                32    %17 = iadd %4, %16 (0x1)
+                1     %18 = uge %3, %17
+                            // succs: b4 b5
+                if %18 {
+                    block b4:   // preds: b3
+                    64    %19 = iadd %2, %8
+                    32    %20 = @load_global (%19) (access=none, align_mul=4, align_offset=0)
+                    64    %21 = iadd %1, %8
+                                @store_global (%20, %21) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                // succs: b6
+                } else {
+                    block b5:  // preds: b3, succs: b6
+                }
+                block b6:  // preds: b4 b5, succs: b8
+            } else {
+                block b7:   // preds: b2
+                64    %22 = iadd %2, %8
+                32x2  %23 = @load_global (%22) (access=none, align_mul=8, align_offset=0)
+                64    %24 = iadd %1, %8
+                            @store_global (%23, %24) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                            // succs: b8
+            }
+            block b8:  // preds: b6 b7, succs: b10
+        } else {
+            block b9:   // preds: b1
+            64    %25 = iadd %2, %8
+            32x4  %26 = @load_global (%25) (access=none, align_mul=16, align_offset=0)
+            32x4  %27 = vec4 %26.x, %26.y, %26.z, %0
+            64    %28 = iadd %1, %8
+                        @store_global (%27, %28) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                        // succs: b10
+        }
+        block b10:  // preds: b8 b9, succs: b12
+    } else {
+        block b11:  // preds: b0
+        64    %29 = iadd %2, %8
+        32x4  %30 = @load_global (%29) (access=none, align_mul=16, align_offset=0)
+        64    %31 = iadd %1, %8
+                    @store_global (%30, %31) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                    // succs: b12
+    }
+    block b12:  // preds: b10 b11, succs: b13
+    block b13:
+   */
+   static const uint32_t impl_0_nir[168] = {
+    0x0000002e, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000004, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000b, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0xc4031744,
+    0x00009605, 0x00005605, 0xc4351000, 0x00000000,
+    0x00080006, 0xe438f000, 0x00000000, 0x00000009,
+    0xc431f000, 0x00000000, 0x00070006, 0x243a6000,
+    0x00000000, 0x000b0005, 0x00000001, 0x00000030,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00007605, 0xc431f000, 0x00000000, 0x000e0006,
+    0x243a6000, 0x00000000, 0x000f0005, 0x00000001,
+    0x00000040, 0x00000000, 0x00000003, 0x00000000,
+    0x00000002, 0xc431f000, 0x00000000, 0x00080006,
+    0x243a6000, 0x00000000, 0x00120005, 0x00000001,
+    0x0000004c, 0x00000000, 0x00000003, 0x00000000,
+    0x00000003, 0x00003605, 0xc431f000, 0x00000000,
+    0x00150006, 0x243a0000, 0x00000000, 0x00160005,
+    0x00000001, 0x0000005c, 0x00000000, 0x00000001,
+    0x00000000, 0x00000004, 0xe431f000, 0x00000000,
+    0x000a0004, 0xc4005354, 0x00000064, 0x00000400,
+    0xe431f000, 0x00000000, 0x000a0003, 0x00006894,
+    0x00000068, 0x0000006c, 0x00040001, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x00000004, 0xe431f000,
+    0x00000000, 0x000a0004, 0xc8005354, 0x0000007c,
+    0x00000800, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000080, 0x00000084, 0x00080003,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x00000090, 0x00001000, 0xd01d3000,
+    0x00000000, 0xe4000094, 0xe5000094, 0xe6000094,
+    0xe4000008, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000098, 0x0000009c, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000004, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x000000a8, 0x00001000, 0xe431f000,
+    0x00000000, 0x000a0003, 0x00006894, 0x000000ac,
+    0x000000b0, 0x0010000f, 0x00000000, 0x00000000,
+};
+   nir_def *args[4] = { dst_base, src_base, num_dwords, dword_offset };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx30_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+void
+gfx30_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = load_const (0x00000000)
+                // succs: b1
+    loop {
+        block b1:   // preds: b0 b16
+        32     %5 = phi b0: %4 (0x0), b16: %8
+        1      %6 = uge %5, %3
+                    // succs: b2 b3
+        if %6 {
+            block b2:// preds: b1
+            break
+            // succs: b17
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:   // preds: b3
+        32     %7 = load_const (0x00000010 = 16)
+        32     %8 = iadd %5, %7 (0x10)
+        1      %9 = ult %3, %8
+                    // succs: b5 b15
+        if %9 {
+            block b5:   // preds: b4
+            32    %10 = load_const (0x0000000c = 12)
+            32    %11 = iadd %5, %10 (0xc)
+            1     %12 = ult %3, %11
+                        // succs: b6 b13
+            if %12 {
+                block b6:   // preds: b5
+                32    %13 = load_const (0x00000008)
+                32    %14 = iadd %5, %13 (0x8)
+                1     %15 = ult %3, %14
+                            // succs: b7 b11
+                if %15 {
+                    block b7:   // preds: b6
+                    32    %16 = load_const (0x00000004)
+                    32    %17 = iadd %5, %16 (0x4)
+                    1     %18 = uge %3, %17
+                                // succs: b8 b9
+                    if %18 {
+                        block b8:   // preds: b7
+                        64    %19 = u2u64 %5
+                        64    %20 = iadd %2, %19
+                        32    %21 = @load_global (%20) (access=none, align_mul=4, align_offset=0)
+                        64    %22 = iadd %1, %19
+                                    @store_global (%21, %22) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                    // succs: b10
+                    } else {
+                        block b9:  // preds: b7, succs: b10
+                    }
+                    block b10:  // preds: b8 b9, succs: b12
+                } else {
+                    block b11:  // preds: b6
+                    64    %23 = u2u64 %5
+                    64    %24 = iadd %2, %23
+                    32x2  %25 = @load_global (%24) (access=none, align_mul=8, align_offset=0)
+                    64    %26 = iadd %1, %23
+                                @store_global (%25, %26) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                                // succs: b12
+                }
+                block b12:  // preds: b10 b11, succs: b14
+            } else {
+                block b13:  // preds: b5
+                64    %27 = u2u64 %5
+                64    %28 = iadd %2, %27
+                32x4  %29 = @load_global (%28) (access=none, align_mul=16, align_offset=0)
+                64    %30 = iadd %1, %27
+                32x4  %31 = vec4 %29.x, %29.y, %29.z, %0
+                            @store_global (%31, %30) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13, succs: b16
+        } else {
+            block b15:  // preds: b4
+            64    %32 = u2u64 %5
+            64    %33 = iadd %2, %32
+            32x4  %34 = @load_global (%33) (access=none, align_mul=16, align_offset=0)
+            64    %35 = iadd %1, %32
+                        @store_global (%34, %35) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                        // succs: b16
+        }
+        block b16:  // preds: b14 b15, succs: b1
+    }
+    block b17:  // preds: b2, succs: b18
+    block b18:
+   */
+   static const uint32_t impl_0_nir[197] = {
+    0x00000037, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000003, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x00000005, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0x00000e05,
+    0x00000002, 0x00000000, 0x00000005, 0x00000000,
+    0x00000002, 0xc4000028, 0x00000006, 0x00000001,
+    0x0000000e, 0x00000035, 0x243a0000, 0x00000000,
+    0x00050008, 0x00000001, 0x00000024, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000003, 0x00021605, 0xc431f000, 0x00000000,
+    0x000d0008, 0x243a6000, 0x00000000, 0x000e0005,
+    0x00000001, 0x0000003c, 0x00000000, 0x00000003,
+    0x00000000, 0x00000003, 0x00019605, 0xc431f000,
+    0x00000000, 0x00110008, 0x243a6000, 0x00000000,
+    0x00120005, 0x00000001, 0x0000004c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000003, 0x00011605,
+    0xc431f000, 0x00000000, 0x00150008, 0x243a6000,
+    0x00000000, 0x00160005, 0x00000001, 0x0000005c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00009605, 0xc431f000, 0x00000000, 0x00190008,
+    0x243a0000, 0x00000000, 0x001a0005, 0x00000001,
+    0x0000006c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001d0004, 0xc4005354,
+    0x00000078, 0x00000400, 0xe431f000, 0x00000000,
+    0x001d0003, 0x00006894, 0x0000007c, 0x00000080,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00240004, 0xc8005354,
+    0x00000094, 0x00000800, 0xe431f000, 0x00000000,
+    0x00240003, 0x00006894, 0x00000098, 0x0000009c,
+    0x00080003, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000006, 0xe438f000, 0x00000000,
+    0x00000008, 0xe431f000, 0x00000000, 0x002a0004,
+    0xd0005354, 0x000000ac, 0x00001000, 0xe431f000,
+    0x00000000, 0x002a0003, 0xd01d3000, 0x00000000,
+    0xe40000b0, 0xe50000b0, 0xe60000b0, 0xe4000008,
+    0x00006894, 0x000000b8, 0x000000b4, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00310004, 0xd0005354,
+    0x000000c8, 0x00001000, 0xe431f000, 0x00000000,
+    0x00310003, 0x00006894, 0x000000cc, 0x000000d0,
+    0x0010000f, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[3] = { dst_ptr, src_ptr, size };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
+struct vtn_bindgen_dummy {
+   vtn_bindgen_dummy() {
+      /* Format strings:
+       *
+       */
+const uint32_t printf_0_blob[1] = {
+    0x00000000,
+};
+      u_printf_singleton_init_or_ref();
+      u_printf_singleton_add_serialized((const void*)printf_0_blob, sizeof(printf_0_blob));
+   }
+
+   ~vtn_bindgen_dummy() {
+      u_printf_singleton_decref();
+   }
+};
+
+static vtn_bindgen_dummy vtn_bindgen_dummy_instance;
diff --git a/src/intel/shaders/intel_gfx300_shaders_binding.h b/src/intel/shaders/intel_gfx300_shaders_binding.h
new file mode 100644
index 00000000000..988fca8f5de
--- /dev/null
+++ b/src/intel/shaders/intel_gfx300_shaders_binding.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#pragma once
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx30_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx30_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx30_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx30_write_3DPRIMITIVE_EXTENDED(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location, nir_def *param_base_vertex, nir_def *param_base_instance, nir_def *param_draw_id);
+
+void
+gfx30_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx30_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx30_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx30_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx30_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx30_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx30_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
diff --git a/src/intel/shaders/intel_gfx80_shaders_binding.cpp b/src/intel/shaders/intel_gfx80_shaders_binding.cpp
new file mode 100644
index 00000000000..ac0a2a4ec6b
--- /dev/null
+++ b/src/intel/shaders/intel_gfx80_shaders_binding.cpp
@@ -0,0 +1,3743 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx8_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx8_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count)
+{
+   /*
+    block b0:  // preds:
+    64    %0 = @load_param (param_idx=0)
+    32    %1 = @load_param (param_idx=1)
+    32    %2 = load_const (0x00000002)
+    32    %3 = ishl %1, %2 (0x2)
+    32    %4 = load_const (0xffffffff = -1 = 4294967295)
+    32    %5 = iadd %4 (0xffffffff), %3
+    32    %6 = load_const (0x78080000 = 2013790208)
+    32    %7 = ior %6 (0x78080000), %5
+               @store_global (%7, %0) (wrmask=x, access=none, align_mul=4, align_offset=0)
+               // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[37] = {
+    0x0000000a, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000009, 0xe4001744,
+    0xc4011744, 0x00005605, 0xc4351000, 0x00000000,
+    0x00040003, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00050006, 0x78080e05, 0xc434e000, 0x00000000,
+    0x00070008, 0x00006894, 0x00000024, 0x00000008,
+    0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, buffer_count };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx8_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx8_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    64     %2 = @load_param (param_idx=0)
+    32     %3 = @load_param (param_idx=1)
+    32     %4 = @load_param (param_idx=2)
+    64     %5 = @load_param (param_idx=3)
+    32     %6 = @load_param (param_idx=4)
+    32     %7 = @load_param (param_idx=5)
+    64     %8 = load_const (0x0000000000000004)
+    64     %9 = load_const (0x0000000000000000)
+    1     %10 = ieq %5, %9 (0x0)
+    8     %11 = load_const (0x00)
+    8     %12 = load_const (0x01)
+    32    %13 = load_const (0x00000000)
+    32    %14 = b2i32 %10
+    32    %15 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %16 = iand %1, %15 (0xffffff00)
+    32    %17 = ior %16, %14
+    32    %18 = load_const (0x00000100 = 256)
+    32    %19 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %20 = iand %17, %19 (0xffff00ff)
+    32    %21 = ior %20, %18 (0x100)
+    16x2  %22 = unpack_32_2x16 %0
+    32    %23 = u2u32 %22.x
+    32    %24 = load_const (0x00000010 = 16)
+    32    %25 = ishl %23, %24 (0x10)
+    32    %26 = extract_u16 %21, %13 (0x0)
+    32    %27 = ior %26, %25
+    64    %28 = load_const (0x0000000000000008)
+    64    %29 = load_const (0x000000000000000c = 12)
+    32x2  %30 = unpack_64_2x32 %5
+    64    %31 = u2u64 %7
+    8x4   %32 = unpack_32_4x8 %27
+    8     %33 = iand %32.x, %12 (0x1)
+    1     %34 = ine %33, %11 (0x0)
+    64    %35 = b2i64 %34
+    32    %36 = load_const (0x0000000d = 13)
+    64    %37 = ishl %35, %36 (0xd)
+    64    %38 = ior %31, %37
+    8     %39 = iand %32.y, %12 (0x1)
+    1     %40 = ine %39, %11 (0x0)
+    64    %41 = b2i64 %40
+    32    %42 = load_const (0x0000000e = 14)
+    64    %43 = ishl %41, %42 (0xe)
+    64    %44 = ior %38, %43
+    64    %45 = u2u64 %3
+    64    %46 = ishl %45, %24 (0x10)
+    64    %47 = ior %44, %46
+    64    %48 = u2u64 %4
+    32    %49 = load_const (0x0000001a = 26)
+    64    %50 = ishl %48, %49 (0x1a)
+    64    %51 = ior %47, %50
+    32    %52 = u2u32 %51
+                @store_global (%52, %2) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %53 = u2u32 %5
+    64    %54 = iadd %2, %8 (0x4)
+                @store_global (%53, %54) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %55 = mov %30.y
+    64    %56 = iadd %2, %28 (0x8)
+                @store_global (%55, %56) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %57 = iadd %2, %29 (0xc)
+                @store_global (%6, %57) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[181] = {
+    0x0000003c, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000006, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000003e, 0x00000607,
+    0x00000607, 0xe4001744, 0xc4011744, 0xc4021744,
+    0xe4031744, 0xc4041744, 0xc4051744, 0x00009705,
+    0x00000f05, 0x24327000, 0x00000000, 0x000b0007,
+    0x00001405, 0x00003405, 0x00000e05, 0xc4225000,
+    0x00000000, 0x0000000c, 0xffe01605, 0xc4322000,
+    0x00000000, 0x00110003, 0xc434e000, 0x00000000,
+    0x00100012, 0x00201605, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00150013, 0xc434e000, 0x00000000,
+    0x00140016, 0xa83b8000, 0x00000000, 0x00000002,
+    0xc438e000, 0x00000000, 0x00000018, 0x00021605,
+    0xc4351000, 0x00000000, 0x001a0019, 0xc4287000,
+    0x00000000, 0x000f0017, 0xc434e000, 0x00000000,
+    0x001b001c, 0x00011705, 0x00019705, 0xc83bc000,
+    0x00000000, 0x00000007, 0xe438f000, 0x00000000,
+    0x00000009, 0x903bb000, 0x00000000, 0x0000001d,
+    0x84322000, 0x00000000, 0x000e0022, 0x24345000,
+    0x00000000, 0x000d0023, 0xe4226000, 0x00000000,
+    0x00000024, 0x0001b605, 0xe4351000, 0x00000000,
+    0x00260025, 0xe434e000, 0x00000000, 0x00270021,
+    0x84322100, 0x00000000, 0x000e0022, 0x24345000,
+    0x00000000, 0x000d0029, 0xe4226000, 0x00000000,
+    0x0000002a, 0x0001d605, 0xe4351000, 0x00000000,
+    0x002c002b, 0xe434e000, 0x00000000, 0x002d0028,
+    0xe438f000, 0x00000000, 0x00000005, 0xe4351000,
+    0x00000000, 0x001a002f, 0xe434e000, 0x00000000,
+    0x0030002e, 0xe438f000, 0x00000000, 0x00000006,
+    0x00035605, 0xe4351000, 0x00000000, 0x00330032,
+    0xe434e000, 0x00000000, 0x00340031, 0xc438e000,
+    0x00000000, 0x00000035, 0x00006894, 0x000000d8,
+    0x00000010, 0x00040001, 0xc438e000, 0x00000000,
+    0x00000007, 0xe431f000, 0x00000000, 0x000a0004,
+    0x00006894, 0x000000dc, 0x000000e0, 0x00040001,
+    0xc435a100, 0x00000000, 0x00000020, 0xe431f000,
+    0x00000000, 0x001e0004, 0x00006894, 0x000000e4,
+    0x000000e8, 0x00040001, 0xe431f000, 0x00000000,
+    0x001f0004, 0x00006894, 0x00000020, 0x000000ec,
+    0x00040001,
+};
+   nir_def *args[6] = { dst_ptr, mocs, buffer_idx, address, size, stride };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx8_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx8_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    32     %2 = undefined
+    64     %3 = @load_param (param_idx=0)
+    1      %4 = @load_param (param_idx=1)
+    1      %5 = @load_param (param_idx=2)
+    32     %6 = @load_param (param_idx=4)
+    32     %7 = @load_param (param_idx=5)
+    32     %8 = @load_param (param_idx=6)
+    32     %9 = @load_param (param_idx=7)
+    32    %10 = @load_param (param_idx=8)
+    8     %11 = load_const (0x00)
+    8     %12 = load_const (0x01)
+    64    %13 = load_const (0x0000000000000004)
+    32    %14 = b2i32 %4
+    32    %15 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %16 = iand %2, %15 (0xffffff00)
+    32    %17 = ior %16, %14
+    32    %18 = load_const (0x00000008)
+    32    %19 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %20 = iand %17, %19 (0xffff00ff)
+    32    %21 = load_const (0x00000010 = 16)
+    32    %22 = load_const (0xff00ffff = -16711681 = 4278255615)
+    8x4   %23 = unpack_32_4x8 %1
+    32    %24 = u2u32 %23.x
+    32    %25 = load_const (0x00000018 = 24)
+    32    %26 = ishl %24, %25 (0x18)
+    32    %27 = load_const (0x00ffffff = 16777215)
+    32    %28 = load_const (0x00000000)
+    32    %29 = extract_u16 %20, %28 (0x0)
+    32    %30 = ior %29, %26
+    64    %31 = load_const (0x0000000000000008)
+    64    %32 = load_const (0x000000000000000c = 12)
+    64    %33 = load_const (0x0000000000000010 = 16)
+    64    %34 = load_const (0x0000000000000014 = 20)
+    64    %35 = load_const (0x0000000000000018 = 24)
+    16    %36 = u2u16 %23.y
+    16    %37 = u2u16 %23.z
+    16    %38 = ishl %37, %18 (0x8)
+    16    %39 = ior %36, %38
+    8     %40 = u2u8 %39
+    16    %41 = load_const (0x0001)
+    16    %42 = extract_u8 %39, %41 (0x1)
+    8     %43 = u2u8 %42
+    32    %44 = u2u32 %40
+    32    %45 = ishl %44, %18 (0x8)
+    32    %46 = load_const (0xffff0000 = -65536 = 4294901760)
+    32    %47 = iand %46 (0xffff0000), %0
+    32    %48 = ior %47, %45
+    32    %49 = u2u32 %43
+    32    %50 = ishl %49, %21 (0x10)
+    32    %51 = iand %48, %22 (0xff00ffff)
+    32    %52 = ior %51, %50
+    32    %53 = u2u32 %23.w
+    32    %54 = ishl %53, %25 (0x18)
+    32    %55 = iand %52, %27 (0xffffff)
+    32    %56 = ior %55, %54
+    8x4   %57 = unpack_32_4x8 %30
+    8     %58 = iand %57.x, %12 (0x1)
+    1     %59 = ine %58, %11 (0x0)
+    64    %60 = b2i64 %59
+    64    %61 = ishl %60, %18 (0x8)
+    32    %62 = unpack_64_2x32_split_x %61
+    32    %63 = load_const (0x00000005)
+    32    %64 = ior %62, %63 (0x5)
+    32    %65 = unpack_64_2x32_split_y %61
+    64    %66 = pack_64_2x32_split %64, %65
+    8     %67 = iand %57.y, %12 (0x1)
+    1     %68 = ine %67, %11 (0x0)
+    64    %69 = b2i64 %68
+    32    %70 = load_const (0x00000009)
+    64    %71 = ishl %69, %70 (0x9)
+    64    %72 = ior %66, %71
+    8     %73 = iand %57.z, %12 (0x1)
+    1     %74 = ine %73, %11 (0x0)
+    64    %75 = b2i64 %74
+    32    %76 = load_const (0x0000000a = 10)
+    64    %77 = ishl %75, %76 (0xa)
+    64    %78 = ior %72, %77
+    32    %79 = unpack_64_2x32_split_x %78
+    32    %80 = load_const (0x7b000000 = 2063597568)
+    32    %81 = ior %80 (0x7b000000), %79
+                @store_global (%81, %3) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %82 = b2i64 %5
+    64    %83 = ishl %82, %18 (0x8)
+    8x4   %84 = unpack_32_4x8 %56
+    8     %85 = iand %84.x, %12 (0x1)
+    1     %86 = ine %85, %11 (0x0)
+    64    %87 = b2i64 %86
+    64    %88 = ishl %87, %70 (0x9)
+    64    %89 = ior %83, %88
+    32    %90 = u2u32 %89
+    64    %91 = iadd %3, %13 (0x4)
+                @store_global (%90, %91) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %92 = iadd %3, %31 (0x8)
+                @store_global (%6, %92) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %93 = iadd %3, %32 (0xc)
+                @store_global (%7, %93) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %94 = iadd %3, %33 (0x10)
+                @store_global (%8, %94) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %95 = iadd %3, %34 (0x14)
+                @store_global (%9, %95) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %96 = iadd %3, %35 (0x18)
+                @store_global (%10, %96) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[302] = {
+    0x00000063, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000068, 0x00000607,
+    0x00000607, 0x00000607, 0xe4001744, 0x24011744,
+    0x24021744, 0xc4041744, 0xc4051744, 0xc4061744,
+    0xc4071744, 0xc4081744, 0x00001405, 0x00003405,
+    0x00009705, 0xc4225000, 0x00000000, 0x00000006,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00110004,
+    0xc434e000, 0x00000000, 0x00100012, 0x00011605,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00150013,
+    0x00021605, 0x00000605, 0xff00ffff, 0x903bb000,
+    0x00000000, 0x00000003, 0xc438e000, 0x00000000,
+    0x00000019, 0x00031605, 0xc4351000, 0x00000000,
+    0x001b001a, 0x00000605, 0x00ffffff, 0x00000e05,
+    0xc4287000, 0x00000000, 0x001e0016, 0xc434e000,
+    0x00000000, 0x001c001f, 0x00011705, 0x00019705,
+    0x00021705, 0x00029705, 0x00031705, 0xa438d100,
+    0x00000000, 0x00000019, 0xa438d200, 0x00000000,
+    0x00000019, 0xa4351000, 0x00000000, 0x00140027,
+    0xa434e000, 0x00000000, 0x00280026, 0x84390000,
+    0x00000000, 0x00000029, 0x00003505, 0xa4288000,
+    0x00000000, 0x002b0029, 0x84390000, 0x00000000,
+    0x0000002c, 0xc438e000, 0x00000000, 0x0000002a,
+    0xc4351000, 0x00000000, 0x0014002e, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x00020030, 0xc434e000,
+    0x00000000, 0x002f0031, 0xc438e000, 0x00000000,
+    0x0000002d, 0xc4351000, 0x00000000, 0x00170033,
+    0xc4322000, 0x00000000, 0x00180032, 0xc434e000,
+    0x00000000, 0x00340035, 0xc438e300, 0x00000000,
+    0x00000019, 0xc4351000, 0x00000000, 0x001b0037,
+    0xc4322000, 0x00000000, 0x001d0036, 0xc434e000,
+    0x00000000, 0x00380039, 0x903bb000, 0x00000000,
+    0x00000020, 0x84322000, 0x00000000, 0x000e003b,
+    0x24345000, 0x00000000, 0x000d003c, 0xe4226000,
+    0x00000000, 0x0000003d, 0xe4351000, 0x00000000,
+    0x0014003e, 0xc43bd000, 0x00000000, 0x0000003f,
+    0x0000b605, 0xc434e000, 0x00000000, 0x00410040,
+    0xc43be000, 0x00000000, 0x0000003f, 0xe4369000,
+    0x00000000, 0x00430042, 0x84322100, 0x00000000,
+    0x000e003b, 0x24345000, 0x00000000, 0x000d0045,
+    0xe4226000, 0x00000000, 0x00000046, 0x00013605,
+    0xe4351000, 0x00000000, 0x00480047, 0xe434e000,
+    0x00000000, 0x00490044, 0x84322200, 0x00000000,
+    0x000e003b, 0x24345000, 0x00000000, 0x000d004b,
+    0xe4226000, 0x00000000, 0x0000004c, 0x00015605,
+    0xe4351000, 0x00000000, 0x004e004d, 0xe434e000,
+    0x00000000, 0x004f004a, 0xc43bd000, 0x00000000,
+    0x00000050, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00510052, 0x00006894, 0x0000014c, 0x00000014,
+    0x00040001, 0xe4226000, 0x00000000, 0x00000007,
+    0xe4351000, 0x00000000, 0x00140054, 0x903bb000,
+    0x00000000, 0x0000003a, 0x84322000, 0x00000000,
+    0x000e0056, 0x24345000, 0x00000000, 0x000d0057,
+    0xe4226000, 0x00000000, 0x00000058, 0xe4351000,
+    0x00000000, 0x00480059, 0xe434e000, 0x00000000,
+    0x005a0055, 0xc438e000, 0x00000000, 0x0000005b,
+    0xe431f000, 0x00000000, 0x000f0005, 0x00006894,
+    0x00000170, 0x00000174, 0x00040001, 0xe431f000,
+    0x00000000, 0x00210005, 0x00006894, 0x00000020,
+    0x00000178, 0x00040001, 0xe431f000, 0x00000000,
+    0x00220005, 0x00006894, 0x00000024, 0x0000017c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230005,
+    0x00006894, 0x00000028, 0x00000180, 0x00040001,
+    0xe431f000, 0x00000000, 0x00240005, 0x00006894,
+    0x0000002c, 0x00000184, 0x00040001, 0xe431f000,
+    0x00000000, 0x00250005, 0x00006894, 0x00000030,
+    0x00000188, 0x00040001,
+};
+   nir_def *args[9] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx8_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx8_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    64     %2 = @load_param (param_idx=0)
+    64     %3 = @load_param (param_idx=1)
+    64     %4 = load_const (0x0000000000000004)
+    64     %5 = load_const (0x0000000000000008)
+    8      %6 = load_const (0x00)
+    32     %7 = load_const (0x00000000)
+    32     %8 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %9 = iand %8 (0xffff0000), %1
+    32    %10 = load_const (0x0000000a = 10)
+    32    %11 = load_const (0x00000010 = 16)
+    8x4   %12 = unpack_32_4x8 %0
+    32    %13 = u2u32 %12.x
+    32    %14 = load_const (0x00000018 = 24)
+    32    %15 = ishl %13, %14 (0x18)
+    32    %16 = extract_u16 %9, %7 (0x0)
+    32    %17 = ior %16, %15
+    8x4   %18 = unpack_32_4x8 %17
+    8     %19 = load_const (0x01)
+    8     %20 = iand %18.x, %19 (0x1)
+    1     %21 = ine %20, %6 (0x0)
+    64    %22 = b2i64 %21
+    64    %23 = ishl %22, %10 (0xa)
+    32    %24 = unpack_64_2x32_split_x %23
+    32    %25 = load_const (0x00000101 = 257)
+    32    %26 = ior %24, %25 (0x101)
+    32    %27 = unpack_64_2x32_split_y %23
+    64    %28 = pack_64_2x32_split %26, %27
+    8     %29 = iand %18.y, %19 (0x1)
+    1     %30 = ine %29, %6 (0x0)
+    64    %31 = b2i64 %30
+    32    %32 = load_const (0x0000000f = 15)
+    64    %33 = ishl %31, %32 (0xf)
+    64    %34 = ior %28, %33
+    8     %35 = iand %18.z, %19 (0x1)
+    1     %36 = ine %35, %6 (0x0)
+    64    %37 = b2i64 %36
+    64    %38 = ishl %37, %11 (0x10)
+    64    %39 = ior %34, %38
+    32    %40 = unpack_64_2x32_split_x %39
+    32    %41 = load_const (0x18800000 = 411041792)
+    32    %42 = ior %40, %41 (0x18800000)
+                @store_global (%42, %2) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %43 = unpack_64_2x32_split_x %3
+    32    %44 = unpack_64_2x32_split_y %3
+    32    %45 = extract_u16 %44, %7 (0x0)
+    64    %46 = iadd %2, %4 (0x4)
+                @store_global (%43, %46) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %47 = iadd %2, %5 (0x8)
+                @store_global (%45, %47) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[143] = {
+    0x00000032, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000033, 0x00000607,
+    0x00000607, 0xe4001744, 0xe4011744, 0x00009705,
+    0x00011705, 0x00001405, 0x00000e05, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x0003000a, 0x00015605,
+    0x00021605, 0x903bb000, 0x00000000, 0x00000002,
+    0xc438e000, 0x00000000, 0x0000000e, 0x00031605,
+    0xc4351000, 0x00000000, 0x0010000f, 0xc4287000,
+    0x00000000, 0x0009000b, 0xc434e000, 0x00000000,
+    0x00110012, 0x903bb000, 0x00000000, 0x00000013,
+    0x00003405, 0x84322000, 0x00000000, 0x00150014,
+    0x24345000, 0x00000000, 0x00080016, 0xe4226000,
+    0x00000000, 0x00000017, 0xe4351000, 0x00000000,
+    0x000c0018, 0xc43bd000, 0x00000000, 0x00000019,
+    0x00203605, 0xc434e000, 0x00000000, 0x001b001a,
+    0xc43be000, 0x00000000, 0x00000019, 0xe4369000,
+    0x00000000, 0x001d001c, 0x84322100, 0x00000000,
+    0x00150014, 0x24345000, 0x00000000, 0x0008001f,
+    0xe4226000, 0x00000000, 0x00000020, 0x0001f605,
+    0xe4351000, 0x00000000, 0x00220021, 0xe434e000,
+    0x00000000, 0x0023001e, 0x84322200, 0x00000000,
+    0x00150014, 0x24345000, 0x00000000, 0x00080025,
+    0xe4226000, 0x00000000, 0x00000026, 0xe4351000,
+    0x00000000, 0x000d0027, 0xe434e000, 0x00000000,
+    0x00280024, 0xc43bd000, 0x00000000, 0x00000029,
+    0x18800e05, 0xc434e000, 0x00000000, 0x002b002a,
+    0x00006894, 0x000000b0, 0x00000010, 0x00040001,
+    0xc43bd000, 0x00000000, 0x00000005, 0xc43be000,
+    0x00000000, 0x00000005, 0xc4287000, 0x00000000,
+    0x0009002e, 0xe431f000, 0x00000000, 0x00060004,
+    0x00006894, 0x000000b4, 0x000000c0, 0x00040001,
+    0xe431f000, 0x00000000, 0x00070004, 0x00006894,
+    0x000000bc, 0x000000c4, 0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, addr };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx8_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx8_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    64      %8 = @load_param (param_idx=0)
+    64      %9 = @load_param (param_idx=1)
+    64     %10 = @load_param (param_idx=2)
+    32     %11 = @load_param (param_idx=3)
+    32     %12 = @load_param (param_idx=4)
+    1      %13 = @load_param (param_idx=5)
+    1      %14 = @load_param (param_idx=6)
+    1      %15 = @load_param (param_idx=8)
+    1      %16 = @load_param (param_idx=9)
+    32     %17 = @load_param (param_idx=10)
+    8      %18 = load_const (0x00)
+    8      %19 = load_const (0x01)
+    1      %20 = ior %15, %16
+                 // succs: b1 b8
+    if %20 {
+        block b1:    // preds: b0
+        32     %21 = load_const (0x00000000)
+        32     %22 = b2i32 %15
+        32     %23 = b2i32 %16
+        32     %24 = iadd.nsw %22, %23
+        32     %25 = load_const (0x00000004 = 0.000000)
+        32     %26 = load_const (0x00000002)
+        32     %27 = ishl %24, %26 (0x2)
+        32     %28 = load_const (0xffffffff = -1 = 4294967295)
+        32     %29 = iadd %28 (0xffffffff), %27
+        64     %30 = load_const (0x0000000000000004)
+        32     %31 = load_const (0x00000008)
+        64     %32 = load_const (0x0000000000000008)
+        64     %33 = load_const (0x000000000000000c = 12)
+        32     %34 = load_const (0x0000000c = 12)
+        64     %35 = load_const (0x0000000000000010 = 16)
+        32     %36 = load_const (0x00000010 = 16)
+        64     %37 = load_const (0x0000000000000000)
+        32     %38 = load_const (0x78080000 = 2013790208)
+        32     %39 = ior %38 (0x78080000), %29
+                     @store_global (%39, %8) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64     %40 = iadd %8, %30 (0x4)
+                     // succs: b2 b3
+        if %15 {
+            block b2:    // preds: b1
+            32     %41 = bcsel %13, %34 (0xc), %31 (0x8)
+            64     %42 = i2i64 %41
+            64     %43 = iadd %9, %42
+            1      %44 = ieq %43, %37 (0x0)
+            32     %45 = b2i32 %44
+            32     %46 = load_const (0xffffff00 = -256 = 4294967040)
+            32     %47 = iand %7, %46 (0xffffff00)
+            32     %48 = ior %47, %45
+            32     %49 = load_const (0x00000100 = 256)
+            32     %50 = load_const (0xffff00ff = -65281 = 4294902015)
+            32     %51 = iand %48, %50 (0xffff00ff)
+            32     %52 = ior %51, %49 (0x100)
+            16x2   %53 = unpack_32_2x16 %6
+            32     %54 = u2u32 %53.x
+            32     %55 = ishl %54, %36 (0x10)
+            32     %56 = extract_u16 %52, %21 (0x0)
+            32     %57 = ior %56, %55
+            32x2   %58 = unpack_64_2x32 %43
+            8x4    %59 = unpack_32_4x8 %57
+            8      %60 = iand %59.x, %19 (0x1)
+            1      %61 = ine %60, %18 (0x0)
+            64     %62 = b2i64 %61
+            32     %63 = load_const (0x0000000d = 13)
+            64     %64 = ishl %62, %63 (0xd)
+            8      %65 = iand %59.y, %19 (0x1)
+            1      %66 = ine %65, %18 (0x0)
+            64     %67 = b2i64 %66
+            32     %68 = load_const (0x0000000e = 14)
+            64     %69 = ishl %67, %68 (0xe)
+            64     %70 = ior %64, %69
+            64     %71 = u2u64 %17
+            64     %72 = ishl %71, %36 (0x10)
+            64     %73 = ior %70, %72
+            32     %74 = unpack_64_2x32_split_x %73
+            32     %75 = load_const (0x7c000000 = 2080374784)
+            32     %76 = ior %74, %75 (0x7c000000)
+                         @store_global (%76, %40) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32     %77 = u2u32 %43
+            64     %78 = iadd %8, %32 (0x8)
+                         @store_global (%77, %78) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32     %79 = mov %58.y
+            64     %80 = iadd %8, %33 (0xc)
+                         @store_global (%79, %80) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64     %81 = iadd %8, %35 (0x10)
+                         @store_global (%31 (0x8), %81) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64     %82 = load_const (0x0000000000000014 = 20)
+            64     %83 = iadd %8, %82 (0x14)
+                         // succs: b4
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:    // preds: b2 b3
+        64     %84 = phi b2: %83, b3: %40
+                     // succs: b5 b6
+        if %16 {
+            block b5:    // preds: b4
+                         @store_global (%11, %10) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            1      %85 = ieq %10, %37 (0x0)
+            32     %86 = b2i32 %85
+            32     %87 = load_const (0xffffff00 = -256 = 4294967040)
+            32     %88 = iand %5, %87 (0xffffff00)
+            32     %89 = ior %88, %86
+            32     %90 = load_const (0x00000100 = 256)
+            32     %91 = load_const (0xffff00ff = -65281 = 4294902015)
+            32     %92 = iand %89, %91 (0xffff00ff)
+            32     %93 = ior %92, %90 (0x100)
+            16x2   %94 = unpack_32_2x16 %6
+            32     %95 = u2u32 %94.x
+            32     %96 = ishl %95, %36 (0x10)
+            32     %97 = extract_u16 %93, %21 (0x0)
+            32     %98 = ior %97, %96
+            32x2   %99 = unpack_64_2x32 %10
+            8x4   %100 = unpack_32_4x8 %98
+            8     %101 = iand %100.x, %19 (0x1)
+            1     %102 = ine %101, %18 (0x0)
+            64    %103 = b2i64 %102
+            32    %104 = load_const (0x0000000d = 13)
+            64    %105 = ishl %103, %104 (0xd)
+            8     %106 = iand %100.y, %19 (0x1)
+            1     %107 = ine %106, %18 (0x0)
+            64    %108 = b2i64 %107
+            32    %109 = load_const (0x0000000e = 14)
+            64    %110 = ishl %108, %109 (0xe)
+            64    %111 = ior %105, %110
+            64    %112 = u2u64 %17
+            64    %113 = ishl %112, %36 (0x10)
+            64    %114 = ior %111, %113
+            32    %115 = unpack_64_2x32_split_x %114
+            32    %116 = load_const (0x80000000 = -2147483648 = 2147483648)
+            32    %117 = ior %115, %116 (0x80000000)
+                         @store_global (%117, %84) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %118 = u2u32 %10
+            64    %119 = iadd %84, %30 (0x4)
+                         @store_global (%118, %119) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %120 = mov %99.y
+            64    %121 = iadd %84, %32 (0x8)
+                         @store_global (%120, %121) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %122 = iadd %84, %33 (0xc)
+                         @store_global (%25 (0x4), %122) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %123 = iadd %84, %35 (0x10)
+                         // succs: b7
+        } else {
+            block b6:  // preds: b4, succs: b7
+        }
+        block b7:    // preds: b5 b6
+        64    %124 = phi b5: %123, b6: %84
+                     // succs: b9
+    } else {
+        block b8:  // preds: b0, succs: b9
+    }
+    block b9:    // preds: b7 b8
+    64    %125 = phi b7: %124, b8: %8
+    1     %126 = inot %13
+                 // succs: b10 b11
+    if %126 {
+        block b10:   // preds: b9
+        32x4  %127 = @load_global (%9) (access=none, align_mul=4, align_offset=0)
+        32    %128 = load_const (0x00000008)
+        32    %129 = mov %127.x
+        64    %130 = load_const (0x0000000000000008)
+        32    %131 = mov %127.z
+        64    %132 = load_const (0x0000000000000004)
+        32    %133 = imul %127.y, %12
+        64    %134 = load_const (0x000000000000000c = 12)
+        32    %135 = mov %127.w
+        32    %136 = load_const (0x00000000)
+        32    %137 = b2i32 %14
+        32    %138 = load_const (0xffffff00 = -256 = 4294967040)
+        32    %139 = iand %4, %138 (0xffffff00)
+        32    %140 = ior %139, %137
+        32    %141 = load_const (0xffff00ff = -65281 = 4294902015)
+        32    %142 = iand %140, %141 (0xffff00ff)
+        32    %143 = load_const (0x00000010 = 16)
+        32    %144 = load_const (0xff00ffff = -16711681 = 4278255615)
+        8x4   %145 = unpack_32_4x8 %3
+        32    %146 = u2u32 %145.x
+        32    %147 = load_const (0x00000018 = 24)
+        32    %148 = ishl %146, %147 (0x18)
+        32    %149 = load_const (0x00ffffff = 16777215)
+        32    %150 = extract_u16 %142, %136 (0x0)
+        32    %151 = ior %150, %148
+        64    %152 = load_const (0x0000000000000010 = 16)
+        64    %153 = load_const (0x0000000000000014 = 20)
+        64    %154 = load_const (0x0000000000000018 = 24)
+        16    %155 = u2u16 %145.y
+        16    %156 = u2u16 %145.z
+        16    %157 = ishl %156, %128 (0x8)
+        16    %158 = ior %155, %157
+        8     %159 = u2u8 %158
+        16    %160 = load_const (0x0001)
+        16    %161 = extract_u8 %158, %160 (0x1)
+        8     %162 = u2u8 %161
+        32    %163 = u2u32 %159
+        32    %164 = ishl %163, %128 (0x8)
+        32    %165 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %166 = iand %165 (0xffff0000), %2
+        32    %167 = ior %166, %164
+        32    %168 = u2u32 %162
+        32    %169 = ishl %168, %143 (0x10)
+        32    %170 = iand %167, %144 (0xff00ffff)
+        32    %171 = ior %170, %169
+        32    %172 = u2u32 %145.w
+        32    %173 = ishl %172, %147 (0x18)
+        32    %174 = iand %171, %149 (0xffffff)
+        32    %175 = ior %174, %173
+        8x4   %176 = unpack_32_4x8 %151
+        8     %177 = iand %176.x, %19 (0x1)
+        1     %178 = ine %177, %18 (0x0)
+        64    %179 = b2i64 %178
+        64    %180 = ishl %179, %128 (0x8)
+        32    %181 = unpack_64_2x32_split_x %180
+        32    %182 = load_const (0x00000005)
+        32    %183 = ior %181, %182 (0x5)
+        32    %184 = unpack_64_2x32_split_y %180
+        64    %185 = pack_64_2x32_split %183, %184
+        8     %186 = iand %176.y, %19 (0x1)
+        1     %187 = ine %186, %18 (0x0)
+        64    %188 = b2i64 %187
+        32    %189 = load_const (0x00000009)
+        64    %190 = ishl %188, %189 (0x9)
+        64    %191 = ior %185, %190
+        8     %192 = iand %176.z, %19 (0x1)
+        1     %193 = ine %192, %18 (0x0)
+        64    %194 = b2i64 %193
+        32    %195 = load_const (0x0000000a = 10)
+        64    %196 = ishl %194, %195 (0xa)
+        64    %197 = ior %191, %196
+        32    %198 = unpack_64_2x32_split_x %197
+        32    %199 = load_const (0x7b000000 = 2063597568)
+        32    %200 = ior %199 (0x7b000000), %198
+                     @store_global (%200, %125) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %201 = b2i64 %13
+        64    %202 = ishl %201, %128 (0x8)
+        8x4   %203 = unpack_32_4x8 %175
+        8     %204 = iand %203.x, %19 (0x1)
+        1     %205 = ine %204, %18 (0x0)
+        64    %206 = b2i64 %205
+        64    %207 = ishl %206, %189 (0x9)
+        64    %208 = ior %202, %207
+        32    %209 = u2u32 %208
+        64    %210 = iadd %125, %132 (0x4)
+                     @store_global (%209, %210) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %211 = iadd %125, %130 (0x8)
+                     @store_global (%129, %211) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %212 = iadd %125, %134 (0xc)
+                     @store_global (%131, %212) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %213 = iadd %125, %152 (0x10)
+                     @store_global (%133, %213) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %214 = iadd %125, %153 (0x14)
+                     @store_global (%135, %214) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %215 = iadd %125, %154 (0x18)
+                     @store_global (%136 (0x0), %215) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b12
+    } else {
+        block b11:   // preds: b9
+        32x4  %216 = @load_global (%9) (access=none, align_mul=4, align_offset=0)
+        32    %217 = load_const (0x00000008)
+        64    %218 = load_const (0x0000000000000004)
+        64    %219 = load_const (0x0000000000000010 = 16)
+        64    %220 = iadd %9, %219 (0x10)
+        32    %221 = @load_global (%220) (access=none, align_mul=4, align_offset=0)
+        32    %222 = load_const (0x00000010 = 16)
+        32    %223 = mov %216.x
+        64    %224 = load_const (0x0000000000000008)
+        32    %225 = mov %216.z
+        32    %226 = imul %216.y, %12
+        64    %227 = load_const (0x000000000000000c = 12)
+        32    %228 = mov %216.w
+        32    %229 = b2i32 %14
+        32    %230 = load_const (0xffffff00 = -256 = 4294967040)
+        32    %231 = iand %1, %230 (0xffffff00)
+        32    %232 = ior %231, %229
+        32    %233 = load_const (0xffff00ff = -65281 = 4294902015)
+        32    %234 = iand %232, %233 (0xffff00ff)
+        32    %235 = load_const (0xff00ffff = -16711681 = 4278255615)
+        8x4   %236 = unpack_32_4x8 %3
+        32    %237 = u2u32 %236.x
+        32    %238 = load_const (0x00000018 = 24)
+        32    %239 = ishl %237, %238 (0x18)
+        32    %240 = load_const (0x00ffffff = 16777215)
+        32    %241 = load_const (0x00000000)
+        32    %242 = extract_u16 %234, %241 (0x0)
+        32    %243 = ior %242, %239
+        64    %244 = load_const (0x0000000000000014 = 20)
+        64    %245 = load_const (0x0000000000000018 = 24)
+        16    %246 = u2u16 %236.y
+        16    %247 = u2u16 %236.z
+        16    %248 = ishl %247, %217 (0x8)
+        16    %249 = ior %246, %248
+        8     %250 = u2u8 %249
+        16    %251 = load_const (0x0001)
+        16    %252 = extract_u8 %249, %251 (0x1)
+        8     %253 = u2u8 %252
+        32    %254 = u2u32 %250
+        32    %255 = ishl %254, %217 (0x8)
+        32    %256 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %257 = iand %256 (0xffff0000), %0
+        32    %258 = ior %257, %255
+        32    %259 = u2u32 %253
+        32    %260 = ishl %259, %222 (0x10)
+        32    %261 = iand %258, %235 (0xff00ffff)
+        32    %262 = ior %261, %260
+        32    %263 = u2u32 %236.w
+        32    %264 = ishl %263, %238 (0x18)
+        32    %265 = iand %262, %240 (0xffffff)
+        32    %266 = ior %265, %264
+        8x4   %267 = unpack_32_4x8 %243
+        8     %268 = iand %267.x, %19 (0x1)
+        1     %269 = ine %268, %18 (0x0)
+        64    %270 = b2i64 %269
+        64    %271 = ishl %270, %217 (0x8)
+        32    %272 = unpack_64_2x32_split_x %271
+        32    %273 = load_const (0x00000005)
+        32    %274 = ior %272, %273 (0x5)
+        32    %275 = unpack_64_2x32_split_y %271
+        64    %276 = pack_64_2x32_split %274, %275
+        8     %277 = iand %267.y, %19 (0x1)
+        1     %278 = ine %277, %18 (0x0)
+        64    %279 = b2i64 %278
+        32    %280 = load_const (0x00000009)
+        64    %281 = ishl %279, %280 (0x9)
+        64    %282 = ior %276, %281
+        8     %283 = iand %267.z, %19 (0x1)
+        1     %284 = ine %283, %18 (0x0)
+        64    %285 = b2i64 %284
+        32    %286 = load_const (0x0000000a = 10)
+        64    %287 = ishl %285, %286 (0xa)
+        64    %288 = ior %282, %287
+        32    %289 = unpack_64_2x32_split_x %288
+        32    %290 = load_const (0x7b000000 = 2063597568)
+        32    %291 = ior %290 (0x7b000000), %289
+                     @store_global (%291, %125) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %292 = b2i64 %13
+        64    %293 = ishl %292, %217 (0x8)
+        8x4   %294 = unpack_32_4x8 %266
+        8     %295 = iand %294.x, %19 (0x1)
+        1     %296 = ine %295, %18 (0x0)
+        64    %297 = b2i64 %296
+        64    %298 = ishl %297, %280 (0x9)
+        64    %299 = ior %293, %298
+        32    %300 = u2u32 %299
+        64    %301 = iadd %125, %218 (0x4)
+                     @store_global (%300, %301) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %302 = iadd %125, %224 (0x8)
+                     @store_global (%223, %302) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %303 = iadd %125, %227 (0xc)
+                     @store_global (%225, %303) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %304 = iadd %125, %219 (0x10)
+                     @store_global (%226, %304) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %305 = iadd %125, %244 (0x14)
+                     @store_global (%221, %305) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %306 = iadd %125, %245 (0x18)
+                     @store_global (%228, %306) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b12
+    }
+    block b12:  // preds: b10 b11, succs: b13
+    block b13:
+   */
+   static const uint32_t impl_0_nir[954] = {
+    0x00000141, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000b, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0x00000000, 0x00000015, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0xe4001744,
+    0xe4011744, 0xe4021744, 0xc4031744, 0xc4041744,
+    0x24051744, 0x24061744, 0x24081744, 0x24091744,
+    0xc40a1744, 0x00001405, 0x00003405, 0x2434e000,
+    0x00000000, 0x00120011, 0x00000001, 0x00000058,
+    0x00000000, 0x00000005, 0x00000000, 0x00000015,
+    0x00000e05, 0xc4625000, 0x00000000, 0x00000011,
+    0x00000000, 0x00000012, 0xc431f020, 0x00000000,
+    0x001a0019, 0x00009605, 0x00005605, 0xc4351000,
+    0x00000000, 0x001d001b, 0xfffff605, 0xc431f000,
+    0x00000000, 0x001e001f, 0x00009705, 0x00011605,
+    0x00011705, 0x00019705, 0x00019605, 0x00021705,
+    0x00021605, 0x00000f05, 0x78080e05, 0xc434e000,
+    0x00000000, 0x00200029, 0x00006894, 0x000000a8,
+    0x00000028, 0x00040001, 0xe431f000, 0x00000000,
+    0x0021000a, 0x00000001, 0x00000044, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002f, 0xc4273000,
+    0x00000000, 0x0025000f, 0x00000022, 0xe4319000,
+    0x00000000, 0x0000002d, 0xe431f000, 0x00000000,
+    0x002e000b, 0x24327000, 0x00000000, 0x0028002f,
+    0xc4225000, 0x00000000, 0x00000030, 0xffe01605,
+    0xc4322000, 0x00000000, 0x00320009, 0xc434e000,
+    0x00000000, 0x00310033, 0x00201605, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00360034, 0xc434e000,
+    0x00000000, 0x00350037, 0xa83b8000, 0x00000000,
+    0x00000008, 0xc438e000, 0x00000000, 0x00000039,
+    0xc4351000, 0x00000000, 0x0027003a, 0xc4287000,
+    0x00000000, 0x00180038, 0xc434e000, 0x00000000,
+    0x003b003c, 0xc83bc000, 0x00000000, 0x0000002f,
+    0x903bb000, 0x00000000, 0x0000003d, 0x84322000,
+    0x00000000, 0x0015003f, 0x24345000, 0x00000000,
+    0x00140040, 0xe4226000, 0x00000000, 0x00000041,
+    0x0001b605, 0xe4351000, 0x00000000, 0x00430042,
+    0x84322100, 0x00000000, 0x0015003f, 0x24345000,
+    0x00000000, 0x00140045, 0xe4226000, 0x00000000,
+    0x00000046, 0x0001d605, 0xe4351000, 0x00000000,
+    0x00480047, 0xe434e000, 0x00000000, 0x00490044,
+    0xe438f000, 0x00000000, 0x00000013, 0xe4351000,
+    0x00000000, 0x0027004b, 0xe434e000, 0x00000000,
+    0x004c004a, 0xc43bd000, 0x00000000, 0x0000004d,
+    0x7c000e05, 0xc434e000, 0x00000000, 0x004f004e,
+    0x00006894, 0x00000140, 0x000000ac, 0x00040001,
+    0xc438e000, 0x00000000, 0x0000002f, 0xe431f000,
+    0x00000000, 0x0023000a, 0x00006894, 0x00000144,
+    0x00000148, 0x00040001, 0xc435a100, 0x00000000,
+    0x0000003e, 0xe431f000, 0x00000000, 0x0024000a,
+    0x00006894, 0x0000014c, 0x00000150, 0x00040001,
+    0xe431f000, 0x00000000, 0x0026000a, 0x00006894,
+    0x00000088, 0x00000154, 0x00040001, 0x00029705,
+    0xe431f000, 0x00000000, 0x0056000a, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x00000057, 0x0000002c, 0x0000002b,
+    0x00000058, 0x00000001, 0x00000048, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002c, 0x00006894,
+    0x00000034, 0x00000030, 0x00040001, 0x24327000,
+    0x00000000, 0x0028000c, 0xc4225000, 0x00000000,
+    0x0000005c, 0xffe01605, 0xc4322000, 0x00000000,
+    0x005e0007, 0xc434e000, 0x00000000, 0x005d005f,
+    0x00201605, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x00620060, 0xc434e000, 0x00000000, 0x00610063,
+    0xa83b8000, 0x00000000, 0x00000008, 0xc438e000,
+    0x00000000, 0x00000065, 0xc4351000, 0x00000000,
+    0x00270066, 0xc4287000, 0x00000000, 0x00180064,
+    0xc434e000, 0x00000000, 0x00670068, 0xc83bc000,
+    0x00000000, 0x0000000c, 0x903bb000, 0x00000000,
+    0x00000069, 0x84322000, 0x00000000, 0x0015006b,
+    0x24345000, 0x00000000, 0x0014006c, 0xe4226000,
+    0x00000000, 0x0000006d, 0x0001b605, 0xe4351000,
+    0x00000000, 0x006f006e, 0x84322100, 0x00000000,
+    0x0015006b, 0x24345000, 0x00000000, 0x00140071,
+    0xe4226000, 0x00000000, 0x00000072, 0x0001d605,
+    0xe4351000, 0x00000000, 0x00740073, 0xe434e000,
+    0x00000000, 0x00750070, 0xe438f000, 0x00000000,
+    0x00000013, 0xe4351000, 0x00000000, 0x00270077,
+    0xe434e000, 0x00000000, 0x00780076, 0xc43bd000,
+    0x00000000, 0x00000079, 0x80000e05, 0xc434e000,
+    0x00000000, 0x007b007a, 0x00006894, 0x000001f0,
+    0x00000168, 0x00040001, 0xc438e000, 0x00000000,
+    0x0000000c, 0xe431f000, 0x00000000, 0x0021005a,
+    0x00006894, 0x000001f4, 0x000001f8, 0x00040001,
+    0xc435a100, 0x00000000, 0x0000006a, 0xe431f000,
+    0x00000000, 0x0023005a, 0x00006894, 0x000001fc,
+    0x00000200, 0x00040001, 0xe431f000, 0x00000000,
+    0x0024005a, 0x00006894, 0x00000070, 0x00000204,
+    0x00040001, 0xe431f000, 0x00000000, 0x0026005a,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0xe4000028, 0x00000082, 0x0000005b,
+    0x0000005a, 0x00000083, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xe4000028,
+    0x00000085, 0x00000084, 0x0000000a, 0x00000086,
+    0x2434a000, 0x00000000, 0x0000000f, 0x00000001,
+    0x00000224, 0x00000000, 0x00000001, 0x00000000,
+    0x00000060, 0xd0005354, 0x0000002c, 0x00000400,
+    0x00011605, 0xc435a000, 0x00000000, 0x0000008b,
+    0x00011705, 0xc435a200, 0x00000000, 0x0000008b,
+    0x00009705, 0xc433f100, 0x00000000, 0x000e008b,
+    0x00019705, 0xc435a300, 0x00000000, 0x0000008b,
+    0x00000e05, 0xc4225000, 0x00000000, 0x00000010,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00960006,
+    0xc434e000, 0x00000000, 0x00950097, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00990098, 0x00021605,
+    0x00000605, 0xff00ffff, 0x903bb000, 0x00000000,
+    0x00000005, 0xc438e000, 0x00000000, 0x0000009d,
+    0x00031605, 0xc4351000, 0x00000000, 0x009f009e,
+    0x00000605, 0x00ffffff, 0xc4287000, 0x00000000,
+    0x0094009a, 0xc434e000, 0x00000000, 0x00a000a2,
+    0x00021705, 0x00029705, 0x00031705, 0xa438d100,
+    0x00000000, 0x0000009d, 0xa438d200, 0x00000000,
+    0x0000009d, 0xa4351000, 0x00000000, 0x008c00a8,
+    0xa434e000, 0x00000000, 0x00a900a7, 0x84390000,
+    0x00000000, 0x000000aa, 0x00003505, 0xa4288000,
+    0x00000000, 0x00ac00aa, 0x84390000, 0x00000000,
+    0x000000ad, 0xc438e000, 0x00000000, 0x000000ab,
+    0xc4351000, 0x00000000, 0x008c00af, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x000400b1, 0xc434e000,
+    0x00000000, 0x00b000b2, 0xc438e000, 0x00000000,
+    0x000000ae, 0xc4351000, 0x00000000, 0x009b00b4,
+    0xc4322000, 0x00000000, 0x009c00b3, 0xc434e000,
+    0x00000000, 0x00b500b6, 0xc438e300, 0x00000000,
+    0x0000009d, 0xc4351000, 0x00000000, 0x009f00b8,
+    0xc4322000, 0x00000000, 0x00a100b7, 0xc434e000,
+    0x00000000, 0x00b900ba, 0x903bb000, 0x00000000,
+    0x000000a3, 0x84322000, 0x00000000, 0x001500bc,
+    0x24345000, 0x00000000, 0x001400bd, 0xe4226000,
+    0x00000000, 0x000000be, 0xe4351000, 0x00000000,
+    0x008c00bf, 0xc43bd000, 0x00000000, 0x000000c0,
+    0x0000b605, 0xc434e000, 0x00000000, 0x00c200c1,
+    0xc43be000, 0x00000000, 0x000000c0, 0xe4369000,
+    0x00000000, 0x00c400c3, 0x84322100, 0x00000000,
+    0x001500bc, 0x24345000, 0x00000000, 0x001400c6,
+    0xe4226000, 0x00000000, 0x000000c7, 0x00013605,
+    0xe4351000, 0x00000000, 0x00c900c8, 0xe434e000,
+    0x00000000, 0x00ca00c5, 0x84322200, 0x00000000,
+    0x001500bc, 0x24345000, 0x00000000, 0x001400cc,
+    0xe4226000, 0x00000000, 0x000000cd, 0x00015605,
+    0xe4351000, 0x00000000, 0x00cf00ce, 0xe434e000,
+    0x00000000, 0x00d000cb, 0xc43bd000, 0x00000000,
+    0x000000d1, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00d200d3, 0x00006894, 0x00000350, 0x00000220,
+    0x00040001, 0xe4226000, 0x00000000, 0x0000000f,
+    0xe4351000, 0x00000000, 0x008c00d5, 0x903bb000,
+    0x00000000, 0x000000bb, 0x84322000, 0x00000000,
+    0x001500d7, 0x24345000, 0x00000000, 0x001400d8,
+    0xe4226000, 0x00000000, 0x000000d9, 0xe4351000,
+    0x00000000, 0x00c900da, 0xe434e000, 0x00000000,
+    0x00db00d6, 0xc438e000, 0x00000000, 0x000000dc,
+    0xe431f000, 0x00000000, 0x00900088, 0x00006894,
+    0x00000374, 0x00000378, 0x00040001, 0xe431f000,
+    0x00000000, 0x008e0088, 0x00006894, 0x00000234,
+    0x0000037c, 0x00040001, 0xe431f000, 0x00000000,
+    0x00920088, 0x00006894, 0x0000023c, 0x00000380,
+    0x00040001, 0xe431f000, 0x00000000, 0x00a40088,
+    0x00006894, 0x00000244, 0x00000384, 0x00040001,
+    0xe431f000, 0x00000000, 0x00a50088, 0x00006894,
+    0x0000024c, 0x00000388, 0x00040001, 0xe431f000,
+    0x00000000, 0x00a60088, 0x00006894, 0x00000250,
+    0x0000038c, 0x00040001, 0x00000001, 0x00000000,
+    0x00000062, 0xd0005354, 0x0000002c, 0x00000400,
+    0x00011605, 0x00009705, 0x00021705, 0xe431f000,
+    0x00000000, 0x00e8000b, 0xc4005354, 0x000003a4,
+    0x00000400, 0x00021605, 0xc435a000, 0x00000000,
+    0x000000e5, 0x00011705, 0xc435a200, 0x00000000,
+    0x000000e5, 0xc433f100, 0x00000000, 0x000e00e5,
+    0x00019705, 0xc435a300, 0x00000000, 0x000000e5,
+    0xc4225000, 0x00000000, 0x00000010, 0xffe01605,
+    0xc4322000, 0x00000000, 0x00f30003, 0xc434e000,
+    0x00000000, 0x00f200f4, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00f600f5, 0x00000605, 0xff00ffff,
+    0x903bb000, 0x00000000, 0x00000005, 0xc438e000,
+    0x00000000, 0x000000f9, 0x00031605, 0xc4351000,
+    0x00000000, 0x00fb00fa, 0x00000605, 0x00ffffff,
+    0x00000e05, 0xc4287000, 0x00000000, 0x00fe00f7,
+    0xc434e000, 0x00000000, 0x00fc00ff, 0x00029705,
+    0x00031705, 0xa438d100, 0x00000000, 0x000000f9,
+    0xa438d200, 0x00000000, 0x000000f9, 0xa4351000,
+    0x00000000, 0x00e60104, 0xa434e000, 0x00000000,
+    0x01050103, 0x84390000, 0x00000000, 0x00000106,
+    0x00003505, 0xa4288000, 0x00000000, 0x01080106,
+    0x84390000, 0x00000000, 0x00000109, 0xc438e000,
+    0x00000000, 0x00000107, 0xc4351000, 0x00000000,
+    0x00e6010b, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x0002010d, 0xc434e000, 0x00000000, 0x010c010e,
+    0xc438e000, 0x00000000, 0x0000010a, 0xc4351000,
+    0x00000000, 0x00eb0110, 0xc4322000, 0x00000000,
+    0x00f8010f, 0xc434e000, 0x00000000, 0x01110112,
+    0xc438e300, 0x00000000, 0x000000f9, 0xc4351000,
+    0x00000000, 0x00fb0114, 0xc4322000, 0x00000000,
+    0x00fd0113, 0xc434e000, 0x00000000, 0x01150116,
+    0x903bb000, 0x00000000, 0x00000100, 0x84322000,
+    0x00000000, 0x00150118, 0x24345000, 0x00000000,
+    0x00140119, 0xe4226000, 0x00000000, 0x0000011a,
+    0xe4351000, 0x00000000, 0x00e6011b, 0xc43bd000,
+    0x00000000, 0x0000011c, 0x0000b605, 0xc434e000,
+    0x00000000, 0x011e011d, 0xc43be000, 0x00000000,
+    0x0000011c, 0xe4369000, 0x00000000, 0x0120011f,
+    0x84322100, 0x00000000, 0x00150118, 0x24345000,
+    0x00000000, 0x00140122, 0xe4226000, 0x00000000,
+    0x00000123, 0x00013605, 0xe4351000, 0x00000000,
+    0x01250124, 0xe434e000, 0x00000000, 0x01260121,
+    0x84322200, 0x00000000, 0x00150118, 0x24345000,
+    0x00000000, 0x00140128, 0xe4226000, 0x00000000,
+    0x00000129, 0x00015605, 0xe4351000, 0x00000000,
+    0x012b012a, 0xe434e000, 0x00000000, 0x012c0127,
+    0xc43bd000, 0x00000000, 0x0000012d, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x012e012f, 0x00006894,
+    0x000004c0, 0x00000220, 0x00040001, 0xe4226000,
+    0x00000000, 0x0000000f, 0xe4351000, 0x00000000,
+    0x00e60131, 0x903bb000, 0x00000000, 0x00000117,
+    0x84322000, 0x00000000, 0x00150133, 0x24345000,
+    0x00000000, 0x00140134, 0xe4226000, 0x00000000,
+    0x00000135, 0xe4351000, 0x00000000, 0x01250136,
+    0xe434e000, 0x00000000, 0x01370132, 0xc438e000,
+    0x00000000, 0x00000138, 0xe431f000, 0x00000000,
+    0x00e70088, 0x00006894, 0x000004e4, 0x000004e8,
+    0x00040001, 0xe431f000, 0x00000000, 0x00ed0088,
+    0x00006894, 0x000003b0, 0x000004ec, 0x00040001,
+    0xe431f000, 0x00000000, 0x00f00088, 0x00006894,
+    0x000003b8, 0x000004f0, 0x00040001, 0xe431f000,
+    0x00000000, 0x00e80088, 0x00006894, 0x000003bc,
+    0x000004f4, 0x00040001, 0xe431f000, 0x00000000,
+    0x01010088, 0x00006894, 0x000003a8, 0x000004f8,
+    0x00040001, 0xe431f000, 0x00000000, 0x01020088,
+    0x00006894, 0x000003c4, 0x000004fc, 0x00040001,
+    0x00000000, 0x00000000,
+};
+   nir_def *args[11] = { dst_ptr, indirect_ptr, draw_id_ptr, draw_id, instance_multiplier, is_indexed, is_predicated, uses_tbimr, uses_base, uses_drawid, mocs };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx8_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx8_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    32      %9 = undefined
+    32     %10 = undefined
+    32     %11 = undefined
+    64     %12 = @load_param (param_idx=0)
+    64     %13 = @load_param (param_idx=2)
+    64     %14 = @load_param (param_idx=3)
+    32     %15 = @load_param (param_idx=4)
+    64     %16 = @load_param (param_idx=5)
+    32     %17 = @load_param (param_idx=6)
+    32     %18 = @load_param (param_idx=7)
+    32     %19 = @load_param (param_idx=8)
+    32     %20 = @load_param (param_idx=9)
+    32     %21 = @load_param (param_idx=10)
+    32     %22 = @load_param (param_idx=11)
+    32     %23 = @load_param (param_idx=12)
+    64     %24 = @load_param (param_idx=13)
+    64     %25 = @load_param (param_idx=14)
+    32     %26 = @load_param (param_idx=15)
+    32     %27 = iadd %17, %26
+    32     %28 = @load_global (%16) (access=none, align_mul=4, align_offset=0)
+    32     %29 = imul %26, %22
+    64     %30 = u2u64 %29
+    32     %31 = imul %27, %15
+    64     %32 = u2u64 %31
+    32     %33 = load_const (0x00000004)
+    32     %34 = load_const (0x00000002)
+    32     %35 = ishl %26, %34 (0x2)
+    64     %36 = u2u64 %35
+    32     %37 = umin %28, %19
+    1      %38 = ult %27, %37
+                 // succs: b1 b14
+    if %38 {
+        block b1:    // preds: b0
+        32     %39 = load_const (0x00000001)
+        32     %40 = iand %20, %39 (0x1)
+        32     %41 = load_const (0x00000000)
+        1      %42 = ine %40, %41 (0x0)
+        8      %43 = load_const (0x00)
+        8      %44 = load_const (0x01)
+        32     %45 = iand %20, %34 (0x2)
+        32     %46 = load_const (0x00000008)
+        32     %47 = iand %20, %46 (0x8)
+        1      %48 = ine %47, %41 (0x0)
+        32     %49 = iand %20, %33 (0x4)
+        1      %50 = ine %49, %41 (0x0)
+        64     %51 = iadd %12, %30
+        32     %52 = umax %47, %49
+        1      %53 = ine %52, %41 (0x0)
+                     // succs: b2 b9
+        if %53 {
+            block b2:    // preds: b1
+            32     %54 = load_const (0x00000003)
+            32     %55 = ushr %47, %54 (0x3)
+            32     %56 = ushr %49, %34 (0x2)
+            32     %57 = iadd.nsw %55, %56
+            32     %58 = ishl %57, %34 (0x2)
+            32     %59 = load_const (0xffffffff = -1 = 4294967295)
+            32     %60 = iadd %59 (0xffffffff), %58
+            64     %61 = load_const (0x0000000000000004)
+            64     %62 = load_const (0x0000000000000008)
+            64     %63 = load_const (0x000000000000000c = 12)
+            32     %64 = load_const (0x0000000c = 12)
+            64     %65 = load_const (0x0000000000000010 = 16)
+            32     %66 = load_const (0x00000010 = 16)
+            64     %67 = load_const (0x0000000000000000)
+            32     %68 = load_const (0x78080000 = 2013790208)
+            32     %69 = ior %68 (0x78080000), %60
+                         @store_global (%69, %51) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64     %70 = iadd %51, %61 (0x4)
+                         // succs: b3 b4
+            if %48 {
+                block b3:    // preds: b2
+                32     %71 = bcsel %42, %64 (0xc), %46 (0x8)
+                64     %72 = i2i64 %71
+                64     %73 = iadd %13, %32
+                64     %74 = iadd %73, %72
+                1      %75 = ieq %74, %67 (0x0)
+                32     %76 = b2i32 %75
+                32     %77 = load_const (0xffffff00 = -256 = 4294967040)
+                32     %78 = iand %11, %77 (0xffffff00)
+                32     %79 = ior %78, %76
+                32     %80 = load_const (0x00000100 = 256)
+                32     %81 = load_const (0xffff00ff = -65281 = 4294902015)
+                32     %82 = iand %79, %81 (0xffff00ff)
+                32     %83 = ior %82, %80 (0x100)
+                16x2   %84 = unpack_32_2x16 %10
+                32     %85 = u2u32 %84.x
+                32     %86 = ishl %85, %66 (0x10)
+                32     %87 = extract_u16 %83, %41 (0x0)
+                32     %88 = ior %87, %86
+                32x2   %89 = unpack_64_2x32 %74
+                8x4    %90 = unpack_32_4x8 %88
+                8      %91 = iand %90.x, %44 (0x1)
+                1      %92 = ine %91, %43 (0x0)
+                64     %93 = b2i64 %92
+                32     %94 = load_const (0x0000000d = 13)
+                64     %95 = ishl %93, %94 (0xd)
+                8      %96 = iand %90.y, %44 (0x1)
+                1      %97 = ine %96, %43 (0x0)
+                64     %98 = b2i64 %97
+                32     %99 = load_const (0x0000000e = 14)
+                64    %100 = ishl %98, %99 (0xe)
+                64    %101 = ior %95, %100
+                64    %102 = u2u64 %21
+                64    %103 = ishl %102, %66 (0x10)
+                64    %104 = ior %101, %103
+                32    %105 = unpack_64_2x32_split_x %104
+                32    %106 = load_const (0x7c000000 = 2080374784)
+                32    %107 = ior %105, %106 (0x7c000000)
+                             @store_global (%107, %70) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %108 = u2u32 %74
+                64    %109 = iadd %51, %62 (0x8)
+                             @store_global (%108, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %110 = mov %89.y
+                64    %111 = iadd %51, %63 (0xc)
+                             @store_global (%110, %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %112 = iadd %51, %65 (0x10)
+                             @store_global (%46 (0x8), %112) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %113 = load_const (0x0000000000000014 = 20)
+                64    %114 = iadd %51, %113 (0x14)
+                             // succs: b5
+            } else {
+                block b4:  // preds: b2, succs: b5
+            }
+            block b5:    // preds: b3 b4
+            64    %115 = phi b3: %114, b4: %70
+                         // succs: b6 b7
+            if %50 {
+                block b6:    // preds: b5
+                64    %116 = iadd %14, %36
+                             @store_global (%27, %116) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                1     %117 = ieq %116, %67 (0x0)
+                32    %118 = b2i32 %117
+                32    %119 = load_const (0xffffff00 = -256 = 4294967040)
+                32    %120 = iand %9, %119 (0xffffff00)
+                32    %121 = ior %120, %118
+                32    %122 = load_const (0x00000100 = 256)
+                32    %123 = load_const (0xffff00ff = -65281 = 4294902015)
+                32    %124 = iand %121, %123 (0xffff00ff)
+                32    %125 = ior %124, %122 (0x100)
+                16x2  %126 = unpack_32_2x16 %10
+                32    %127 = u2u32 %126.x
+                32    %128 = ishl %127, %66 (0x10)
+                32    %129 = extract_u16 %125, %41 (0x0)
+                32    %130 = ior %129, %128
+                32x2  %131 = unpack_64_2x32 %116
+                8x4   %132 = unpack_32_4x8 %130
+                8     %133 = iand %132.x, %44 (0x1)
+                1     %134 = ine %133, %43 (0x0)
+                64    %135 = b2i64 %134
+                32    %136 = load_const (0x0000000d = 13)
+                64    %137 = ishl %135, %136 (0xd)
+                8     %138 = iand %132.y, %44 (0x1)
+                1     %139 = ine %138, %43 (0x0)
+                64    %140 = b2i64 %139
+                32    %141 = load_const (0x0000000e = 14)
+                64    %142 = ishl %140, %141 (0xe)
+                64    %143 = ior %137, %142
+                64    %144 = u2u64 %21
+                64    %145 = ishl %144, %66 (0x10)
+                64    %146 = ior %143, %145
+                32    %147 = unpack_64_2x32_split_x %146
+                32    %148 = load_const (0x80000000 = -2147483648 = 2147483648)
+                32    %149 = ior %147, %148 (0x80000000)
+                             @store_global (%149, %115) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %150 = u2u32 %116
+                64    %151 = iadd %115, %61 (0x4)
+                             @store_global (%150, %151) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %152 = mov %131.y
+                64    %153 = iadd %115, %62 (0x8)
+                             @store_global (%152, %153) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %154 = iadd %115, %63 (0xc)
+                             @store_global (%33 (0x4), %154) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %155 = iadd %115, %65 (0x10)
+                             // succs: b8
+            } else {
+                block b7:  // preds: b5, succs: b8
+            }
+            block b8:    // preds: b6 b7
+            64    %156 = phi b6: %155, b7: %115
+                         // succs: b10
+        } else {
+            block b9:  // preds: b1, succs: b10
+        }
+        block b10:   // preds: b8 b9
+        64    %157 = phi b8: %156, b9: %51
+        1     %158 = inot %42
+                     // succs: b11 b12
+        if %158 {
+            block b11:   // preds: b10
+            64    %159 = iadd %13, %32
+            32x4  %160 = @load_global (%159) (access=none, align_mul=4, align_offset=0)
+            32    %161 = mov %160.x
+            64    %162 = load_const (0x0000000000000008)
+            32    %163 = mov %160.z
+            64    %164 = load_const (0x0000000000000004)
+            32    %165 = imul %160.y, %18
+            64    %166 = load_const (0x000000000000000c = 12)
+            32    %167 = mov %160.w
+            32    %168 = ushr %45, %39 (0x1)
+            32    %169 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %170 = iand %8, %169 (0xffffff00)
+            32    %171 = ior %170, %168
+            32    %172 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %173 = iand %171, %172 (0xffff00ff)
+            32    %174 = load_const (0x00000010 = 16)
+            32    %175 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %176 = unpack_32_4x8 %7
+            32    %177 = u2u32 %176.x
+            32    %178 = load_const (0x00000018 = 24)
+            32    %179 = ishl %177, %178 (0x18)
+            32    %180 = load_const (0x00ffffff = 16777215)
+            32    %181 = extract_u16 %173, %41 (0x0)
+            32    %182 = ior %181, %179
+            64    %183 = load_const (0x0000000000000010 = 16)
+            64    %184 = load_const (0x0000000000000014 = 20)
+            64    %185 = load_const (0x0000000000000018 = 24)
+            16    %186 = u2u16 %176.y
+            16    %187 = u2u16 %176.z
+            16    %188 = ishl %187, %46 (0x8)
+            16    %189 = ior %186, %188
+            8     %190 = u2u8 %189
+            16    %191 = load_const (0x0001)
+            16    %192 = extract_u8 %189, %191 (0x1)
+            8     %193 = u2u8 %192
+            32    %194 = u2u32 %190
+            32    %195 = ishl %194, %46 (0x8)
+            32    %196 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %197 = iand %196 (0xffff0000), %6
+            32    %198 = ior %197, %195
+            32    %199 = u2u32 %193
+            32    %200 = ishl %199, %174 (0x10)
+            32    %201 = iand %198, %175 (0xff00ffff)
+            32    %202 = ior %201, %200
+            32    %203 = u2u32 %176.w
+            32    %204 = ishl %203, %178 (0x18)
+            32    %205 = iand %202, %180 (0xffffff)
+            32    %206 = ior %205, %204
+            8x4   %207 = unpack_32_4x8 %182
+            8     %208 = iand %207.x, %44 (0x1)
+            1     %209 = ine %208, %43 (0x0)
+            64    %210 = b2i64 %209
+            64    %211 = ishl %210, %46 (0x8)
+            32    %212 = unpack_64_2x32_split_x %211
+            32    %213 = load_const (0x00000005)
+            32    %214 = ior %212, %213 (0x5)
+            32    %215 = unpack_64_2x32_split_y %211
+            64    %216 = pack_64_2x32_split %214, %215
+            8     %217 = iand %207.y, %44 (0x1)
+            1     %218 = ine %217, %43 (0x0)
+            64    %219 = b2i64 %218
+            32    %220 = load_const (0x00000009)
+            64    %221 = ishl %219, %220 (0x9)
+            64    %222 = ior %216, %221
+            8     %223 = iand %207.z, %44 (0x1)
+            1     %224 = ine %223, %43 (0x0)
+            64    %225 = b2i64 %224
+            32    %226 = load_const (0x0000000a = 10)
+            64    %227 = ishl %225, %226 (0xa)
+            64    %228 = ior %222, %227
+            32    %229 = unpack_64_2x32_split_x %228
+            32    %230 = load_const (0x7b000000 = 2063597568)
+            32    %231 = ior %230 (0x7b000000), %229
+                         @store_global (%231, %157) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %232 = u2u64 %40
+            64    %233 = ishl %232, %46 (0x8)
+            8x4   %234 = unpack_32_4x8 %206
+            8     %235 = iand %234.x, %44 (0x1)
+            1     %236 = ine %235, %43 (0x0)
+            64    %237 = b2i64 %236
+            64    %238 = ishl %237, %220 (0x9)
+            64    %239 = ior %233, %238
+            32    %240 = u2u32 %239
+            64    %241 = iadd %157, %164 (0x4)
+                         @store_global (%240, %241) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %242 = iadd %157, %162 (0x8)
+                         @store_global (%161, %242) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %243 = iadd %157, %166 (0xc)
+                         @store_global (%163, %243) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %244 = iadd %157, %183 (0x10)
+                         @store_global (%165, %244) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %245 = iadd %157, %184 (0x14)
+                         @store_global (%167, %245) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %246 = iadd %157, %185 (0x18)
+                         @store_global (%41 (0x0), %246) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b13
+        } else {
+            block b12:   // preds: b10
+            64    %247 = iadd %13, %32
+            32x4  %248 = @load_global (%247) (access=none, align_mul=4, align_offset=0)
+            64    %249 = load_const (0x0000000000000004)
+            64    %250 = load_const (0x0000000000000010 = 16)
+            64    %251 = iadd %247, %250 (0x10)
+            32    %252 = @load_global (%251) (access=none, align_mul=4, align_offset=0)
+            32    %253 = load_const (0x00000010 = 16)
+            32    %254 = mov %248.x
+            64    %255 = load_const (0x0000000000000008)
+            32    %256 = mov %248.z
+            32    %257 = imul %248.y, %18
+            64    %258 = load_const (0x000000000000000c = 12)
+            32    %259 = mov %248.w
+            32    %260 = ushr %45, %39 (0x1)
+            32    %261 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %262 = iand %5, %261 (0xffffff00)
+            32    %263 = ior %262, %260
+            32    %264 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %265 = iand %263, %264 (0xffff00ff)
+            32    %266 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %267 = unpack_32_4x8 %7
+            32    %268 = u2u32 %267.x
+            32    %269 = load_const (0x00000018 = 24)
+            32    %270 = ishl %268, %269 (0x18)
+            32    %271 = load_const (0x00ffffff = 16777215)
+            32    %272 = extract_u16 %265, %41 (0x0)
+            32    %273 = ior %272, %270
+            64    %274 = load_const (0x0000000000000014 = 20)
+            64    %275 = load_const (0x0000000000000018 = 24)
+            16    %276 = u2u16 %267.y
+            16    %277 = u2u16 %267.z
+            16    %278 = ishl %277, %46 (0x8)
+            16    %279 = ior %276, %278
+            8     %280 = u2u8 %279
+            16    %281 = load_const (0x0001)
+            16    %282 = extract_u8 %279, %281 (0x1)
+            8     %283 = u2u8 %282
+            32    %284 = u2u32 %280
+            32    %285 = ishl %284, %46 (0x8)
+            32    %286 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %287 = iand %286 (0xffff0000), %4
+            32    %288 = ior %287, %285
+            32    %289 = u2u32 %283
+            32    %290 = ishl %289, %253 (0x10)
+            32    %291 = iand %288, %266 (0xff00ffff)
+            32    %292 = ior %291, %290
+            32    %293 = u2u32 %267.w
+            32    %294 = ishl %293, %269 (0x18)
+            32    %295 = iand %292, %271 (0xffffff)
+            32    %296 = ior %295, %294
+            8x4   %297 = unpack_32_4x8 %273
+            8     %298 = iand %297.x, %44 (0x1)
+            1     %299 = ine %298, %43 (0x0)
+            64    %300 = b2i64 %299
+            64    %301 = ishl %300, %46 (0x8)
+            32    %302 = unpack_64_2x32_split_x %301
+            32    %303 = load_const (0x00000005)
+            32    %304 = ior %302, %303 (0x5)
+            32    %305 = unpack_64_2x32_split_y %301
+            64    %306 = pack_64_2x32_split %304, %305
+            8     %307 = iand %297.y, %44 (0x1)
+            1     %308 = ine %307, %43 (0x0)
+            64    %309 = b2i64 %308
+            32    %310 = load_const (0x00000009)
+            64    %311 = ishl %309, %310 (0x9)
+            64    %312 = ior %306, %311
+            8     %313 = iand %297.z, %44 (0x1)
+            1     %314 = ine %313, %43 (0x0)
+            64    %315 = b2i64 %314
+            32    %316 = load_const (0x0000000a = 10)
+            64    %317 = ishl %315, %316 (0xa)
+            64    %318 = ior %312, %317
+            32    %319 = unpack_64_2x32_split_x %318
+            32    %320 = load_const (0x7b000000 = 2063597568)
+            32    %321 = ior %320 (0x7b000000), %319
+                         @store_global (%321, %157) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %322 = u2u64 %40
+            64    %323 = ishl %322, %46 (0x8)
+            8x4   %324 = unpack_32_4x8 %296
+            8     %325 = iand %324.x, %44 (0x1)
+            1     %326 = ine %325, %43 (0x0)
+            64    %327 = b2i64 %326
+            64    %328 = ishl %327, %310 (0x9)
+            64    %329 = ior %323, %328
+            32    %330 = u2u32 %329
+            64    %331 = iadd %157, %249 (0x4)
+                         @store_global (%330, %331) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %332 = iadd %157, %255 (0x8)
+                         @store_global (%254, %332) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %333 = iadd %157, %258 (0xc)
+                         @store_global (%256, %333) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %334 = iadd %157, %250 (0x10)
+                         @store_global (%257, %334) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %335 = iadd %157, %274 (0x14)
+                         @store_global (%252, %335) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %336 = iadd %157, %275 (0x18)
+                         @store_global (%259, %336) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b13
+        }
+        block b13:  // preds: b11 b12, succs: b15
+    } else {
+        block b14:  // preds: b0, succs: b15
+    }
+    block b15:   // preds: b13 b14
+    32    %337 = load_const (0x00000020 = 32)
+    32    %338 = iand %20, %337 (0x20)
+    32    %339 = load_const (0x00000000)
+    1     %340 = ieq %338, %339 (0x0)
+    8     %341 = load_const (0x00)
+    8     %342 = load_const (0x01)
+    1     %343 = ieq %28, %339 (0x0)
+    32    %344 = load_const (0xffffffff = -1 = 4294967295)
+    32    %345 = iadd %37, %344 (0xffffffff)
+    32    %346 = bcsel %343, %339 (0x0), %345
+    64    %347 = u2u64 %22
+    64    %348 = iadd %30, %347
+    64    %349 = bcsel %343, %30, %348
+    64    %350 = iadd %12, %349
+                 // succs: b16 b20
+    if %340 {
+        block b16:   // preds: b15
+        1     %351 = ieq %27, %346
+        1     %352 = ult %28, %19
+        1     %353 = iand %352, %351
+                     // succs: b17 b18
+        if %353 {
+            block b17:   // preds: b16
+            64    %354 = load_const (0x0000000000000004)
+            64    %355 = load_const (0x0000000000000008)
+            32    %356 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %357 = iand %356 (0xffff0000), %3
+            32    %358 = load_const (0x0000000a = 10)
+            32    %359 = load_const (0x00000010 = 16)
+            8x4   %360 = unpack_32_4x8 %2
+            32    %361 = u2u32 %360.x
+            32    %362 = load_const (0x00000018 = 24)
+            32    %363 = ishl %361, %362 (0x18)
+            32    %364 = extract_u16 %357, %339 (0x0)
+            32    %365 = ior %364, %363
+            8x4   %366 = unpack_32_4x8 %365
+            8     %367 = iand %366.x, %342 (0x1)
+            1     %368 = ine %367, %341 (0x0)
+            64    %369 = b2i64 %368
+            64    %370 = ishl %369, %358 (0xa)
+            32    %371 = unpack_64_2x32_split_x %370
+            32    %372 = load_const (0x00000101 = 257)
+            32    %373 = ior %371, %372 (0x101)
+            32    %374 = unpack_64_2x32_split_y %370
+            64    %375 = pack_64_2x32_split %373, %374
+            8     %376 = iand %366.y, %342 (0x1)
+            1     %377 = ine %376, %341 (0x0)
+            64    %378 = b2i64 %377
+            32    %379 = load_const (0x0000000f = 15)
+            64    %380 = ishl %378, %379 (0xf)
+            64    %381 = ior %375, %380
+            8     %382 = iand %366.z, %342 (0x1)
+            1     %383 = ine %382, %341 (0x0)
+            64    %384 = b2i64 %383
+            64    %385 = ishl %384, %359 (0x10)
+            64    %386 = ior %381, %385
+            32    %387 = unpack_64_2x32_split_x %386
+            32    %388 = load_const (0x18800000 = 411041792)
+            32    %389 = ior %387, %388 (0x18800000)
+                         @store_global (%389, %350) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %390 = unpack_64_2x32_split_x %25
+            32    %391 = unpack_64_2x32_split_y %25
+            32    %392 = extract_u16 %391, %339 (0x0)
+            64    %393 = iadd %350, %354 (0x4)
+                         @store_global (%390, %393) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %394 = iadd %350, %355 (0x8)
+                         @store_global (%392, %394) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b19
+        } else {
+            block b18:  // preds: b16, succs: b19
+        }
+        block b19:  // preds: b17 b18, succs: b27
+    } else {
+        block b20:   // preds: b15
+        1     %395 = ine %27, %346
+                     // succs: b21 b25
+        if %395 {
+            block b21:   // preds: b20
+            32    %396 = iadd %23, %344 (0xffffffff)
+            1     %397 = ieq %26, %396
+                         // succs: b22 b23
+            if %397 {
+                block b22:   // preds: b21
+                64    %398 = load_const (0x0000000000000004)
+                64    %399 = load_const (0x0000000000000008)
+                32    %400 = load_const (0xffff0000 = -65536 = 4294901760)
+                32    %401 = iand %400 (0xffff0000), %1
+                32    %402 = load_const (0x0000000a = 10)
+                32    %403 = load_const (0x00000010 = 16)
+                8x4   %404 = unpack_32_4x8 %2
+                32    %405 = u2u32 %404.x
+                32    %406 = load_const (0x00000018 = 24)
+                32    %407 = ishl %405, %406 (0x18)
+                32    %408 = extract_u16 %401, %339 (0x0)
+                32    %409 = ior %408, %407
+                8x4   %410 = unpack_32_4x8 %409
+                8     %411 = iand %410.x, %342 (0x1)
+                1     %412 = ine %411, %341 (0x0)
+                64    %413 = b2i64 %412
+                64    %414 = ishl %413, %402 (0xa)
+                32    %415 = unpack_64_2x32_split_x %414
+                32    %416 = load_const (0x00000101 = 257)
+                32    %417 = ior %415, %416 (0x101)
+                32    %418 = unpack_64_2x32_split_y %414
+                64    %419 = pack_64_2x32_split %417, %418
+                8     %420 = iand %410.y, %342 (0x1)
+                1     %421 = ine %420, %341 (0x0)
+                64    %422 = b2i64 %421
+                32    %423 = load_const (0x0000000f = 15)
+                64    %424 = ishl %422, %423 (0xf)
+                64    %425 = ior %419, %424
+                8     %426 = iand %410.z, %342 (0x1)
+                1     %427 = ine %426, %341 (0x0)
+                64    %428 = b2i64 %427
+                64    %429 = ishl %428, %403 (0x10)
+                64    %430 = ior %425, %429
+                32    %431 = unpack_64_2x32_split_x %430
+                32    %432 = load_const (0x18800000 = 411041792)
+                32    %433 = ior %431, %432 (0x18800000)
+                             @store_global (%433, %350) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %434 = unpack_64_2x32_split_x %24
+                32    %435 = unpack_64_2x32_split_y %24
+                32    %436 = extract_u16 %435, %339 (0x0)
+                64    %437 = iadd %350, %398 (0x4)
+                             @store_global (%434, %437) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %438 = iadd %350, %399 (0x8)
+                             @store_global (%436, %438) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                             // succs: b24
+            } else {
+                block b23:  // preds: b21, succs: b24
+            }
+            block b24:  // preds: b22 b23, succs: b26
+        } else {
+            block b25:   // preds: b20
+            64    %439 = load_const (0x0000000000000004)
+            64    %440 = load_const (0x0000000000000008)
+            32    %441 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %442 = iand %441 (0xffff0000), %0
+            32    %443 = load_const (0x0000000a = 10)
+            32    %444 = load_const (0x00000010 = 16)
+            8x4   %445 = unpack_32_4x8 %2
+            32    %446 = u2u32 %445.x
+            32    %447 = load_const (0x00000018 = 24)
+            32    %448 = ishl %446, %447 (0x18)
+            32    %449 = extract_u16 %442, %339 (0x0)
+            32    %450 = ior %449, %448
+            8x4   %451 = unpack_32_4x8 %450
+            8     %452 = iand %451.x, %342 (0x1)
+            1     %453 = ine %452, %341 (0x0)
+            64    %454 = b2i64 %453
+            64    %455 = ishl %454, %443 (0xa)
+            32    %456 = unpack_64_2x32_split_x %455
+            32    %457 = load_const (0x00000101 = 257)
+            32    %458 = ior %456, %457 (0x101)
+            32    %459 = unpack_64_2x32_split_y %455
+            64    %460 = pack_64_2x32_split %458, %459
+            8     %461 = iand %451.y, %342 (0x1)
+            1     %462 = ine %461, %341 (0x0)
+            64    %463 = b2i64 %462
+            32    %464 = load_const (0x0000000f = 15)
+            64    %465 = ishl %463, %464 (0xf)
+            64    %466 = ior %460, %465
+            8     %467 = iand %451.z, %342 (0x1)
+            1     %468 = ine %467, %341 (0x0)
+            64    %469 = b2i64 %468
+            64    %470 = ishl %469, %444 (0x10)
+            64    %471 = ior %466, %470
+            32    %472 = unpack_64_2x32_split_x %471
+            32    %473 = load_const (0x18800000 = 411041792)
+            32    %474 = ior %472, %473 (0x18800000)
+                         @store_global (%474, %350) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %475 = unpack_64_2x32_split_x %25
+            32    %476 = unpack_64_2x32_split_y %25
+            32    %477 = extract_u16 %476, %339 (0x0)
+            64    %478 = iadd %350, %439 (0x4)
+                         @store_global (%475, %478) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %479 = iadd %350, %440 (0x8)
+                         @store_global (%477, %479) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b26
+        }
+        block b26:  // preds: b24 b25, succs: b27
+    }
+    block b27:  // preds: b19 b26, succs: b28
+    block b28:
+   */
+   static const uint32_t impl_0_nir[1507] = {
+    0x000001fd, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000010, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0x00000000, 0x00000027, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0xe4001744,
+    0xe4021744, 0xe4031744, 0xc4041744, 0xe4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0xc40a1744, 0xc40b1744, 0xc40c1744, 0xe40d1744,
+    0xe40e1744, 0xc40f1744, 0xc431f000, 0x00000000,
+    0x001c0013, 0xc4005354, 0x00000048, 0x00000400,
+    0xc433f000, 0x00000000, 0x0018001c, 0xe438f000,
+    0x00000000, 0x0000001f, 0xc433f000, 0x00000000,
+    0x0011001d, 0xe438f000, 0x00000000, 0x00000021,
+    0x00009605, 0x00005605, 0xc4351000, 0x00000000,
+    0x0024001c, 0xe438f000, 0x00000000, 0x00000025,
+    0xc43ae000, 0x00000000, 0x0015001e, 0x243a6000,
+    0x00000000, 0x0027001d, 0x00000001, 0x000000a0,
+    0x00000000, 0x00000005, 0x00000000, 0x0000000f,
+    0x00003605, 0xc4322000, 0x00000000, 0x002a0016,
+    0x00000e05, 0x24345000, 0x00000000, 0x002c002b,
+    0x00001405, 0x00003405, 0xc4322000, 0x00000000,
+    0x00240016, 0x00011605, 0xc4322000, 0x00000000,
+    0x00310016, 0x24345000, 0x00000000, 0x002c0032,
+    0xc4322000, 0x00000000, 0x00230016, 0x24345000,
+    0x00000000, 0x002c0034, 0xe431f000, 0x00000000,
+    0x0020000e, 0xc43ac000, 0x00000000, 0x00340032,
+    0x24345000, 0x00000000, 0x002c0037, 0x00000001,
+    0x000000e0, 0x00000000, 0x00000005, 0x00000000,
+    0x00000012, 0x00007605, 0xc47cc000, 0x00000000,
+    0x003a0032, 0x00000000, 0x00240034, 0xc431f020,
+    0x00000000, 0x003c003b, 0xc4351000, 0x00000000,
+    0x0024003d, 0xfffff605, 0xc431f000, 0x00000000,
+    0x003e003f, 0x00009705, 0x00011705, 0x00019705,
+    0x00019605, 0x00021705, 0x00021605, 0x00000f05,
+    0x78080e05, 0xc434e000, 0x00000000, 0x00400048,
+    0x00006894, 0x00000124, 0x000000d8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00410036, 0x00000001,
+    0x000000cc, 0x00000000, 0x00000001, 0x00000000,
+    0x00000030, 0xc4273000, 0x00000000, 0x0044002d,
+    0x00000031, 0xe4319000, 0x00000000, 0x0000004c,
+    0xe471f000, 0x00000000, 0x0022000f, 0x00000000,
+    0x004d004e, 0x24327000, 0x00000000, 0x0047004f,
+    0xc4225000, 0x00000000, 0x00000050, 0xffe01605,
+    0xc4322000, 0x00000000, 0x0052000d, 0xc434e000,
+    0x00000000, 0x00510053, 0x00201605, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00560054, 0xc434e000,
+    0x00000000, 0x00550057, 0xa83b8000, 0x00000000,
+    0x0000000c, 0xc438e000, 0x00000000, 0x00000059,
+    0xc4351000, 0x00000000, 0x0046005a, 0xc4287000,
+    0x00000000, 0x002c0058, 0xc434e000, 0x00000000,
+    0x005b005c, 0xc83bc000, 0x00000000, 0x0000004f,
+    0x903bb000, 0x00000000, 0x0000005d, 0x84322000,
+    0x00000000, 0x002f005f, 0x24345000, 0x00000000,
+    0x002e0060, 0xe4226000, 0x00000000, 0x00000061,
+    0x0001b605, 0xe4351000, 0x00000000, 0x00630062,
+    0x84322100, 0x00000000, 0x002f005f, 0x24345000,
+    0x00000000, 0x002e0065, 0xe4226000, 0x00000000,
+    0x00000066, 0x0001d605, 0xe4351000, 0x00000000,
+    0x00680067, 0xe434e000, 0x00000000, 0x00690064,
+    0xe438f000, 0x00000000, 0x00000017, 0xe4351000,
+    0x00000000, 0x0046006b, 0xe434e000, 0x00000000,
+    0x006c006a, 0xc43bd000, 0x00000000, 0x0000006d,
+    0x7c000e05, 0xc434e000, 0x00000000, 0x006f006e,
+    0x00006894, 0x000001c0, 0x00000128, 0x00040001,
+    0xc438e000, 0x00000000, 0x0000004f, 0xe431f000,
+    0x00000000, 0x00420036, 0x00006894, 0x000001c4,
+    0x000001c8, 0x00040001, 0xc435a100, 0x00000000,
+    0x0000005e, 0xe431f000, 0x00000000, 0x00430036,
+    0x00006894, 0x000001cc, 0x000001d0, 0x00040001,
+    0xe431f000, 0x00000000, 0x00450036, 0x00006894,
+    0x000000c4, 0x000001d4, 0x00040001, 0x00029705,
+    0xe431f000, 0x00000000, 0x00760036, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x00000077, 0x0000004b, 0x0000004a,
+    0x00000078, 0x00000001, 0x000000d4, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002d, 0xe431f000,
+    0x00000000, 0x00260010, 0x00006894, 0x00000074,
+    0x000001f0, 0x00040001, 0x24327000, 0x00000000,
+    0x0047007c, 0xc4225000, 0x00000000, 0x0000007d,
+    0xffe01605, 0xc4322000, 0x00000000, 0x007f000b,
+    0xc434e000, 0x00000000, 0x007e0080, 0x00201605,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00830081,
+    0xc434e000, 0x00000000, 0x00820084, 0xa83b8000,
+    0x00000000, 0x0000000c, 0xc438e000, 0x00000000,
+    0x00000086, 0xc4351000, 0x00000000, 0x00460087,
+    0xc4287000, 0x00000000, 0x002c0085, 0xc434e000,
+    0x00000000, 0x00880089, 0xc83bc000, 0x00000000,
+    0x0000007c, 0x903bb000, 0x00000000, 0x0000008a,
+    0x84322000, 0x00000000, 0x002f008c, 0x24345000,
+    0x00000000, 0x002e008d, 0xe4226000, 0x00000000,
+    0x0000008e, 0x0001b605, 0xe4351000, 0x00000000,
+    0x0090008f, 0x84322100, 0x00000000, 0x002f008c,
+    0x24345000, 0x00000000, 0x002e0092, 0xe4226000,
+    0x00000000, 0x00000093, 0x0001d605, 0xe4351000,
+    0x00000000, 0x00950094, 0xe434e000, 0x00000000,
+    0x00960091, 0xe438f000, 0x00000000, 0x00000017,
+    0xe4351000, 0x00000000, 0x00460098, 0xe434e000,
+    0x00000000, 0x00990097, 0xc43bd000, 0x00000000,
+    0x0000009a, 0x80000e05, 0xc434e000, 0x00000000,
+    0x009c009b, 0x00006894, 0x00000274, 0x000001e8,
+    0x00040001, 0xc438e000, 0x00000000, 0x0000007c,
+    0xe431f000, 0x00000000, 0x0041007a, 0x00006894,
+    0x00000278, 0x0000027c, 0x00040001, 0xc435a100,
+    0x00000000, 0x0000008b, 0xe431f000, 0x00000000,
+    0x0042007a, 0x00006894, 0x00000280, 0x00000284,
+    0x00040001, 0xe431f000, 0x00000000, 0x0043007a,
+    0x00006894, 0x0000008c, 0x00000288, 0x00040001,
+    0xe431f000, 0x00000000, 0x0045007a, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x000000a3, 0x0000007b, 0x0000007a,
+    0x000000a4, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0xe4000028, 0x000000a6,
+    0x000000a5, 0x00000036, 0x000000a7, 0x2434a000,
+    0x00000000, 0x0000002d, 0x00000001, 0x000002a8,
+    0x00000000, 0x00000001, 0x00000000, 0x0000005f,
+    0xe431f000, 0x00000000, 0x0022000f, 0xd0005354,
+    0x000002b0, 0x00000400, 0xc435a000, 0x00000000,
+    0x000000ad, 0x00011705, 0xc435a200, 0x00000000,
+    0x000000ad, 0x00009705, 0xc433f100, 0x00000000,
+    0x001400ad, 0x00019705, 0xc435a300, 0x00000000,
+    0x000000ad, 0xc43cc000, 0x00000000, 0x002a0030,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00b6000a,
+    0xc434e000, 0x00000000, 0x00b500b7, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00b900b8, 0x00021605,
+    0x00000605, 0xff00ffff, 0x903bb000, 0x00000000,
+    0x00000009, 0xc438e000, 0x00000000, 0x000000bd,
+    0x00031605, 0xc4351000, 0x00000000, 0x00bf00be,
+    0x00000605, 0x00ffffff, 0xc4287000, 0x00000000,
+    0x002c00ba, 0xc434e000, 0x00000000, 0x00c000c2,
+    0x00021705, 0x00029705, 0x00031705, 0xa438d100,
+    0x00000000, 0x000000bd, 0xa438d200, 0x00000000,
+    0x000000bd, 0xa4351000, 0x00000000, 0x003100c8,
+    0xa434e000, 0x00000000, 0x00c900c7, 0x84390000,
+    0x00000000, 0x000000ca, 0x00003505, 0xa4288000,
+    0x00000000, 0x00cc00ca, 0x84390000, 0x00000000,
+    0x000000cd, 0xc438e000, 0x00000000, 0x000000cb,
+    0xc4351000, 0x00000000, 0x003100cf, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x000800d1, 0xc434e000,
+    0x00000000, 0x00d000d2, 0xc438e000, 0x00000000,
+    0x000000ce, 0xc4351000, 0x00000000, 0x00bb00d4,
+    0xc4322000, 0x00000000, 0x00bc00d3, 0xc434e000,
+    0x00000000, 0x00d500d6, 0xc438e300, 0x00000000,
+    0x000000bd, 0xc4351000, 0x00000000, 0x00bf00d8,
+    0xc4322000, 0x00000000, 0x00c100d7, 0xc434e000,
+    0x00000000, 0x00d900da, 0x903bb000, 0x00000000,
+    0x000000c3, 0x84322000, 0x00000000, 0x002f00dc,
+    0x24345000, 0x00000000, 0x002e00dd, 0xe4226000,
+    0x00000000, 0x000000de, 0xe4351000, 0x00000000,
+    0x003100df, 0xc43bd000, 0x00000000, 0x000000e0,
+    0x0000b605, 0xc434e000, 0x00000000, 0x00e200e1,
+    0xc43be000, 0x00000000, 0x000000e0, 0xe4369000,
+    0x00000000, 0x00e400e3, 0x84322100, 0x00000000,
+    0x002f00dc, 0x24345000, 0x00000000, 0x002e00e6,
+    0xe4226000, 0x00000000, 0x000000e7, 0x00013605,
+    0xe4351000, 0x00000000, 0x00e900e8, 0xe434e000,
+    0x00000000, 0x00ea00e5, 0x84322200, 0x00000000,
+    0x002f00dc, 0x24345000, 0x00000000, 0x002e00ec,
+    0xe4226000, 0x00000000, 0x000000ed, 0x00015605,
+    0xe4351000, 0x00000000, 0x00ef00ee, 0xe434e000,
+    0x00000000, 0x00f000eb, 0xc43bd000, 0x00000000,
+    0x000000f1, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00f200f3, 0x00006894, 0x000003d0, 0x000002a4,
+    0x00040001, 0xe438f000, 0x00000000, 0x0000002b,
+    0xe4351000, 0x00000000, 0x003100f5, 0x903bb000,
+    0x00000000, 0x000000db, 0x84322000, 0x00000000,
+    0x002f00f7, 0x24345000, 0x00000000, 0x002e00f8,
+    0xe4226000, 0x00000000, 0x000000f9, 0xe4351000,
+    0x00000000, 0x00e900fa, 0xe434e000, 0x00000000,
+    0x00fb00f6, 0xc438e000, 0x00000000, 0x000000fc,
+    0xe431f000, 0x00000000, 0x00b100a9, 0x00006894,
+    0x000003f4, 0x000003f8, 0x00040001, 0xe431f000,
+    0x00000000, 0x00af00a9, 0x00006894, 0x000002b8,
+    0x000003fc, 0x00040001, 0xe431f000, 0x00000000,
+    0x00b300a9, 0x00006894, 0x000002c0, 0x00000400,
+    0x00040001, 0xe431f000, 0x00000000, 0x00c400a9,
+    0x00006894, 0x000002c8, 0x00000404, 0x00040001,
+    0xe431f000, 0x00000000, 0x00c500a9, 0x00006894,
+    0x000002d0, 0x00000408, 0x00040001, 0xe431f000,
+    0x00000000, 0x00c600a9, 0x00006894, 0x000000b0,
+    0x0000040c, 0x00040001, 0x00000001, 0x00000000,
+    0x00000061, 0xe431f000, 0x00000000, 0x0022000f,
+    0xd0005354, 0x00000414, 0x00000400, 0x00009705,
+    0x00021705, 0xe431f000, 0x00000000, 0x01080105,
+    0xc4005354, 0x00000424, 0x00000400, 0x00021605,
+    0xc435a000, 0x00000000, 0x00000106, 0x00011705,
+    0xc435a200, 0x00000000, 0x00000106, 0xc433f100,
+    0x00000000, 0x00140106, 0x00019705, 0xc435a300,
+    0x00000000, 0x00000106, 0xc43cc000, 0x00000000,
+    0x002a0030, 0xffe01605, 0xc4322000, 0x00000000,
+    0x01130007, 0xc434e000, 0x00000000, 0x01120114,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x01160115,
+    0x00000605, 0xff00ffff, 0x903bb000, 0x00000000,
+    0x00000009, 0xc438e000, 0x00000000, 0x00000119,
+    0x00031605, 0xc4351000, 0x00000000, 0x011b011a,
+    0x00000605, 0x00ffffff, 0xc4287000, 0x00000000,
+    0x002c0117, 0xc434e000, 0x00000000, 0x011c011e,
+    0x00029705, 0x00031705, 0xa438d100, 0x00000000,
+    0x00000119, 0xa438d200, 0x00000000, 0x00000119,
+    0xa4351000, 0x00000000, 0x00310123, 0xa434e000,
+    0x00000000, 0x01240122, 0x84390000, 0x00000000,
+    0x00000125, 0x00003505, 0xa4288000, 0x00000000,
+    0x01270125, 0x84390000, 0x00000000, 0x00000128,
+    0xc438e000, 0x00000000, 0x00000126, 0xc4351000,
+    0x00000000, 0x0031012a, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x0006012c, 0xc434e000, 0x00000000,
+    0x012b012d, 0xc438e000, 0x00000000, 0x00000129,
+    0xc4351000, 0x00000000, 0x010b012f, 0xc4322000,
+    0x00000000, 0x0118012e, 0xc434e000, 0x00000000,
+    0x01300131, 0xc438e300, 0x00000000, 0x00000119,
+    0xc4351000, 0x00000000, 0x011b0133, 0xc4322000,
+    0x00000000, 0x011d0132, 0xc434e000, 0x00000000,
+    0x01340135, 0x903bb000, 0x00000000, 0x0000011f,
+    0x84322000, 0x00000000, 0x002f0137, 0x24345000,
+    0x00000000, 0x002e0138, 0xe4226000, 0x00000000,
+    0x00000139, 0xe4351000, 0x00000000, 0x0031013a,
+    0xc43bd000, 0x00000000, 0x0000013b, 0x0000b605,
+    0xc434e000, 0x00000000, 0x013d013c, 0xc43be000,
+    0x00000000, 0x0000013b, 0xe4369000, 0x00000000,
+    0x013f013e, 0x84322100, 0x00000000, 0x002f0137,
+    0x24345000, 0x00000000, 0x002e0141, 0xe4226000,
+    0x00000000, 0x00000142, 0x00013605, 0xe4351000,
+    0x00000000, 0x01440143, 0xe434e000, 0x00000000,
+    0x01450140, 0x84322200, 0x00000000, 0x002f0137,
+    0x24345000, 0x00000000, 0x002e0147, 0xe4226000,
+    0x00000000, 0x00000148, 0x00015605, 0xe4351000,
+    0x00000000, 0x014a0149, 0xe434e000, 0x00000000,
+    0x014b0146, 0xc43bd000, 0x00000000, 0x0000014c,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x014d014e,
+    0x00006894, 0x0000053c, 0x000002a4, 0x00040001,
+    0xe438f000, 0x00000000, 0x0000002b, 0xe4351000,
+    0x00000000, 0x00310150, 0x903bb000, 0x00000000,
+    0x00000136, 0x84322000, 0x00000000, 0x002f0152,
+    0x24345000, 0x00000000, 0x002e0153, 0xe4226000,
+    0x00000000, 0x00000154, 0xe4351000, 0x00000000,
+    0x01440155, 0xe434e000, 0x00000000, 0x01560151,
+    0xc438e000, 0x00000000, 0x00000157, 0xe431f000,
+    0x00000000, 0x010700a9, 0x00006894, 0x00000560,
+    0x00000564, 0x00040001, 0xe431f000, 0x00000000,
+    0x010d00a9, 0x00006894, 0x00000430, 0x00000568,
+    0x00040001, 0xe431f000, 0x00000000, 0x011000a9,
+    0x00006894, 0x00000438, 0x0000056c, 0x00040001,
+    0xe431f000, 0x00000000, 0x010800a9, 0x00006894,
+    0x0000043c, 0x00000570, 0x00040001, 0xe431f000,
+    0x00000000, 0x012000a9, 0x00006894, 0x00000428,
+    0x00000574, 0x00040001, 0xe431f000, 0x00000000,
+    0x012100a9, 0x00006894, 0x00000444, 0x00000578,
+    0x00040001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x0000000e,
+    0x00041605, 0xc4322000, 0x00000000, 0x01620016,
+    0x00000e05, 0x24327000, 0x00000000, 0x01640163,
+    0x00001405, 0x00003405, 0x24327000, 0x00000000,
+    0x0164001e, 0xfffff605, 0xc431f000, 0x00000000,
+    0x01690027, 0xc4273000, 0x00000000, 0x01640168,
+    0x0000016a, 0xe438f000, 0x00000000, 0x00000018,
+    0xe431f000, 0x00000000, 0x016c0020, 0xe4273000,
+    0x00000000, 0x00200168, 0x0000016d, 0xe431f000,
+    0x00000000, 0x016e000e, 0x00000001, 0x00000594,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x24327000, 0x00000000, 0x016b001d, 0x243a6000,
+    0x00000000, 0x0015001e, 0x24322000, 0x00000000,
+    0x01710172, 0x00000001, 0x000005cc, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002c, 0x00009705,
+    0x00011705, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x00050177, 0x00015605, 0x00021605, 0x903bb000,
+    0x00000000, 0x00000004, 0xc438e000, 0x00000000,
+    0x0000017b, 0x00031605, 0xc4351000, 0x00000000,
+    0x017d017c, 0xc4287000, 0x00000000, 0x01640178,
+    0xc434e000, 0x00000000, 0x017e017f, 0x903bb000,
+    0x00000000, 0x00000180, 0x84322000, 0x00000000,
+    0x01670181, 0x24345000, 0x00000000, 0x01660182,
+    0xe4226000, 0x00000000, 0x00000183, 0xe4351000,
+    0x00000000, 0x01790184, 0xc43bd000, 0x00000000,
+    0x00000185, 0x00203605, 0xc434e000, 0x00000000,
+    0x01870186, 0xc43be000, 0x00000000, 0x00000185,
+    0xe4369000, 0x00000000, 0x01890188, 0x84322100,
+    0x00000000, 0x01670181, 0x24345000, 0x00000000,
+    0x0166018b, 0xe4226000, 0x00000000, 0x0000018c,
+    0x0001f605, 0xe4351000, 0x00000000, 0x018e018d,
+    0xe434e000, 0x00000000, 0x018f018a, 0x84322200,
+    0x00000000, 0x01670181, 0x24345000, 0x00000000,
+    0x01660191, 0xe4226000, 0x00000000, 0x00000192,
+    0xe4351000, 0x00000000, 0x017a0193, 0xe434e000,
+    0x00000000, 0x01940190, 0xc43bd000, 0x00000000,
+    0x00000195, 0x18800e05, 0xc434e000, 0x00000000,
+    0x01970196, 0x00006894, 0x00000660, 0x000005bc,
+    0x00040001, 0xc43bd000, 0x00000000, 0x0000001b,
+    0xc43be000, 0x00000000, 0x0000001b, 0xc4287000,
+    0x00000000, 0x0164019a, 0xe431f000, 0x00000000,
+    0x0175016f, 0x00006894, 0x00000664, 0x00000670,
+    0x00040001, 0xe431f000, 0x00000000, 0x0176016f,
+    0x00006894, 0x0000066c, 0x00000674, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000003, 0x00000000, 0x00000001,
+    0x24345000, 0x00000000, 0x016b001d, 0x00000001,
+    0x00000684, 0x00000000, 0x00000003, 0x00000000,
+    0x00000002, 0xc431f000, 0x00000000, 0x01690019,
+    0x24327000, 0x00000000, 0x01a3001c, 0x00000001,
+    0x00000690, 0x00000000, 0x00000001, 0x00000000,
+    0x0000002c, 0x00009705, 0x00011705, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x000301a8, 0x00015605,
+    0x00021605, 0x903bb000, 0x00000000, 0x00000004,
+    0xc438e000, 0x00000000, 0x000001ac, 0x00031605,
+    0xc4351000, 0x00000000, 0x01ae01ad, 0xc4287000,
+    0x00000000, 0x016401a9, 0xc434e000, 0x00000000,
+    0x01af01b0, 0x903bb000, 0x00000000, 0x000001b1,
+    0x84322000, 0x00000000, 0x016701b2, 0x24345000,
+    0x00000000, 0x016601b3, 0xe4226000, 0x00000000,
+    0x000001b4, 0xe4351000, 0x00000000, 0x01aa01b5,
+    0xc43bd000, 0x00000000, 0x000001b6, 0x00203605,
+    0xc434e000, 0x00000000, 0x01b801b7, 0xc43be000,
+    0x00000000, 0x000001b6, 0xe4369000, 0x00000000,
+    0x01ba01b9, 0x84322100, 0x00000000, 0x016701b2,
+    0x24345000, 0x00000000, 0x016601bc, 0xe4226000,
+    0x00000000, 0x000001bd, 0x0001f605, 0xe4351000,
+    0x00000000, 0x01bf01be, 0xe434e000, 0x00000000,
+    0x01c001bb, 0x84322200, 0x00000000, 0x016701b2,
+    0x24345000, 0x00000000, 0x016601c2, 0xe4226000,
+    0x00000000, 0x000001c3, 0xe4351000, 0x00000000,
+    0x01ab01c4, 0xe434e000, 0x00000000, 0x01c501c1,
+    0xc43bd000, 0x00000000, 0x000001c6, 0x18800e05,
+    0xc434e000, 0x00000000, 0x01c801c7, 0x00006894,
+    0x00000724, 0x000005bc, 0x00040001, 0xc43bd000,
+    0x00000000, 0x0000001a, 0xc43be000, 0x00000000,
+    0x0000001a, 0xc4287000, 0x00000000, 0x016401cb,
+    0xe431f000, 0x00000000, 0x01a6016f, 0x00006894,
+    0x00000728, 0x00000734, 0x00040001, 0xe431f000,
+    0x00000000, 0x01a7016f, 0x00006894, 0x00000730,
+    0x00000738, 0x00040001, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x0000002c, 0x00009705, 0x00011705,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x000201d4,
+    0x00015605, 0x00021605, 0x903bb000, 0x00000000,
+    0x00000004, 0xc438e000, 0x00000000, 0x000001d8,
+    0x00031605, 0xc4351000, 0x00000000, 0x01da01d9,
+    0xc4287000, 0x00000000, 0x016401d5, 0xc434e000,
+    0x00000000, 0x01db01dc, 0x903bb000, 0x00000000,
+    0x000001dd, 0x84322000, 0x00000000, 0x016701de,
+    0x24345000, 0x00000000, 0x016601df, 0xe4226000,
+    0x00000000, 0x000001e0, 0xe4351000, 0x00000000,
+    0x01d601e1, 0xc43bd000, 0x00000000, 0x000001e2,
+    0x00203605, 0xc434e000, 0x00000000, 0x01e401e3,
+    0xc43be000, 0x00000000, 0x000001e2, 0xe4369000,
+    0x00000000, 0x01e601e5, 0x84322100, 0x00000000,
+    0x016701de, 0x24345000, 0x00000000, 0x016601e8,
+    0xe4226000, 0x00000000, 0x000001e9, 0x0001f605,
+    0xe4351000, 0x00000000, 0x01eb01ea, 0xe434e000,
+    0x00000000, 0x01ec01e7, 0x84322200, 0x00000000,
+    0x016701de, 0x24345000, 0x00000000, 0x016601ee,
+    0xe4226000, 0x00000000, 0x000001ef, 0xe4351000,
+    0x00000000, 0x01d701f0, 0xe434e000, 0x00000000,
+    0x01f101ed, 0xc43bd000, 0x00000000, 0x000001f2,
+    0x18800e05, 0xc434e000, 0x00000000, 0x01f401f3,
+    0x00006894, 0x000007d4, 0x000005bc, 0x00040001,
+    0xc43bd000, 0x00000000, 0x0000001b, 0xc43be000,
+    0x00000000, 0x0000001b, 0xc4287000, 0x00000000,
+    0x016401f7, 0xe431f000, 0x00000000, 0x01d2016f,
+    0x00006894, 0x000007d8, 0x000007e4, 0x00040001,
+    0xe431f000, 0x00000000, 0x01d3016f, 0x00006894,
+    0x000007e0, 0x000007e8, 0x00040001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000000,
+};
+   nir_def *args[16] = { dst_base, wa_insts_ptr, indirect_base, draw_id_base, indirect_stride, _draw_count, draw_base, instance_multiplier, max_draw_count, flags, mocs, _3dprim_size_B, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx8_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx8_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    32      %9 = undefined
+    32     %10 = undefined
+    32     %11 = undefined
+    32     %12 = undefined
+    64     %13 = @load_param (param_idx=0)
+    64     %14 = @load_param (param_idx=1)
+    64     %15 = @load_param (param_idx=2)
+    32     %16 = @load_param (param_idx=3)
+    64     %17 = @load_param (param_idx=4)
+    32     %18 = @load_param (param_idx=5)
+    32     %19 = @load_param (param_idx=6)
+    32     %20 = @load_param (param_idx=7)
+    32     %21 = @load_param (param_idx=8)
+    64     %22 = @load_param (param_idx=9)
+    64     %23 = @load_param (param_idx=10)
+    32     %24 = @load_param (param_idx=11)
+    32     %25 = load_const (0x00000002)
+    32     %26 = extract_u8 %20, %25 (0x2)
+    32     %27 = load_const (0x00000004)
+    32     %28 = ishl %26, %25 (0x2)
+    32     %29 = load_const (0x00000003)
+    32     %30 = extract_u8 %20, %29 (0x3)
+    32     %31 = iadd %18, %24
+    32     %32 = imul %24, %28
+    64     %33 = u2u64 %32
+    32     %34 = imul %31, %16
+    64     %35 = u2u64 %34
+    32     %36 = load_const (0x00000008)
+    32     %37 = ishl %24, %29 (0x3)
+    64     %38 = u2u64 %37
+    64     %39 = load_const (0x0000000000000000)
+    1      %40 = ine %17, %39 (0x0)
+                 // succs: b1 b2
+    if %40 {
+        block b1:    // preds: b0
+        32     %41 = @load_global (%17) (access=none, align_mul=4, align_offset=0)
+        32     %42 = umin %19, %41
+                     // succs: b3
+    } else {
+        block b2:  // preds: b0, succs: b3
+    }
+    block b3:    // preds: b1 b2
+    32     %43 = phi b1: %42, b2: %19
+    1      %44 = ult %31, %43
+                 // succs: b4 b26
+    if %44 {
+        block b4:    // preds: b3
+        32     %45 = load_const (0x00000001)
+        32     %46 = iand %20, %45 (0x1)
+        32     %47 = load_const (0x00000000)
+        1      %48 = ieq %46, %47 (0x0)
+        8      %49 = load_const (0x00)
+        8      %50 = load_const (0x01)
+        32     %51 = iand %20, %25 (0x2)
+        32     %52 = iand %20, %36 (0x8)
+        1      %53 = ine %52, %47 (0x0)
+        32     %54 = iand %20, %27 (0x4)
+        1      %55 = ine %54, %47 (0x0)
+        32     %56 = extract_u8 %20, %45 (0x1)
+                     // succs: b5 b15
+        if %48 {
+            block b5:    // preds: b4
+            64     %57 = load_const (0x0000000000000008)
+            32     %58 = umax %54, %52
+            1      %59 = ine %58, %47 (0x0)
+            64     %60 = iadd %13, %33
+                         // succs: b6 b13
+            if %59 {
+                block b6:    // preds: b5
+                32     %61 = ushr %52, %29 (0x3)
+                32     %62 = ushr %54, %25 (0x2)
+                32     %63 = iadd.nsw %61, %62
+                32     %64 = ishl %63, %25 (0x2)
+                32     %65 = load_const (0xffffffff = -1 = 4294967295)
+                32     %66 = iadd %65 (0xffffffff), %64
+                64     %67 = load_const (0x0000000000000004)
+                64     %68 = load_const (0x000000000000000c = 12)
+                64     %69 = load_const (0x0000000000000010 = 16)
+                32     %70 = load_const (0x00000010 = 16)
+                32     %71 = load_const (0x78080000 = 2013790208)
+                32     %72 = ior %71 (0x78080000), %66
+                             @store_global (%72, %60) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64     %73 = iadd %60, %67 (0x4)
+                             // succs: b7 b8
+                if %53 {
+                    block b7:    // preds: b6
+                    32     %74 = iadd %30, %45 (0x1)
+                    64     %75 = iadd %35, %57 (0x8)
+                    64     %76 = iadd %14, %75
+                    1      %77 = ieq %76, %39 (0x0)
+                    32     %78 = b2i32 %77
+                    32     %79 = load_const (0xffffff00 = -256 = 4294967040)
+                    32     %80 = iand %12, %79 (0xffffff00)
+                    32     %81 = ior %80, %78
+                    32     %82 = load_const (0x00000100 = 256)
+                    32     %83 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32     %84 = iand %81, %83 (0xffff00ff)
+                    32     %85 = ior %84, %82 (0x100)
+                    16x2   %86 = unpack_32_2x16 %11
+                    32     %87 = u2u32 %86.x
+                    32     %88 = ishl %87, %70 (0x10)
+                    32     %89 = extract_u16 %85, %47 (0x0)
+                    32     %90 = ior %89, %88
+                    32x2   %91 = unpack_64_2x32 %76
+                    8x4    %92 = unpack_32_4x8 %90
+                    8      %93 = iand %92.x, %50 (0x1)
+                    1      %94 = ine %93, %49 (0x0)
+                    64     %95 = b2i64 %94
+                    32     %96 = load_const (0x0000000d = 13)
+                    64     %97 = ishl %95, %96 (0xd)
+                    8      %98 = iand %92.y, %50 (0x1)
+                    1      %99 = ine %98, %49 (0x0)
+                    64    %100 = b2i64 %99
+                    32    %101 = load_const (0x0000000e = 14)
+                    64    %102 = ishl %100, %101 (0xe)
+                    64    %103 = ior %97, %102
+                    64    %104 = u2u64 %56
+                    64    %105 = ishl %104, %70 (0x10)
+                    64    %106 = ior %103, %105
+                    64    %107 = u2u64 %30
+                    32    %108 = load_const (0x0000001a = 26)
+                    64    %109 = ishl %107, %108 (0x1a)
+                    64    %110 = ior %106, %109
+                    32    %111 = u2u32 %110
+                                 @store_global (%111, %73) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %112 = u2u32 %76
+                    64    %113 = iadd %60, %57 (0x8)
+                                 @store_global (%112, %113) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %114 = mov %91.y
+                    64    %115 = iadd %60, %68 (0xc)
+                                 @store_global (%114, %115) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %116 = iadd %60, %69 (0x10)
+                                 @store_global (%36 (0x8), %116) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %117 = load_const (0x0000000000000014 = 20)
+                    64    %118 = iadd %60, %117 (0x14)
+                                 // succs: b9
+                } else {
+                    block b8:  // preds: b6, succs: b9
+                }
+                block b9:    // preds: b7 b8
+                32    %119 = phi b7: %74, b8: %30
+                64    %120 = phi b7: %118, b8: %73
+                             // succs: b10 b11
+                if %55 {
+                    block b10:   // preds: b9
+                    64    %121 = iadd %15, %38
+                                 @store_global (%31, %121) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %122 = ineg %46
+                    64    %123 = iadd %121, %67 (0x4)
+                                 @store_global (%122, %123) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %124 = ieq %121, %39 (0x0)
+                    32    %125 = b2i32 %124
+                    32    %126 = load_const (0xffffff00 = -256 = 4294967040)
+                    32    %127 = iand %10, %126 (0xffffff00)
+                    32    %128 = ior %127, %125
+                    32    %129 = load_const (0x00000100 = 256)
+                    32    %130 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32    %131 = iand %128, %130 (0xffff00ff)
+                    32    %132 = ior %131, %129 (0x100)
+                    16x2  %133 = unpack_32_2x16 %11
+                    32    %134 = u2u32 %133.x
+                    32    %135 = ishl %134, %70 (0x10)
+                    32    %136 = extract_u16 %132, %47 (0x0)
+                    32    %137 = ior %136, %135
+                    32x2  %138 = unpack_64_2x32 %121
+                    8x4   %139 = unpack_32_4x8 %137
+                    8     %140 = iand %139.x, %50 (0x1)
+                    1     %141 = ine %140, %49 (0x0)
+                    64    %142 = b2i64 %141
+                    32    %143 = load_const (0x0000000d = 13)
+                    64    %144 = ishl %142, %143 (0xd)
+                    8     %145 = iand %139.y, %50 (0x1)
+                    1     %146 = ine %145, %49 (0x0)
+                    64    %147 = b2i64 %146
+                    32    %148 = load_const (0x0000000e = 14)
+                    64    %149 = ishl %147, %148 (0xe)
+                    64    %150 = ior %144, %149
+                    64    %151 = u2u64 %56
+                    64    %152 = ishl %151, %70 (0x10)
+                    64    %153 = ior %150, %152
+                    64    %154 = u2u64 %119
+                    32    %155 = load_const (0x0000001a = 26)
+                    64    %156 = ishl %154, %155 (0x1a)
+                    64    %157 = ior %153, %156
+                    32    %158 = u2u32 %157
+                                 @store_global (%158, %120) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %159 = u2u32 %121
+                    64    %160 = iadd %120, %67 (0x4)
+                                 @store_global (%159, %160) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %161 = mov %138.y
+                    64    %162 = iadd %120, %57 (0x8)
+                                 @store_global (%161, %162) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %163 = iadd %120, %68 (0xc)
+                                 @store_global (%36 (0x8), %163) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %164 = iadd %120, %69 (0x10)
+                                 // succs: b12
+                } else {
+                    block b11:  // preds: b9, succs: b12
+                }
+                block b12:   // preds: b10 b11
+                64    %165 = phi b10: %164, b11: %120
+                             // succs: b14
+            } else {
+                block b13:  // preds: b5, succs: b14
+            }
+            block b14:   // preds: b12 b13
+            64    %166 = phi b12: %165, b13: %60
+            64    %167 = iadd %14, %35
+            32x4  %168 = @load_global (%167) (access=none, align_mul=4, align_offset=0)
+            32    %169 = mov %168.x
+            32    %170 = mov %168.z
+            64    %171 = load_const (0x0000000000000004)
+            32    %172 = mov %168.y
+            64    %173 = load_const (0x000000000000000c = 12)
+            32    %174 = mov %168.w
+            32    %175 = ushr %51, %45 (0x1)
+            32    %176 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %177 = iand %9, %176 (0xffffff00)
+            32    %178 = ior %177, %175
+            32    %179 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %180 = iand %178, %179 (0xffff00ff)
+            32    %181 = load_const (0x00000010 = 16)
+            32    %182 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %183 = unpack_32_4x8 %8
+            32    %184 = u2u32 %183.x
+            32    %185 = load_const (0x00000018 = 24)
+            32    %186 = ishl %184, %185 (0x18)
+            32    %187 = load_const (0x00ffffff = 16777215)
+            32    %188 = extract_u16 %180, %47 (0x0)
+            32    %189 = ior %188, %186
+            64    %190 = load_const (0x0000000000000010 = 16)
+            64    %191 = load_const (0x0000000000000014 = 20)
+            64    %192 = load_const (0x0000000000000018 = 24)
+            16    %193 = u2u16 %183.y
+            16    %194 = u2u16 %183.z
+            16    %195 = ishl %194, %36 (0x8)
+            16    %196 = ior %193, %195
+            8     %197 = u2u8 %196
+            16    %198 = load_const (0x0001)
+            16    %199 = extract_u8 %196, %198 (0x1)
+            8     %200 = u2u8 %199
+            32    %201 = u2u32 %197
+            32    %202 = ishl %201, %36 (0x8)
+            32    %203 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %204 = iand %203 (0xffff0000), %7
+            32    %205 = ior %204, %202
+            32    %206 = u2u32 %200
+            32    %207 = ishl %206, %181 (0x10)
+            32    %208 = iand %205, %182 (0xff00ffff)
+            32    %209 = ior %208, %207
+            32    %210 = u2u32 %183.w
+            32    %211 = ishl %210, %185 (0x18)
+            32    %212 = iand %209, %187 (0xffffff)
+            32    %213 = ior %212, %211
+            8x4   %214 = unpack_32_4x8 %189
+            8     %215 = iand %214.x, %50 (0x1)
+            1     %216 = ine %215, %49 (0x0)
+            64    %217 = b2i64 %216
+            64    %218 = ishl %217, %36 (0x8)
+            32    %219 = unpack_64_2x32_split_x %218
+            32    %220 = load_const (0x00000005)
+            32    %221 = ior %219, %220 (0x5)
+            32    %222 = unpack_64_2x32_split_y %218
+            64    %223 = pack_64_2x32_split %221, %222
+            8     %224 = iand %214.y, %50 (0x1)
+            1     %225 = ine %224, %49 (0x0)
+            64    %226 = b2i64 %225
+            32    %227 = load_const (0x00000009)
+            64    %228 = ishl %226, %227 (0x9)
+            64    %229 = ior %223, %228
+            8     %230 = iand %214.z, %50 (0x1)
+            1     %231 = ine %230, %49 (0x0)
+            64    %232 = b2i64 %231
+            32    %233 = load_const (0x0000000a = 10)
+            64    %234 = ishl %232, %233 (0xa)
+            64    %235 = ior %229, %234
+            32    %236 = unpack_64_2x32_split_x %235
+            32    %237 = load_const (0x7b000000 = 2063597568)
+            32    %238 = ior %237 (0x7b000000), %236
+                         @store_global (%238, %166) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %239 = u2u64 %46
+            64    %240 = ishl %239, %36 (0x8)
+            8x4   %241 = unpack_32_4x8 %213
+            8     %242 = iand %241.x, %50 (0x1)
+            1     %243 = ine %242, %49 (0x0)
+            64    %244 = b2i64 %243
+            64    %245 = ishl %244, %227 (0x9)
+            64    %246 = ior %240, %245
+            32    %247 = u2u32 %246
+            64    %248 = iadd %166, %171 (0x4)
+                         @store_global (%247, %248) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %249 = iadd %166, %57 (0x8)
+                         @store_global (%169, %249) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %250 = iadd %166, %173 (0xc)
+                         @store_global (%170, %250) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %251 = iadd %166, %190 (0x10)
+                         @store_global (%172, %251) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %252 = iadd %166, %191 (0x14)
+                         @store_global (%174, %252) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %253 = iadd %166, %192 (0x18)
+                         @store_global (%47 (0x0), %253) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b25
+        } else {
+            block b15:   // preds: b4
+            64    %254 = load_const (0x000000000000000c = 12)
+            32    %255 = umax %54, %52
+            1     %256 = ine %255, %47 (0x0)
+            64    %257 = iadd %13, %33
+                         // succs: b16 b23
+            if %256 {
+                block b16:   // preds: b15
+                32    %258 = ushr %52, %29 (0x3)
+                32    %259 = ushr %54, %25 (0x2)
+                32    %260 = iadd.nsw %258, %259
+                32    %261 = ishl %260, %25 (0x2)
+                32    %262 = load_const (0xffffffff = -1 = 4294967295)
+                32    %263 = iadd %262 (0xffffffff), %261
+                64    %264 = load_const (0x0000000000000004)
+                64    %265 = load_const (0x0000000000000008)
+                64    %266 = load_const (0x0000000000000010 = 16)
+                32    %267 = load_const (0x00000010 = 16)
+                32    %268 = load_const (0x78080000 = 2013790208)
+                32    %269 = ior %268 (0x78080000), %263
+                             @store_global (%269, %257) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %270 = iadd %257, %264 (0x4)
+                             // succs: b17 b18
+                if %53 {
+                    block b17:   // preds: b16
+                    32    %271 = iadd %30, %45 (0x1)
+                    64    %272 = iadd %35, %254 (0xc)
+                    64    %273 = iadd %14, %272
+                    1     %274 = ieq %273, %39 (0x0)
+                    32    %275 = b2i32 %274
+                    32    %276 = load_const (0xffffff00 = -256 = 4294967040)
+                    32    %277 = iand %6, %276 (0xffffff00)
+                    32    %278 = ior %277, %275
+                    32    %279 = load_const (0x00000100 = 256)
+                    32    %280 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32    %281 = iand %278, %280 (0xffff00ff)
+                    32    %282 = ior %281, %279 (0x100)
+                    16x2  %283 = unpack_32_2x16 %11
+                    32    %284 = u2u32 %283.x
+                    32    %285 = ishl %284, %267 (0x10)
+                    32    %286 = extract_u16 %282, %47 (0x0)
+                    32    %287 = ior %286, %285
+                    32x2  %288 = unpack_64_2x32 %273
+                    8x4   %289 = unpack_32_4x8 %287
+                    8     %290 = iand %289.x, %50 (0x1)
+                    1     %291 = ine %290, %49 (0x0)
+                    64    %292 = b2i64 %291
+                    32    %293 = load_const (0x0000000d = 13)
+                    64    %294 = ishl %292, %293 (0xd)
+                    8     %295 = iand %289.y, %50 (0x1)
+                    1     %296 = ine %295, %49 (0x0)
+                    64    %297 = b2i64 %296
+                    32    %298 = load_const (0x0000000e = 14)
+                    64    %299 = ishl %297, %298 (0xe)
+                    64    %300 = ior %294, %299
+                    64    %301 = u2u64 %56
+                    64    %302 = ishl %301, %267 (0x10)
+                    64    %303 = ior %300, %302
+                    64    %304 = u2u64 %30
+                    32    %305 = load_const (0x0000001a = 26)
+                    64    %306 = ishl %304, %305 (0x1a)
+                    64    %307 = ior %303, %306
+                    32    %308 = u2u32 %307
+                                 @store_global (%308, %270) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %309 = u2u32 %273
+                    64    %310 = iadd %257, %265 (0x8)
+                                 @store_global (%309, %310) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %311 = mov %288.y
+                    64    %312 = iadd %257, %254 (0xc)
+                                 @store_global (%311, %312) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %313 = iadd %257, %266 (0x10)
+                                 @store_global (%36 (0x8), %313) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %314 = load_const (0x0000000000000014 = 20)
+                    64    %315 = iadd %257, %314 (0x14)
+                                 // succs: b19
+                } else {
+                    block b18:  // preds: b16, succs: b19
+                }
+                block b19:   // preds: b17 b18
+                32    %316 = phi b17: %271, b18: %30
+                64    %317 = phi b17: %315, b18: %270
+                             // succs: b20 b21
+                if %55 {
+                    block b20:   // preds: b19
+                    64    %318 = iadd %15, %38
+                                 @store_global (%31, %318) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %319 = ineg %46
+                    64    %320 = iadd %318, %264 (0x4)
+                                 @store_global (%319, %320) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %321 = ieq %318, %39 (0x0)
+                    32    %322 = b2i32 %321
+                    32    %323 = load_const (0xffffff00 = -256 = 4294967040)
+                    32    %324 = iand %5, %323 (0xffffff00)
+                    32    %325 = ior %324, %322
+                    32    %326 = load_const (0x00000100 = 256)
+                    32    %327 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32    %328 = iand %325, %327 (0xffff00ff)
+                    32    %329 = ior %328, %326 (0x100)
+                    16x2  %330 = unpack_32_2x16 %11
+                    32    %331 = u2u32 %330.x
+                    32    %332 = ishl %331, %267 (0x10)
+                    32    %333 = extract_u16 %329, %47 (0x0)
+                    32    %334 = ior %333, %332
+                    32x2  %335 = unpack_64_2x32 %318
+                    8x4   %336 = unpack_32_4x8 %334
+                    8     %337 = iand %336.x, %50 (0x1)
+                    1     %338 = ine %337, %49 (0x0)
+                    64    %339 = b2i64 %338
+                    32    %340 = load_const (0x0000000d = 13)
+                    64    %341 = ishl %339, %340 (0xd)
+                    8     %342 = iand %336.y, %50 (0x1)
+                    1     %343 = ine %342, %49 (0x0)
+                    64    %344 = b2i64 %343
+                    32    %345 = load_const (0x0000000e = 14)
+                    64    %346 = ishl %344, %345 (0xe)
+                    64    %347 = ior %341, %346
+                    64    %348 = u2u64 %56
+                    64    %349 = ishl %348, %267 (0x10)
+                    64    %350 = ior %347, %349
+                    64    %351 = u2u64 %316
+                    32    %352 = load_const (0x0000001a = 26)
+                    64    %353 = ishl %351, %352 (0x1a)
+                    64    %354 = ior %350, %353
+                    32    %355 = u2u32 %354
+                                 @store_global (%355, %317) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %356 = u2u32 %318
+                    64    %357 = iadd %317, %264 (0x4)
+                                 @store_global (%356, %357) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %358 = mov %335.y
+                    64    %359 = iadd %317, %265 (0x8)
+                                 @store_global (%358, %359) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %360 = iadd %317, %254 (0xc)
+                                 @store_global (%36 (0x8), %360) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %361 = iadd %317, %266 (0x10)
+                                 // succs: b22
+                } else {
+                    block b21:  // preds: b19, succs: b22
+                }
+                block b22:   // preds: b20 b21
+                64    %362 = phi b20: %361, b21: %317
+                             // succs: b24
+            } else {
+                block b23:  // preds: b15, succs: b24
+            }
+            block b24:   // preds: b22 b23
+            64    %363 = phi b22: %362, b23: %257
+            64    %364 = iadd %14, %35
+            32x4  %365 = @load_global (%364) (access=none, align_mul=4, align_offset=0)
+            64    %366 = load_const (0x0000000000000004)
+            64    %367 = load_const (0x0000000000000010 = 16)
+            64    %368 = iadd %364, %367 (0x10)
+            32    %369 = @load_global (%368) (access=none, align_mul=4, align_offset=0)
+            32    %370 = load_const (0x00000010 = 16)
+            32    %371 = mov %365.x
+            64    %372 = load_const (0x0000000000000008)
+            32    %373 = mov %365.z
+            32    %374 = mov %365.y
+            32    %375 = mov %365.w
+            32    %376 = ushr %51, %45 (0x1)
+            32    %377 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %378 = iand %4, %377 (0xffffff00)
+            32    %379 = ior %378, %376
+            32    %380 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %381 = iand %379, %380 (0xffff00ff)
+            32    %382 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %383 = unpack_32_4x8 %8
+            32    %384 = u2u32 %383.x
+            32    %385 = load_const (0x00000018 = 24)
+            32    %386 = ishl %384, %385 (0x18)
+            32    %387 = load_const (0x00ffffff = 16777215)
+            32    %388 = extract_u16 %381, %47 (0x0)
+            32    %389 = ior %388, %386
+            64    %390 = load_const (0x0000000000000014 = 20)
+            64    %391 = load_const (0x0000000000000018 = 24)
+            16    %392 = u2u16 %383.y
+            16    %393 = u2u16 %383.z
+            16    %394 = ishl %393, %36 (0x8)
+            16    %395 = ior %392, %394
+            8     %396 = u2u8 %395
+            16    %397 = load_const (0x0001)
+            16    %398 = extract_u8 %395, %397 (0x1)
+            8     %399 = u2u8 %398
+            32    %400 = u2u32 %396
+            32    %401 = ishl %400, %36 (0x8)
+            32    %402 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %403 = iand %402 (0xffff0000), %3
+            32    %404 = ior %403, %401
+            32    %405 = u2u32 %399
+            32    %406 = ishl %405, %370 (0x10)
+            32    %407 = iand %404, %382 (0xff00ffff)
+            32    %408 = ior %407, %406
+            32    %409 = u2u32 %383.w
+            32    %410 = ishl %409, %385 (0x18)
+            32    %411 = iand %408, %387 (0xffffff)
+            32    %412 = ior %411, %410
+            8x4   %413 = unpack_32_4x8 %389
+            8     %414 = iand %413.x, %50 (0x1)
+            1     %415 = ine %414, %49 (0x0)
+            64    %416 = b2i64 %415
+            64    %417 = ishl %416, %36 (0x8)
+            32    %418 = unpack_64_2x32_split_x %417
+            32    %419 = load_const (0x00000005)
+            32    %420 = ior %418, %419 (0x5)
+            32    %421 = unpack_64_2x32_split_y %417
+            64    %422 = pack_64_2x32_split %420, %421
+            8     %423 = iand %413.y, %50 (0x1)
+            1     %424 = ine %423, %49 (0x0)
+            64    %425 = b2i64 %424
+            32    %426 = load_const (0x00000009)
+            64    %427 = ishl %425, %426 (0x9)
+            64    %428 = ior %422, %427
+            8     %429 = iand %413.z, %50 (0x1)
+            1     %430 = ine %429, %49 (0x0)
+            64    %431 = b2i64 %430
+            32    %432 = load_const (0x0000000a = 10)
+            64    %433 = ishl %431, %432 (0xa)
+            64    %434 = ior %428, %433
+            32    %435 = unpack_64_2x32_split_x %434
+            32    %436 = load_const (0x7b000000 = 2063597568)
+            32    %437 = ior %436 (0x7b000000), %435
+                         @store_global (%437, %363) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %438 = u2u64 %46
+            64    %439 = ishl %438, %36 (0x8)
+            8x4   %440 = unpack_32_4x8 %412
+            8     %441 = iand %440.x, %50 (0x1)
+            1     %442 = ine %441, %49 (0x0)
+            64    %443 = b2i64 %442
+            64    %444 = ishl %443, %426 (0x9)
+            64    %445 = ior %439, %444
+            32    %446 = u2u32 %445
+            64    %447 = iadd %363, %366 (0x4)
+                         @store_global (%446, %447) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %448 = iadd %363, %372 (0x8)
+                         @store_global (%371, %448) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %449 = iadd %363, %254 (0xc)
+                         @store_global (%373, %449) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %450 = iadd %363, %367 (0x10)
+                         @store_global (%374, %450) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %451 = iadd %363, %390 (0x14)
+                         @store_global (%369, %451) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %452 = iadd %363, %391 (0x18)
+                         @store_global (%375, %452) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b25
+        }
+        block b25:  // preds: b14 b24, succs: b27
+    } else {
+        block b26:  // preds: b3, succs: b27
+    }
+    block b27:   // preds: b25 b26
+    32    %453 = load_const (0x00000000)
+    1     %454 = ieq %43, %453 (0x0)
+    32    %455 = load_const (0xffffffff = -1 = 4294967295)
+    32    %456 = iadd %43, %455 (0xffffffff)
+    32    %457 = bcsel %454, %453 (0x0), %456
+    64    %458 = u2u64 %28
+    64    %459 = iadd %33, %458
+    64    %460 = bcsel %454, %33, %459
+    64    %461 = iadd %13, %460
+    1     %462 = ine %31, %457
+                 // succs: b28 b32
+    if %462 {
+        block b28:   // preds: b27
+        32    %463 = iadd %21, %455 (0xffffffff)
+        1     %464 = ieq %24, %463
+                     // succs: b29 b30
+        if %464 {
+            block b29:   // preds: b28
+            64    %465 = load_const (0x0000000000000004)
+            64    %466 = load_const (0x0000000000000008)
+            8     %467 = load_const (0x00)
+            32    %468 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %469 = iand %468 (0xffff0000), %2
+            32    %470 = load_const (0x0000000a = 10)
+            32    %471 = load_const (0x00000010 = 16)
+            8x4   %472 = unpack_32_4x8 %1
+            32    %473 = u2u32 %472.x
+            32    %474 = load_const (0x00000018 = 24)
+            32    %475 = ishl %473, %474 (0x18)
+            32    %476 = extract_u16 %469, %453 (0x0)
+            32    %477 = ior %476, %475
+            8x4   %478 = unpack_32_4x8 %477
+            8     %479 = load_const (0x01)
+            8     %480 = iand %478.x, %479 (0x1)
+            1     %481 = ine %480, %467 (0x0)
+            64    %482 = b2i64 %481
+            64    %483 = ishl %482, %470 (0xa)
+            32    %484 = unpack_64_2x32_split_x %483
+            32    %485 = load_const (0x00000101 = 257)
+            32    %486 = ior %484, %485 (0x101)
+            32    %487 = unpack_64_2x32_split_y %483
+            64    %488 = pack_64_2x32_split %486, %487
+            8     %489 = iand %478.y, %479 (0x1)
+            1     %490 = ine %489, %467 (0x0)
+            64    %491 = b2i64 %490
+            32    %492 = load_const (0x0000000f = 15)
+            64    %493 = ishl %491, %492 (0xf)
+            64    %494 = ior %488, %493
+            8     %495 = iand %478.z, %479 (0x1)
+            1     %496 = ine %495, %467 (0x0)
+            64    %497 = b2i64 %496
+            64    %498 = ishl %497, %471 (0x10)
+            64    %499 = ior %494, %498
+            32    %500 = unpack_64_2x32_split_x %499
+            32    %501 = load_const (0x18800000 = 411041792)
+            32    %502 = ior %500, %501 (0x18800000)
+                         @store_global (%502, %461) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %503 = unpack_64_2x32_split_x %22
+            32    %504 = unpack_64_2x32_split_y %22
+            32    %505 = extract_u16 %504, %453 (0x0)
+            64    %506 = iadd %461, %465 (0x4)
+                         @store_global (%503, %506) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %507 = iadd %461, %466 (0x8)
+                         @store_global (%505, %507) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b31
+        } else {
+            block b30:  // preds: b28, succs: b31
+        }
+        block b31:  // preds: b29 b30, succs: b33
+    } else {
+        block b32:   // preds: b27
+        64    %508 = load_const (0x0000000000000004)
+        64    %509 = load_const (0x0000000000000008)
+        8     %510 = load_const (0x00)
+        32    %511 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %512 = iand %511 (0xffff0000), %0
+        32    %513 = load_const (0x0000000a = 10)
+        32    %514 = load_const (0x00000010 = 16)
+        8x4   %515 = unpack_32_4x8 %1
+        32    %516 = u2u32 %515.x
+        32    %517 = load_const (0x00000018 = 24)
+        32    %518 = ishl %516, %517 (0x18)
+        32    %519 = extract_u16 %512, %453 (0x0)
+        32    %520 = ior %519, %518
+        8x4   %521 = unpack_32_4x8 %520
+        8     %522 = load_const (0x01)
+        8     %523 = iand %521.x, %522 (0x1)
+        1     %524 = ine %523, %510 (0x0)
+        64    %525 = b2i64 %524
+        64    %526 = ishl %525, %513 (0xa)
+        32    %527 = unpack_64_2x32_split_x %526
+        32    %528 = load_const (0x00000101 = 257)
+        32    %529 = ior %527, %528 (0x101)
+        32    %530 = unpack_64_2x32_split_y %526
+        64    %531 = pack_64_2x32_split %529, %530
+        8     %532 = iand %521.y, %522 (0x1)
+        1     %533 = ine %532, %510 (0x0)
+        64    %534 = b2i64 %533
+        32    %535 = load_const (0x0000000f = 15)
+        64    %536 = ishl %534, %535 (0xf)
+        64    %537 = ior %531, %536
+        8     %538 = iand %521.z, %522 (0x1)
+        1     %539 = ine %538, %510 (0x0)
+        64    %540 = b2i64 %539
+        64    %541 = ishl %540, %514 (0x10)
+        64    %542 = ior %537, %541
+        32    %543 = unpack_64_2x32_split_x %542
+        32    %544 = load_const (0x18800000 = 411041792)
+        32    %545 = ior %543, %544 (0x18800000)
+                     @store_global (%545, %461) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %546 = unpack_64_2x32_split_x %23
+        32    %547 = unpack_64_2x32_split_y %23
+        32    %548 = extract_u16 %547, %453 (0x0)
+        64    %549 = iadd %461, %508 (0x4)
+                     @store_global (%546, %549) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %550 = iadd %461, %509 (0x8)
+                     @store_global (%548, %550) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b33
+    }
+    block b33:  // preds: b31 b32, succs: b34
+    block b34:
+   */
+   static const uint32_t impl_0_nir[1756] = {
+    0x0000024a, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000007, 0x00000000, 0x00000029, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4011744, 0xe4021744, 0xc4031744,
+    0xe4041744, 0xc4051744, 0xc4061744, 0xc4071744,
+    0xc4081744, 0xe4091744, 0xe40a1744, 0xc40b1744,
+    0x00005605, 0xc4288000, 0x00000000, 0x001b0016,
+    0x00009605, 0xc4351000, 0x00000000, 0x001b001c,
+    0x00007605, 0xc4288000, 0x00000000, 0x001f0016,
+    0xc431f000, 0x00000000, 0x001a0014, 0xc433f000,
+    0x00000000, 0x001e001a, 0xe438f000, 0x00000000,
+    0x00000022, 0xc433f000, 0x00000000, 0x00120021,
+    0xe438f000, 0x00000000, 0x00000024, 0x00011605,
+    0xc4351000, 0x00000000, 0x001f001a, 0xe438f000,
+    0x00000000, 0x00000027, 0x00000f05, 0x24345000,
+    0x00000000, 0x00290013, 0x00000001, 0x000000a8,
+    0x00000000, 0x00000001, 0x00000000, 0x00000002,
+    0xc4005354, 0x0000004c, 0x00000400, 0xc43ae000,
+    0x00000000, 0x002c0015, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000002d, 0x0000002b, 0x00000015, 0x0000002e,
+    0x243a6000, 0x00000000, 0x00300021, 0x00000001,
+    0x000000c4, 0x00000000, 0x00000003, 0x00000000,
+    0x0000000c, 0x00003605, 0xc4322000, 0x00000000,
+    0x00330016, 0x00000e05, 0x24327000, 0x00000000,
+    0x00350034, 0x00001405, 0x00003405, 0xc4722000,
+    0x00000000, 0x001b0016, 0x00000000, 0x00260016,
+    0x24345000, 0x00000000, 0x0035003a, 0xc4322000,
+    0x00000000, 0x001d0016, 0x24345000, 0x00000000,
+    0x0035003c, 0xc4288000, 0x00000000, 0x00330016,
+    0x00000001, 0x000000d8, 0x00000000, 0x00000003,
+    0x00000000, 0x00000004, 0x00011705, 0xc43ac000,
+    0x00000000, 0x003a003c, 0x24345000, 0x00000000,
+    0x00350041, 0xe431f000, 0x00000000, 0x0023000f,
+    0x00000001, 0x00000108, 0x00000000, 0x00000005,
+    0x00000000, 0x0000000e, 0xc47cc000, 0x00000000,
+    0x001f003a, 0x00000000, 0x001b003c, 0xc431f020,
+    0x00000000, 0x00460045, 0xc4351000, 0x00000000,
+    0x001b0047, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00480049, 0x00009705, 0x00019705, 0x00021705,
+    0x00021605, 0x78080e05, 0xc434e000, 0x00000000,
+    0x004a004f, 0x00006894, 0x00000140, 0x0000010c,
+    0x00040001, 0xe431f000, 0x00000000, 0x004b0043,
+    0x00000001, 0x000000ec, 0x00000000, 0x00000001,
+    0x00000000, 0x00000031, 0xc431f000, 0x00000000,
+    0x00330020, 0xe471f000, 0x00000000, 0x00400025,
+    0x00000000, 0x00540010, 0x24327000, 0x00000000,
+    0x00290055, 0xc4225000, 0x00000000, 0x00000056,
+    0xffe01605, 0xc4322000, 0x00000000, 0x0058000e,
+    0xc434e000, 0x00000000, 0x00570059, 0x00201605,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x005c005a,
+    0xc434e000, 0x00000000, 0x005b005d, 0xa83b8000,
+    0x00000000, 0x0000000d, 0xc438e000, 0x00000000,
+    0x0000005f, 0xc4351000, 0x00000000, 0x004e0060,
+    0xc4287000, 0x00000000, 0x0035005e, 0xc434e000,
+    0x00000000, 0x00610062, 0xc83bc000, 0x00000000,
+    0x00000055, 0x903bb000, 0x00000000, 0x00000063,
+    0x84322000, 0x00000000, 0x00380065, 0x24345000,
+    0x00000000, 0x00370066, 0xe4226000, 0x00000000,
+    0x00000067, 0x0001b605, 0xe4351000, 0x00000000,
+    0x00690068, 0x84322100, 0x00000000, 0x00380065,
+    0x24345000, 0x00000000, 0x0037006b, 0xe4226000,
+    0x00000000, 0x0000006c, 0x0001d605, 0xe4351000,
+    0x00000000, 0x006e006d, 0xe434e000, 0x00000000,
+    0x006f006a, 0xe438f000, 0x00000000, 0x0000003e,
+    0xe4351000, 0x00000000, 0x004e0071, 0xe434e000,
+    0x00000000, 0x00720070, 0xe438f000, 0x00000000,
+    0x00000020, 0x00035605, 0xe4351000, 0x00000000,
+    0x00750074, 0xe434e000, 0x00000000, 0x00760073,
+    0xc438e000, 0x00000000, 0x00000077, 0x00006894,
+    0x000001e0, 0x00000144, 0x00040001, 0xc438e000,
+    0x00000000, 0x00000055, 0xe431f000, 0x00000000,
+    0x00400043, 0x00006894, 0x000001e4, 0x000001e8,
+    0x00040001, 0xc435a100, 0x00000000, 0x00000064,
+    0xe431f000, 0x00000000, 0x004c0043, 0x00006894,
+    0x000001ec, 0x000001f0, 0x00040001, 0xe431f000,
+    0x00000000, 0x004d0043, 0x00006894, 0x00000098,
+    0x000001f4, 0x00040001, 0x00029705, 0xe431f000,
+    0x00000000, 0x007e0043, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x00000053, 0x00000052, 0x00000020, 0x00000080,
+    0xe4000028, 0x0000007f, 0x00000052, 0x00000051,
+    0x00000080, 0x00000001, 0x000000f4, 0x00000000,
+    0x00000001, 0x00000000, 0x00000032, 0xe431f000,
+    0x00000000, 0x00280011, 0x00006894, 0x00000084,
+    0x00000214, 0x00040001, 0xc4349000, 0x00000000,
+    0x00000034, 0xe431f000, 0x00000000, 0x004b0085,
+    0x00006894, 0x00000218, 0x0000021c, 0x00040001,
+    0x24327000, 0x00000000, 0x00290085, 0xc4225000,
+    0x00000000, 0x00000088, 0xffe01605, 0xc4322000,
+    0x00000000, 0x008a000c, 0xc434e000, 0x00000000,
+    0x0089008b, 0x00201605, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x008e008c, 0xc434e000, 0x00000000,
+    0x008d008f, 0xa83b8000, 0x00000000, 0x0000000d,
+    0xc438e000, 0x00000000, 0x00000091, 0xc4351000,
+    0x00000000, 0x004e0092, 0xc4287000, 0x00000000,
+    0x00350090, 0xc434e000, 0x00000000, 0x00930094,
+    0xc83bc000, 0x00000000, 0x00000085, 0x903bb000,
+    0x00000000, 0x00000095, 0x84322000, 0x00000000,
+    0x00380097, 0x24345000, 0x00000000, 0x00370098,
+    0xe4226000, 0x00000000, 0x00000099, 0x0001b605,
+    0xe4351000, 0x00000000, 0x009b009a, 0x84322100,
+    0x00000000, 0x00380097, 0x24345000, 0x00000000,
+    0x0037009d, 0xe4226000, 0x00000000, 0x0000009e,
+    0x0001d605, 0xe4351000, 0x00000000, 0x00a0009f,
+    0xe434e000, 0x00000000, 0x00a1009c, 0xe438f000,
+    0x00000000, 0x0000003e, 0xe4351000, 0x00000000,
+    0x004e00a3, 0xe434e000, 0x00000000, 0x00a400a2,
+    0xe438f000, 0x00000000, 0x00000082, 0x00035605,
+    0xe4351000, 0x00000000, 0x00a700a6, 0xe434e000,
+    0x00000000, 0x00a800a5, 0xc438e000, 0x00000000,
+    0x000000a9, 0x00006894, 0x000002a8, 0x0000020c,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000085,
+    0xe431f000, 0x00000000, 0x004b0083, 0x00006894,
+    0x000002ac, 0x000002b0, 0x00040001, 0xc435a100,
+    0x00000000, 0x00000096, 0xe431f000, 0x00000000,
+    0x00400083, 0x00006894, 0x000002b4, 0x000002b8,
+    0x00040001, 0xe431f000, 0x00000000, 0x004c0083,
+    0x00006894, 0x00000098, 0x000002bc, 0x00040001,
+    0xe431f000, 0x00000000, 0x004d0083, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x000000b0, 0x00000084, 0x00000083,
+    0x000000b1, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x0000005f, 0xe4000028, 0x000000b3,
+    0x000000b2, 0x00000043, 0x000000b4, 0xe431f000,
+    0x00000000, 0x00250010, 0xd0005354, 0x000002dc,
+    0x00000400, 0xc435a000, 0x00000000, 0x000000b8,
+    0xc435a200, 0x00000000, 0x000000b8, 0x00009705,
+    0xc435a100, 0x00000000, 0x000000b8, 0x00019705,
+    0xc435a300, 0x00000000, 0x000000b8, 0xc43cc000,
+    0x00000000, 0x00330039, 0xffe01605, 0xc4322000,
+    0x00000000, 0x00c0000b, 0xc434e000, 0x00000000,
+    0x00bf00c1, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x00c300c2, 0x00021605, 0x00000605, 0xff00ffff,
+    0x903bb000, 0x00000000, 0x0000000a, 0xc438e000,
+    0x00000000, 0x000000c7, 0x00031605, 0xc4351000,
+    0x00000000, 0x00c900c8, 0x00000605, 0x00ffffff,
+    0xc4287000, 0x00000000, 0x003500c4, 0xc434e000,
+    0x00000000, 0x00ca00cc, 0x00021705, 0x00029705,
+    0x00031705, 0xa438d100, 0x00000000, 0x000000c7,
+    0xa438d200, 0x00000000, 0x000000c7, 0xa4351000,
+    0x00000000, 0x002600d2, 0xa434e000, 0x00000000,
+    0x00d300d1, 0x84390000, 0x00000000, 0x000000d4,
+    0x00003505, 0xa4288000, 0x00000000, 0x00d600d4,
+    0x84390000, 0x00000000, 0x000000d7, 0xc438e000,
+    0x00000000, 0x000000d5, 0xc4351000, 0x00000000,
+    0x002600d9, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x000900db, 0xc434e000, 0x00000000, 0x00da00dc,
+    0xc438e000, 0x00000000, 0x000000d8, 0xc4351000,
+    0x00000000, 0x00c500de, 0xc4322000, 0x00000000,
+    0x00c600dd, 0xc434e000, 0x00000000, 0x00df00e0,
+    0xc438e300, 0x00000000, 0x000000c7, 0xc4351000,
+    0x00000000, 0x00c900e2, 0xc4322000, 0x00000000,
+    0x00cb00e1, 0xc434e000, 0x00000000, 0x00e300e4,
+    0x903bb000, 0x00000000, 0x000000cd, 0x84322000,
+    0x00000000, 0x003800e6, 0x24345000, 0x00000000,
+    0x003700e7, 0xe4226000, 0x00000000, 0x000000e8,
+    0xe4351000, 0x00000000, 0x002600e9, 0xc43bd000,
+    0x00000000, 0x000000ea, 0x0000b605, 0xc434e000,
+    0x00000000, 0x00ec00eb, 0xc43be000, 0x00000000,
+    0x000000ea, 0xe4369000, 0x00000000, 0x00ee00ed,
+    0x84322100, 0x00000000, 0x003800e6, 0x24345000,
+    0x00000000, 0x003700f0, 0xe4226000, 0x00000000,
+    0x000000f1, 0x00013605, 0xe4351000, 0x00000000,
+    0x00f300f2, 0xe434e000, 0x00000000, 0x00f400ef,
+    0x84322200, 0x00000000, 0x003800e6, 0x24345000,
+    0x00000000, 0x003700f6, 0xe4226000, 0x00000000,
+    0x000000f7, 0x00015605, 0xe4351000, 0x00000000,
+    0x00f900f8, 0xe434e000, 0x00000000, 0x00fa00f5,
+    0xc43bd000, 0x00000000, 0x000000fb, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x00fc00fd, 0x00006894,
+    0x000003f8, 0x000002d8, 0x00040001, 0xe438f000,
+    0x00000000, 0x00000034, 0xe4351000, 0x00000000,
+    0x002600ff, 0x903bb000, 0x00000000, 0x000000e5,
+    0x84322000, 0x00000000, 0x00380101, 0x24345000,
+    0x00000000, 0x00370102, 0xe4226000, 0x00000000,
+    0x00000103, 0xe4351000, 0x00000000, 0x00f30104,
+    0xe434e000, 0x00000000, 0x01050100, 0xc438e000,
+    0x00000000, 0x00000106, 0xe431f000, 0x00000000,
+    0x00bb00b6, 0x00006894, 0x0000041c, 0x00000420,
+    0x00040001, 0xe431f000, 0x00000000, 0x004000b6,
+    0x00006894, 0x000002e4, 0x00000424, 0x00040001,
+    0xe431f000, 0x00000000, 0x00bd00b6, 0x00006894,
+    0x000002e8, 0x00000428, 0x00040001, 0xe431f000,
+    0x00000000, 0x00ce00b6, 0x00006894, 0x000002f0,
+    0x0000042c, 0x00040001, 0xe431f000, 0x00000000,
+    0x00cf00b6, 0x00006894, 0x000002f8, 0x00000430,
+    0x00040001, 0xe431f000, 0x00000000, 0x00d000b6,
+    0x00006894, 0x000000d4, 0x00000434, 0x00040001,
+    0x00000003, 0x00000000, 0x00000004, 0x00019705,
+    0xc43ac000, 0x00000000, 0x003a003c, 0x24345000,
+    0x00000000, 0x00350110, 0xe431f000, 0x00000000,
+    0x0023000f, 0x00000001, 0x00000444, 0x00000000,
+    0x00000005, 0x00000000, 0x0000000e, 0xc47cc000,
+    0x00000000, 0x001f003a, 0x00000000, 0x001b003c,
+    0xc431f020, 0x00000000, 0x01150114, 0xc4351000,
+    0x00000000, 0x001b0116, 0xfffff605, 0xc431f000,
+    0x00000000, 0x01170118, 0x00009705, 0x00011705,
+    0x00021705, 0x00021605, 0x78080e05, 0xc434e000,
+    0x00000000, 0x0119011e, 0x00006894, 0x0000047c,
+    0x00000448, 0x00040001, 0xe431f000, 0x00000000,
+    0x011a0112, 0x00000001, 0x000000ec, 0x00000000,
+    0x00000001, 0x00000000, 0x00000031, 0xc431f000,
+    0x00000000, 0x00330020, 0xe471f000, 0x00000000,
+    0x010f0025, 0x00000000, 0x01230010, 0x24327000,
+    0x00000000, 0x00290124, 0xc4225000, 0x00000000,
+    0x00000125, 0xffe01605, 0xc4322000, 0x00000000,
+    0x01270008, 0xc434e000, 0x00000000, 0x01260128,
+    0x00201605, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x012b0129, 0xc434e000, 0x00000000, 0x012a012c,
+    0xa83b8000, 0x00000000, 0x0000000d, 0xc438e000,
+    0x00000000, 0x0000012e, 0xc4351000, 0x00000000,
+    0x011d012f, 0xc4287000, 0x00000000, 0x0035012d,
+    0xc434e000, 0x00000000, 0x01300131, 0xc83bc000,
+    0x00000000, 0x00000124, 0x903bb000, 0x00000000,
+    0x00000132, 0x84322000, 0x00000000, 0x00380134,
+    0x24345000, 0x00000000, 0x00370135, 0xe4226000,
+    0x00000000, 0x00000136, 0x0001b605, 0xe4351000,
+    0x00000000, 0x01380137, 0x84322100, 0x00000000,
+    0x00380134, 0x24345000, 0x00000000, 0x0037013a,
+    0xe4226000, 0x00000000, 0x0000013b, 0x0001d605,
+    0xe4351000, 0x00000000, 0x013d013c, 0xe434e000,
+    0x00000000, 0x013e0139, 0xe438f000, 0x00000000,
+    0x0000003e, 0xe4351000, 0x00000000, 0x011d0140,
+    0xe434e000, 0x00000000, 0x0141013f, 0xe438f000,
+    0x00000000, 0x00000020, 0x00035605, 0xe4351000,
+    0x00000000, 0x01440143, 0xe434e000, 0x00000000,
+    0x01450142, 0xc438e000, 0x00000000, 0x00000146,
+    0x00006894, 0x0000051c, 0x00000480, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000124, 0xe431f000,
+    0x00000000, 0x011b0112, 0x00006894, 0x00000520,
+    0x00000524, 0x00040001, 0xc435a100, 0x00000000,
+    0x00000133, 0xe431f000, 0x00000000, 0x010f0112,
+    0x00006894, 0x00000528, 0x0000052c, 0x00040001,
+    0xe431f000, 0x00000000, 0x011c0112, 0x00006894,
+    0x00000098, 0x00000530, 0x00040001, 0x00029705,
+    0xe431f000, 0x00000000, 0x014d0112, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000002,
+    0xc4000028, 0x00000122, 0x00000121, 0x00000020,
+    0x0000014f, 0xe4000028, 0x0000014e, 0x00000121,
+    0x00000120, 0x0000014f, 0x00000001, 0x000000f4,
+    0x00000000, 0x00000001, 0x00000000, 0x00000032,
+    0xe431f000, 0x00000000, 0x00280011, 0x00006894,
+    0x00000084, 0x00000550, 0x00040001, 0xc4349000,
+    0x00000000, 0x00000034, 0xe431f000, 0x00000000,
+    0x011a0154, 0x00006894, 0x00000554, 0x00000558,
+    0x00040001, 0x24327000, 0x00000000, 0x00290154,
+    0xc4225000, 0x00000000, 0x00000157, 0xffe01605,
+    0xc4322000, 0x00000000, 0x01590007, 0xc434e000,
+    0x00000000, 0x0158015a, 0x00201605, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x015d015b, 0xc434e000,
+    0x00000000, 0x015c015e, 0xa83b8000, 0x00000000,
+    0x0000000d, 0xc438e000, 0x00000000, 0x00000160,
+    0xc4351000, 0x00000000, 0x011d0161, 0xc4287000,
+    0x00000000, 0x0035015f, 0xc434e000, 0x00000000,
+    0x01620163, 0xc83bc000, 0x00000000, 0x00000154,
+    0x903bb000, 0x00000000, 0x00000164, 0x84322000,
+    0x00000000, 0x00380166, 0x24345000, 0x00000000,
+    0x00370167, 0xe4226000, 0x00000000, 0x00000168,
+    0x0001b605, 0xe4351000, 0x00000000, 0x016a0169,
+    0x84322100, 0x00000000, 0x00380166, 0x24345000,
+    0x00000000, 0x0037016c, 0xe4226000, 0x00000000,
+    0x0000016d, 0x0001d605, 0xe4351000, 0x00000000,
+    0x016f016e, 0xe434e000, 0x00000000, 0x0170016b,
+    0xe438f000, 0x00000000, 0x0000003e, 0xe4351000,
+    0x00000000, 0x011d0172, 0xe434e000, 0x00000000,
+    0x01730171, 0xe438f000, 0x00000000, 0x00000151,
+    0x00035605, 0xe4351000, 0x00000000, 0x01760175,
+    0xe434e000, 0x00000000, 0x01770174, 0xc438e000,
+    0x00000000, 0x00000178, 0x00006894, 0x000005e4,
+    0x00000548, 0x00040001, 0xc438e000, 0x00000000,
+    0x00000154, 0xe431f000, 0x00000000, 0x011a0152,
+    0x00006894, 0x000005e8, 0x000005ec, 0x00040001,
+    0xc435a100, 0x00000000, 0x00000165, 0xe431f000,
+    0x00000000, 0x011b0152, 0x00006894, 0x000005f0,
+    0x000005f4, 0x00040001, 0xe431f000, 0x00000000,
+    0x010f0152, 0x00006894, 0x00000098, 0x000005f8,
+    0x00040001, 0xe431f000, 0x00000000, 0x011c0152,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0xe4000028, 0x0000017f, 0x00000153,
+    0x00000152, 0x00000180, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000061, 0xe4000028,
+    0x00000182, 0x00000181, 0x00000112, 0x00000183,
+    0xe431f000, 0x00000000, 0x00250010, 0xd0005354,
+    0x00000618, 0x00000400, 0x00009705, 0x00021705,
+    0xe431f000, 0x00000000, 0x01890186, 0xc4005354,
+    0x00000628, 0x00000400, 0x00021605, 0xc435a000,
+    0x00000000, 0x00000187, 0x00011705, 0xc435a200,
+    0x00000000, 0x00000187, 0xc435a100, 0x00000000,
+    0x00000187, 0xc435a300, 0x00000000, 0x00000187,
+    0xc43cc000, 0x00000000, 0x00330039, 0xffe01605,
+    0xc4322000, 0x00000000, 0x01930006, 0xc434e000,
+    0x00000000, 0x01920194, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x01960195, 0x00000605, 0xff00ffff,
+    0x903bb000, 0x00000000, 0x0000000a, 0xc438e000,
+    0x00000000, 0x00000199, 0x00031605, 0xc4351000,
+    0x00000000, 0x019b019a, 0x00000605, 0x00ffffff,
+    0xc4287000, 0x00000000, 0x00350197, 0xc434e000,
+    0x00000000, 0x019c019e, 0x00029705, 0x00031705,
+    0xa438d100, 0x00000000, 0x00000199, 0xa438d200,
+    0x00000000, 0x00000199, 0xa4351000, 0x00000000,
+    0x002601a3, 0xa434e000, 0x00000000, 0x01a401a2,
+    0x84390000, 0x00000000, 0x000001a5, 0x00003505,
+    0xa4288000, 0x00000000, 0x01a701a5, 0x84390000,
+    0x00000000, 0x000001a8, 0xc438e000, 0x00000000,
+    0x000001a6, 0xc4351000, 0x00000000, 0x002601aa,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x000501ac,
+    0xc434e000, 0x00000000, 0x01ab01ad, 0xc438e000,
+    0x00000000, 0x000001a9, 0xc4351000, 0x00000000,
+    0x018c01af, 0xc4322000, 0x00000000, 0x019801ae,
+    0xc434e000, 0x00000000, 0x01b001b1, 0xc438e300,
+    0x00000000, 0x00000199, 0xc4351000, 0x00000000,
+    0x019b01b3, 0xc4322000, 0x00000000, 0x019d01b2,
+    0xc434e000, 0x00000000, 0x01b401b5, 0x903bb000,
+    0x00000000, 0x0000019f, 0x84322000, 0x00000000,
+    0x003801b7, 0x24345000, 0x00000000, 0x003701b8,
+    0xe4226000, 0x00000000, 0x000001b9, 0xe4351000,
+    0x00000000, 0x002601ba, 0xc43bd000, 0x00000000,
+    0x000001bb, 0x0000b605, 0xc434e000, 0x00000000,
+    0x01bd01bc, 0xc43be000, 0x00000000, 0x000001bb,
+    0xe4369000, 0x00000000, 0x01bf01be, 0x84322100,
+    0x00000000, 0x003801b7, 0x24345000, 0x00000000,
+    0x003701c1, 0xe4226000, 0x00000000, 0x000001c2,
+    0x00013605, 0xe4351000, 0x00000000, 0x01c401c3,
+    0xe434e000, 0x00000000, 0x01c501c0, 0x84322200,
+    0x00000000, 0x003801b7, 0x24345000, 0x00000000,
+    0x003701c7, 0xe4226000, 0x00000000, 0x000001c8,
+    0x00015605, 0xe4351000, 0x00000000, 0x01ca01c9,
+    0xe434e000, 0x00000000, 0x01cb01c6, 0xc43bd000,
+    0x00000000, 0x000001cc, 0x7b000e05, 0xc434e000,
+    0x00000000, 0x01cd01ce, 0x00006894, 0x0000073c,
+    0x00000614, 0x00040001, 0xe438f000, 0x00000000,
+    0x00000034, 0xe4351000, 0x00000000, 0x002601d0,
+    0x903bb000, 0x00000000, 0x000001b6, 0x84322000,
+    0x00000000, 0x003801d2, 0x24345000, 0x00000000,
+    0x003701d3, 0xe4226000, 0x00000000, 0x000001d4,
+    0xe4351000, 0x00000000, 0x01c401d5, 0xe434e000,
+    0x00000000, 0x01d601d1, 0xc438e000, 0x00000000,
+    0x000001d7, 0xe431f000, 0x00000000, 0x01880185,
+    0x00006894, 0x00000760, 0x00000764, 0x00040001,
+    0xe431f000, 0x00000000, 0x018e0185, 0x00006894,
+    0x00000634, 0x00000768, 0x00040001, 0xe431f000,
+    0x00000000, 0x010f0185, 0x00006894, 0x0000063c,
+    0x0000076c, 0x00040001, 0xe431f000, 0x00000000,
+    0x01890185, 0x00006894, 0x00000640, 0x00000770,
+    0x00040001, 0xe431f000, 0x00000000, 0x01a00185,
+    0x00006894, 0x0000062c, 0x00000774, 0x00040001,
+    0xe431f000, 0x00000000, 0x01a10185, 0x00006894,
+    0x00000644, 0x00000778, 0x00040001, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000a, 0x00000e05, 0x24327000,
+    0x00000000, 0x01e20030, 0xfffff605, 0xc431f000,
+    0x00000000, 0x01e40030, 0xc4273000, 0x00000000,
+    0x01e201e3, 0x000001e5, 0xe438f000, 0x00000000,
+    0x0000001e, 0xe431f000, 0x00000000, 0x01e70023,
+    0xe4273000, 0x00000000, 0x002301e3, 0x000001e8,
+    0xe431f000, 0x00000000, 0x01e9000f, 0x24345000,
+    0x00000000, 0x01e60021, 0x00000001, 0x000007ac,
+    0x00000000, 0x00000003, 0x00000000, 0x00000002,
+    0xc431f000, 0x00000000, 0x01e40017, 0x24327000,
+    0x00000000, 0x01ed001a, 0x00000001, 0x000007b8,
+    0x00000000, 0x00000001, 0x00000000, 0x0000002e,
+    0x00009705, 0x00011705, 0x00001405, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x000401f3, 0x00015605,
+    0x00021605, 0x903bb000, 0x00000000, 0x00000003,
+    0xc438e000, 0x00000000, 0x000001f7, 0x00031605,
+    0xc4351000, 0x00000000, 0x01f901f8, 0xc4287000,
+    0x00000000, 0x01e201f4, 0xc434e000, 0x00000000,
+    0x01fa01fb, 0x903bb000, 0x00000000, 0x000001fc,
+    0x00003405, 0x84322000, 0x00000000, 0x01fe01fd,
+    0x24345000, 0x00000000, 0x01f201ff, 0xe4226000,
+    0x00000000, 0x00000200, 0xe4351000, 0x00000000,
+    0x01f50201, 0xc43bd000, 0x00000000, 0x00000202,
+    0x00203605, 0xc434e000, 0x00000000, 0x02040203,
+    0xc43be000, 0x00000000, 0x00000202, 0xe4369000,
+    0x00000000, 0x02060205, 0x84322100, 0x00000000,
+    0x01fe01fd, 0x24345000, 0x00000000, 0x01f20208,
+    0xe4226000, 0x00000000, 0x00000209, 0x0001f605,
+    0xe4351000, 0x00000000, 0x020b020a, 0xe434e000,
+    0x00000000, 0x020c0207, 0x84322200, 0x00000000,
+    0x01fe01fd, 0x24345000, 0x00000000, 0x01f2020e,
+    0xe4226000, 0x00000000, 0x0000020f, 0xe4351000,
+    0x00000000, 0x01f60210, 0xe434e000, 0x00000000,
+    0x0211020d, 0xc43bd000, 0x00000000, 0x00000212,
+    0x18800e05, 0xc434e000, 0x00000000, 0x02140213,
+    0x00006894, 0x00000854, 0x000007a8, 0x00040001,
+    0xc43bd000, 0x00000000, 0x00000018, 0xc43be000,
+    0x00000000, 0x00000018, 0xc4287000, 0x00000000,
+    0x01e20217, 0xe431f000, 0x00000000, 0x01f001ea,
+    0x00006894, 0x00000858, 0x00000864, 0x00040001,
+    0xe431f000, 0x00000000, 0x01f101ea, 0x00006894,
+    0x00000860, 0x00000868, 0x00040001, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002e, 0x00009705,
+    0x00011705, 0x00001405, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00020221, 0x00015605, 0x00021605,
+    0x903bb000, 0x00000000, 0x00000003, 0xc438e000,
+    0x00000000, 0x00000225, 0x00031605, 0xc4351000,
+    0x00000000, 0x02270226, 0xc4287000, 0x00000000,
+    0x01e20222, 0xc434e000, 0x00000000, 0x02280229,
+    0x903bb000, 0x00000000, 0x0000022a, 0x00003405,
+    0x84322000, 0x00000000, 0x022c022b, 0x24345000,
+    0x00000000, 0x0220022d, 0xe4226000, 0x00000000,
+    0x0000022e, 0xe4351000, 0x00000000, 0x0223022f,
+    0xc43bd000, 0x00000000, 0x00000230, 0x00203605,
+    0xc434e000, 0x00000000, 0x02320231, 0xc43be000,
+    0x00000000, 0x00000230, 0xe4369000, 0x00000000,
+    0x02340233, 0x84322100, 0x00000000, 0x022c022b,
+    0x24345000, 0x00000000, 0x02200236, 0xe4226000,
+    0x00000000, 0x00000237, 0x0001f605, 0xe4351000,
+    0x00000000, 0x02390238, 0xe434e000, 0x00000000,
+    0x023a0235, 0x84322200, 0x00000000, 0x022c022b,
+    0x24345000, 0x00000000, 0x0220023c, 0xe4226000,
+    0x00000000, 0x0000023d, 0xe4351000, 0x00000000,
+    0x0224023e, 0xe434e000, 0x00000000, 0x023f023b,
+    0xc43bd000, 0x00000000, 0x00000240, 0x18800e05,
+    0xc434e000, 0x00000000, 0x02420241, 0x00006894,
+    0x0000090c, 0x000007a8, 0x00040001, 0xc43bd000,
+    0x00000000, 0x00000019, 0xc43be000, 0x00000000,
+    0x00000019, 0xc4287000, 0x00000000, 0x01e20245,
+    0xe431f000, 0x00000000, 0x021e01ea, 0x00006894,
+    0x00000910, 0x0000091c, 0x00040001, 0xe431f000,
+    0x00000000, 0x021f01ea, 0x00006894, 0x00000918,
+    0x00000920, 0x00040001, 0x00000000, 0x00000000,
+};
+   nir_def *args[12] = { dst_base, indirect_base, draw_id_base, indirect_stride, indirect_draw_count, draw_base, max_draw_count, flags, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx8_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx8_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx)
+{
+   /*
+    block b0:   // preds:
+    64     %0 = @load_param (param_idx=0)
+    32     %1 = @load_param (param_idx=1)
+    64     %2 = @load_param (param_idx=2)
+    32     %3 = @load_param (param_idx=3)
+    32     %4 = @load_param (param_idx=4)
+    32     %5 = @load_param (param_idx=6)
+    32     %6 = @load_param (param_idx=7)
+    32     %7 = @load_param (param_idx=8)
+    32     %8 = @load_param (param_idx=9)
+    1      %9 = ult %8, %4
+                // succs: b1 b19
+    if %9 {
+        block b1:   // preds: b0
+        32    %10 = load_const (0x00000001)
+        32    %11 = iand %7, %10 (0x1)
+        32    %12 = load_const (0x00000000)
+        1     %13 = ine %11, %12 (0x0)
+        32    %14 = load_const (0x00000002)
+        32    %15 = iand %7, %14 (0x2)
+        1     %16 = ine %15, %12 (0x0)
+        32    %17 = load_const (0x00000004)
+        32    %18 = iand %7, %17 (0x4)
+        1     %19 = ieq %18, %12 (0x0)
+        32    %20 = load_const (0x00000008)
+        32    %21 = iand %7, %20 (0x8)
+        1     %22 = ine %21, %12 (0x0)
+        32    %23 = iadd %3, %8
+        32    %24 = imul %23, %5
+        64    %25 = u2u64 %24
+        32    %26 = imul %8, %1
+        64    %27 = u2u64 %26
+        64    %28 = iadd %2, %25
+        32    %29 = @load_global (%28) (access=none, align_mul=4, align_offset=0)
+        64    %30 = u2u64 %29
+                    // succs: b2 b6
+        if %16 {
+            block b2:   // preds: b1
+            1     %31 = inot %13
+                        // succs: b3 b4
+            if %31 {
+                block b3:   // preds: b2
+                64    %32 = u2u64 %6
+                64    %33 = iadd %0, %27
+                64    %34 = ishl %32, %14 (0x2)
+                64    %35 = iadd %33, %34
+                            @store_global (%29, %35) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b5
+            } else {
+                block b4:   // preds: b2
+                64    %36 = u2u64 %6
+                64    %37 = iadd %0, %27
+                32    %38 = load_const (0x00000003)
+                64    %39 = ishl %36, %38 (0x3)
+                64    %40 = iadd %37, %39
+                            @store_global (%30, %40) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b5
+            }
+            block b5:  // preds: b3 b4, succs: b7
+        } else {
+            block b6:  // preds: b1, succs: b7
+        }
+        block b7:  // preds: b5 b6, succs: b8
+        loop {
+            block b8:   // preds: b7 b17
+            32    %41 = phi b7: %12 (0x0), b17: %75
+            1     %42 = uge %41, %6
+                        // succs: b9 b10
+            if %42 {
+                block b9:// preds: b8
+                break
+                // succs: b18
+            } else {
+                block b10:  // preds: b8, succs: b11
+            }
+            block b11:  // preds: b10
+            32    %43 = ishl %41, %10 (0x1)
+            32    %44 = iadd %10 (0x1), %43
+                        // succs: b12 b13
+            if %19 {
+                block b12:  // preds: b11
+                64    %45 = u2u64 %44
+                32    %46 = load_const (0x00000003)
+                64    %47 = ishl %45, %46 (0x3)
+                64    %48 = iadd %28, %47
+                64    %49 = @load_global (%48) (access=none, align_mul=8, align_offset=0)
+                            // succs: b14
+            } else {
+                block b13:  // preds: b11
+                64    %50 = u2u64 %44
+                32    %51 = load_const (0x00000003)
+                64    %52 = ishl %50, %51 (0x3)
+                64    %53 = iadd %28, %52
+                32x4  %54 = @load_global (%53) (access=none, align_mul=8, align_offset=0)
+                64    %55 = pack_64_2x32 %54.zw
+                64    %56 = pack_64_2x32 %54.xy
+                64    %57 = ineg %56
+                64    %58 = iadd %55, %57
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13
+            64    %59 = phi b12: %49, b13: %58
+            64    %60 = load_const (0x0000000000000000)
+            1     %61 = ieq %29, %12 (0x0)
+            1     %62 = iand %22, %61
+            64    %63 = bcsel %62, %60 (0x0), %59
+            1     %64 = inot %13
+                        // succs: b15 b16
+            if %64 {
+                block b15:  // preds: b14
+                32    %65 = u2u32 %63
+                64    %66 = u2u64 %41
+                64    %67 = iadd %0, %27
+                64    %68 = ishl %66, %14 (0x2)
+                64    %69 = iadd %67, %68
+                            @store_global (%65, %69) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b17
+            } else {
+                block b16:  // preds: b14
+                64    %70 = u2u64 %41
+                64    %71 = iadd %0, %27
+                32    %72 = load_const (0x00000003)
+                64    %73 = ishl %70, %72 (0x3)
+                64    %74 = iadd %71, %73
+                            @store_global (%63, %74) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b17
+            }
+            block b17:  // preds: b15 b16
+            32    %75 = iadd %41, %10 (0x1)
+                        // succs: b8
+        }
+        block b18:  // preds: b9, succs: b20
+    } else {
+        block b19:  // preds: b0, succs: b20
+    }
+    block b20:  // preds: b18 b19, succs: b21
+    block b21:
+   */
+   static const uint32_t impl_0_nir[336] = {
+    0x00000062, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000a, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000a, 0xe4001744,
+    0xc4011744, 0xe4021744, 0xc4031744, 0xc4041744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0x243a6000, 0x00000000, 0x0006000a, 0x00000001,
+    0x0000002c, 0x00000000, 0x00000005, 0x00000000,
+    0x00000015, 0x00003605, 0xc4322000, 0x00000000,
+    0x000d0009, 0x00000e05, 0x24345000, 0x00000000,
+    0x000f000e, 0x00005605, 0xc4322000, 0x00000000,
+    0x00110009, 0x24345000, 0x00000000, 0x000f0012,
+    0x00009605, 0xc4322000, 0x00000000, 0x00140009,
+    0x24327000, 0x00000000, 0x000f0015, 0x00011605,
+    0xc4322000, 0x00000000, 0x00170009, 0x24345000,
+    0x00000000, 0x000f0018, 0xc431f000, 0x00000000,
+    0x000a0005, 0xc433f000, 0x00000000, 0x0007001a,
+    0xe438f000, 0x00000000, 0x0000001b, 0xc433f000,
+    0x00000000, 0x0003000a, 0xe438f000, 0x00000000,
+    0x0000001d, 0xe431f000, 0x00000000, 0x001c0004,
+    0xc4005354, 0x0000007c, 0x00000400, 0xe438f000,
+    0x00000000, 0x00000020, 0x00000001, 0x0000004c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000001,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x0000008c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001e0002, 0xe4351000,
+    0x00000000, 0x00110025, 0xe431f000, 0x00000000,
+    0x00270026, 0x00006894, 0x00000080, 0x000000a0,
+    0x00040001, 0x00000001, 0x00000000, 0x00000006,
+    0xe438f000, 0x00000000, 0x00000008, 0xe431f000,
+    0x00000000, 0x001e0002, 0x00007605, 0xe4351000,
+    0x00000000, 0x002c002a, 0xe431f000, 0x00000000,
+    0x002d002b, 0x00006894, 0x00000084, 0x000000b8,
+    0x00080001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0x00000000, 0x00000007, 0x00000000,
+    0x00000002, 0xc4000028, 0x0000000f, 0x00000031,
+    0x0000005e, 0x0000005d, 0x243a0000, 0x00000000,
+    0x00080033, 0x00000001, 0x000000d0, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0xc4351000, 0x00000000, 0x000d0033,
+    0xc431f000, 0x00000000, 0x0038000d, 0x00000001,
+    0x00000058, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x003c003b,
+    0xe431f000, 0x00000000, 0x003d001f, 0xe4005354,
+    0x000000f8, 0x00000800, 0x00000001, 0x00000000,
+    0x00000009, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x00420041,
+    0xe431f000, 0x00000000, 0x0043001f, 0xd0005354,
+    0x00000110, 0x00000800, 0xe4168000, 0x00000000,
+    0x5e000114, 0xe4368000, 0x00000000, 0x00000045,
+    0xe4349000, 0x00000000, 0x00000047, 0xe431f000,
+    0x00000000, 0x00480046, 0x00000000, 0x00000006,
+    0xe4000028, 0x0000003f, 0x0000003a, 0x00000049,
+    0x00000040, 0x00000f05, 0x24327000, 0x00000000,
+    0x000f0020, 0x24322000, 0x00000000, 0x004d0019,
+    0xe4273000, 0x00000000, 0x004c004e, 0x0000004b,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x00000140, 0x00000000, 0x00000001, 0x00000000,
+    0x00000006, 0xc438e000, 0x00000000, 0x0000004f,
+    0xe438f000, 0x00000000, 0x00000033, 0xe431f000,
+    0x00000000, 0x001e0002, 0xe4351000, 0x00000000,
+    0x00110053, 0xe431f000, 0x00000000, 0x00550054,
+    0x00006894, 0x00000148, 0x00000158, 0x00040001,
+    0x00000001, 0x00000000, 0x00000006, 0xe438f000,
+    0x00000000, 0x00000033, 0xe431f000, 0x00000000,
+    0x001e0002, 0x00007605, 0xe4351000, 0x00000000,
+    0x005a0058, 0xe431f000, 0x00000000, 0x005b0059,
+    0x00006894, 0x0000013c, 0x00000170, 0x00080001,
+    0x00000000, 0x00000001, 0xc431f000, 0x00000000,
+    0x000d0033, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+   nir_def *args[10] = { destination_base, destination_stride, query_data, first_query, num_queries, query_data_offset, query_stride, num_query_items, copy_flags, copy_item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx8_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx8_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = @load_param (param_idx=3)
+    32     %5 = load_const (0x00000004)
+    32     %6 = load_const (0x00000002)
+    32     %7 = ishl %4, %6 (0x2)
+    64     %8 = u2u64 %7
+    32     %9 = iadd %4, %5 (0x4)
+    1     %10 = ult %3, %9
+                // succs: b1 b11
+    if %10 {
+        block b1:   // preds: b0
+        32    %11 = load_const (0x00000003)
+        32    %12 = iadd %4, %11 (0x3)
+        1     %13 = ult %3, %12
+                    // succs: b2 b9
+        if %13 {
+            block b2:   // preds: b1
+            32    %14 = iadd %4, %6 (0x2)
+            1     %15 = ult %3, %14
+                        // succs: b3 b7
+            if %15 {
+                block b3:   // preds: b2
+                32    %16 = load_const (0x00000001)
+                32    %17 = iadd %4, %16 (0x1)
+                1     %18 = uge %3, %17
+                            // succs: b4 b5
+                if %18 {
+                    block b4:   // preds: b3
+                    64    %19 = iadd %2, %8
+                    32    %20 = @load_global (%19) (access=none, align_mul=4, align_offset=0)
+                    64    %21 = iadd %1, %8
+                                @store_global (%20, %21) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                // succs: b6
+                } else {
+                    block b5:  // preds: b3, succs: b6
+                }
+                block b6:  // preds: b4 b5, succs: b8
+            } else {
+                block b7:   // preds: b2
+                64    %22 = iadd %2, %8
+                32x2  %23 = @load_global (%22) (access=none, align_mul=8, align_offset=0)
+                64    %24 = iadd %1, %8
+                            @store_global (%23, %24) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                            // succs: b8
+            }
+            block b8:  // preds: b6 b7, succs: b10
+        } else {
+            block b9:   // preds: b1
+            64    %25 = iadd %2, %8
+            32x4  %26 = @load_global (%25) (access=none, align_mul=16, align_offset=0)
+            32x4  %27 = vec4 %26.x, %26.y, %26.z, %0
+            64    %28 = iadd %1, %8
+                        @store_global (%27, %28) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                        // succs: b10
+        }
+        block b10:  // preds: b8 b9, succs: b12
+    } else {
+        block b11:  // preds: b0
+        64    %29 = iadd %2, %8
+        32x4  %30 = @load_global (%29) (access=none, align_mul=16, align_offset=0)
+        64    %31 = iadd %1, %8
+                    @store_global (%30, %31) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                    // succs: b12
+    }
+    block b12:  // preds: b10 b11, succs: b13
+    block b13:
+   */
+   static const uint32_t impl_0_nir[168] = {
+    0x0000002e, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000004, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000b, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0xc4031744,
+    0x00009605, 0x00005605, 0xc4351000, 0x00000000,
+    0x00080006, 0xe438f000, 0x00000000, 0x00000009,
+    0xc431f000, 0x00000000, 0x00070006, 0x243a6000,
+    0x00000000, 0x000b0005, 0x00000001, 0x00000030,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00007605, 0xc431f000, 0x00000000, 0x000e0006,
+    0x243a6000, 0x00000000, 0x000f0005, 0x00000001,
+    0x00000040, 0x00000000, 0x00000003, 0x00000000,
+    0x00000002, 0xc431f000, 0x00000000, 0x00080006,
+    0x243a6000, 0x00000000, 0x00120005, 0x00000001,
+    0x0000004c, 0x00000000, 0x00000003, 0x00000000,
+    0x00000003, 0x00003605, 0xc431f000, 0x00000000,
+    0x00150006, 0x243a0000, 0x00000000, 0x00160005,
+    0x00000001, 0x0000005c, 0x00000000, 0x00000001,
+    0x00000000, 0x00000004, 0xe431f000, 0x00000000,
+    0x000a0004, 0xc4005354, 0x00000064, 0x00000400,
+    0xe431f000, 0x00000000, 0x000a0003, 0x00006894,
+    0x00000068, 0x0000006c, 0x00040001, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x00000004, 0xe431f000,
+    0x00000000, 0x000a0004, 0xc8005354, 0x0000007c,
+    0x00000800, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000080, 0x00000084, 0x00080003,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x00000090, 0x00001000, 0xd01d3000,
+    0x00000000, 0xe4000094, 0xe5000094, 0xe6000094,
+    0xe4000008, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000098, 0x0000009c, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000004, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x000000a8, 0x00001000, 0xe431f000,
+    0x00000000, 0x000a0003, 0x00006894, 0x000000ac,
+    0x000000b0, 0x0010000f, 0x00000000, 0x00000000,
+};
+   nir_def *args[4] = { dst_base, src_base, num_dwords, dword_offset };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx8_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+void
+gfx8_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = load_const (0x00000000)
+                // succs: b1
+    loop {
+        block b1:   // preds: b0 b16
+        32     %5 = phi b0: %4 (0x0), b16: %8
+        1      %6 = uge %5, %3
+                    // succs: b2 b3
+        if %6 {
+            block b2:// preds: b1
+            break
+            // succs: b17
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:   // preds: b3
+        32     %7 = load_const (0x00000010 = 16)
+        32     %8 = iadd %5, %7 (0x10)
+        1      %9 = ult %3, %8
+                    // succs: b5 b15
+        if %9 {
+            block b5:   // preds: b4
+            32    %10 = load_const (0x0000000c = 12)
+            32    %11 = iadd %5, %10 (0xc)
+            1     %12 = ult %3, %11
+                        // succs: b6 b13
+            if %12 {
+                block b6:   // preds: b5
+                32    %13 = load_const (0x00000008)
+                32    %14 = iadd %5, %13 (0x8)
+                1     %15 = ult %3, %14
+                            // succs: b7 b11
+                if %15 {
+                    block b7:   // preds: b6
+                    32    %16 = load_const (0x00000004)
+                    32    %17 = iadd %5, %16 (0x4)
+                    1     %18 = uge %3, %17
+                                // succs: b8 b9
+                    if %18 {
+                        block b8:   // preds: b7
+                        64    %19 = u2u64 %5
+                        64    %20 = iadd %2, %19
+                        32    %21 = @load_global (%20) (access=none, align_mul=4, align_offset=0)
+                        64    %22 = iadd %1, %19
+                                    @store_global (%21, %22) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                    // succs: b10
+                    } else {
+                        block b9:  // preds: b7, succs: b10
+                    }
+                    block b10:  // preds: b8 b9, succs: b12
+                } else {
+                    block b11:  // preds: b6
+                    64    %23 = u2u64 %5
+                    64    %24 = iadd %2, %23
+                    32x2  %25 = @load_global (%24) (access=none, align_mul=8, align_offset=0)
+                    64    %26 = iadd %1, %23
+                                @store_global (%25, %26) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                                // succs: b12
+                }
+                block b12:  // preds: b10 b11, succs: b14
+            } else {
+                block b13:  // preds: b5
+                64    %27 = u2u64 %5
+                64    %28 = iadd %2, %27
+                32x4  %29 = @load_global (%28) (access=none, align_mul=16, align_offset=0)
+                64    %30 = iadd %1, %27
+                32x4  %31 = vec4 %29.x, %29.y, %29.z, %0
+                            @store_global (%31, %30) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13, succs: b16
+        } else {
+            block b15:  // preds: b4
+            64    %32 = u2u64 %5
+            64    %33 = iadd %2, %32
+            32x4  %34 = @load_global (%33) (access=none, align_mul=16, align_offset=0)
+            64    %35 = iadd %1, %32
+                        @store_global (%34, %35) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                        // succs: b16
+        }
+        block b16:  // preds: b14 b15, succs: b1
+    }
+    block b17:  // preds: b2, succs: b18
+    block b18:
+   */
+   static const uint32_t impl_0_nir[197] = {
+    0x00000037, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000003, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x00000005, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0x00000e05,
+    0x00000002, 0x00000000, 0x00000005, 0x00000000,
+    0x00000002, 0xc4000028, 0x00000006, 0x00000001,
+    0x0000000e, 0x00000035, 0x243a0000, 0x00000000,
+    0x00050008, 0x00000001, 0x00000024, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000003, 0x00021605, 0xc431f000, 0x00000000,
+    0x000d0008, 0x243a6000, 0x00000000, 0x000e0005,
+    0x00000001, 0x0000003c, 0x00000000, 0x00000003,
+    0x00000000, 0x00000003, 0x00019605, 0xc431f000,
+    0x00000000, 0x00110008, 0x243a6000, 0x00000000,
+    0x00120005, 0x00000001, 0x0000004c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000003, 0x00011605,
+    0xc431f000, 0x00000000, 0x00150008, 0x243a6000,
+    0x00000000, 0x00160005, 0x00000001, 0x0000005c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00009605, 0xc431f000, 0x00000000, 0x00190008,
+    0x243a0000, 0x00000000, 0x001a0005, 0x00000001,
+    0x0000006c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001d0004, 0xc4005354,
+    0x00000078, 0x00000400, 0xe431f000, 0x00000000,
+    0x001d0003, 0x00006894, 0x0000007c, 0x00000080,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00240004, 0xc8005354,
+    0x00000094, 0x00000800, 0xe431f000, 0x00000000,
+    0x00240003, 0x00006894, 0x00000098, 0x0000009c,
+    0x00080003, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000006, 0xe438f000, 0x00000000,
+    0x00000008, 0xe431f000, 0x00000000, 0x002a0004,
+    0xd0005354, 0x000000ac, 0x00001000, 0xe431f000,
+    0x00000000, 0x002a0003, 0xd01d3000, 0x00000000,
+    0xe40000b0, 0xe50000b0, 0xe60000b0, 0xe4000008,
+    0x00006894, 0x000000b8, 0x000000b4, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00310004, 0xd0005354,
+    0x000000c8, 0x00001000, 0xe431f000, 0x00000000,
+    0x00310003, 0x00006894, 0x000000cc, 0x000000d0,
+    0x0010000f, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[3] = { dst_ptr, src_ptr, size };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
+struct vtn_bindgen_dummy {
+   vtn_bindgen_dummy() {
+      /* Format strings:
+       *
+       */
+const uint32_t printf_0_blob[1] = {
+    0x00000000,
+};
+      u_printf_singleton_init_or_ref();
+      u_printf_singleton_add_serialized((const void*)printf_0_blob, sizeof(printf_0_blob));
+   }
+
+   ~vtn_bindgen_dummy() {
+      u_printf_singleton_decref();
+   }
+};
+
+static vtn_bindgen_dummy vtn_bindgen_dummy_instance;
diff --git a/src/intel/shaders/intel_gfx80_shaders_binding.h b/src/intel/shaders/intel_gfx80_shaders_binding.h
new file mode 100644
index 00000000000..eb397425922
--- /dev/null
+++ b/src/intel/shaders/intel_gfx80_shaders_binding.h
@@ -0,0 +1,50 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#pragma once
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx8_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx8_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx8_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx8_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx8_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx8_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx8_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx8_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx8_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx8_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
diff --git a/src/intel/shaders/intel_gfx90_shaders_binding.cpp b/src/intel/shaders/intel_gfx90_shaders_binding.cpp
new file mode 100644
index 00000000000..b03d172a797
--- /dev/null
+++ b/src/intel/shaders/intel_gfx90_shaders_binding.cpp
@@ -0,0 +1,3733 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx9_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx9_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count)
+{
+   /*
+    block b0:  // preds:
+    64    %0 = @load_param (param_idx=0)
+    32    %1 = @load_param (param_idx=1)
+    32    %2 = load_const (0x00000002)
+    32    %3 = ishl %1, %2 (0x2)
+    32    %4 = load_const (0xffffffff = -1 = 4294967295)
+    32    %5 = iadd %4 (0xffffffff), %3
+    32    %6 = load_const (0x78080000 = 2013790208)
+    32    %7 = ior %6 (0x78080000), %5
+               @store_global (%7, %0) (wrmask=x, access=none, align_mul=4, align_offset=0)
+               // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[37] = {
+    0x0000000a, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000009, 0xe4001744,
+    0xc4011744, 0x00005605, 0xc4351000, 0x00000000,
+    0x00040003, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00050006, 0x78080e05, 0xc434e000, 0x00000000,
+    0x00070008, 0x00006894, 0x00000024, 0x00000008,
+    0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, buffer_count };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx9_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx9_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    64     %2 = @load_param (param_idx=0)
+    32     %3 = @load_param (param_idx=1)
+    32     %4 = @load_param (param_idx=2)
+    64     %5 = @load_param (param_idx=3)
+    32     %6 = @load_param (param_idx=4)
+    32     %7 = @load_param (param_idx=5)
+    64     %8 = load_const (0x0000000000000004)
+    64     %9 = load_const (0x0000000000000000)
+    1     %10 = ieq %5, %9 (0x0)
+    8     %11 = load_const (0x00)
+    8     %12 = load_const (0x01)
+    32    %13 = load_const (0x00000000)
+    32    %14 = b2i32 %10
+    32    %15 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %16 = iand %1, %15 (0xffffff00)
+    32    %17 = ior %16, %14
+    32    %18 = load_const (0x00000100 = 256)
+    32    %19 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %20 = iand %17, %19 (0xffff00ff)
+    32    %21 = ior %20, %18 (0x100)
+    16x2  %22 = unpack_32_2x16 %0
+    32    %23 = u2u32 %22.x
+    32    %24 = load_const (0x00000010 = 16)
+    32    %25 = ishl %23, %24 (0x10)
+    32    %26 = extract_u16 %21, %13 (0x0)
+    32    %27 = ior %26, %25
+    64    %28 = load_const (0x0000000000000008)
+    64    %29 = load_const (0x000000000000000c = 12)
+    32x2  %30 = unpack_64_2x32 %5
+    64    %31 = u2u64 %7
+    8x4   %32 = unpack_32_4x8 %27
+    8     %33 = iand %32.x, %12 (0x1)
+    1     %34 = ine %33, %11 (0x0)
+    64    %35 = b2i64 %34
+    32    %36 = load_const (0x0000000d = 13)
+    64    %37 = ishl %35, %36 (0xd)
+    64    %38 = ior %31, %37
+    8     %39 = iand %32.y, %12 (0x1)
+    1     %40 = ine %39, %11 (0x0)
+    64    %41 = b2i64 %40
+    32    %42 = load_const (0x0000000e = 14)
+    64    %43 = ishl %41, %42 (0xe)
+    64    %44 = ior %38, %43
+    64    %45 = u2u64 %3
+    64    %46 = ishl %45, %24 (0x10)
+    64    %47 = ior %44, %46
+    64    %48 = u2u64 %4
+    32    %49 = load_const (0x0000001a = 26)
+    64    %50 = ishl %48, %49 (0x1a)
+    64    %51 = ior %47, %50
+    32    %52 = u2u32 %51
+                @store_global (%52, %2) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %53 = u2u32 %5
+    64    %54 = iadd %2, %8 (0x4)
+                @store_global (%53, %54) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %55 = mov %30.y
+    64    %56 = iadd %2, %28 (0x8)
+                @store_global (%55, %56) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %57 = iadd %2, %29 (0xc)
+                @store_global (%6, %57) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[181] = {
+    0x0000003c, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000006, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x0000003e, 0x00000607,
+    0x00000607, 0xe4001744, 0xc4011744, 0xc4021744,
+    0xe4031744, 0xc4041744, 0xc4051744, 0x00009705,
+    0x00000f05, 0x24327000, 0x00000000, 0x000b0007,
+    0x00001405, 0x00003405, 0x00000e05, 0xc4225000,
+    0x00000000, 0x0000000c, 0xffe01605, 0xc4322000,
+    0x00000000, 0x00110003, 0xc434e000, 0x00000000,
+    0x00100012, 0x00201605, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00150013, 0xc434e000, 0x00000000,
+    0x00140016, 0xa83b8000, 0x00000000, 0x00000002,
+    0xc438e000, 0x00000000, 0x00000018, 0x00021605,
+    0xc4351000, 0x00000000, 0x001a0019, 0xc4287000,
+    0x00000000, 0x000f0017, 0xc434e000, 0x00000000,
+    0x001b001c, 0x00011705, 0x00019705, 0xc83bc000,
+    0x00000000, 0x00000007, 0xe438f000, 0x00000000,
+    0x00000009, 0x903bb000, 0x00000000, 0x0000001d,
+    0x84322000, 0x00000000, 0x000e0022, 0x24345000,
+    0x00000000, 0x000d0023, 0xe4226000, 0x00000000,
+    0x00000024, 0x0001b605, 0xe4351000, 0x00000000,
+    0x00260025, 0xe434e000, 0x00000000, 0x00270021,
+    0x84322100, 0x00000000, 0x000e0022, 0x24345000,
+    0x00000000, 0x000d0029, 0xe4226000, 0x00000000,
+    0x0000002a, 0x0001d605, 0xe4351000, 0x00000000,
+    0x002c002b, 0xe434e000, 0x00000000, 0x002d0028,
+    0xe438f000, 0x00000000, 0x00000005, 0xe4351000,
+    0x00000000, 0x001a002f, 0xe434e000, 0x00000000,
+    0x0030002e, 0xe438f000, 0x00000000, 0x00000006,
+    0x00035605, 0xe4351000, 0x00000000, 0x00330032,
+    0xe434e000, 0x00000000, 0x00340031, 0xc438e000,
+    0x00000000, 0x00000035, 0x00006894, 0x000000d8,
+    0x00000010, 0x00040001, 0xc438e000, 0x00000000,
+    0x00000007, 0xe431f000, 0x00000000, 0x000a0004,
+    0x00006894, 0x000000dc, 0x000000e0, 0x00040001,
+    0xc435a100, 0x00000000, 0x00000020, 0xe431f000,
+    0x00000000, 0x001e0004, 0x00006894, 0x000000e4,
+    0x000000e8, 0x00040001, 0xe431f000, 0x00000000,
+    0x001f0004, 0x00006894, 0x00000020, 0x000000ec,
+    0x00040001,
+};
+   nir_def *args[6] = { dst_ptr, mocs, buffer_idx, address, size, stride };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx9_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx9_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    32     %2 = undefined
+    64     %3 = @load_param (param_idx=0)
+    1      %4 = @load_param (param_idx=1)
+    1      %5 = @load_param (param_idx=2)
+    32     %6 = @load_param (param_idx=4)
+    32     %7 = @load_param (param_idx=5)
+    32     %8 = @load_param (param_idx=6)
+    32     %9 = @load_param (param_idx=7)
+    32    %10 = @load_param (param_idx=8)
+    8     %11 = load_const (0x00)
+    8     %12 = load_const (0x01)
+    64    %13 = load_const (0x0000000000000004)
+    32    %14 = b2i32 %4
+    32    %15 = load_const (0xffffff00 = -256 = 4294967040)
+    32    %16 = iand %2, %15 (0xffffff00)
+    32    %17 = ior %16, %14
+    32    %18 = load_const (0x00000008)
+    32    %19 = load_const (0xffff00ff = -65281 = 4294902015)
+    32    %20 = iand %17, %19 (0xffff00ff)
+    32    %21 = load_const (0x00000010 = 16)
+    32    %22 = load_const (0xff00ffff = -16711681 = 4278255615)
+    8x4   %23 = unpack_32_4x8 %1
+    32    %24 = u2u32 %23.x
+    32    %25 = load_const (0x00000018 = 24)
+    32    %26 = ishl %24, %25 (0x18)
+    32    %27 = load_const (0x00ffffff = 16777215)
+    32    %28 = load_const (0x00000000)
+    32    %29 = extract_u16 %20, %28 (0x0)
+    32    %30 = ior %29, %26
+    64    %31 = load_const (0x0000000000000008)
+    64    %32 = load_const (0x000000000000000c = 12)
+    64    %33 = load_const (0x0000000000000010 = 16)
+    64    %34 = load_const (0x0000000000000014 = 20)
+    64    %35 = load_const (0x0000000000000018 = 24)
+    16    %36 = u2u16 %23.y
+    16    %37 = u2u16 %23.z
+    16    %38 = ishl %37, %18 (0x8)
+    16    %39 = ior %36, %38
+    8     %40 = u2u8 %39
+    16    %41 = load_const (0x0001)
+    16    %42 = extract_u8 %39, %41 (0x1)
+    8     %43 = u2u8 %42
+    32    %44 = u2u32 %40
+    32    %45 = ishl %44, %18 (0x8)
+    32    %46 = load_const (0xffff0000 = -65536 = 4294901760)
+    32    %47 = iand %46 (0xffff0000), %0
+    32    %48 = ior %47, %45
+    32    %49 = u2u32 %43
+    32    %50 = ishl %49, %21 (0x10)
+    32    %51 = iand %48, %22 (0xff00ffff)
+    32    %52 = ior %51, %50
+    32    %53 = u2u32 %23.w
+    32    %54 = ishl %53, %25 (0x18)
+    32    %55 = iand %52, %27 (0xffffff)
+    32    %56 = ior %55, %54
+    8x4   %57 = unpack_32_4x8 %30
+    8     %58 = iand %57.x, %12 (0x1)
+    1     %59 = ine %58, %11 (0x0)
+    64    %60 = b2i64 %59
+    64    %61 = ishl %60, %18 (0x8)
+    32    %62 = unpack_64_2x32_split_x %61
+    32    %63 = load_const (0x00000005)
+    32    %64 = ior %62, %63 (0x5)
+    32    %65 = unpack_64_2x32_split_y %61
+    64    %66 = pack_64_2x32_split %64, %65
+    8     %67 = iand %57.y, %12 (0x1)
+    1     %68 = ine %67, %11 (0x0)
+    64    %69 = b2i64 %68
+    32    %70 = load_const (0x00000009)
+    64    %71 = ishl %69, %70 (0x9)
+    64    %72 = ior %66, %71
+    8     %73 = iand %57.z, %12 (0x1)
+    1     %74 = ine %73, %11 (0x0)
+    64    %75 = b2i64 %74
+    32    %76 = load_const (0x0000000a = 10)
+    64    %77 = ishl %75, %76 (0xa)
+    64    %78 = ior %72, %77
+    32    %79 = unpack_64_2x32_split_x %78
+    32    %80 = load_const (0x7b000000 = 2063597568)
+    32    %81 = ior %80 (0x7b000000), %79
+                @store_global (%81, %3) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %82 = b2i64 %5
+    64    %83 = ishl %82, %18 (0x8)
+    8x4   %84 = unpack_32_4x8 %56
+    8     %85 = iand %84.x, %12 (0x1)
+    1     %86 = ine %85, %11 (0x0)
+    64    %87 = b2i64 %86
+    64    %88 = ishl %87, %70 (0x9)
+    64    %89 = ior %83, %88
+    32    %90 = u2u32 %89
+    64    %91 = iadd %3, %13 (0x4)
+                @store_global (%90, %91) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %92 = iadd %3, %31 (0x8)
+                @store_global (%6, %92) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %93 = iadd %3, %32 (0xc)
+                @store_global (%7, %93) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %94 = iadd %3, %33 (0x10)
+                @store_global (%8, %94) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %95 = iadd %3, %34 (0x14)
+                @store_global (%9, %95) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    64    %96 = iadd %3, %35 (0x18)
+                @store_global (%10, %96) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[302] = {
+    0x00000063, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000009, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000068, 0x00000607,
+    0x00000607, 0x00000607, 0xe4001744, 0x24011744,
+    0x24021744, 0xc4041744, 0xc4051744, 0xc4061744,
+    0xc4071744, 0xc4081744, 0x00001405, 0x00003405,
+    0x00009705, 0xc4225000, 0x00000000, 0x00000006,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00110004,
+    0xc434e000, 0x00000000, 0x00100012, 0x00011605,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00150013,
+    0x00021605, 0x00000605, 0xff00ffff, 0x903bb000,
+    0x00000000, 0x00000003, 0xc438e000, 0x00000000,
+    0x00000019, 0x00031605, 0xc4351000, 0x00000000,
+    0x001b001a, 0x00000605, 0x00ffffff, 0x00000e05,
+    0xc4287000, 0x00000000, 0x001e0016, 0xc434e000,
+    0x00000000, 0x001c001f, 0x00011705, 0x00019705,
+    0x00021705, 0x00029705, 0x00031705, 0xa438d100,
+    0x00000000, 0x00000019, 0xa438d200, 0x00000000,
+    0x00000019, 0xa4351000, 0x00000000, 0x00140027,
+    0xa434e000, 0x00000000, 0x00280026, 0x84390000,
+    0x00000000, 0x00000029, 0x00003505, 0xa4288000,
+    0x00000000, 0x002b0029, 0x84390000, 0x00000000,
+    0x0000002c, 0xc438e000, 0x00000000, 0x0000002a,
+    0xc4351000, 0x00000000, 0x0014002e, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x00020030, 0xc434e000,
+    0x00000000, 0x002f0031, 0xc438e000, 0x00000000,
+    0x0000002d, 0xc4351000, 0x00000000, 0x00170033,
+    0xc4322000, 0x00000000, 0x00180032, 0xc434e000,
+    0x00000000, 0x00340035, 0xc438e300, 0x00000000,
+    0x00000019, 0xc4351000, 0x00000000, 0x001b0037,
+    0xc4322000, 0x00000000, 0x001d0036, 0xc434e000,
+    0x00000000, 0x00380039, 0x903bb000, 0x00000000,
+    0x00000020, 0x84322000, 0x00000000, 0x000e003b,
+    0x24345000, 0x00000000, 0x000d003c, 0xe4226000,
+    0x00000000, 0x0000003d, 0xe4351000, 0x00000000,
+    0x0014003e, 0xc43bd000, 0x00000000, 0x0000003f,
+    0x0000b605, 0xc434e000, 0x00000000, 0x00410040,
+    0xc43be000, 0x00000000, 0x0000003f, 0xe4369000,
+    0x00000000, 0x00430042, 0x84322100, 0x00000000,
+    0x000e003b, 0x24345000, 0x00000000, 0x000d0045,
+    0xe4226000, 0x00000000, 0x00000046, 0x00013605,
+    0xe4351000, 0x00000000, 0x00480047, 0xe434e000,
+    0x00000000, 0x00490044, 0x84322200, 0x00000000,
+    0x000e003b, 0x24345000, 0x00000000, 0x000d004b,
+    0xe4226000, 0x00000000, 0x0000004c, 0x00015605,
+    0xe4351000, 0x00000000, 0x004e004d, 0xe434e000,
+    0x00000000, 0x004f004a, 0xc43bd000, 0x00000000,
+    0x00000050, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00510052, 0x00006894, 0x0000014c, 0x00000014,
+    0x00040001, 0xe4226000, 0x00000000, 0x00000007,
+    0xe4351000, 0x00000000, 0x00140054, 0x903bb000,
+    0x00000000, 0x0000003a, 0x84322000, 0x00000000,
+    0x000e0056, 0x24345000, 0x00000000, 0x000d0057,
+    0xe4226000, 0x00000000, 0x00000058, 0xe4351000,
+    0x00000000, 0x00480059, 0xe434e000, 0x00000000,
+    0x005a0055, 0xc438e000, 0x00000000, 0x0000005b,
+    0xe431f000, 0x00000000, 0x000f0005, 0x00006894,
+    0x00000170, 0x00000174, 0x00040001, 0xe431f000,
+    0x00000000, 0x00210005, 0x00006894, 0x00000020,
+    0x00000178, 0x00040001, 0xe431f000, 0x00000000,
+    0x00220005, 0x00006894, 0x00000024, 0x0000017c,
+    0x00040001, 0xe431f000, 0x00000000, 0x00230005,
+    0x00006894, 0x00000028, 0x00000180, 0x00040001,
+    0xe431f000, 0x00000000, 0x00240005, 0x00006894,
+    0x0000002c, 0x00000184, 0x00040001, 0xe431f000,
+    0x00000000, 0x00250005, 0x00006894, 0x00000030,
+    0x00000188, 0x00040001,
+};
+   nir_def *args[9] = { dst_ptr, is_predicated, is_indexed, uses_tbimr, vertex_count_per_instance, start_vertex_location, instance_count, start_instance_location, base_vertex_location };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx9_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx9_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    32     %1 = undefined
+    64     %2 = @load_param (param_idx=0)
+    64     %3 = @load_param (param_idx=1)
+    64     %4 = load_const (0x0000000000000004)
+    64     %5 = load_const (0x0000000000000008)
+    8      %6 = load_const (0x00)
+    32     %7 = load_const (0xffff0000 = -65536 = 4294901760)
+    32     %8 = iand %7 (0xffff0000), %1
+    32     %9 = load_const (0x0000000a = 10)
+    32    %10 = load_const (0x00000010 = 16)
+    8x4   %11 = unpack_32_4x8 %0
+    32    %12 = u2u32 %11.x
+    32    %13 = load_const (0x00000018 = 24)
+    32    %14 = ishl %12, %13 (0x18)
+    32    %15 = load_const (0x00000000)
+    32    %16 = extract_u16 %8, %15 (0x0)
+    32    %17 = ior %16, %14
+    8x4   %18 = unpack_32_4x8 %17
+    8     %19 = load_const (0x01)
+    8     %20 = iand %18.x, %19 (0x1)
+    1     %21 = ine %20, %6 (0x0)
+    64    %22 = b2i64 %21
+    64    %23 = ishl %22, %9 (0xa)
+    32    %24 = unpack_64_2x32_split_x %23
+    32    %25 = load_const (0x00000101 = 257)
+    32    %26 = ior %24, %25 (0x101)
+    32    %27 = unpack_64_2x32_split_y %23
+    64    %28 = pack_64_2x32_split %26, %27
+    8     %29 = iand %18.y, %19 (0x1)
+    1     %30 = ine %29, %6 (0x0)
+    64    %31 = b2i64 %30
+    32    %32 = load_const (0x0000000f = 15)
+    64    %33 = ishl %31, %32 (0xf)
+    64    %34 = ior %28, %33
+    8     %35 = iand %18.z, %19 (0x1)
+    1     %36 = ine %35, %6 (0x0)
+    64    %37 = b2i64 %36
+    64    %38 = ishl %37, %10 (0x10)
+    64    %39 = ior %34, %38
+    32    %40 = unpack_64_2x32_split_x %39
+    32    %41 = load_const (0x18800000 = 411041792)
+    32    %42 = ior %40, %41 (0x18800000)
+                @store_global (%42, %2) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %43 = u2u32 %3
+    64    %44 = iadd %2, %4 (0x4)
+                @store_global (%43, %44) (wrmask=x, access=none, align_mul=4, align_offset=0)
+    32    %45 = unpack_64_2x32_split_y %3
+    64    %46 = iadd %2, %5 (0x8)
+                @store_global (%45, %46) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                // succs: b1
+    block b1:
+   */
+   static const uint32_t impl_0_nir[140] = {
+    0x00000031, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000001, 0x00000000, 0x00000032, 0x00000607,
+    0x00000607, 0xe4001744, 0xe4011744, 0x00009705,
+    0x00011705, 0x00001405, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x00030009, 0x00015605, 0x00021605,
+    0x903bb000, 0x00000000, 0x00000002, 0xc438e000,
+    0x00000000, 0x0000000d, 0x00031605, 0xc4351000,
+    0x00000000, 0x000f000e, 0x00000e05, 0xc4287000,
+    0x00000000, 0x0011000a, 0xc434e000, 0x00000000,
+    0x00100012, 0x903bb000, 0x00000000, 0x00000013,
+    0x00003405, 0x84322000, 0x00000000, 0x00150014,
+    0x24345000, 0x00000000, 0x00080016, 0xe4226000,
+    0x00000000, 0x00000017, 0xe4351000, 0x00000000,
+    0x000b0018, 0xc43bd000, 0x00000000, 0x00000019,
+    0x00203605, 0xc434e000, 0x00000000, 0x001b001a,
+    0xc43be000, 0x00000000, 0x00000019, 0xe4369000,
+    0x00000000, 0x001d001c, 0x84322100, 0x00000000,
+    0x00150014, 0x24345000, 0x00000000, 0x0008001f,
+    0xe4226000, 0x00000000, 0x00000020, 0x0001f605,
+    0xe4351000, 0x00000000, 0x00220021, 0xe434e000,
+    0x00000000, 0x0023001e, 0x84322200, 0x00000000,
+    0x00150014, 0x24345000, 0x00000000, 0x00080025,
+    0xe4226000, 0x00000000, 0x00000026, 0xe4351000,
+    0x00000000, 0x000c0027, 0xe434e000, 0x00000000,
+    0x00280024, 0xc43bd000, 0x00000000, 0x00000029,
+    0x18800e05, 0xc434e000, 0x00000000, 0x002b002a,
+    0x00006894, 0x000000b0, 0x00000010, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000005, 0xe431f000,
+    0x00000000, 0x00060004, 0x00006894, 0x000000b4,
+    0x000000b8, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x00070004,
+    0x00006894, 0x000000bc, 0x000000c0, 0x00040001,
+};
+   nir_def *args[2] = { dst_ptr, addr };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx9_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx9_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    64      %8 = @load_param (param_idx=0)
+    64      %9 = @load_param (param_idx=1)
+    64     %10 = @load_param (param_idx=2)
+    32     %11 = @load_param (param_idx=3)
+    32     %12 = @load_param (param_idx=4)
+    1      %13 = @load_param (param_idx=5)
+    1      %14 = @load_param (param_idx=6)
+    1      %15 = @load_param (param_idx=8)
+    1      %16 = @load_param (param_idx=9)
+    32     %17 = @load_param (param_idx=10)
+    8      %18 = load_const (0x00)
+    8      %19 = load_const (0x01)
+    1      %20 = ior %15, %16
+                 // succs: b1 b8
+    if %20 {
+        block b1:    // preds: b0
+        32     %21 = load_const (0x00000000)
+        32     %22 = b2i32 %15
+        32     %23 = b2i32 %16
+        32     %24 = iadd.nsw %22, %23
+        32     %25 = load_const (0x00000004 = 0.000000)
+        32     %26 = load_const (0x00000002)
+        32     %27 = ishl %24, %26 (0x2)
+        32     %28 = load_const (0xffffffff = -1 = 4294967295)
+        32     %29 = iadd %28 (0xffffffff), %27
+        64     %30 = load_const (0x0000000000000004)
+        32     %31 = load_const (0x00000008)
+        64     %32 = load_const (0x0000000000000008)
+        64     %33 = load_const (0x000000000000000c = 12)
+        32     %34 = load_const (0x0000000c = 12)
+        64     %35 = load_const (0x0000000000000010 = 16)
+        32     %36 = load_const (0x00000010 = 16)
+        64     %37 = load_const (0x0000000000000000)
+        32     %38 = load_const (0x78080000 = 2013790208)
+        32     %39 = ior %38 (0x78080000), %29
+                     @store_global (%39, %8) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64     %40 = iadd %8, %30 (0x4)
+                     // succs: b2 b3
+        if %15 {
+            block b2:    // preds: b1
+            32     %41 = bcsel %13, %34 (0xc), %31 (0x8)
+            64     %42 = i2i64 %41
+            64     %43 = iadd %9, %42
+            1      %44 = ieq %43, %37 (0x0)
+            32     %45 = b2i32 %44
+            32     %46 = load_const (0xffffff00 = -256 = 4294967040)
+            32     %47 = iand %7, %46 (0xffffff00)
+            32     %48 = ior %47, %45
+            32     %49 = load_const (0x00000100 = 256)
+            32     %50 = load_const (0xffff00ff = -65281 = 4294902015)
+            32     %51 = iand %48, %50 (0xffff00ff)
+            32     %52 = ior %51, %49 (0x100)
+            16x2   %53 = unpack_32_2x16 %6
+            32     %54 = u2u32 %53.x
+            32     %55 = ishl %54, %36 (0x10)
+            32     %56 = extract_u16 %52, %21 (0x0)
+            32     %57 = ior %56, %55
+            32x2   %58 = unpack_64_2x32 %43
+            8x4    %59 = unpack_32_4x8 %57
+            8      %60 = iand %59.x, %19 (0x1)
+            1      %61 = ine %60, %18 (0x0)
+            64     %62 = b2i64 %61
+            32     %63 = load_const (0x0000000d = 13)
+            64     %64 = ishl %62, %63 (0xd)
+            8      %65 = iand %59.y, %19 (0x1)
+            1      %66 = ine %65, %18 (0x0)
+            64     %67 = b2i64 %66
+            32     %68 = load_const (0x0000000e = 14)
+            64     %69 = ishl %67, %68 (0xe)
+            64     %70 = ior %64, %69
+            64     %71 = u2u64 %17
+            64     %72 = ishl %71, %36 (0x10)
+            64     %73 = ior %70, %72
+            32     %74 = unpack_64_2x32_split_x %73
+            32     %75 = load_const (0x7c000000 = 2080374784)
+            32     %76 = ior %74, %75 (0x7c000000)
+                         @store_global (%76, %40) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32     %77 = u2u32 %43
+            64     %78 = iadd %8, %32 (0x8)
+                         @store_global (%77, %78) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32     %79 = mov %58.y
+            64     %80 = iadd %8, %33 (0xc)
+                         @store_global (%79, %80) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64     %81 = iadd %8, %35 (0x10)
+                         @store_global (%31 (0x8), %81) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64     %82 = load_const (0x0000000000000014 = 20)
+            64     %83 = iadd %8, %82 (0x14)
+                         // succs: b4
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:    // preds: b2 b3
+        64     %84 = phi b2: %83, b3: %40
+                     // succs: b5 b6
+        if %16 {
+            block b5:    // preds: b4
+                         @store_global (%11, %10) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            1      %85 = ieq %10, %37 (0x0)
+            32     %86 = b2i32 %85
+            32     %87 = load_const (0xffffff00 = -256 = 4294967040)
+            32     %88 = iand %5, %87 (0xffffff00)
+            32     %89 = ior %88, %86
+            32     %90 = load_const (0x00000100 = 256)
+            32     %91 = load_const (0xffff00ff = -65281 = 4294902015)
+            32     %92 = iand %89, %91 (0xffff00ff)
+            32     %93 = ior %92, %90 (0x100)
+            16x2   %94 = unpack_32_2x16 %6
+            32     %95 = u2u32 %94.x
+            32     %96 = ishl %95, %36 (0x10)
+            32     %97 = extract_u16 %93, %21 (0x0)
+            32     %98 = ior %97, %96
+            32x2   %99 = unpack_64_2x32 %10
+            8x4   %100 = unpack_32_4x8 %98
+            8     %101 = iand %100.x, %19 (0x1)
+            1     %102 = ine %101, %18 (0x0)
+            64    %103 = b2i64 %102
+            32    %104 = load_const (0x0000000d = 13)
+            64    %105 = ishl %103, %104 (0xd)
+            8     %106 = iand %100.y, %19 (0x1)
+            1     %107 = ine %106, %18 (0x0)
+            64    %108 = b2i64 %107
+            32    %109 = load_const (0x0000000e = 14)
+            64    %110 = ishl %108, %109 (0xe)
+            64    %111 = ior %105, %110
+            64    %112 = u2u64 %17
+            64    %113 = ishl %112, %36 (0x10)
+            64    %114 = ior %111, %113
+            32    %115 = unpack_64_2x32_split_x %114
+            32    %116 = load_const (0x80000000 = -2147483648 = 2147483648)
+            32    %117 = ior %115, %116 (0x80000000)
+                         @store_global (%117, %84) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %118 = u2u32 %10
+            64    %119 = iadd %84, %30 (0x4)
+                         @store_global (%118, %119) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %120 = mov %99.y
+            64    %121 = iadd %84, %32 (0x8)
+                         @store_global (%120, %121) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %122 = iadd %84, %33 (0xc)
+                         @store_global (%25 (0x4), %122) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %123 = iadd %84, %35 (0x10)
+                         // succs: b7
+        } else {
+            block b6:  // preds: b4, succs: b7
+        }
+        block b7:    // preds: b5 b6
+        64    %124 = phi b5: %123, b6: %84
+                     // succs: b9
+    } else {
+        block b8:  // preds: b0, succs: b9
+    }
+    block b9:    // preds: b7 b8
+    64    %125 = phi b7: %124, b8: %8
+    1     %126 = inot %13
+                 // succs: b10 b11
+    if %126 {
+        block b10:   // preds: b9
+        32x4  %127 = @load_global (%9) (access=none, align_mul=4, align_offset=0)
+        32    %128 = load_const (0x00000008)
+        32    %129 = mov %127.x
+        64    %130 = load_const (0x0000000000000008)
+        32    %131 = mov %127.z
+        64    %132 = load_const (0x0000000000000004)
+        32    %133 = imul %127.y, %12
+        64    %134 = load_const (0x000000000000000c = 12)
+        32    %135 = mov %127.w
+        32    %136 = load_const (0x00000000)
+        32    %137 = b2i32 %14
+        32    %138 = load_const (0xffffff00 = -256 = 4294967040)
+        32    %139 = iand %4, %138 (0xffffff00)
+        32    %140 = ior %139, %137
+        32    %141 = load_const (0xffff00ff = -65281 = 4294902015)
+        32    %142 = iand %140, %141 (0xffff00ff)
+        32    %143 = load_const (0x00000010 = 16)
+        32    %144 = load_const (0xff00ffff = -16711681 = 4278255615)
+        8x4   %145 = unpack_32_4x8 %3
+        32    %146 = u2u32 %145.x
+        32    %147 = load_const (0x00000018 = 24)
+        32    %148 = ishl %146, %147 (0x18)
+        32    %149 = load_const (0x00ffffff = 16777215)
+        32    %150 = extract_u16 %142, %136 (0x0)
+        32    %151 = ior %150, %148
+        64    %152 = load_const (0x0000000000000010 = 16)
+        64    %153 = load_const (0x0000000000000014 = 20)
+        64    %154 = load_const (0x0000000000000018 = 24)
+        16    %155 = u2u16 %145.y
+        16    %156 = u2u16 %145.z
+        16    %157 = ishl %156, %128 (0x8)
+        16    %158 = ior %155, %157
+        8     %159 = u2u8 %158
+        16    %160 = load_const (0x0001)
+        16    %161 = extract_u8 %158, %160 (0x1)
+        8     %162 = u2u8 %161
+        32    %163 = u2u32 %159
+        32    %164 = ishl %163, %128 (0x8)
+        32    %165 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %166 = iand %165 (0xffff0000), %2
+        32    %167 = ior %166, %164
+        32    %168 = u2u32 %162
+        32    %169 = ishl %168, %143 (0x10)
+        32    %170 = iand %167, %144 (0xff00ffff)
+        32    %171 = ior %170, %169
+        32    %172 = u2u32 %145.w
+        32    %173 = ishl %172, %147 (0x18)
+        32    %174 = iand %171, %149 (0xffffff)
+        32    %175 = ior %174, %173
+        8x4   %176 = unpack_32_4x8 %151
+        8     %177 = iand %176.x, %19 (0x1)
+        1     %178 = ine %177, %18 (0x0)
+        64    %179 = b2i64 %178
+        64    %180 = ishl %179, %128 (0x8)
+        32    %181 = unpack_64_2x32_split_x %180
+        32    %182 = load_const (0x00000005)
+        32    %183 = ior %181, %182 (0x5)
+        32    %184 = unpack_64_2x32_split_y %180
+        64    %185 = pack_64_2x32_split %183, %184
+        8     %186 = iand %176.y, %19 (0x1)
+        1     %187 = ine %186, %18 (0x0)
+        64    %188 = b2i64 %187
+        32    %189 = load_const (0x00000009)
+        64    %190 = ishl %188, %189 (0x9)
+        64    %191 = ior %185, %190
+        8     %192 = iand %176.z, %19 (0x1)
+        1     %193 = ine %192, %18 (0x0)
+        64    %194 = b2i64 %193
+        32    %195 = load_const (0x0000000a = 10)
+        64    %196 = ishl %194, %195 (0xa)
+        64    %197 = ior %191, %196
+        32    %198 = unpack_64_2x32_split_x %197
+        32    %199 = load_const (0x7b000000 = 2063597568)
+        32    %200 = ior %199 (0x7b000000), %198
+                     @store_global (%200, %125) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %201 = b2i64 %13
+        64    %202 = ishl %201, %128 (0x8)
+        8x4   %203 = unpack_32_4x8 %175
+        8     %204 = iand %203.x, %19 (0x1)
+        1     %205 = ine %204, %18 (0x0)
+        64    %206 = b2i64 %205
+        64    %207 = ishl %206, %189 (0x9)
+        64    %208 = ior %202, %207
+        32    %209 = u2u32 %208
+        64    %210 = iadd %125, %132 (0x4)
+                     @store_global (%209, %210) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %211 = iadd %125, %130 (0x8)
+                     @store_global (%129, %211) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %212 = iadd %125, %134 (0xc)
+                     @store_global (%131, %212) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %213 = iadd %125, %152 (0x10)
+                     @store_global (%133, %213) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %214 = iadd %125, %153 (0x14)
+                     @store_global (%135, %214) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %215 = iadd %125, %154 (0x18)
+                     @store_global (%136 (0x0), %215) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b12
+    } else {
+        block b11:   // preds: b9
+        32x4  %216 = @load_global (%9) (access=none, align_mul=4, align_offset=0)
+        32    %217 = load_const (0x00000008)
+        64    %218 = load_const (0x0000000000000004)
+        64    %219 = load_const (0x0000000000000010 = 16)
+        64    %220 = iadd %9, %219 (0x10)
+        32    %221 = @load_global (%220) (access=none, align_mul=4, align_offset=0)
+        32    %222 = load_const (0x00000010 = 16)
+        32    %223 = mov %216.x
+        64    %224 = load_const (0x0000000000000008)
+        32    %225 = mov %216.z
+        32    %226 = imul %216.y, %12
+        64    %227 = load_const (0x000000000000000c = 12)
+        32    %228 = mov %216.w
+        32    %229 = b2i32 %14
+        32    %230 = load_const (0xffffff00 = -256 = 4294967040)
+        32    %231 = iand %1, %230 (0xffffff00)
+        32    %232 = ior %231, %229
+        32    %233 = load_const (0xffff00ff = -65281 = 4294902015)
+        32    %234 = iand %232, %233 (0xffff00ff)
+        32    %235 = load_const (0xff00ffff = -16711681 = 4278255615)
+        8x4   %236 = unpack_32_4x8 %3
+        32    %237 = u2u32 %236.x
+        32    %238 = load_const (0x00000018 = 24)
+        32    %239 = ishl %237, %238 (0x18)
+        32    %240 = load_const (0x00ffffff = 16777215)
+        32    %241 = load_const (0x00000000)
+        32    %242 = extract_u16 %234, %241 (0x0)
+        32    %243 = ior %242, %239
+        64    %244 = load_const (0x0000000000000014 = 20)
+        64    %245 = load_const (0x0000000000000018 = 24)
+        16    %246 = u2u16 %236.y
+        16    %247 = u2u16 %236.z
+        16    %248 = ishl %247, %217 (0x8)
+        16    %249 = ior %246, %248
+        8     %250 = u2u8 %249
+        16    %251 = load_const (0x0001)
+        16    %252 = extract_u8 %249, %251 (0x1)
+        8     %253 = u2u8 %252
+        32    %254 = u2u32 %250
+        32    %255 = ishl %254, %217 (0x8)
+        32    %256 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %257 = iand %256 (0xffff0000), %0
+        32    %258 = ior %257, %255
+        32    %259 = u2u32 %253
+        32    %260 = ishl %259, %222 (0x10)
+        32    %261 = iand %258, %235 (0xff00ffff)
+        32    %262 = ior %261, %260
+        32    %263 = u2u32 %236.w
+        32    %264 = ishl %263, %238 (0x18)
+        32    %265 = iand %262, %240 (0xffffff)
+        32    %266 = ior %265, %264
+        8x4   %267 = unpack_32_4x8 %243
+        8     %268 = iand %267.x, %19 (0x1)
+        1     %269 = ine %268, %18 (0x0)
+        64    %270 = b2i64 %269
+        64    %271 = ishl %270, %217 (0x8)
+        32    %272 = unpack_64_2x32_split_x %271
+        32    %273 = load_const (0x00000005)
+        32    %274 = ior %272, %273 (0x5)
+        32    %275 = unpack_64_2x32_split_y %271
+        64    %276 = pack_64_2x32_split %274, %275
+        8     %277 = iand %267.y, %19 (0x1)
+        1     %278 = ine %277, %18 (0x0)
+        64    %279 = b2i64 %278
+        32    %280 = load_const (0x00000009)
+        64    %281 = ishl %279, %280 (0x9)
+        64    %282 = ior %276, %281
+        8     %283 = iand %267.z, %19 (0x1)
+        1     %284 = ine %283, %18 (0x0)
+        64    %285 = b2i64 %284
+        32    %286 = load_const (0x0000000a = 10)
+        64    %287 = ishl %285, %286 (0xa)
+        64    %288 = ior %282, %287
+        32    %289 = unpack_64_2x32_split_x %288
+        32    %290 = load_const (0x7b000000 = 2063597568)
+        32    %291 = ior %290 (0x7b000000), %289
+                     @store_global (%291, %125) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %292 = b2i64 %13
+        64    %293 = ishl %292, %217 (0x8)
+        8x4   %294 = unpack_32_4x8 %266
+        8     %295 = iand %294.x, %19 (0x1)
+        1     %296 = ine %295, %18 (0x0)
+        64    %297 = b2i64 %296
+        64    %298 = ishl %297, %280 (0x9)
+        64    %299 = ior %293, %298
+        32    %300 = u2u32 %299
+        64    %301 = iadd %125, %218 (0x4)
+                     @store_global (%300, %301) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %302 = iadd %125, %224 (0x8)
+                     @store_global (%223, %302) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %303 = iadd %125, %227 (0xc)
+                     @store_global (%225, %303) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %304 = iadd %125, %219 (0x10)
+                     @store_global (%226, %304) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %305 = iadd %125, %244 (0x14)
+                     @store_global (%221, %305) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        64    %306 = iadd %125, %245 (0x18)
+                     @store_global (%228, %306) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b12
+    }
+    block b12:  // preds: b10 b11, succs: b13
+    block b13:
+   */
+   static const uint32_t impl_0_nir[954] = {
+    0x00000141, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000b, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00000101, 0x0000024b,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0x00000000, 0x00000015, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0xe4001744,
+    0xe4011744, 0xe4021744, 0xc4031744, 0xc4041744,
+    0x24051744, 0x24061744, 0x24081744, 0x24091744,
+    0xc40a1744, 0x00001405, 0x00003405, 0x2434e000,
+    0x00000000, 0x00120011, 0x00000001, 0x00000058,
+    0x00000000, 0x00000005, 0x00000000, 0x00000015,
+    0x00000e05, 0xc4625000, 0x00000000, 0x00000011,
+    0x00000000, 0x00000012, 0xc431f020, 0x00000000,
+    0x001a0019, 0x00009605, 0x00005605, 0xc4351000,
+    0x00000000, 0x001d001b, 0xfffff605, 0xc431f000,
+    0x00000000, 0x001e001f, 0x00009705, 0x00011605,
+    0x00011705, 0x00019705, 0x00019605, 0x00021705,
+    0x00021605, 0x00000f05, 0x78080e05, 0xc434e000,
+    0x00000000, 0x00200029, 0x00006894, 0x000000a8,
+    0x00000028, 0x00040001, 0xe431f000, 0x00000000,
+    0x0021000a, 0x00000001, 0x00000044, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002f, 0xc4273000,
+    0x00000000, 0x0025000f, 0x00000022, 0xe4319000,
+    0x00000000, 0x0000002d, 0xe431f000, 0x00000000,
+    0x002e000b, 0x24327000, 0x00000000, 0x0028002f,
+    0xc4225000, 0x00000000, 0x00000030, 0xffe01605,
+    0xc4322000, 0x00000000, 0x00320009, 0xc434e000,
+    0x00000000, 0x00310033, 0x00201605, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00360034, 0xc434e000,
+    0x00000000, 0x00350037, 0xa83b8000, 0x00000000,
+    0x00000008, 0xc438e000, 0x00000000, 0x00000039,
+    0xc4351000, 0x00000000, 0x0027003a, 0xc4287000,
+    0x00000000, 0x00180038, 0xc434e000, 0x00000000,
+    0x003b003c, 0xc83bc000, 0x00000000, 0x0000002f,
+    0x903bb000, 0x00000000, 0x0000003d, 0x84322000,
+    0x00000000, 0x0015003f, 0x24345000, 0x00000000,
+    0x00140040, 0xe4226000, 0x00000000, 0x00000041,
+    0x0001b605, 0xe4351000, 0x00000000, 0x00430042,
+    0x84322100, 0x00000000, 0x0015003f, 0x24345000,
+    0x00000000, 0x00140045, 0xe4226000, 0x00000000,
+    0x00000046, 0x0001d605, 0xe4351000, 0x00000000,
+    0x00480047, 0xe434e000, 0x00000000, 0x00490044,
+    0xe438f000, 0x00000000, 0x00000013, 0xe4351000,
+    0x00000000, 0x0027004b, 0xe434e000, 0x00000000,
+    0x004c004a, 0xc43bd000, 0x00000000, 0x0000004d,
+    0x7c000e05, 0xc434e000, 0x00000000, 0x004f004e,
+    0x00006894, 0x00000140, 0x000000ac, 0x00040001,
+    0xc438e000, 0x00000000, 0x0000002f, 0xe431f000,
+    0x00000000, 0x0023000a, 0x00006894, 0x00000144,
+    0x00000148, 0x00040001, 0xc435a100, 0x00000000,
+    0x0000003e, 0xe431f000, 0x00000000, 0x0024000a,
+    0x00006894, 0x0000014c, 0x00000150, 0x00040001,
+    0xe431f000, 0x00000000, 0x0026000a, 0x00006894,
+    0x00000088, 0x00000154, 0x00040001, 0x00029705,
+    0xe431f000, 0x00000000, 0x0056000a, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x00000057, 0x0000002c, 0x0000002b,
+    0x00000058, 0x00000001, 0x00000048, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002c, 0x00006894,
+    0x00000034, 0x00000030, 0x00040001, 0x24327000,
+    0x00000000, 0x0028000c, 0xc4225000, 0x00000000,
+    0x0000005c, 0xffe01605, 0xc4322000, 0x00000000,
+    0x005e0007, 0xc434e000, 0x00000000, 0x005d005f,
+    0x00201605, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x00620060, 0xc434e000, 0x00000000, 0x00610063,
+    0xa83b8000, 0x00000000, 0x00000008, 0xc438e000,
+    0x00000000, 0x00000065, 0xc4351000, 0x00000000,
+    0x00270066, 0xc4287000, 0x00000000, 0x00180064,
+    0xc434e000, 0x00000000, 0x00670068, 0xc83bc000,
+    0x00000000, 0x0000000c, 0x903bb000, 0x00000000,
+    0x00000069, 0x84322000, 0x00000000, 0x0015006b,
+    0x24345000, 0x00000000, 0x0014006c, 0xe4226000,
+    0x00000000, 0x0000006d, 0x0001b605, 0xe4351000,
+    0x00000000, 0x006f006e, 0x84322100, 0x00000000,
+    0x0015006b, 0x24345000, 0x00000000, 0x00140071,
+    0xe4226000, 0x00000000, 0x00000072, 0x0001d605,
+    0xe4351000, 0x00000000, 0x00740073, 0xe434e000,
+    0x00000000, 0x00750070, 0xe438f000, 0x00000000,
+    0x00000013, 0xe4351000, 0x00000000, 0x00270077,
+    0xe434e000, 0x00000000, 0x00780076, 0xc43bd000,
+    0x00000000, 0x00000079, 0x80000e05, 0xc434e000,
+    0x00000000, 0x007b007a, 0x00006894, 0x000001f0,
+    0x00000168, 0x00040001, 0xc438e000, 0x00000000,
+    0x0000000c, 0xe431f000, 0x00000000, 0x0021005a,
+    0x00006894, 0x000001f4, 0x000001f8, 0x00040001,
+    0xc435a100, 0x00000000, 0x0000006a, 0xe431f000,
+    0x00000000, 0x0023005a, 0x00006894, 0x000001fc,
+    0x00000200, 0x00040001, 0xe431f000, 0x00000000,
+    0x0024005a, 0x00006894, 0x00000070, 0x00000204,
+    0x00040001, 0xe431f000, 0x00000000, 0x0026005a,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0xe4000028, 0x00000082, 0x0000005b,
+    0x0000005a, 0x00000083, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xe4000028,
+    0x00000085, 0x00000084, 0x0000000a, 0x00000086,
+    0x2434a000, 0x00000000, 0x0000000f, 0x00000001,
+    0x00000224, 0x00000000, 0x00000001, 0x00000000,
+    0x00000060, 0xd0005354, 0x0000002c, 0x00000400,
+    0x00011605, 0xc435a000, 0x00000000, 0x0000008b,
+    0x00011705, 0xc435a200, 0x00000000, 0x0000008b,
+    0x00009705, 0xc433f100, 0x00000000, 0x000e008b,
+    0x00019705, 0xc435a300, 0x00000000, 0x0000008b,
+    0x00000e05, 0xc4225000, 0x00000000, 0x00000010,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00960006,
+    0xc434e000, 0x00000000, 0x00950097, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00990098, 0x00021605,
+    0x00000605, 0xff00ffff, 0x903bb000, 0x00000000,
+    0x00000005, 0xc438e000, 0x00000000, 0x0000009d,
+    0x00031605, 0xc4351000, 0x00000000, 0x009f009e,
+    0x00000605, 0x00ffffff, 0xc4287000, 0x00000000,
+    0x0094009a, 0xc434e000, 0x00000000, 0x00a000a2,
+    0x00021705, 0x00029705, 0x00031705, 0xa438d100,
+    0x00000000, 0x0000009d, 0xa438d200, 0x00000000,
+    0x0000009d, 0xa4351000, 0x00000000, 0x008c00a8,
+    0xa434e000, 0x00000000, 0x00a900a7, 0x84390000,
+    0x00000000, 0x000000aa, 0x00003505, 0xa4288000,
+    0x00000000, 0x00ac00aa, 0x84390000, 0x00000000,
+    0x000000ad, 0xc438e000, 0x00000000, 0x000000ab,
+    0xc4351000, 0x00000000, 0x008c00af, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x000400b1, 0xc434e000,
+    0x00000000, 0x00b000b2, 0xc438e000, 0x00000000,
+    0x000000ae, 0xc4351000, 0x00000000, 0x009b00b4,
+    0xc4322000, 0x00000000, 0x009c00b3, 0xc434e000,
+    0x00000000, 0x00b500b6, 0xc438e300, 0x00000000,
+    0x0000009d, 0xc4351000, 0x00000000, 0x009f00b8,
+    0xc4322000, 0x00000000, 0x00a100b7, 0xc434e000,
+    0x00000000, 0x00b900ba, 0x903bb000, 0x00000000,
+    0x000000a3, 0x84322000, 0x00000000, 0x001500bc,
+    0x24345000, 0x00000000, 0x001400bd, 0xe4226000,
+    0x00000000, 0x000000be, 0xe4351000, 0x00000000,
+    0x008c00bf, 0xc43bd000, 0x00000000, 0x000000c0,
+    0x0000b605, 0xc434e000, 0x00000000, 0x00c200c1,
+    0xc43be000, 0x00000000, 0x000000c0, 0xe4369000,
+    0x00000000, 0x00c400c3, 0x84322100, 0x00000000,
+    0x001500bc, 0x24345000, 0x00000000, 0x001400c6,
+    0xe4226000, 0x00000000, 0x000000c7, 0x00013605,
+    0xe4351000, 0x00000000, 0x00c900c8, 0xe434e000,
+    0x00000000, 0x00ca00c5, 0x84322200, 0x00000000,
+    0x001500bc, 0x24345000, 0x00000000, 0x001400cc,
+    0xe4226000, 0x00000000, 0x000000cd, 0x00015605,
+    0xe4351000, 0x00000000, 0x00cf00ce, 0xe434e000,
+    0x00000000, 0x00d000cb, 0xc43bd000, 0x00000000,
+    0x000000d1, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00d200d3, 0x00006894, 0x00000350, 0x00000220,
+    0x00040001, 0xe4226000, 0x00000000, 0x0000000f,
+    0xe4351000, 0x00000000, 0x008c00d5, 0x903bb000,
+    0x00000000, 0x000000bb, 0x84322000, 0x00000000,
+    0x001500d7, 0x24345000, 0x00000000, 0x001400d8,
+    0xe4226000, 0x00000000, 0x000000d9, 0xe4351000,
+    0x00000000, 0x00c900da, 0xe434e000, 0x00000000,
+    0x00db00d6, 0xc438e000, 0x00000000, 0x000000dc,
+    0xe431f000, 0x00000000, 0x00900088, 0x00006894,
+    0x00000374, 0x00000378, 0x00040001, 0xe431f000,
+    0x00000000, 0x008e0088, 0x00006894, 0x00000234,
+    0x0000037c, 0x00040001, 0xe431f000, 0x00000000,
+    0x00920088, 0x00006894, 0x0000023c, 0x00000380,
+    0x00040001, 0xe431f000, 0x00000000, 0x00a40088,
+    0x00006894, 0x00000244, 0x00000384, 0x00040001,
+    0xe431f000, 0x00000000, 0x00a50088, 0x00006894,
+    0x0000024c, 0x00000388, 0x00040001, 0xe431f000,
+    0x00000000, 0x00a60088, 0x00006894, 0x00000250,
+    0x0000038c, 0x00040001, 0x00000001, 0x00000000,
+    0x00000062, 0xd0005354, 0x0000002c, 0x00000400,
+    0x00011605, 0x00009705, 0x00021705, 0xe431f000,
+    0x00000000, 0x00e8000b, 0xc4005354, 0x000003a4,
+    0x00000400, 0x00021605, 0xc435a000, 0x00000000,
+    0x000000e5, 0x00011705, 0xc435a200, 0x00000000,
+    0x000000e5, 0xc433f100, 0x00000000, 0x000e00e5,
+    0x00019705, 0xc435a300, 0x00000000, 0x000000e5,
+    0xc4225000, 0x00000000, 0x00000010, 0xffe01605,
+    0xc4322000, 0x00000000, 0x00f30003, 0xc434e000,
+    0x00000000, 0x00f200f4, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x00f600f5, 0x00000605, 0xff00ffff,
+    0x903bb000, 0x00000000, 0x00000005, 0xc438e000,
+    0x00000000, 0x000000f9, 0x00031605, 0xc4351000,
+    0x00000000, 0x00fb00fa, 0x00000605, 0x00ffffff,
+    0x00000e05, 0xc4287000, 0x00000000, 0x00fe00f7,
+    0xc434e000, 0x00000000, 0x00fc00ff, 0x00029705,
+    0x00031705, 0xa438d100, 0x00000000, 0x000000f9,
+    0xa438d200, 0x00000000, 0x000000f9, 0xa4351000,
+    0x00000000, 0x00e60104, 0xa434e000, 0x00000000,
+    0x01050103, 0x84390000, 0x00000000, 0x00000106,
+    0x00003505, 0xa4288000, 0x00000000, 0x01080106,
+    0x84390000, 0x00000000, 0x00000109, 0xc438e000,
+    0x00000000, 0x00000107, 0xc4351000, 0x00000000,
+    0x00e6010b, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x0002010d, 0xc434e000, 0x00000000, 0x010c010e,
+    0xc438e000, 0x00000000, 0x0000010a, 0xc4351000,
+    0x00000000, 0x00eb0110, 0xc4322000, 0x00000000,
+    0x00f8010f, 0xc434e000, 0x00000000, 0x01110112,
+    0xc438e300, 0x00000000, 0x000000f9, 0xc4351000,
+    0x00000000, 0x00fb0114, 0xc4322000, 0x00000000,
+    0x00fd0113, 0xc434e000, 0x00000000, 0x01150116,
+    0x903bb000, 0x00000000, 0x00000100, 0x84322000,
+    0x00000000, 0x00150118, 0x24345000, 0x00000000,
+    0x00140119, 0xe4226000, 0x00000000, 0x0000011a,
+    0xe4351000, 0x00000000, 0x00e6011b, 0xc43bd000,
+    0x00000000, 0x0000011c, 0x0000b605, 0xc434e000,
+    0x00000000, 0x011e011d, 0xc43be000, 0x00000000,
+    0x0000011c, 0xe4369000, 0x00000000, 0x0120011f,
+    0x84322100, 0x00000000, 0x00150118, 0x24345000,
+    0x00000000, 0x00140122, 0xe4226000, 0x00000000,
+    0x00000123, 0x00013605, 0xe4351000, 0x00000000,
+    0x01250124, 0xe434e000, 0x00000000, 0x01260121,
+    0x84322200, 0x00000000, 0x00150118, 0x24345000,
+    0x00000000, 0x00140128, 0xe4226000, 0x00000000,
+    0x00000129, 0x00015605, 0xe4351000, 0x00000000,
+    0x012b012a, 0xe434e000, 0x00000000, 0x012c0127,
+    0xc43bd000, 0x00000000, 0x0000012d, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x012e012f, 0x00006894,
+    0x000004c0, 0x00000220, 0x00040001, 0xe4226000,
+    0x00000000, 0x0000000f, 0xe4351000, 0x00000000,
+    0x00e60131, 0x903bb000, 0x00000000, 0x00000117,
+    0x84322000, 0x00000000, 0x00150133, 0x24345000,
+    0x00000000, 0x00140134, 0xe4226000, 0x00000000,
+    0x00000135, 0xe4351000, 0x00000000, 0x01250136,
+    0xe434e000, 0x00000000, 0x01370132, 0xc438e000,
+    0x00000000, 0x00000138, 0xe431f000, 0x00000000,
+    0x00e70088, 0x00006894, 0x000004e4, 0x000004e8,
+    0x00040001, 0xe431f000, 0x00000000, 0x00ed0088,
+    0x00006894, 0x000003b0, 0x000004ec, 0x00040001,
+    0xe431f000, 0x00000000, 0x00f00088, 0x00006894,
+    0x000003b8, 0x000004f0, 0x00040001, 0xe431f000,
+    0x00000000, 0x00e80088, 0x00006894, 0x000003bc,
+    0x000004f4, 0x00040001, 0xe431f000, 0x00000000,
+    0x01010088, 0x00006894, 0x000003a8, 0x000004f8,
+    0x00040001, 0xe431f000, 0x00000000, 0x01020088,
+    0x00006894, 0x000003c4, 0x000004fc, 0x00040001,
+    0x00000000, 0x00000000,
+};
+   nir_def *args[11] = { dst_ptr, indirect_ptr, draw_id_ptr, draw_id, instance_multiplier, is_indexed, is_predicated, uses_tbimr, uses_base, uses_drawid, mocs };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx9_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx9_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    32      %9 = undefined
+    32     %10 = undefined
+    32     %11 = undefined
+    64     %12 = @load_param (param_idx=0)
+    64     %13 = @load_param (param_idx=2)
+    64     %14 = @load_param (param_idx=3)
+    32     %15 = @load_param (param_idx=4)
+    64     %16 = @load_param (param_idx=5)
+    32     %17 = @load_param (param_idx=6)
+    32     %18 = @load_param (param_idx=7)
+    32     %19 = @load_param (param_idx=8)
+    32     %20 = @load_param (param_idx=9)
+    32     %21 = @load_param (param_idx=10)
+    32     %22 = @load_param (param_idx=11)
+    32     %23 = @load_param (param_idx=12)
+    64     %24 = @load_param (param_idx=13)
+    64     %25 = @load_param (param_idx=14)
+    32     %26 = @load_param (param_idx=15)
+    32     %27 = iadd %17, %26
+    32     %28 = @load_global (%16) (access=none, align_mul=4, align_offset=0)
+    32     %29 = imul %26, %22
+    64     %30 = u2u64 %29
+    32     %31 = imul %27, %15
+    64     %32 = u2u64 %31
+    32     %33 = load_const (0x00000004)
+    32     %34 = load_const (0x00000002)
+    32     %35 = ishl %26, %34 (0x2)
+    64     %36 = u2u64 %35
+    32     %37 = umin %28, %19
+    1      %38 = ult %27, %37
+                 // succs: b1 b14
+    if %38 {
+        block b1:    // preds: b0
+        32     %39 = load_const (0x00000001)
+        32     %40 = iand %20, %39 (0x1)
+        32     %41 = load_const (0x00000000)
+        1      %42 = ine %40, %41 (0x0)
+        8      %43 = load_const (0x00)
+        8      %44 = load_const (0x01)
+        32     %45 = iand %20, %34 (0x2)
+        32     %46 = load_const (0x00000008)
+        32     %47 = iand %20, %46 (0x8)
+        1      %48 = ine %47, %41 (0x0)
+        32     %49 = iand %20, %33 (0x4)
+        1      %50 = ine %49, %41 (0x0)
+        64     %51 = iadd %12, %30
+        32     %52 = umax %47, %49
+        1      %53 = ine %52, %41 (0x0)
+                     // succs: b2 b9
+        if %53 {
+            block b2:    // preds: b1
+            32     %54 = load_const (0x00000003)
+            32     %55 = ushr %47, %54 (0x3)
+            32     %56 = ushr %49, %34 (0x2)
+            32     %57 = iadd.nsw %55, %56
+            32     %58 = ishl %57, %34 (0x2)
+            32     %59 = load_const (0xffffffff = -1 = 4294967295)
+            32     %60 = iadd %59 (0xffffffff), %58
+            64     %61 = load_const (0x0000000000000004)
+            64     %62 = load_const (0x0000000000000008)
+            64     %63 = load_const (0x000000000000000c = 12)
+            32     %64 = load_const (0x0000000c = 12)
+            64     %65 = load_const (0x0000000000000010 = 16)
+            32     %66 = load_const (0x00000010 = 16)
+            64     %67 = load_const (0x0000000000000000)
+            32     %68 = load_const (0x78080000 = 2013790208)
+            32     %69 = ior %68 (0x78080000), %60
+                         @store_global (%69, %51) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64     %70 = iadd %51, %61 (0x4)
+                         // succs: b3 b4
+            if %48 {
+                block b3:    // preds: b2
+                32     %71 = bcsel %42, %64 (0xc), %46 (0x8)
+                64     %72 = i2i64 %71
+                64     %73 = iadd %13, %32
+                64     %74 = iadd %73, %72
+                1      %75 = ieq %74, %67 (0x0)
+                32     %76 = b2i32 %75
+                32     %77 = load_const (0xffffff00 = -256 = 4294967040)
+                32     %78 = iand %11, %77 (0xffffff00)
+                32     %79 = ior %78, %76
+                32     %80 = load_const (0x00000100 = 256)
+                32     %81 = load_const (0xffff00ff = -65281 = 4294902015)
+                32     %82 = iand %79, %81 (0xffff00ff)
+                32     %83 = ior %82, %80 (0x100)
+                16x2   %84 = unpack_32_2x16 %10
+                32     %85 = u2u32 %84.x
+                32     %86 = ishl %85, %66 (0x10)
+                32     %87 = extract_u16 %83, %41 (0x0)
+                32     %88 = ior %87, %86
+                32x2   %89 = unpack_64_2x32 %74
+                8x4    %90 = unpack_32_4x8 %88
+                8      %91 = iand %90.x, %44 (0x1)
+                1      %92 = ine %91, %43 (0x0)
+                64     %93 = b2i64 %92
+                32     %94 = load_const (0x0000000d = 13)
+                64     %95 = ishl %93, %94 (0xd)
+                8      %96 = iand %90.y, %44 (0x1)
+                1      %97 = ine %96, %43 (0x0)
+                64     %98 = b2i64 %97
+                32     %99 = load_const (0x0000000e = 14)
+                64    %100 = ishl %98, %99 (0xe)
+                64    %101 = ior %95, %100
+                64    %102 = u2u64 %21
+                64    %103 = ishl %102, %66 (0x10)
+                64    %104 = ior %101, %103
+                32    %105 = unpack_64_2x32_split_x %104
+                32    %106 = load_const (0x7c000000 = 2080374784)
+                32    %107 = ior %105, %106 (0x7c000000)
+                             @store_global (%107, %70) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %108 = u2u32 %74
+                64    %109 = iadd %51, %62 (0x8)
+                             @store_global (%108, %109) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %110 = mov %89.y
+                64    %111 = iadd %51, %63 (0xc)
+                             @store_global (%110, %111) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %112 = iadd %51, %65 (0x10)
+                             @store_global (%46 (0x8), %112) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %113 = load_const (0x0000000000000014 = 20)
+                64    %114 = iadd %51, %113 (0x14)
+                             // succs: b5
+            } else {
+                block b4:  // preds: b2, succs: b5
+            }
+            block b5:    // preds: b3 b4
+            64    %115 = phi b3: %114, b4: %70
+                         // succs: b6 b7
+            if %50 {
+                block b6:    // preds: b5
+                64    %116 = iadd %14, %36
+                             @store_global (%27, %116) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                1     %117 = ieq %116, %67 (0x0)
+                32    %118 = b2i32 %117
+                32    %119 = load_const (0xffffff00 = -256 = 4294967040)
+                32    %120 = iand %9, %119 (0xffffff00)
+                32    %121 = ior %120, %118
+                32    %122 = load_const (0x00000100 = 256)
+                32    %123 = load_const (0xffff00ff = -65281 = 4294902015)
+                32    %124 = iand %121, %123 (0xffff00ff)
+                32    %125 = ior %124, %122 (0x100)
+                16x2  %126 = unpack_32_2x16 %10
+                32    %127 = u2u32 %126.x
+                32    %128 = ishl %127, %66 (0x10)
+                32    %129 = extract_u16 %125, %41 (0x0)
+                32    %130 = ior %129, %128
+                32x2  %131 = unpack_64_2x32 %116
+                8x4   %132 = unpack_32_4x8 %130
+                8     %133 = iand %132.x, %44 (0x1)
+                1     %134 = ine %133, %43 (0x0)
+                64    %135 = b2i64 %134
+                32    %136 = load_const (0x0000000d = 13)
+                64    %137 = ishl %135, %136 (0xd)
+                8     %138 = iand %132.y, %44 (0x1)
+                1     %139 = ine %138, %43 (0x0)
+                64    %140 = b2i64 %139
+                32    %141 = load_const (0x0000000e = 14)
+                64    %142 = ishl %140, %141 (0xe)
+                64    %143 = ior %137, %142
+                64    %144 = u2u64 %21
+                64    %145 = ishl %144, %66 (0x10)
+                64    %146 = ior %143, %145
+                32    %147 = unpack_64_2x32_split_x %146
+                32    %148 = load_const (0x80000000 = -2147483648 = 2147483648)
+                32    %149 = ior %147, %148 (0x80000000)
+                             @store_global (%149, %115) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %150 = u2u32 %116
+                64    %151 = iadd %115, %61 (0x4)
+                             @store_global (%150, %151) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %152 = mov %131.y
+                64    %153 = iadd %115, %62 (0x8)
+                             @store_global (%152, %153) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %154 = iadd %115, %63 (0xc)
+                             @store_global (%33 (0x4), %154) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %155 = iadd %115, %65 (0x10)
+                             // succs: b8
+            } else {
+                block b7:  // preds: b5, succs: b8
+            }
+            block b8:    // preds: b6 b7
+            64    %156 = phi b6: %155, b7: %115
+                         // succs: b10
+        } else {
+            block b9:  // preds: b1, succs: b10
+        }
+        block b10:   // preds: b8 b9
+        64    %157 = phi b8: %156, b9: %51
+        1     %158 = inot %42
+                     // succs: b11 b12
+        if %158 {
+            block b11:   // preds: b10
+            64    %159 = iadd %13, %32
+            32x4  %160 = @load_global (%159) (access=none, align_mul=4, align_offset=0)
+            32    %161 = mov %160.x
+            64    %162 = load_const (0x0000000000000008)
+            32    %163 = mov %160.z
+            64    %164 = load_const (0x0000000000000004)
+            32    %165 = imul %160.y, %18
+            64    %166 = load_const (0x000000000000000c = 12)
+            32    %167 = mov %160.w
+            32    %168 = ushr %45, %39 (0x1)
+            32    %169 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %170 = iand %8, %169 (0xffffff00)
+            32    %171 = ior %170, %168
+            32    %172 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %173 = iand %171, %172 (0xffff00ff)
+            32    %174 = load_const (0x00000010 = 16)
+            32    %175 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %176 = unpack_32_4x8 %7
+            32    %177 = u2u32 %176.x
+            32    %178 = load_const (0x00000018 = 24)
+            32    %179 = ishl %177, %178 (0x18)
+            32    %180 = load_const (0x00ffffff = 16777215)
+            32    %181 = extract_u16 %173, %41 (0x0)
+            32    %182 = ior %181, %179
+            64    %183 = load_const (0x0000000000000010 = 16)
+            64    %184 = load_const (0x0000000000000014 = 20)
+            64    %185 = load_const (0x0000000000000018 = 24)
+            16    %186 = u2u16 %176.y
+            16    %187 = u2u16 %176.z
+            16    %188 = ishl %187, %46 (0x8)
+            16    %189 = ior %186, %188
+            8     %190 = u2u8 %189
+            16    %191 = load_const (0x0001)
+            16    %192 = extract_u8 %189, %191 (0x1)
+            8     %193 = u2u8 %192
+            32    %194 = u2u32 %190
+            32    %195 = ishl %194, %46 (0x8)
+            32    %196 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %197 = iand %196 (0xffff0000), %6
+            32    %198 = ior %197, %195
+            32    %199 = u2u32 %193
+            32    %200 = ishl %199, %174 (0x10)
+            32    %201 = iand %198, %175 (0xff00ffff)
+            32    %202 = ior %201, %200
+            32    %203 = u2u32 %176.w
+            32    %204 = ishl %203, %178 (0x18)
+            32    %205 = iand %202, %180 (0xffffff)
+            32    %206 = ior %205, %204
+            8x4   %207 = unpack_32_4x8 %182
+            8     %208 = iand %207.x, %44 (0x1)
+            1     %209 = ine %208, %43 (0x0)
+            64    %210 = b2i64 %209
+            64    %211 = ishl %210, %46 (0x8)
+            32    %212 = unpack_64_2x32_split_x %211
+            32    %213 = load_const (0x00000005)
+            32    %214 = ior %212, %213 (0x5)
+            32    %215 = unpack_64_2x32_split_y %211
+            64    %216 = pack_64_2x32_split %214, %215
+            8     %217 = iand %207.y, %44 (0x1)
+            1     %218 = ine %217, %43 (0x0)
+            64    %219 = b2i64 %218
+            32    %220 = load_const (0x00000009)
+            64    %221 = ishl %219, %220 (0x9)
+            64    %222 = ior %216, %221
+            8     %223 = iand %207.z, %44 (0x1)
+            1     %224 = ine %223, %43 (0x0)
+            64    %225 = b2i64 %224
+            32    %226 = load_const (0x0000000a = 10)
+            64    %227 = ishl %225, %226 (0xa)
+            64    %228 = ior %222, %227
+            32    %229 = unpack_64_2x32_split_x %228
+            32    %230 = load_const (0x7b000000 = 2063597568)
+            32    %231 = ior %230 (0x7b000000), %229
+                         @store_global (%231, %157) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %232 = u2u64 %40
+            64    %233 = ishl %232, %46 (0x8)
+            8x4   %234 = unpack_32_4x8 %206
+            8     %235 = iand %234.x, %44 (0x1)
+            1     %236 = ine %235, %43 (0x0)
+            64    %237 = b2i64 %236
+            64    %238 = ishl %237, %220 (0x9)
+            64    %239 = ior %233, %238
+            32    %240 = u2u32 %239
+            64    %241 = iadd %157, %164 (0x4)
+                         @store_global (%240, %241) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %242 = iadd %157, %162 (0x8)
+                         @store_global (%161, %242) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %243 = iadd %157, %166 (0xc)
+                         @store_global (%163, %243) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %244 = iadd %157, %183 (0x10)
+                         @store_global (%165, %244) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %245 = iadd %157, %184 (0x14)
+                         @store_global (%167, %245) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %246 = iadd %157, %185 (0x18)
+                         @store_global (%41 (0x0), %246) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b13
+        } else {
+            block b12:   // preds: b10
+            64    %247 = iadd %13, %32
+            32x4  %248 = @load_global (%247) (access=none, align_mul=4, align_offset=0)
+            64    %249 = load_const (0x0000000000000004)
+            64    %250 = load_const (0x0000000000000010 = 16)
+            64    %251 = iadd %247, %250 (0x10)
+            32    %252 = @load_global (%251) (access=none, align_mul=4, align_offset=0)
+            32    %253 = load_const (0x00000010 = 16)
+            32    %254 = mov %248.x
+            64    %255 = load_const (0x0000000000000008)
+            32    %256 = mov %248.z
+            32    %257 = imul %248.y, %18
+            64    %258 = load_const (0x000000000000000c = 12)
+            32    %259 = mov %248.w
+            32    %260 = ushr %45, %39 (0x1)
+            32    %261 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %262 = iand %5, %261 (0xffffff00)
+            32    %263 = ior %262, %260
+            32    %264 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %265 = iand %263, %264 (0xffff00ff)
+            32    %266 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %267 = unpack_32_4x8 %7
+            32    %268 = u2u32 %267.x
+            32    %269 = load_const (0x00000018 = 24)
+            32    %270 = ishl %268, %269 (0x18)
+            32    %271 = load_const (0x00ffffff = 16777215)
+            32    %272 = extract_u16 %265, %41 (0x0)
+            32    %273 = ior %272, %270
+            64    %274 = load_const (0x0000000000000014 = 20)
+            64    %275 = load_const (0x0000000000000018 = 24)
+            16    %276 = u2u16 %267.y
+            16    %277 = u2u16 %267.z
+            16    %278 = ishl %277, %46 (0x8)
+            16    %279 = ior %276, %278
+            8     %280 = u2u8 %279
+            16    %281 = load_const (0x0001)
+            16    %282 = extract_u8 %279, %281 (0x1)
+            8     %283 = u2u8 %282
+            32    %284 = u2u32 %280
+            32    %285 = ishl %284, %46 (0x8)
+            32    %286 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %287 = iand %286 (0xffff0000), %4
+            32    %288 = ior %287, %285
+            32    %289 = u2u32 %283
+            32    %290 = ishl %289, %253 (0x10)
+            32    %291 = iand %288, %266 (0xff00ffff)
+            32    %292 = ior %291, %290
+            32    %293 = u2u32 %267.w
+            32    %294 = ishl %293, %269 (0x18)
+            32    %295 = iand %292, %271 (0xffffff)
+            32    %296 = ior %295, %294
+            8x4   %297 = unpack_32_4x8 %273
+            8     %298 = iand %297.x, %44 (0x1)
+            1     %299 = ine %298, %43 (0x0)
+            64    %300 = b2i64 %299
+            64    %301 = ishl %300, %46 (0x8)
+            32    %302 = unpack_64_2x32_split_x %301
+            32    %303 = load_const (0x00000005)
+            32    %304 = ior %302, %303 (0x5)
+            32    %305 = unpack_64_2x32_split_y %301
+            64    %306 = pack_64_2x32_split %304, %305
+            8     %307 = iand %297.y, %44 (0x1)
+            1     %308 = ine %307, %43 (0x0)
+            64    %309 = b2i64 %308
+            32    %310 = load_const (0x00000009)
+            64    %311 = ishl %309, %310 (0x9)
+            64    %312 = ior %306, %311
+            8     %313 = iand %297.z, %44 (0x1)
+            1     %314 = ine %313, %43 (0x0)
+            64    %315 = b2i64 %314
+            32    %316 = load_const (0x0000000a = 10)
+            64    %317 = ishl %315, %316 (0xa)
+            64    %318 = ior %312, %317
+            32    %319 = unpack_64_2x32_split_x %318
+            32    %320 = load_const (0x7b000000 = 2063597568)
+            32    %321 = ior %320 (0x7b000000), %319
+                         @store_global (%321, %157) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %322 = u2u64 %40
+            64    %323 = ishl %322, %46 (0x8)
+            8x4   %324 = unpack_32_4x8 %296
+            8     %325 = iand %324.x, %44 (0x1)
+            1     %326 = ine %325, %43 (0x0)
+            64    %327 = b2i64 %326
+            64    %328 = ishl %327, %310 (0x9)
+            64    %329 = ior %323, %328
+            32    %330 = u2u32 %329
+            64    %331 = iadd %157, %249 (0x4)
+                         @store_global (%330, %331) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %332 = iadd %157, %255 (0x8)
+                         @store_global (%254, %332) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %333 = iadd %157, %258 (0xc)
+                         @store_global (%256, %333) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %334 = iadd %157, %250 (0x10)
+                         @store_global (%257, %334) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %335 = iadd %157, %274 (0x14)
+                         @store_global (%252, %335) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %336 = iadd %157, %275 (0x18)
+                         @store_global (%259, %336) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b13
+        }
+        block b13:  // preds: b11 b12, succs: b15
+    } else {
+        block b14:  // preds: b0, succs: b15
+    }
+    block b15:   // preds: b13 b14
+    32    %337 = load_const (0x00000020 = 32)
+    32    %338 = iand %20, %337 (0x20)
+    32    %339 = load_const (0x00000000)
+    1     %340 = ieq %338, %339 (0x0)
+    8     %341 = load_const (0x00)
+    8     %342 = load_const (0x01)
+    1     %343 = ieq %28, %339 (0x0)
+    32    %344 = load_const (0xffffffff = -1 = 4294967295)
+    32    %345 = iadd %37, %344 (0xffffffff)
+    32    %346 = bcsel %343, %339 (0x0), %345
+    64    %347 = u2u64 %22
+    64    %348 = iadd %30, %347
+    64    %349 = bcsel %343, %30, %348
+    64    %350 = iadd %12, %349
+                 // succs: b16 b20
+    if %340 {
+        block b16:   // preds: b15
+        1     %351 = ieq %27, %346
+        1     %352 = ult %28, %19
+        1     %353 = iand %352, %351
+                     // succs: b17 b18
+        if %353 {
+            block b17:   // preds: b16
+            64    %354 = load_const (0x0000000000000004)
+            64    %355 = load_const (0x0000000000000008)
+            32    %356 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %357 = iand %356 (0xffff0000), %3
+            32    %358 = load_const (0x0000000a = 10)
+            32    %359 = load_const (0x00000010 = 16)
+            8x4   %360 = unpack_32_4x8 %2
+            32    %361 = u2u32 %360.x
+            32    %362 = load_const (0x00000018 = 24)
+            32    %363 = ishl %361, %362 (0x18)
+            32    %364 = extract_u16 %357, %339 (0x0)
+            32    %365 = ior %364, %363
+            8x4   %366 = unpack_32_4x8 %365
+            8     %367 = iand %366.x, %342 (0x1)
+            1     %368 = ine %367, %341 (0x0)
+            64    %369 = b2i64 %368
+            64    %370 = ishl %369, %358 (0xa)
+            32    %371 = unpack_64_2x32_split_x %370
+            32    %372 = load_const (0x00000101 = 257)
+            32    %373 = ior %371, %372 (0x101)
+            32    %374 = unpack_64_2x32_split_y %370
+            64    %375 = pack_64_2x32_split %373, %374
+            8     %376 = iand %366.y, %342 (0x1)
+            1     %377 = ine %376, %341 (0x0)
+            64    %378 = b2i64 %377
+            32    %379 = load_const (0x0000000f = 15)
+            64    %380 = ishl %378, %379 (0xf)
+            64    %381 = ior %375, %380
+            8     %382 = iand %366.z, %342 (0x1)
+            1     %383 = ine %382, %341 (0x0)
+            64    %384 = b2i64 %383
+            64    %385 = ishl %384, %359 (0x10)
+            64    %386 = ior %381, %385
+            32    %387 = unpack_64_2x32_split_x %386
+            32    %388 = load_const (0x18800000 = 411041792)
+            32    %389 = ior %387, %388 (0x18800000)
+                         @store_global (%389, %350) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %390 = u2u32 %25
+            64    %391 = iadd %350, %354 (0x4)
+                         @store_global (%390, %391) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %392 = unpack_64_2x32_split_y %25
+            64    %393 = iadd %350, %355 (0x8)
+                         @store_global (%392, %393) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b19
+        } else {
+            block b18:  // preds: b16, succs: b19
+        }
+        block b19:  // preds: b17 b18, succs: b27
+    } else {
+        block b20:   // preds: b15
+        1     %394 = ine %27, %346
+                     // succs: b21 b25
+        if %394 {
+            block b21:   // preds: b20
+            32    %395 = iadd %23, %344 (0xffffffff)
+            1     %396 = ieq %26, %395
+                         // succs: b22 b23
+            if %396 {
+                block b22:   // preds: b21
+                64    %397 = load_const (0x0000000000000004)
+                64    %398 = load_const (0x0000000000000008)
+                32    %399 = load_const (0xffff0000 = -65536 = 4294901760)
+                32    %400 = iand %399 (0xffff0000), %1
+                32    %401 = load_const (0x0000000a = 10)
+                32    %402 = load_const (0x00000010 = 16)
+                8x4   %403 = unpack_32_4x8 %2
+                32    %404 = u2u32 %403.x
+                32    %405 = load_const (0x00000018 = 24)
+                32    %406 = ishl %404, %405 (0x18)
+                32    %407 = extract_u16 %400, %339 (0x0)
+                32    %408 = ior %407, %406
+                8x4   %409 = unpack_32_4x8 %408
+                8     %410 = iand %409.x, %342 (0x1)
+                1     %411 = ine %410, %341 (0x0)
+                64    %412 = b2i64 %411
+                64    %413 = ishl %412, %401 (0xa)
+                32    %414 = unpack_64_2x32_split_x %413
+                32    %415 = load_const (0x00000101 = 257)
+                32    %416 = ior %414, %415 (0x101)
+                32    %417 = unpack_64_2x32_split_y %413
+                64    %418 = pack_64_2x32_split %416, %417
+                8     %419 = iand %409.y, %342 (0x1)
+                1     %420 = ine %419, %341 (0x0)
+                64    %421 = b2i64 %420
+                32    %422 = load_const (0x0000000f = 15)
+                64    %423 = ishl %421, %422 (0xf)
+                64    %424 = ior %418, %423
+                8     %425 = iand %409.z, %342 (0x1)
+                1     %426 = ine %425, %341 (0x0)
+                64    %427 = b2i64 %426
+                64    %428 = ishl %427, %402 (0x10)
+                64    %429 = ior %424, %428
+                32    %430 = unpack_64_2x32_split_x %429
+                32    %431 = load_const (0x18800000 = 411041792)
+                32    %432 = ior %430, %431 (0x18800000)
+                             @store_global (%432, %350) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %433 = u2u32 %24
+                64    %434 = iadd %350, %397 (0x4)
+                             @store_global (%433, %434) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                32    %435 = unpack_64_2x32_split_y %24
+                64    %436 = iadd %350, %398 (0x8)
+                             @store_global (%435, %436) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                             // succs: b24
+            } else {
+                block b23:  // preds: b21, succs: b24
+            }
+            block b24:  // preds: b22 b23, succs: b26
+        } else {
+            block b25:   // preds: b20
+            64    %437 = load_const (0x0000000000000004)
+            64    %438 = load_const (0x0000000000000008)
+            32    %439 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %440 = iand %439 (0xffff0000), %0
+            32    %441 = load_const (0x0000000a = 10)
+            32    %442 = load_const (0x00000010 = 16)
+            8x4   %443 = unpack_32_4x8 %2
+            32    %444 = u2u32 %443.x
+            32    %445 = load_const (0x00000018 = 24)
+            32    %446 = ishl %444, %445 (0x18)
+            32    %447 = extract_u16 %440, %339 (0x0)
+            32    %448 = ior %447, %446
+            8x4   %449 = unpack_32_4x8 %448
+            8     %450 = iand %449.x, %342 (0x1)
+            1     %451 = ine %450, %341 (0x0)
+            64    %452 = b2i64 %451
+            64    %453 = ishl %452, %441 (0xa)
+            32    %454 = unpack_64_2x32_split_x %453
+            32    %455 = load_const (0x00000101 = 257)
+            32    %456 = ior %454, %455 (0x101)
+            32    %457 = unpack_64_2x32_split_y %453
+            64    %458 = pack_64_2x32_split %456, %457
+            8     %459 = iand %449.y, %342 (0x1)
+            1     %460 = ine %459, %341 (0x0)
+            64    %461 = b2i64 %460
+            32    %462 = load_const (0x0000000f = 15)
+            64    %463 = ishl %461, %462 (0xf)
+            64    %464 = ior %458, %463
+            8     %465 = iand %449.z, %342 (0x1)
+            1     %466 = ine %465, %341 (0x0)
+            64    %467 = b2i64 %466
+            64    %468 = ishl %467, %442 (0x10)
+            64    %469 = ior %464, %468
+            32    %470 = unpack_64_2x32_split_x %469
+            32    %471 = load_const (0x18800000 = 411041792)
+            32    %472 = ior %470, %471 (0x18800000)
+                         @store_global (%472, %350) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %473 = u2u32 %25
+            64    %474 = iadd %350, %437 (0x4)
+                         @store_global (%473, %474) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %475 = unpack_64_2x32_split_y %25
+            64    %476 = iadd %350, %438 (0x8)
+                         @store_global (%475, %476) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b26
+        }
+        block b26:  // preds: b24 b25, succs: b27
+    }
+    block b27:  // preds: b19 b26, succs: b28
+    block b28:
+   */
+   static const uint32_t impl_0_nir[1498] = {
+    0x000001fa, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000010, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0x00000000, 0x00000027, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0xe4001744,
+    0xe4021744, 0xe4031744, 0xc4041744, 0xe4051744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0xc40a1744, 0xc40b1744, 0xc40c1744, 0xe40d1744,
+    0xe40e1744, 0xc40f1744, 0xc431f000, 0x00000000,
+    0x001c0013, 0xc4005354, 0x00000048, 0x00000400,
+    0xc433f000, 0x00000000, 0x0018001c, 0xe438f000,
+    0x00000000, 0x0000001f, 0xc433f000, 0x00000000,
+    0x0011001d, 0xe438f000, 0x00000000, 0x00000021,
+    0x00009605, 0x00005605, 0xc4351000, 0x00000000,
+    0x0024001c, 0xe438f000, 0x00000000, 0x00000025,
+    0xc43ae000, 0x00000000, 0x0015001e, 0x243a6000,
+    0x00000000, 0x0027001d, 0x00000001, 0x000000a0,
+    0x00000000, 0x00000005, 0x00000000, 0x0000000f,
+    0x00003605, 0xc4322000, 0x00000000, 0x002a0016,
+    0x00000e05, 0x24345000, 0x00000000, 0x002c002b,
+    0x00001405, 0x00003405, 0xc4322000, 0x00000000,
+    0x00240016, 0x00011605, 0xc4322000, 0x00000000,
+    0x00310016, 0x24345000, 0x00000000, 0x002c0032,
+    0xc4322000, 0x00000000, 0x00230016, 0x24345000,
+    0x00000000, 0x002c0034, 0xe431f000, 0x00000000,
+    0x0020000e, 0xc43ac000, 0x00000000, 0x00340032,
+    0x24345000, 0x00000000, 0x002c0037, 0x00000001,
+    0x000000e0, 0x00000000, 0x00000005, 0x00000000,
+    0x00000012, 0x00007605, 0xc47cc000, 0x00000000,
+    0x003a0032, 0x00000000, 0x00240034, 0xc431f020,
+    0x00000000, 0x003c003b, 0xc4351000, 0x00000000,
+    0x0024003d, 0xfffff605, 0xc431f000, 0x00000000,
+    0x003e003f, 0x00009705, 0x00011705, 0x00019705,
+    0x00019605, 0x00021705, 0x00021605, 0x00000f05,
+    0x78080e05, 0xc434e000, 0x00000000, 0x00400048,
+    0x00006894, 0x00000124, 0x000000d8, 0x00040001,
+    0xe431f000, 0x00000000, 0x00410036, 0x00000001,
+    0x000000cc, 0x00000000, 0x00000001, 0x00000000,
+    0x00000030, 0xc4273000, 0x00000000, 0x0044002d,
+    0x00000031, 0xe4319000, 0x00000000, 0x0000004c,
+    0xe471f000, 0x00000000, 0x0022000f, 0x00000000,
+    0x004d004e, 0x24327000, 0x00000000, 0x0047004f,
+    0xc4225000, 0x00000000, 0x00000050, 0xffe01605,
+    0xc4322000, 0x00000000, 0x0052000d, 0xc434e000,
+    0x00000000, 0x00510053, 0x00201605, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00560054, 0xc434e000,
+    0x00000000, 0x00550057, 0xa83b8000, 0x00000000,
+    0x0000000c, 0xc438e000, 0x00000000, 0x00000059,
+    0xc4351000, 0x00000000, 0x0046005a, 0xc4287000,
+    0x00000000, 0x002c0058, 0xc434e000, 0x00000000,
+    0x005b005c, 0xc83bc000, 0x00000000, 0x0000004f,
+    0x903bb000, 0x00000000, 0x0000005d, 0x84322000,
+    0x00000000, 0x002f005f, 0x24345000, 0x00000000,
+    0x002e0060, 0xe4226000, 0x00000000, 0x00000061,
+    0x0001b605, 0xe4351000, 0x00000000, 0x00630062,
+    0x84322100, 0x00000000, 0x002f005f, 0x24345000,
+    0x00000000, 0x002e0065, 0xe4226000, 0x00000000,
+    0x00000066, 0x0001d605, 0xe4351000, 0x00000000,
+    0x00680067, 0xe434e000, 0x00000000, 0x00690064,
+    0xe438f000, 0x00000000, 0x00000017, 0xe4351000,
+    0x00000000, 0x0046006b, 0xe434e000, 0x00000000,
+    0x006c006a, 0xc43bd000, 0x00000000, 0x0000006d,
+    0x7c000e05, 0xc434e000, 0x00000000, 0x006f006e,
+    0x00006894, 0x000001c0, 0x00000128, 0x00040001,
+    0xc438e000, 0x00000000, 0x0000004f, 0xe431f000,
+    0x00000000, 0x00420036, 0x00006894, 0x000001c4,
+    0x000001c8, 0x00040001, 0xc435a100, 0x00000000,
+    0x0000005e, 0xe431f000, 0x00000000, 0x00430036,
+    0x00006894, 0x000001cc, 0x000001d0, 0x00040001,
+    0xe431f000, 0x00000000, 0x00450036, 0x00006894,
+    0x000000c4, 0x000001d4, 0x00040001, 0x00029705,
+    0xe431f000, 0x00000000, 0x00760036, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x00000077, 0x0000004b, 0x0000004a,
+    0x00000078, 0x00000001, 0x000000d4, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002d, 0xe431f000,
+    0x00000000, 0x00260010, 0x00006894, 0x00000074,
+    0x000001f0, 0x00040001, 0x24327000, 0x00000000,
+    0x0047007c, 0xc4225000, 0x00000000, 0x0000007d,
+    0xffe01605, 0xc4322000, 0x00000000, 0x007f000b,
+    0xc434e000, 0x00000000, 0x007e0080, 0x00201605,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x00830081,
+    0xc434e000, 0x00000000, 0x00820084, 0xa83b8000,
+    0x00000000, 0x0000000c, 0xc438e000, 0x00000000,
+    0x00000086, 0xc4351000, 0x00000000, 0x00460087,
+    0xc4287000, 0x00000000, 0x002c0085, 0xc434e000,
+    0x00000000, 0x00880089, 0xc83bc000, 0x00000000,
+    0x0000007c, 0x903bb000, 0x00000000, 0x0000008a,
+    0x84322000, 0x00000000, 0x002f008c, 0x24345000,
+    0x00000000, 0x002e008d, 0xe4226000, 0x00000000,
+    0x0000008e, 0x0001b605, 0xe4351000, 0x00000000,
+    0x0090008f, 0x84322100, 0x00000000, 0x002f008c,
+    0x24345000, 0x00000000, 0x002e0092, 0xe4226000,
+    0x00000000, 0x00000093, 0x0001d605, 0xe4351000,
+    0x00000000, 0x00950094, 0xe434e000, 0x00000000,
+    0x00960091, 0xe438f000, 0x00000000, 0x00000017,
+    0xe4351000, 0x00000000, 0x00460098, 0xe434e000,
+    0x00000000, 0x00990097, 0xc43bd000, 0x00000000,
+    0x0000009a, 0x80000e05, 0xc434e000, 0x00000000,
+    0x009c009b, 0x00006894, 0x00000274, 0x000001e8,
+    0x00040001, 0xc438e000, 0x00000000, 0x0000007c,
+    0xe431f000, 0x00000000, 0x0041007a, 0x00006894,
+    0x00000278, 0x0000027c, 0x00040001, 0xc435a100,
+    0x00000000, 0x0000008b, 0xe431f000, 0x00000000,
+    0x0042007a, 0x00006894, 0x00000280, 0x00000284,
+    0x00040001, 0xe431f000, 0x00000000, 0x0043007a,
+    0x00006894, 0x0000008c, 0x00000288, 0x00040001,
+    0xe431f000, 0x00000000, 0x0045007a, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x000000a3, 0x0000007b, 0x0000007a,
+    0x000000a4, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000002, 0xe4000028, 0x000000a6,
+    0x000000a5, 0x00000036, 0x000000a7, 0x2434a000,
+    0x00000000, 0x0000002d, 0x00000001, 0x000002a8,
+    0x00000000, 0x00000001, 0x00000000, 0x0000005f,
+    0xe431f000, 0x00000000, 0x0022000f, 0xd0005354,
+    0x000002b0, 0x00000400, 0xc435a000, 0x00000000,
+    0x000000ad, 0x00011705, 0xc435a200, 0x00000000,
+    0x000000ad, 0x00009705, 0xc433f100, 0x00000000,
+    0x001400ad, 0x00019705, 0xc435a300, 0x00000000,
+    0x000000ad, 0xc43cc000, 0x00000000, 0x002a0030,
+    0xffe01605, 0xc4322000, 0x00000000, 0x00b6000a,
+    0xc434e000, 0x00000000, 0x00b500b7, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x00b900b8, 0x00021605,
+    0x00000605, 0xff00ffff, 0x903bb000, 0x00000000,
+    0x00000009, 0xc438e000, 0x00000000, 0x000000bd,
+    0x00031605, 0xc4351000, 0x00000000, 0x00bf00be,
+    0x00000605, 0x00ffffff, 0xc4287000, 0x00000000,
+    0x002c00ba, 0xc434e000, 0x00000000, 0x00c000c2,
+    0x00021705, 0x00029705, 0x00031705, 0xa438d100,
+    0x00000000, 0x000000bd, 0xa438d200, 0x00000000,
+    0x000000bd, 0xa4351000, 0x00000000, 0x003100c8,
+    0xa434e000, 0x00000000, 0x00c900c7, 0x84390000,
+    0x00000000, 0x000000ca, 0x00003505, 0xa4288000,
+    0x00000000, 0x00cc00ca, 0x84390000, 0x00000000,
+    0x000000cd, 0xc438e000, 0x00000000, 0x000000cb,
+    0xc4351000, 0x00000000, 0x003100cf, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x000800d1, 0xc434e000,
+    0x00000000, 0x00d000d2, 0xc438e000, 0x00000000,
+    0x000000ce, 0xc4351000, 0x00000000, 0x00bb00d4,
+    0xc4322000, 0x00000000, 0x00bc00d3, 0xc434e000,
+    0x00000000, 0x00d500d6, 0xc438e300, 0x00000000,
+    0x000000bd, 0xc4351000, 0x00000000, 0x00bf00d8,
+    0xc4322000, 0x00000000, 0x00c100d7, 0xc434e000,
+    0x00000000, 0x00d900da, 0x903bb000, 0x00000000,
+    0x000000c3, 0x84322000, 0x00000000, 0x002f00dc,
+    0x24345000, 0x00000000, 0x002e00dd, 0xe4226000,
+    0x00000000, 0x000000de, 0xe4351000, 0x00000000,
+    0x003100df, 0xc43bd000, 0x00000000, 0x000000e0,
+    0x0000b605, 0xc434e000, 0x00000000, 0x00e200e1,
+    0xc43be000, 0x00000000, 0x000000e0, 0xe4369000,
+    0x00000000, 0x00e400e3, 0x84322100, 0x00000000,
+    0x002f00dc, 0x24345000, 0x00000000, 0x002e00e6,
+    0xe4226000, 0x00000000, 0x000000e7, 0x00013605,
+    0xe4351000, 0x00000000, 0x00e900e8, 0xe434e000,
+    0x00000000, 0x00ea00e5, 0x84322200, 0x00000000,
+    0x002f00dc, 0x24345000, 0x00000000, 0x002e00ec,
+    0xe4226000, 0x00000000, 0x000000ed, 0x00015605,
+    0xe4351000, 0x00000000, 0x00ef00ee, 0xe434e000,
+    0x00000000, 0x00f000eb, 0xc43bd000, 0x00000000,
+    0x000000f1, 0x7b000e05, 0xc434e000, 0x00000000,
+    0x00f200f3, 0x00006894, 0x000003d0, 0x000002a4,
+    0x00040001, 0xe438f000, 0x00000000, 0x0000002b,
+    0xe4351000, 0x00000000, 0x003100f5, 0x903bb000,
+    0x00000000, 0x000000db, 0x84322000, 0x00000000,
+    0x002f00f7, 0x24345000, 0x00000000, 0x002e00f8,
+    0xe4226000, 0x00000000, 0x000000f9, 0xe4351000,
+    0x00000000, 0x00e900fa, 0xe434e000, 0x00000000,
+    0x00fb00f6, 0xc438e000, 0x00000000, 0x000000fc,
+    0xe431f000, 0x00000000, 0x00b100a9, 0x00006894,
+    0x000003f4, 0x000003f8, 0x00040001, 0xe431f000,
+    0x00000000, 0x00af00a9, 0x00006894, 0x000002b8,
+    0x000003fc, 0x00040001, 0xe431f000, 0x00000000,
+    0x00b300a9, 0x00006894, 0x000002c0, 0x00000400,
+    0x00040001, 0xe431f000, 0x00000000, 0x00c400a9,
+    0x00006894, 0x000002c8, 0x00000404, 0x00040001,
+    0xe431f000, 0x00000000, 0x00c500a9, 0x00006894,
+    0x000002d0, 0x00000408, 0x00040001, 0xe431f000,
+    0x00000000, 0x00c600a9, 0x00006894, 0x000000b0,
+    0x0000040c, 0x00040001, 0x00000001, 0x00000000,
+    0x00000061, 0xe431f000, 0x00000000, 0x0022000f,
+    0xd0005354, 0x00000414, 0x00000400, 0x00009705,
+    0x00021705, 0xe431f000, 0x00000000, 0x01080105,
+    0xc4005354, 0x00000424, 0x00000400, 0x00021605,
+    0xc435a000, 0x00000000, 0x00000106, 0x00011705,
+    0xc435a200, 0x00000000, 0x00000106, 0xc433f100,
+    0x00000000, 0x00140106, 0x00019705, 0xc435a300,
+    0x00000000, 0x00000106, 0xc43cc000, 0x00000000,
+    0x002a0030, 0xffe01605, 0xc4322000, 0x00000000,
+    0x01130007, 0xc434e000, 0x00000000, 0x01120114,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x01160115,
+    0x00000605, 0xff00ffff, 0x903bb000, 0x00000000,
+    0x00000009, 0xc438e000, 0x00000000, 0x00000119,
+    0x00031605, 0xc4351000, 0x00000000, 0x011b011a,
+    0x00000605, 0x00ffffff, 0xc4287000, 0x00000000,
+    0x002c0117, 0xc434e000, 0x00000000, 0x011c011e,
+    0x00029705, 0x00031705, 0xa438d100, 0x00000000,
+    0x00000119, 0xa438d200, 0x00000000, 0x00000119,
+    0xa4351000, 0x00000000, 0x00310123, 0xa434e000,
+    0x00000000, 0x01240122, 0x84390000, 0x00000000,
+    0x00000125, 0x00003505, 0xa4288000, 0x00000000,
+    0x01270125, 0x84390000, 0x00000000, 0x00000128,
+    0xc438e000, 0x00000000, 0x00000126, 0xc4351000,
+    0x00000000, 0x0031012a, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x0006012c, 0xc434e000, 0x00000000,
+    0x012b012d, 0xc438e000, 0x00000000, 0x00000129,
+    0xc4351000, 0x00000000, 0x010b012f, 0xc4322000,
+    0x00000000, 0x0118012e, 0xc434e000, 0x00000000,
+    0x01300131, 0xc438e300, 0x00000000, 0x00000119,
+    0xc4351000, 0x00000000, 0x011b0133, 0xc4322000,
+    0x00000000, 0x011d0132, 0xc434e000, 0x00000000,
+    0x01340135, 0x903bb000, 0x00000000, 0x0000011f,
+    0x84322000, 0x00000000, 0x002f0137, 0x24345000,
+    0x00000000, 0x002e0138, 0xe4226000, 0x00000000,
+    0x00000139, 0xe4351000, 0x00000000, 0x0031013a,
+    0xc43bd000, 0x00000000, 0x0000013b, 0x0000b605,
+    0xc434e000, 0x00000000, 0x013d013c, 0xc43be000,
+    0x00000000, 0x0000013b, 0xe4369000, 0x00000000,
+    0x013f013e, 0x84322100, 0x00000000, 0x002f0137,
+    0x24345000, 0x00000000, 0x002e0141, 0xe4226000,
+    0x00000000, 0x00000142, 0x00013605, 0xe4351000,
+    0x00000000, 0x01440143, 0xe434e000, 0x00000000,
+    0x01450140, 0x84322200, 0x00000000, 0x002f0137,
+    0x24345000, 0x00000000, 0x002e0147, 0xe4226000,
+    0x00000000, 0x00000148, 0x00015605, 0xe4351000,
+    0x00000000, 0x014a0149, 0xe434e000, 0x00000000,
+    0x014b0146, 0xc43bd000, 0x00000000, 0x0000014c,
+    0x7b000e05, 0xc434e000, 0x00000000, 0x014d014e,
+    0x00006894, 0x0000053c, 0x000002a4, 0x00040001,
+    0xe438f000, 0x00000000, 0x0000002b, 0xe4351000,
+    0x00000000, 0x00310150, 0x903bb000, 0x00000000,
+    0x00000136, 0x84322000, 0x00000000, 0x002f0152,
+    0x24345000, 0x00000000, 0x002e0153, 0xe4226000,
+    0x00000000, 0x00000154, 0xe4351000, 0x00000000,
+    0x01440155, 0xe434e000, 0x00000000, 0x01560151,
+    0xc438e000, 0x00000000, 0x00000157, 0xe431f000,
+    0x00000000, 0x010700a9, 0x00006894, 0x00000560,
+    0x00000564, 0x00040001, 0xe431f000, 0x00000000,
+    0x010d00a9, 0x00006894, 0x00000430, 0x00000568,
+    0x00040001, 0xe431f000, 0x00000000, 0x011000a9,
+    0x00006894, 0x00000438, 0x0000056c, 0x00040001,
+    0xe431f000, 0x00000000, 0x010800a9, 0x00006894,
+    0x0000043c, 0x00000570, 0x00040001, 0xe431f000,
+    0x00000000, 0x012000a9, 0x00006894, 0x00000428,
+    0x00000574, 0x00040001, 0xe431f000, 0x00000000,
+    0x012100a9, 0x00006894, 0x00000444, 0x00000578,
+    0x00040001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x0000000e,
+    0x00041605, 0xc4322000, 0x00000000, 0x01620016,
+    0x00000e05, 0x24327000, 0x00000000, 0x01640163,
+    0x00001405, 0x00003405, 0x24327000, 0x00000000,
+    0x0164001e, 0xfffff605, 0xc431f000, 0x00000000,
+    0x01690027, 0xc4273000, 0x00000000, 0x01640168,
+    0x0000016a, 0xe438f000, 0x00000000, 0x00000018,
+    0xe431f000, 0x00000000, 0x016c0020, 0xe4273000,
+    0x00000000, 0x00200168, 0x0000016d, 0xe431f000,
+    0x00000000, 0x016e000e, 0x00000001, 0x00000594,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x24327000, 0x00000000, 0x016b001d, 0x243a6000,
+    0x00000000, 0x0015001e, 0x24322000, 0x00000000,
+    0x01710172, 0x00000001, 0x000005cc, 0x00000000,
+    0x00000001, 0x00000000, 0x0000002b, 0x00009705,
+    0x00011705, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x00050177, 0x00015605, 0x00021605, 0x903bb000,
+    0x00000000, 0x00000004, 0xc438e000, 0x00000000,
+    0x0000017b, 0x00031605, 0xc4351000, 0x00000000,
+    0x017d017c, 0xc4287000, 0x00000000, 0x01640178,
+    0xc434e000, 0x00000000, 0x017e017f, 0x903bb000,
+    0x00000000, 0x00000180, 0x84322000, 0x00000000,
+    0x01670181, 0x24345000, 0x00000000, 0x01660182,
+    0xe4226000, 0x00000000, 0x00000183, 0xe4351000,
+    0x00000000, 0x01790184, 0xc43bd000, 0x00000000,
+    0x00000185, 0x00203605, 0xc434e000, 0x00000000,
+    0x01870186, 0xc43be000, 0x00000000, 0x00000185,
+    0xe4369000, 0x00000000, 0x01890188, 0x84322100,
+    0x00000000, 0x01670181, 0x24345000, 0x00000000,
+    0x0166018b, 0xe4226000, 0x00000000, 0x0000018c,
+    0x0001f605, 0xe4351000, 0x00000000, 0x018e018d,
+    0xe434e000, 0x00000000, 0x018f018a, 0x84322200,
+    0x00000000, 0x01670181, 0x24345000, 0x00000000,
+    0x01660191, 0xe4226000, 0x00000000, 0x00000192,
+    0xe4351000, 0x00000000, 0x017a0193, 0xe434e000,
+    0x00000000, 0x01940190, 0xc43bd000, 0x00000000,
+    0x00000195, 0x18800e05, 0xc434e000, 0x00000000,
+    0x01970196, 0x00006894, 0x00000660, 0x000005bc,
+    0x00040001, 0xc438e000, 0x00000000, 0x0000001b,
+    0xe431f000, 0x00000000, 0x0175016f, 0x00006894,
+    0x00000664, 0x00000668, 0x00040001, 0xc43be000,
+    0x00000000, 0x0000001b, 0xe431f000, 0x00000000,
+    0x0176016f, 0x00006894, 0x0000066c, 0x00000670,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000003, 0x00000000,
+    0x00000001, 0x24345000, 0x00000000, 0x016b001d,
+    0x00000001, 0x00000680, 0x00000000, 0x00000003,
+    0x00000000, 0x00000002, 0xc431f000, 0x00000000,
+    0x01690019, 0x24327000, 0x00000000, 0x01a2001c,
+    0x00000001, 0x0000068c, 0x00000000, 0x00000001,
+    0x00000000, 0x0000002b, 0x00009705, 0x00011705,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x000301a7,
+    0x00015605, 0x00021605, 0x903bb000, 0x00000000,
+    0x00000004, 0xc438e000, 0x00000000, 0x000001ab,
+    0x00031605, 0xc4351000, 0x00000000, 0x01ad01ac,
+    0xc4287000, 0x00000000, 0x016401a8, 0xc434e000,
+    0x00000000, 0x01ae01af, 0x903bb000, 0x00000000,
+    0x000001b0, 0x84322000, 0x00000000, 0x016701b1,
+    0x24345000, 0x00000000, 0x016601b2, 0xe4226000,
+    0x00000000, 0x000001b3, 0xe4351000, 0x00000000,
+    0x01a901b4, 0xc43bd000, 0x00000000, 0x000001b5,
+    0x00203605, 0xc434e000, 0x00000000, 0x01b701b6,
+    0xc43be000, 0x00000000, 0x000001b5, 0xe4369000,
+    0x00000000, 0x01b901b8, 0x84322100, 0x00000000,
+    0x016701b1, 0x24345000, 0x00000000, 0x016601bb,
+    0xe4226000, 0x00000000, 0x000001bc, 0x0001f605,
+    0xe4351000, 0x00000000, 0x01be01bd, 0xe434e000,
+    0x00000000, 0x01bf01ba, 0x84322200, 0x00000000,
+    0x016701b1, 0x24345000, 0x00000000, 0x016601c1,
+    0xe4226000, 0x00000000, 0x000001c2, 0xe4351000,
+    0x00000000, 0x01aa01c3, 0xe434e000, 0x00000000,
+    0x01c401c0, 0xc43bd000, 0x00000000, 0x000001c5,
+    0x18800e05, 0xc434e000, 0x00000000, 0x01c701c6,
+    0x00006894, 0x00000720, 0x000005bc, 0x00040001,
+    0xc438e000, 0x00000000, 0x0000001a, 0xe431f000,
+    0x00000000, 0x01a5016f, 0x00006894, 0x00000724,
+    0x00000728, 0x00040001, 0xc43be000, 0x00000000,
+    0x0000001a, 0xe431f000, 0x00000000, 0x01a6016f,
+    0x00006894, 0x0000072c, 0x00000730, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x0000002b,
+    0x00009705, 0x00011705, 0xffff0e05, 0xc4322000,
+    0x00000000, 0x000201d2, 0x00015605, 0x00021605,
+    0x903bb000, 0x00000000, 0x00000004, 0xc438e000,
+    0x00000000, 0x000001d6, 0x00031605, 0xc4351000,
+    0x00000000, 0x01d801d7, 0xc4287000, 0x00000000,
+    0x016401d3, 0xc434e000, 0x00000000, 0x01d901da,
+    0x903bb000, 0x00000000, 0x000001db, 0x84322000,
+    0x00000000, 0x016701dc, 0x24345000, 0x00000000,
+    0x016601dd, 0xe4226000, 0x00000000, 0x000001de,
+    0xe4351000, 0x00000000, 0x01d401df, 0xc43bd000,
+    0x00000000, 0x000001e0, 0x00203605, 0xc434e000,
+    0x00000000, 0x01e201e1, 0xc43be000, 0x00000000,
+    0x000001e0, 0xe4369000, 0x00000000, 0x01e401e3,
+    0x84322100, 0x00000000, 0x016701dc, 0x24345000,
+    0x00000000, 0x016601e6, 0xe4226000, 0x00000000,
+    0x000001e7, 0x0001f605, 0xe4351000, 0x00000000,
+    0x01e901e8, 0xe434e000, 0x00000000, 0x01ea01e5,
+    0x84322200, 0x00000000, 0x016701dc, 0x24345000,
+    0x00000000, 0x016601ec, 0xe4226000, 0x00000000,
+    0x000001ed, 0xe4351000, 0x00000000, 0x01d501ee,
+    0xe434e000, 0x00000000, 0x01ef01eb, 0xc43bd000,
+    0x00000000, 0x000001f0, 0x18800e05, 0xc434e000,
+    0x00000000, 0x01f201f1, 0x00006894, 0x000007cc,
+    0x000005bc, 0x00040001, 0xc438e000, 0x00000000,
+    0x0000001b, 0xe431f000, 0x00000000, 0x01d0016f,
+    0x00006894, 0x000007d0, 0x000007d4, 0x00040001,
+    0xc43be000, 0x00000000, 0x0000001b, 0xe431f000,
+    0x00000000, 0x01d1016f, 0x00006894, 0x000007d8,
+    0x000007dc, 0x00040001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000,
+};
+   nir_def *args[16] = { dst_base, wa_insts_ptr, indirect_base, draw_id_base, indirect_stride, _draw_count, draw_base, instance_multiplier, max_draw_count, flags, mocs, _3dprim_size_B, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx9_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx9_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx)
+{
+   /*
+    block b0:    // preds:
+    32      %0 = undefined
+    32      %1 = undefined
+    32      %2 = undefined
+    32      %3 = undefined
+    32      %4 = undefined
+    32      %5 = undefined
+    32      %6 = undefined
+    32      %7 = undefined
+    32      %8 = undefined
+    32      %9 = undefined
+    32     %10 = undefined
+    32     %11 = undefined
+    32     %12 = undefined
+    64     %13 = @load_param (param_idx=0)
+    64     %14 = @load_param (param_idx=1)
+    64     %15 = @load_param (param_idx=2)
+    32     %16 = @load_param (param_idx=3)
+    64     %17 = @load_param (param_idx=4)
+    32     %18 = @load_param (param_idx=5)
+    32     %19 = @load_param (param_idx=6)
+    32     %20 = @load_param (param_idx=7)
+    32     %21 = @load_param (param_idx=8)
+    64     %22 = @load_param (param_idx=9)
+    64     %23 = @load_param (param_idx=10)
+    32     %24 = @load_param (param_idx=11)
+    32     %25 = load_const (0x00000002)
+    32     %26 = extract_u8 %20, %25 (0x2)
+    32     %27 = load_const (0x00000004)
+    32     %28 = ishl %26, %25 (0x2)
+    32     %29 = load_const (0x00000003)
+    32     %30 = extract_u8 %20, %29 (0x3)
+    32     %31 = iadd %18, %24
+    32     %32 = imul %24, %28
+    64     %33 = u2u64 %32
+    32     %34 = imul %31, %16
+    64     %35 = u2u64 %34
+    32     %36 = load_const (0x00000008)
+    32     %37 = ishl %24, %29 (0x3)
+    64     %38 = u2u64 %37
+    64     %39 = load_const (0x0000000000000000)
+    1      %40 = ine %17, %39 (0x0)
+                 // succs: b1 b2
+    if %40 {
+        block b1:    // preds: b0
+        32     %41 = @load_global (%17) (access=none, align_mul=4, align_offset=0)
+        32     %42 = umin %19, %41
+                     // succs: b3
+    } else {
+        block b2:  // preds: b0, succs: b3
+    }
+    block b3:    // preds: b1 b2
+    32     %43 = phi b1: %42, b2: %19
+    1      %44 = ult %31, %43
+                 // succs: b4 b26
+    if %44 {
+        block b4:    // preds: b3
+        32     %45 = load_const (0x00000001)
+        32     %46 = iand %20, %45 (0x1)
+        32     %47 = load_const (0x00000000)
+        1      %48 = ieq %46, %47 (0x0)
+        8      %49 = load_const (0x00)
+        8      %50 = load_const (0x01)
+        32     %51 = iand %20, %25 (0x2)
+        32     %52 = iand %20, %36 (0x8)
+        1      %53 = ine %52, %47 (0x0)
+        32     %54 = iand %20, %27 (0x4)
+        1      %55 = ine %54, %47 (0x0)
+        32     %56 = extract_u8 %20, %45 (0x1)
+                     // succs: b5 b15
+        if %48 {
+            block b5:    // preds: b4
+            64     %57 = load_const (0x0000000000000008)
+            32     %58 = umax %54, %52
+            1      %59 = ine %58, %47 (0x0)
+            64     %60 = iadd %13, %33
+                         // succs: b6 b13
+            if %59 {
+                block b6:    // preds: b5
+                32     %61 = ushr %52, %29 (0x3)
+                32     %62 = ushr %54, %25 (0x2)
+                32     %63 = iadd.nsw %61, %62
+                32     %64 = ishl %63, %25 (0x2)
+                32     %65 = load_const (0xffffffff = -1 = 4294967295)
+                32     %66 = iadd %65 (0xffffffff), %64
+                64     %67 = load_const (0x0000000000000004)
+                64     %68 = load_const (0x000000000000000c = 12)
+                64     %69 = load_const (0x0000000000000010 = 16)
+                32     %70 = load_const (0x00000010 = 16)
+                32     %71 = load_const (0x78080000 = 2013790208)
+                32     %72 = ior %71 (0x78080000), %66
+                             @store_global (%72, %60) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64     %73 = iadd %60, %67 (0x4)
+                             // succs: b7 b8
+                if %53 {
+                    block b7:    // preds: b6
+                    32     %74 = iadd %30, %45 (0x1)
+                    64     %75 = iadd %35, %57 (0x8)
+                    64     %76 = iadd %14, %75
+                    1      %77 = ieq %76, %39 (0x0)
+                    32     %78 = b2i32 %77
+                    32     %79 = load_const (0xffffff00 = -256 = 4294967040)
+                    32     %80 = iand %12, %79 (0xffffff00)
+                    32     %81 = ior %80, %78
+                    32     %82 = load_const (0x00000100 = 256)
+                    32     %83 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32     %84 = iand %81, %83 (0xffff00ff)
+                    32     %85 = ior %84, %82 (0x100)
+                    16x2   %86 = unpack_32_2x16 %11
+                    32     %87 = u2u32 %86.x
+                    32     %88 = ishl %87, %70 (0x10)
+                    32     %89 = extract_u16 %85, %47 (0x0)
+                    32     %90 = ior %89, %88
+                    32x2   %91 = unpack_64_2x32 %76
+                    8x4    %92 = unpack_32_4x8 %90
+                    8      %93 = iand %92.x, %50 (0x1)
+                    1      %94 = ine %93, %49 (0x0)
+                    64     %95 = b2i64 %94
+                    32     %96 = load_const (0x0000000d = 13)
+                    64     %97 = ishl %95, %96 (0xd)
+                    8      %98 = iand %92.y, %50 (0x1)
+                    1      %99 = ine %98, %49 (0x0)
+                    64    %100 = b2i64 %99
+                    32    %101 = load_const (0x0000000e = 14)
+                    64    %102 = ishl %100, %101 (0xe)
+                    64    %103 = ior %97, %102
+                    64    %104 = u2u64 %56
+                    64    %105 = ishl %104, %70 (0x10)
+                    64    %106 = ior %103, %105
+                    64    %107 = u2u64 %30
+                    32    %108 = load_const (0x0000001a = 26)
+                    64    %109 = ishl %107, %108 (0x1a)
+                    64    %110 = ior %106, %109
+                    32    %111 = u2u32 %110
+                                 @store_global (%111, %73) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %112 = u2u32 %76
+                    64    %113 = iadd %60, %57 (0x8)
+                                 @store_global (%112, %113) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %114 = mov %91.y
+                    64    %115 = iadd %60, %68 (0xc)
+                                 @store_global (%114, %115) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %116 = iadd %60, %69 (0x10)
+                                 @store_global (%36 (0x8), %116) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %117 = load_const (0x0000000000000014 = 20)
+                    64    %118 = iadd %60, %117 (0x14)
+                                 // succs: b9
+                } else {
+                    block b8:  // preds: b6, succs: b9
+                }
+                block b9:    // preds: b7 b8
+                32    %119 = phi b7: %74, b8: %30
+                64    %120 = phi b7: %118, b8: %73
+                             // succs: b10 b11
+                if %55 {
+                    block b10:   // preds: b9
+                    64    %121 = iadd %15, %38
+                                 @store_global (%31, %121) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %122 = ineg %46
+                    64    %123 = iadd %121, %67 (0x4)
+                                 @store_global (%122, %123) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %124 = ieq %121, %39 (0x0)
+                    32    %125 = b2i32 %124
+                    32    %126 = load_const (0xffffff00 = -256 = 4294967040)
+                    32    %127 = iand %10, %126 (0xffffff00)
+                    32    %128 = ior %127, %125
+                    32    %129 = load_const (0x00000100 = 256)
+                    32    %130 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32    %131 = iand %128, %130 (0xffff00ff)
+                    32    %132 = ior %131, %129 (0x100)
+                    16x2  %133 = unpack_32_2x16 %11
+                    32    %134 = u2u32 %133.x
+                    32    %135 = ishl %134, %70 (0x10)
+                    32    %136 = extract_u16 %132, %47 (0x0)
+                    32    %137 = ior %136, %135
+                    32x2  %138 = unpack_64_2x32 %121
+                    8x4   %139 = unpack_32_4x8 %137
+                    8     %140 = iand %139.x, %50 (0x1)
+                    1     %141 = ine %140, %49 (0x0)
+                    64    %142 = b2i64 %141
+                    32    %143 = load_const (0x0000000d = 13)
+                    64    %144 = ishl %142, %143 (0xd)
+                    8     %145 = iand %139.y, %50 (0x1)
+                    1     %146 = ine %145, %49 (0x0)
+                    64    %147 = b2i64 %146
+                    32    %148 = load_const (0x0000000e = 14)
+                    64    %149 = ishl %147, %148 (0xe)
+                    64    %150 = ior %144, %149
+                    64    %151 = u2u64 %56
+                    64    %152 = ishl %151, %70 (0x10)
+                    64    %153 = ior %150, %152
+                    64    %154 = u2u64 %119
+                    32    %155 = load_const (0x0000001a = 26)
+                    64    %156 = ishl %154, %155 (0x1a)
+                    64    %157 = ior %153, %156
+                    32    %158 = u2u32 %157
+                                 @store_global (%158, %120) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %159 = u2u32 %121
+                    64    %160 = iadd %120, %67 (0x4)
+                                 @store_global (%159, %160) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %161 = mov %138.y
+                    64    %162 = iadd %120, %57 (0x8)
+                                 @store_global (%161, %162) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %163 = iadd %120, %68 (0xc)
+                                 @store_global (%36 (0x8), %163) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %164 = iadd %120, %69 (0x10)
+                                 // succs: b12
+                } else {
+                    block b11:  // preds: b9, succs: b12
+                }
+                block b12:   // preds: b10 b11
+                64    %165 = phi b10: %164, b11: %120
+                             // succs: b14
+            } else {
+                block b13:  // preds: b5, succs: b14
+            }
+            block b14:   // preds: b12 b13
+            64    %166 = phi b12: %165, b13: %60
+            64    %167 = iadd %14, %35
+            32x4  %168 = @load_global (%167) (access=none, align_mul=4, align_offset=0)
+            32    %169 = mov %168.x
+            32    %170 = mov %168.z
+            64    %171 = load_const (0x0000000000000004)
+            32    %172 = mov %168.y
+            64    %173 = load_const (0x000000000000000c = 12)
+            32    %174 = mov %168.w
+            32    %175 = ushr %51, %45 (0x1)
+            32    %176 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %177 = iand %9, %176 (0xffffff00)
+            32    %178 = ior %177, %175
+            32    %179 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %180 = iand %178, %179 (0xffff00ff)
+            32    %181 = load_const (0x00000010 = 16)
+            32    %182 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %183 = unpack_32_4x8 %8
+            32    %184 = u2u32 %183.x
+            32    %185 = load_const (0x00000018 = 24)
+            32    %186 = ishl %184, %185 (0x18)
+            32    %187 = load_const (0x00ffffff = 16777215)
+            32    %188 = extract_u16 %180, %47 (0x0)
+            32    %189 = ior %188, %186
+            64    %190 = load_const (0x0000000000000010 = 16)
+            64    %191 = load_const (0x0000000000000014 = 20)
+            64    %192 = load_const (0x0000000000000018 = 24)
+            16    %193 = u2u16 %183.y
+            16    %194 = u2u16 %183.z
+            16    %195 = ishl %194, %36 (0x8)
+            16    %196 = ior %193, %195
+            8     %197 = u2u8 %196
+            16    %198 = load_const (0x0001)
+            16    %199 = extract_u8 %196, %198 (0x1)
+            8     %200 = u2u8 %199
+            32    %201 = u2u32 %197
+            32    %202 = ishl %201, %36 (0x8)
+            32    %203 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %204 = iand %203 (0xffff0000), %7
+            32    %205 = ior %204, %202
+            32    %206 = u2u32 %200
+            32    %207 = ishl %206, %181 (0x10)
+            32    %208 = iand %205, %182 (0xff00ffff)
+            32    %209 = ior %208, %207
+            32    %210 = u2u32 %183.w
+            32    %211 = ishl %210, %185 (0x18)
+            32    %212 = iand %209, %187 (0xffffff)
+            32    %213 = ior %212, %211
+            8x4   %214 = unpack_32_4x8 %189
+            8     %215 = iand %214.x, %50 (0x1)
+            1     %216 = ine %215, %49 (0x0)
+            64    %217 = b2i64 %216
+            64    %218 = ishl %217, %36 (0x8)
+            32    %219 = unpack_64_2x32_split_x %218
+            32    %220 = load_const (0x00000005)
+            32    %221 = ior %219, %220 (0x5)
+            32    %222 = unpack_64_2x32_split_y %218
+            64    %223 = pack_64_2x32_split %221, %222
+            8     %224 = iand %214.y, %50 (0x1)
+            1     %225 = ine %224, %49 (0x0)
+            64    %226 = b2i64 %225
+            32    %227 = load_const (0x00000009)
+            64    %228 = ishl %226, %227 (0x9)
+            64    %229 = ior %223, %228
+            8     %230 = iand %214.z, %50 (0x1)
+            1     %231 = ine %230, %49 (0x0)
+            64    %232 = b2i64 %231
+            32    %233 = load_const (0x0000000a = 10)
+            64    %234 = ishl %232, %233 (0xa)
+            64    %235 = ior %229, %234
+            32    %236 = unpack_64_2x32_split_x %235
+            32    %237 = load_const (0x7b000000 = 2063597568)
+            32    %238 = ior %237 (0x7b000000), %236
+                         @store_global (%238, %166) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %239 = u2u64 %46
+            64    %240 = ishl %239, %36 (0x8)
+            8x4   %241 = unpack_32_4x8 %213
+            8     %242 = iand %241.x, %50 (0x1)
+            1     %243 = ine %242, %49 (0x0)
+            64    %244 = b2i64 %243
+            64    %245 = ishl %244, %227 (0x9)
+            64    %246 = ior %240, %245
+            32    %247 = u2u32 %246
+            64    %248 = iadd %166, %171 (0x4)
+                         @store_global (%247, %248) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %249 = iadd %166, %57 (0x8)
+                         @store_global (%169, %249) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %250 = iadd %166, %173 (0xc)
+                         @store_global (%170, %250) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %251 = iadd %166, %190 (0x10)
+                         @store_global (%172, %251) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %252 = iadd %166, %191 (0x14)
+                         @store_global (%174, %252) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %253 = iadd %166, %192 (0x18)
+                         @store_global (%47 (0x0), %253) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b25
+        } else {
+            block b15:   // preds: b4
+            64    %254 = load_const (0x000000000000000c = 12)
+            32    %255 = umax %54, %52
+            1     %256 = ine %255, %47 (0x0)
+            64    %257 = iadd %13, %33
+                         // succs: b16 b23
+            if %256 {
+                block b16:   // preds: b15
+                32    %258 = ushr %52, %29 (0x3)
+                32    %259 = ushr %54, %25 (0x2)
+                32    %260 = iadd.nsw %258, %259
+                32    %261 = ishl %260, %25 (0x2)
+                32    %262 = load_const (0xffffffff = -1 = 4294967295)
+                32    %263 = iadd %262 (0xffffffff), %261
+                64    %264 = load_const (0x0000000000000004)
+                64    %265 = load_const (0x0000000000000008)
+                64    %266 = load_const (0x0000000000000010 = 16)
+                32    %267 = load_const (0x00000010 = 16)
+                32    %268 = load_const (0x78080000 = 2013790208)
+                32    %269 = ior %268 (0x78080000), %263
+                             @store_global (%269, %257) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                64    %270 = iadd %257, %264 (0x4)
+                             // succs: b17 b18
+                if %53 {
+                    block b17:   // preds: b16
+                    32    %271 = iadd %30, %45 (0x1)
+                    64    %272 = iadd %35, %254 (0xc)
+                    64    %273 = iadd %14, %272
+                    1     %274 = ieq %273, %39 (0x0)
+                    32    %275 = b2i32 %274
+                    32    %276 = load_const (0xffffff00 = -256 = 4294967040)
+                    32    %277 = iand %6, %276 (0xffffff00)
+                    32    %278 = ior %277, %275
+                    32    %279 = load_const (0x00000100 = 256)
+                    32    %280 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32    %281 = iand %278, %280 (0xffff00ff)
+                    32    %282 = ior %281, %279 (0x100)
+                    16x2  %283 = unpack_32_2x16 %11
+                    32    %284 = u2u32 %283.x
+                    32    %285 = ishl %284, %267 (0x10)
+                    32    %286 = extract_u16 %282, %47 (0x0)
+                    32    %287 = ior %286, %285
+                    32x2  %288 = unpack_64_2x32 %273
+                    8x4   %289 = unpack_32_4x8 %287
+                    8     %290 = iand %289.x, %50 (0x1)
+                    1     %291 = ine %290, %49 (0x0)
+                    64    %292 = b2i64 %291
+                    32    %293 = load_const (0x0000000d = 13)
+                    64    %294 = ishl %292, %293 (0xd)
+                    8     %295 = iand %289.y, %50 (0x1)
+                    1     %296 = ine %295, %49 (0x0)
+                    64    %297 = b2i64 %296
+                    32    %298 = load_const (0x0000000e = 14)
+                    64    %299 = ishl %297, %298 (0xe)
+                    64    %300 = ior %294, %299
+                    64    %301 = u2u64 %56
+                    64    %302 = ishl %301, %267 (0x10)
+                    64    %303 = ior %300, %302
+                    64    %304 = u2u64 %30
+                    32    %305 = load_const (0x0000001a = 26)
+                    64    %306 = ishl %304, %305 (0x1a)
+                    64    %307 = ior %303, %306
+                    32    %308 = u2u32 %307
+                                 @store_global (%308, %270) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %309 = u2u32 %273
+                    64    %310 = iadd %257, %265 (0x8)
+                                 @store_global (%309, %310) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %311 = mov %288.y
+                    64    %312 = iadd %257, %254 (0xc)
+                                 @store_global (%311, %312) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %313 = iadd %257, %266 (0x10)
+                                 @store_global (%36 (0x8), %313) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %314 = load_const (0x0000000000000014 = 20)
+                    64    %315 = iadd %257, %314 (0x14)
+                                 // succs: b19
+                } else {
+                    block b18:  // preds: b16, succs: b19
+                }
+                block b19:   // preds: b17 b18
+                32    %316 = phi b17: %271, b18: %30
+                64    %317 = phi b17: %315, b18: %270
+                             // succs: b20 b21
+                if %55 {
+                    block b20:   // preds: b19
+                    64    %318 = iadd %15, %38
+                                 @store_global (%31, %318) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %319 = ineg %46
+                    64    %320 = iadd %318, %264 (0x4)
+                                 @store_global (%319, %320) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    1     %321 = ieq %318, %39 (0x0)
+                    32    %322 = b2i32 %321
+                    32    %323 = load_const (0xffffff00 = -256 = 4294967040)
+                    32    %324 = iand %5, %323 (0xffffff00)
+                    32    %325 = ior %324, %322
+                    32    %326 = load_const (0x00000100 = 256)
+                    32    %327 = load_const (0xffff00ff = -65281 = 4294902015)
+                    32    %328 = iand %325, %327 (0xffff00ff)
+                    32    %329 = ior %328, %326 (0x100)
+                    16x2  %330 = unpack_32_2x16 %11
+                    32    %331 = u2u32 %330.x
+                    32    %332 = ishl %331, %267 (0x10)
+                    32    %333 = extract_u16 %329, %47 (0x0)
+                    32    %334 = ior %333, %332
+                    32x2  %335 = unpack_64_2x32 %318
+                    8x4   %336 = unpack_32_4x8 %334
+                    8     %337 = iand %336.x, %50 (0x1)
+                    1     %338 = ine %337, %49 (0x0)
+                    64    %339 = b2i64 %338
+                    32    %340 = load_const (0x0000000d = 13)
+                    64    %341 = ishl %339, %340 (0xd)
+                    8     %342 = iand %336.y, %50 (0x1)
+                    1     %343 = ine %342, %49 (0x0)
+                    64    %344 = b2i64 %343
+                    32    %345 = load_const (0x0000000e = 14)
+                    64    %346 = ishl %344, %345 (0xe)
+                    64    %347 = ior %341, %346
+                    64    %348 = u2u64 %56
+                    64    %349 = ishl %348, %267 (0x10)
+                    64    %350 = ior %347, %349
+                    64    %351 = u2u64 %316
+                    32    %352 = load_const (0x0000001a = 26)
+                    64    %353 = ishl %351, %352 (0x1a)
+                    64    %354 = ior %350, %353
+                    32    %355 = u2u32 %354
+                                 @store_global (%355, %317) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %356 = u2u32 %318
+                    64    %357 = iadd %317, %264 (0x4)
+                                 @store_global (%356, %357) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    32    %358 = mov %335.y
+                    64    %359 = iadd %317, %265 (0x8)
+                                 @store_global (%358, %359) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %360 = iadd %317, %254 (0xc)
+                                 @store_global (%36 (0x8), %360) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                    64    %361 = iadd %317, %266 (0x10)
+                                 // succs: b22
+                } else {
+                    block b21:  // preds: b19, succs: b22
+                }
+                block b22:   // preds: b20 b21
+                64    %362 = phi b20: %361, b21: %317
+                             // succs: b24
+            } else {
+                block b23:  // preds: b15, succs: b24
+            }
+            block b24:   // preds: b22 b23
+            64    %363 = phi b22: %362, b23: %257
+            64    %364 = iadd %14, %35
+            32x4  %365 = @load_global (%364) (access=none, align_mul=4, align_offset=0)
+            64    %366 = load_const (0x0000000000000004)
+            64    %367 = load_const (0x0000000000000010 = 16)
+            64    %368 = iadd %364, %367 (0x10)
+            32    %369 = @load_global (%368) (access=none, align_mul=4, align_offset=0)
+            32    %370 = load_const (0x00000010 = 16)
+            32    %371 = mov %365.x
+            64    %372 = load_const (0x0000000000000008)
+            32    %373 = mov %365.z
+            32    %374 = mov %365.y
+            32    %375 = mov %365.w
+            32    %376 = ushr %51, %45 (0x1)
+            32    %377 = load_const (0xffffff00 = -256 = 4294967040)
+            32    %378 = iand %4, %377 (0xffffff00)
+            32    %379 = ior %378, %376
+            32    %380 = load_const (0xffff00ff = -65281 = 4294902015)
+            32    %381 = iand %379, %380 (0xffff00ff)
+            32    %382 = load_const (0xff00ffff = -16711681 = 4278255615)
+            8x4   %383 = unpack_32_4x8 %8
+            32    %384 = u2u32 %383.x
+            32    %385 = load_const (0x00000018 = 24)
+            32    %386 = ishl %384, %385 (0x18)
+            32    %387 = load_const (0x00ffffff = 16777215)
+            32    %388 = extract_u16 %381, %47 (0x0)
+            32    %389 = ior %388, %386
+            64    %390 = load_const (0x0000000000000014 = 20)
+            64    %391 = load_const (0x0000000000000018 = 24)
+            16    %392 = u2u16 %383.y
+            16    %393 = u2u16 %383.z
+            16    %394 = ishl %393, %36 (0x8)
+            16    %395 = ior %392, %394
+            8     %396 = u2u8 %395
+            16    %397 = load_const (0x0001)
+            16    %398 = extract_u8 %395, %397 (0x1)
+            8     %399 = u2u8 %398
+            32    %400 = u2u32 %396
+            32    %401 = ishl %400, %36 (0x8)
+            32    %402 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %403 = iand %402 (0xffff0000), %3
+            32    %404 = ior %403, %401
+            32    %405 = u2u32 %399
+            32    %406 = ishl %405, %370 (0x10)
+            32    %407 = iand %404, %382 (0xff00ffff)
+            32    %408 = ior %407, %406
+            32    %409 = u2u32 %383.w
+            32    %410 = ishl %409, %385 (0x18)
+            32    %411 = iand %408, %387 (0xffffff)
+            32    %412 = ior %411, %410
+            8x4   %413 = unpack_32_4x8 %389
+            8     %414 = iand %413.x, %50 (0x1)
+            1     %415 = ine %414, %49 (0x0)
+            64    %416 = b2i64 %415
+            64    %417 = ishl %416, %36 (0x8)
+            32    %418 = unpack_64_2x32_split_x %417
+            32    %419 = load_const (0x00000005)
+            32    %420 = ior %418, %419 (0x5)
+            32    %421 = unpack_64_2x32_split_y %417
+            64    %422 = pack_64_2x32_split %420, %421
+            8     %423 = iand %413.y, %50 (0x1)
+            1     %424 = ine %423, %49 (0x0)
+            64    %425 = b2i64 %424
+            32    %426 = load_const (0x00000009)
+            64    %427 = ishl %425, %426 (0x9)
+            64    %428 = ior %422, %427
+            8     %429 = iand %413.z, %50 (0x1)
+            1     %430 = ine %429, %49 (0x0)
+            64    %431 = b2i64 %430
+            32    %432 = load_const (0x0000000a = 10)
+            64    %433 = ishl %431, %432 (0xa)
+            64    %434 = ior %428, %433
+            32    %435 = unpack_64_2x32_split_x %434
+            32    %436 = load_const (0x7b000000 = 2063597568)
+            32    %437 = ior %436 (0x7b000000), %435
+                         @store_global (%437, %363) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %438 = u2u64 %46
+            64    %439 = ishl %438, %36 (0x8)
+            8x4   %440 = unpack_32_4x8 %412
+            8     %441 = iand %440.x, %50 (0x1)
+            1     %442 = ine %441, %49 (0x0)
+            64    %443 = b2i64 %442
+            64    %444 = ishl %443, %426 (0x9)
+            64    %445 = ior %439, %444
+            32    %446 = u2u32 %445
+            64    %447 = iadd %363, %366 (0x4)
+                         @store_global (%446, %447) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %448 = iadd %363, %372 (0x8)
+                         @store_global (%371, %448) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %449 = iadd %363, %254 (0xc)
+                         @store_global (%373, %449) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %450 = iadd %363, %367 (0x10)
+                         @store_global (%374, %450) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %451 = iadd %363, %390 (0x14)
+                         @store_global (%369, %451) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            64    %452 = iadd %363, %391 (0x18)
+                         @store_global (%375, %452) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b25
+        }
+        block b25:  // preds: b14 b24, succs: b27
+    } else {
+        block b26:  // preds: b3, succs: b27
+    }
+    block b27:   // preds: b25 b26
+    32    %453 = load_const (0x00000000)
+    1     %454 = ieq %43, %453 (0x0)
+    32    %455 = load_const (0xffffffff = -1 = 4294967295)
+    32    %456 = iadd %43, %455 (0xffffffff)
+    32    %457 = bcsel %454, %453 (0x0), %456
+    64    %458 = u2u64 %28
+    64    %459 = iadd %33, %458
+    64    %460 = bcsel %454, %33, %459
+    64    %461 = iadd %13, %460
+    1     %462 = ine %31, %457
+                 // succs: b28 b32
+    if %462 {
+        block b28:   // preds: b27
+        32    %463 = iadd %21, %455 (0xffffffff)
+        1     %464 = ieq %24, %463
+                     // succs: b29 b30
+        if %464 {
+            block b29:   // preds: b28
+            64    %465 = load_const (0x0000000000000004)
+            64    %466 = load_const (0x0000000000000008)
+            8     %467 = load_const (0x00)
+            32    %468 = load_const (0xffff0000 = -65536 = 4294901760)
+            32    %469 = iand %468 (0xffff0000), %2
+            32    %470 = load_const (0x0000000a = 10)
+            32    %471 = load_const (0x00000010 = 16)
+            8x4   %472 = unpack_32_4x8 %1
+            32    %473 = u2u32 %472.x
+            32    %474 = load_const (0x00000018 = 24)
+            32    %475 = ishl %473, %474 (0x18)
+            32    %476 = extract_u16 %469, %453 (0x0)
+            32    %477 = ior %476, %475
+            8x4   %478 = unpack_32_4x8 %477
+            8     %479 = load_const (0x01)
+            8     %480 = iand %478.x, %479 (0x1)
+            1     %481 = ine %480, %467 (0x0)
+            64    %482 = b2i64 %481
+            64    %483 = ishl %482, %470 (0xa)
+            32    %484 = unpack_64_2x32_split_x %483
+            32    %485 = load_const (0x00000101 = 257)
+            32    %486 = ior %484, %485 (0x101)
+            32    %487 = unpack_64_2x32_split_y %483
+            64    %488 = pack_64_2x32_split %486, %487
+            8     %489 = iand %478.y, %479 (0x1)
+            1     %490 = ine %489, %467 (0x0)
+            64    %491 = b2i64 %490
+            32    %492 = load_const (0x0000000f = 15)
+            64    %493 = ishl %491, %492 (0xf)
+            64    %494 = ior %488, %493
+            8     %495 = iand %478.z, %479 (0x1)
+            1     %496 = ine %495, %467 (0x0)
+            64    %497 = b2i64 %496
+            64    %498 = ishl %497, %471 (0x10)
+            64    %499 = ior %494, %498
+            32    %500 = unpack_64_2x32_split_x %499
+            32    %501 = load_const (0x18800000 = 411041792)
+            32    %502 = ior %500, %501 (0x18800000)
+                         @store_global (%502, %461) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %503 = u2u32 %22
+            64    %504 = iadd %461, %465 (0x4)
+                         @store_global (%503, %504) (wrmask=x, access=none, align_mul=4, align_offset=0)
+            32    %505 = unpack_64_2x32_split_y %22
+            64    %506 = iadd %461, %466 (0x8)
+                         @store_global (%505, %506) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                         // succs: b31
+        } else {
+            block b30:  // preds: b28, succs: b31
+        }
+        block b31:  // preds: b29 b30, succs: b33
+    } else {
+        block b32:   // preds: b27
+        64    %507 = load_const (0x0000000000000004)
+        64    %508 = load_const (0x0000000000000008)
+        8     %509 = load_const (0x00)
+        32    %510 = load_const (0xffff0000 = -65536 = 4294901760)
+        32    %511 = iand %510 (0xffff0000), %0
+        32    %512 = load_const (0x0000000a = 10)
+        32    %513 = load_const (0x00000010 = 16)
+        8x4   %514 = unpack_32_4x8 %1
+        32    %515 = u2u32 %514.x
+        32    %516 = load_const (0x00000018 = 24)
+        32    %517 = ishl %515, %516 (0x18)
+        32    %518 = extract_u16 %511, %453 (0x0)
+        32    %519 = ior %518, %517
+        8x4   %520 = unpack_32_4x8 %519
+        8     %521 = load_const (0x01)
+        8     %522 = iand %520.x, %521 (0x1)
+        1     %523 = ine %522, %509 (0x0)
+        64    %524 = b2i64 %523
+        64    %525 = ishl %524, %512 (0xa)
+        32    %526 = unpack_64_2x32_split_x %525
+        32    %527 = load_const (0x00000101 = 257)
+        32    %528 = ior %526, %527 (0x101)
+        32    %529 = unpack_64_2x32_split_y %525
+        64    %530 = pack_64_2x32_split %528, %529
+        8     %531 = iand %520.y, %521 (0x1)
+        1     %532 = ine %531, %509 (0x0)
+        64    %533 = b2i64 %532
+        32    %534 = load_const (0x0000000f = 15)
+        64    %535 = ishl %533, %534 (0xf)
+        64    %536 = ior %530, %535
+        8     %537 = iand %520.z, %521 (0x1)
+        1     %538 = ine %537, %509 (0x0)
+        64    %539 = b2i64 %538
+        64    %540 = ishl %539, %513 (0x10)
+        64    %541 = ior %536, %540
+        32    %542 = unpack_64_2x32_split_x %541
+        32    %543 = load_const (0x18800000 = 411041792)
+        32    %544 = ior %542, %543 (0x18800000)
+                     @store_global (%544, %461) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %545 = u2u32 %23
+        64    %546 = iadd %461, %507 (0x4)
+                     @store_global (%545, %546) (wrmask=x, access=none, align_mul=4, align_offset=0)
+        32    %547 = unpack_64_2x32_split_y %23
+        64    %548 = iadd %461, %508 (0x8)
+                     @store_global (%547, %548) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                     // succs: b33
+    }
+    block b33:  // preds: b31 b32, succs: b34
+    block b34:
+   */
+   static const uint32_t impl_0_nir[1750] = {
+    0x00000248, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000c, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000007, 0x00000000, 0x00000029, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0x00000607, 0x00000607, 0x00000607, 0x00000607,
+    0xe4001744, 0xe4011744, 0xe4021744, 0xc4031744,
+    0xe4041744, 0xc4051744, 0xc4061744, 0xc4071744,
+    0xc4081744, 0xe4091744, 0xe40a1744, 0xc40b1744,
+    0x00005605, 0xc4288000, 0x00000000, 0x001b0016,
+    0x00009605, 0xc4351000, 0x00000000, 0x001b001c,
+    0x00007605, 0xc4288000, 0x00000000, 0x001f0016,
+    0xc431f000, 0x00000000, 0x001a0014, 0xc433f000,
+    0x00000000, 0x001e001a, 0xe438f000, 0x00000000,
+    0x00000022, 0xc433f000, 0x00000000, 0x00120021,
+    0xe438f000, 0x00000000, 0x00000024, 0x00011605,
+    0xc4351000, 0x00000000, 0x001f001a, 0xe438f000,
+    0x00000000, 0x00000027, 0x00000f05, 0x24345000,
+    0x00000000, 0x00290013, 0x00000001, 0x000000a8,
+    0x00000000, 0x00000001, 0x00000000, 0x00000002,
+    0xc4005354, 0x0000004c, 0x00000400, 0xc43ae000,
+    0x00000000, 0x002c0015, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x0000002d, 0x0000002b, 0x00000015, 0x0000002e,
+    0x243a6000, 0x00000000, 0x00300021, 0x00000001,
+    0x000000c4, 0x00000000, 0x00000003, 0x00000000,
+    0x0000000c, 0x00003605, 0xc4322000, 0x00000000,
+    0x00330016, 0x00000e05, 0x24327000, 0x00000000,
+    0x00350034, 0x00001405, 0x00003405, 0xc4722000,
+    0x00000000, 0x001b0016, 0x00000000, 0x00260016,
+    0x24345000, 0x00000000, 0x0035003a, 0xc4322000,
+    0x00000000, 0x001d0016, 0x24345000, 0x00000000,
+    0x0035003c, 0xc4288000, 0x00000000, 0x00330016,
+    0x00000001, 0x000000d8, 0x00000000, 0x00000003,
+    0x00000000, 0x00000004, 0x00011705, 0xc43ac000,
+    0x00000000, 0x003a003c, 0x24345000, 0x00000000,
+    0x00350041, 0xe431f000, 0x00000000, 0x0023000f,
+    0x00000001, 0x00000108, 0x00000000, 0x00000005,
+    0x00000000, 0x0000000e, 0xc47cc000, 0x00000000,
+    0x001f003a, 0x00000000, 0x001b003c, 0xc431f020,
+    0x00000000, 0x00460045, 0xc4351000, 0x00000000,
+    0x001b0047, 0xfffff605, 0xc431f000, 0x00000000,
+    0x00480049, 0x00009705, 0x00019705, 0x00021705,
+    0x00021605, 0x78080e05, 0xc434e000, 0x00000000,
+    0x004a004f, 0x00006894, 0x00000140, 0x0000010c,
+    0x00040001, 0xe431f000, 0x00000000, 0x004b0043,
+    0x00000001, 0x000000ec, 0x00000000, 0x00000001,
+    0x00000000, 0x00000031, 0xc431f000, 0x00000000,
+    0x00330020, 0xe471f000, 0x00000000, 0x00400025,
+    0x00000000, 0x00540010, 0x24327000, 0x00000000,
+    0x00290055, 0xc4225000, 0x00000000, 0x00000056,
+    0xffe01605, 0xc4322000, 0x00000000, 0x0058000e,
+    0xc434e000, 0x00000000, 0x00570059, 0x00201605,
+    0xe01ff605, 0xc4322000, 0x00000000, 0x005c005a,
+    0xc434e000, 0x00000000, 0x005b005d, 0xa83b8000,
+    0x00000000, 0x0000000d, 0xc438e000, 0x00000000,
+    0x0000005f, 0xc4351000, 0x00000000, 0x004e0060,
+    0xc4287000, 0x00000000, 0x0035005e, 0xc434e000,
+    0x00000000, 0x00610062, 0xc83bc000, 0x00000000,
+    0x00000055, 0x903bb000, 0x00000000, 0x00000063,
+    0x84322000, 0x00000000, 0x00380065, 0x24345000,
+    0x00000000, 0x00370066, 0xe4226000, 0x00000000,
+    0x00000067, 0x0001b605, 0xe4351000, 0x00000000,
+    0x00690068, 0x84322100, 0x00000000, 0x00380065,
+    0x24345000, 0x00000000, 0x0037006b, 0xe4226000,
+    0x00000000, 0x0000006c, 0x0001d605, 0xe4351000,
+    0x00000000, 0x006e006d, 0xe434e000, 0x00000000,
+    0x006f006a, 0xe438f000, 0x00000000, 0x0000003e,
+    0xe4351000, 0x00000000, 0x004e0071, 0xe434e000,
+    0x00000000, 0x00720070, 0xe438f000, 0x00000000,
+    0x00000020, 0x00035605, 0xe4351000, 0x00000000,
+    0x00750074, 0xe434e000, 0x00000000, 0x00760073,
+    0xc438e000, 0x00000000, 0x00000077, 0x00006894,
+    0x000001e0, 0x00000144, 0x00040001, 0xc438e000,
+    0x00000000, 0x00000055, 0xe431f000, 0x00000000,
+    0x00400043, 0x00006894, 0x000001e4, 0x000001e8,
+    0x00040001, 0xc435a100, 0x00000000, 0x00000064,
+    0xe431f000, 0x00000000, 0x004c0043, 0x00006894,
+    0x000001ec, 0x000001f0, 0x00040001, 0xe431f000,
+    0x00000000, 0x004d0043, 0x00006894, 0x00000098,
+    0x000001f4, 0x00040001, 0x00029705, 0xe431f000,
+    0x00000000, 0x007e0043, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000002, 0xc4000028,
+    0x00000053, 0x00000052, 0x00000020, 0x00000080,
+    0xe4000028, 0x0000007f, 0x00000052, 0x00000051,
+    0x00000080, 0x00000001, 0x000000f4, 0x00000000,
+    0x00000001, 0x00000000, 0x00000032, 0xe431f000,
+    0x00000000, 0x00280011, 0x00006894, 0x00000084,
+    0x00000214, 0x00040001, 0xc4349000, 0x00000000,
+    0x00000034, 0xe431f000, 0x00000000, 0x004b0085,
+    0x00006894, 0x00000218, 0x0000021c, 0x00040001,
+    0x24327000, 0x00000000, 0x00290085, 0xc4225000,
+    0x00000000, 0x00000088, 0xffe01605, 0xc4322000,
+    0x00000000, 0x008a000c, 0xc434e000, 0x00000000,
+    0x0089008b, 0x00201605, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x008e008c, 0xc434e000, 0x00000000,
+    0x008d008f, 0xa83b8000, 0x00000000, 0x0000000d,
+    0xc438e000, 0x00000000, 0x00000091, 0xc4351000,
+    0x00000000, 0x004e0092, 0xc4287000, 0x00000000,
+    0x00350090, 0xc434e000, 0x00000000, 0x00930094,
+    0xc83bc000, 0x00000000, 0x00000085, 0x903bb000,
+    0x00000000, 0x00000095, 0x84322000, 0x00000000,
+    0x00380097, 0x24345000, 0x00000000, 0x00370098,
+    0xe4226000, 0x00000000, 0x00000099, 0x0001b605,
+    0xe4351000, 0x00000000, 0x009b009a, 0x84322100,
+    0x00000000, 0x00380097, 0x24345000, 0x00000000,
+    0x0037009d, 0xe4226000, 0x00000000, 0x0000009e,
+    0x0001d605, 0xe4351000, 0x00000000, 0x00a0009f,
+    0xe434e000, 0x00000000, 0x00a1009c, 0xe438f000,
+    0x00000000, 0x0000003e, 0xe4351000, 0x00000000,
+    0x004e00a3, 0xe434e000, 0x00000000, 0x00a400a2,
+    0xe438f000, 0x00000000, 0x00000082, 0x00035605,
+    0xe4351000, 0x00000000, 0x00a700a6, 0xe434e000,
+    0x00000000, 0x00a800a5, 0xc438e000, 0x00000000,
+    0x000000a9, 0x00006894, 0x000002a8, 0x0000020c,
+    0x00040001, 0xc438e000, 0x00000000, 0x00000085,
+    0xe431f000, 0x00000000, 0x004b0083, 0x00006894,
+    0x000002ac, 0x000002b0, 0x00040001, 0xc435a100,
+    0x00000000, 0x00000096, 0xe431f000, 0x00000000,
+    0x00400083, 0x00006894, 0x000002b4, 0x000002b8,
+    0x00040001, 0xe431f000, 0x00000000, 0x004c0083,
+    0x00006894, 0x00000098, 0x000002bc, 0x00040001,
+    0xe431f000, 0x00000000, 0x004d0083, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000001,
+    0xe4000028, 0x000000b0, 0x00000084, 0x00000083,
+    0x000000b1, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x0000005f, 0xe4000028, 0x000000b3,
+    0x000000b2, 0x00000043, 0x000000b4, 0xe431f000,
+    0x00000000, 0x00250010, 0xd0005354, 0x000002dc,
+    0x00000400, 0xc435a000, 0x00000000, 0x000000b8,
+    0xc435a200, 0x00000000, 0x000000b8, 0x00009705,
+    0xc435a100, 0x00000000, 0x000000b8, 0x00019705,
+    0xc435a300, 0x00000000, 0x000000b8, 0xc43cc000,
+    0x00000000, 0x00330039, 0xffe01605, 0xc4322000,
+    0x00000000, 0x00c0000b, 0xc434e000, 0x00000000,
+    0x00bf00c1, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x00c300c2, 0x00021605, 0x00000605, 0xff00ffff,
+    0x903bb000, 0x00000000, 0x0000000a, 0xc438e000,
+    0x00000000, 0x000000c7, 0x00031605, 0xc4351000,
+    0x00000000, 0x00c900c8, 0x00000605, 0x00ffffff,
+    0xc4287000, 0x00000000, 0x003500c4, 0xc434e000,
+    0x00000000, 0x00ca00cc, 0x00021705, 0x00029705,
+    0x00031705, 0xa438d100, 0x00000000, 0x000000c7,
+    0xa438d200, 0x00000000, 0x000000c7, 0xa4351000,
+    0x00000000, 0x002600d2, 0xa434e000, 0x00000000,
+    0x00d300d1, 0x84390000, 0x00000000, 0x000000d4,
+    0x00003505, 0xa4288000, 0x00000000, 0x00d600d4,
+    0x84390000, 0x00000000, 0x000000d7, 0xc438e000,
+    0x00000000, 0x000000d5, 0xc4351000, 0x00000000,
+    0x002600d9, 0xffff0e05, 0xc4322000, 0x00000000,
+    0x000900db, 0xc434e000, 0x00000000, 0x00da00dc,
+    0xc438e000, 0x00000000, 0x000000d8, 0xc4351000,
+    0x00000000, 0x00c500de, 0xc4322000, 0x00000000,
+    0x00c600dd, 0xc434e000, 0x00000000, 0x00df00e0,
+    0xc438e300, 0x00000000, 0x000000c7, 0xc4351000,
+    0x00000000, 0x00c900e2, 0xc4322000, 0x00000000,
+    0x00cb00e1, 0xc434e000, 0x00000000, 0x00e300e4,
+    0x903bb000, 0x00000000, 0x000000cd, 0x84322000,
+    0x00000000, 0x003800e6, 0x24345000, 0x00000000,
+    0x003700e7, 0xe4226000, 0x00000000, 0x000000e8,
+    0xe4351000, 0x00000000, 0x002600e9, 0xc43bd000,
+    0x00000000, 0x000000ea, 0x0000b605, 0xc434e000,
+    0x00000000, 0x00ec00eb, 0xc43be000, 0x00000000,
+    0x000000ea, 0xe4369000, 0x00000000, 0x00ee00ed,
+    0x84322100, 0x00000000, 0x003800e6, 0x24345000,
+    0x00000000, 0x003700f0, 0xe4226000, 0x00000000,
+    0x000000f1, 0x00013605, 0xe4351000, 0x00000000,
+    0x00f300f2, 0xe434e000, 0x00000000, 0x00f400ef,
+    0x84322200, 0x00000000, 0x003800e6, 0x24345000,
+    0x00000000, 0x003700f6, 0xe4226000, 0x00000000,
+    0x000000f7, 0x00015605, 0xe4351000, 0x00000000,
+    0x00f900f8, 0xe434e000, 0x00000000, 0x00fa00f5,
+    0xc43bd000, 0x00000000, 0x000000fb, 0x7b000e05,
+    0xc434e000, 0x00000000, 0x00fc00fd, 0x00006894,
+    0x000003f8, 0x000002d8, 0x00040001, 0xe438f000,
+    0x00000000, 0x00000034, 0xe4351000, 0x00000000,
+    0x002600ff, 0x903bb000, 0x00000000, 0x000000e5,
+    0x84322000, 0x00000000, 0x00380101, 0x24345000,
+    0x00000000, 0x00370102, 0xe4226000, 0x00000000,
+    0x00000103, 0xe4351000, 0x00000000, 0x00f30104,
+    0xe434e000, 0x00000000, 0x01050100, 0xc438e000,
+    0x00000000, 0x00000106, 0xe431f000, 0x00000000,
+    0x00bb00b6, 0x00006894, 0x0000041c, 0x00000420,
+    0x00040001, 0xe431f000, 0x00000000, 0x004000b6,
+    0x00006894, 0x000002e4, 0x00000424, 0x00040001,
+    0xe431f000, 0x00000000, 0x00bd00b6, 0x00006894,
+    0x000002e8, 0x00000428, 0x00040001, 0xe431f000,
+    0x00000000, 0x00ce00b6, 0x00006894, 0x000002f0,
+    0x0000042c, 0x00040001, 0xe431f000, 0x00000000,
+    0x00cf00b6, 0x00006894, 0x000002f8, 0x00000430,
+    0x00040001, 0xe431f000, 0x00000000, 0x00d000b6,
+    0x00006894, 0x000000d4, 0x00000434, 0x00040001,
+    0x00000003, 0x00000000, 0x00000004, 0x00019705,
+    0xc43ac000, 0x00000000, 0x003a003c, 0x24345000,
+    0x00000000, 0x00350110, 0xe431f000, 0x00000000,
+    0x0023000f, 0x00000001, 0x00000444, 0x00000000,
+    0x00000005, 0x00000000, 0x0000000e, 0xc47cc000,
+    0x00000000, 0x001f003a, 0x00000000, 0x001b003c,
+    0xc431f020, 0x00000000, 0x01150114, 0xc4351000,
+    0x00000000, 0x001b0116, 0xfffff605, 0xc431f000,
+    0x00000000, 0x01170118, 0x00009705, 0x00011705,
+    0x00021705, 0x00021605, 0x78080e05, 0xc434e000,
+    0x00000000, 0x0119011e, 0x00006894, 0x0000047c,
+    0x00000448, 0x00040001, 0xe431f000, 0x00000000,
+    0x011a0112, 0x00000001, 0x000000ec, 0x00000000,
+    0x00000001, 0x00000000, 0x00000031, 0xc431f000,
+    0x00000000, 0x00330020, 0xe471f000, 0x00000000,
+    0x010f0025, 0x00000000, 0x01230010, 0x24327000,
+    0x00000000, 0x00290124, 0xc4225000, 0x00000000,
+    0x00000125, 0xffe01605, 0xc4322000, 0x00000000,
+    0x01270008, 0xc434e000, 0x00000000, 0x01260128,
+    0x00201605, 0xe01ff605, 0xc4322000, 0x00000000,
+    0x012b0129, 0xc434e000, 0x00000000, 0x012a012c,
+    0xa83b8000, 0x00000000, 0x0000000d, 0xc438e000,
+    0x00000000, 0x0000012e, 0xc4351000, 0x00000000,
+    0x011d012f, 0xc4287000, 0x00000000, 0x0035012d,
+    0xc434e000, 0x00000000, 0x01300131, 0xc83bc000,
+    0x00000000, 0x00000124, 0x903bb000, 0x00000000,
+    0x00000132, 0x84322000, 0x00000000, 0x00380134,
+    0x24345000, 0x00000000, 0x00370135, 0xe4226000,
+    0x00000000, 0x00000136, 0x0001b605, 0xe4351000,
+    0x00000000, 0x01380137, 0x84322100, 0x00000000,
+    0x00380134, 0x24345000, 0x00000000, 0x0037013a,
+    0xe4226000, 0x00000000, 0x0000013b, 0x0001d605,
+    0xe4351000, 0x00000000, 0x013d013c, 0xe434e000,
+    0x00000000, 0x013e0139, 0xe438f000, 0x00000000,
+    0x0000003e, 0xe4351000, 0x00000000, 0x011d0140,
+    0xe434e000, 0x00000000, 0x0141013f, 0xe438f000,
+    0x00000000, 0x00000020, 0x00035605, 0xe4351000,
+    0x00000000, 0x01440143, 0xe434e000, 0x00000000,
+    0x01450142, 0xc438e000, 0x00000000, 0x00000146,
+    0x00006894, 0x0000051c, 0x00000480, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000124, 0xe431f000,
+    0x00000000, 0x011b0112, 0x00006894, 0x00000520,
+    0x00000524, 0x00040001, 0xc435a100, 0x00000000,
+    0x00000133, 0xe431f000, 0x00000000, 0x010f0112,
+    0x00006894, 0x00000528, 0x0000052c, 0x00040001,
+    0xe431f000, 0x00000000, 0x011c0112, 0x00006894,
+    0x00000098, 0x00000530, 0x00040001, 0x00029705,
+    0xe431f000, 0x00000000, 0x014d0112, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000002,
+    0xc4000028, 0x00000122, 0x00000121, 0x00000020,
+    0x0000014f, 0xe4000028, 0x0000014e, 0x00000121,
+    0x00000120, 0x0000014f, 0x00000001, 0x000000f4,
+    0x00000000, 0x00000001, 0x00000000, 0x00000032,
+    0xe431f000, 0x00000000, 0x00280011, 0x00006894,
+    0x00000084, 0x00000550, 0x00040001, 0xc4349000,
+    0x00000000, 0x00000034, 0xe431f000, 0x00000000,
+    0x011a0154, 0x00006894, 0x00000554, 0x00000558,
+    0x00040001, 0x24327000, 0x00000000, 0x00290154,
+    0xc4225000, 0x00000000, 0x00000157, 0xffe01605,
+    0xc4322000, 0x00000000, 0x01590007, 0xc434e000,
+    0x00000000, 0x0158015a, 0x00201605, 0xe01ff605,
+    0xc4322000, 0x00000000, 0x015d015b, 0xc434e000,
+    0x00000000, 0x015c015e, 0xa83b8000, 0x00000000,
+    0x0000000d, 0xc438e000, 0x00000000, 0x00000160,
+    0xc4351000, 0x00000000, 0x011d0161, 0xc4287000,
+    0x00000000, 0x0035015f, 0xc434e000, 0x00000000,
+    0x01620163, 0xc83bc000, 0x00000000, 0x00000154,
+    0x903bb000, 0x00000000, 0x00000164, 0x84322000,
+    0x00000000, 0x00380166, 0x24345000, 0x00000000,
+    0x00370167, 0xe4226000, 0x00000000, 0x00000168,
+    0x0001b605, 0xe4351000, 0x00000000, 0x016a0169,
+    0x84322100, 0x00000000, 0x00380166, 0x24345000,
+    0x00000000, 0x0037016c, 0xe4226000, 0x00000000,
+    0x0000016d, 0x0001d605, 0xe4351000, 0x00000000,
+    0x016f016e, 0xe434e000, 0x00000000, 0x0170016b,
+    0xe438f000, 0x00000000, 0x0000003e, 0xe4351000,
+    0x00000000, 0x011d0172, 0xe434e000, 0x00000000,
+    0x01730171, 0xe438f000, 0x00000000, 0x00000151,
+    0x00035605, 0xe4351000, 0x00000000, 0x01760175,
+    0xe434e000, 0x00000000, 0x01770174, 0xc438e000,
+    0x00000000, 0x00000178, 0x00006894, 0x000005e4,
+    0x00000548, 0x00040001, 0xc438e000, 0x00000000,
+    0x00000154, 0xe431f000, 0x00000000, 0x011a0152,
+    0x00006894, 0x000005e8, 0x000005ec, 0x00040001,
+    0xc435a100, 0x00000000, 0x00000165, 0xe431f000,
+    0x00000000, 0x011b0152, 0x00006894, 0x000005f0,
+    0x000005f4, 0x00040001, 0xe431f000, 0x00000000,
+    0x010f0152, 0x00006894, 0x00000098, 0x000005f8,
+    0x00040001, 0xe431f000, 0x00000000, 0x011c0152,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0xe4000028, 0x0000017f, 0x00000153,
+    0x00000152, 0x00000180, 0x00000001, 0x00000000,
+    0x00000000, 0x00000000, 0x00000061, 0xe4000028,
+    0x00000182, 0x00000181, 0x00000112, 0x00000183,
+    0xe431f000, 0x00000000, 0x00250010, 0xd0005354,
+    0x00000618, 0x00000400, 0x00009705, 0x00021705,
+    0xe431f000, 0x00000000, 0x01890186, 0xc4005354,
+    0x00000628, 0x00000400, 0x00021605, 0xc435a000,
+    0x00000000, 0x00000187, 0x00011705, 0xc435a200,
+    0x00000000, 0x00000187, 0xc435a100, 0x00000000,
+    0x00000187, 0xc435a300, 0x00000000, 0x00000187,
+    0xc43cc000, 0x00000000, 0x00330039, 0xffe01605,
+    0xc4322000, 0x00000000, 0x01930006, 0xc434e000,
+    0x00000000, 0x01920194, 0xe01ff605, 0xc4322000,
+    0x00000000, 0x01960195, 0x00000605, 0xff00ffff,
+    0x903bb000, 0x00000000, 0x0000000a, 0xc438e000,
+    0x00000000, 0x00000199, 0x00031605, 0xc4351000,
+    0x00000000, 0x019b019a, 0x00000605, 0x00ffffff,
+    0xc4287000, 0x00000000, 0x00350197, 0xc434e000,
+    0x00000000, 0x019c019e, 0x00029705, 0x00031705,
+    0xa438d100, 0x00000000, 0x00000199, 0xa438d200,
+    0x00000000, 0x00000199, 0xa4351000, 0x00000000,
+    0x002601a3, 0xa434e000, 0x00000000, 0x01a401a2,
+    0x84390000, 0x00000000, 0x000001a5, 0x00003505,
+    0xa4288000, 0x00000000, 0x01a701a5, 0x84390000,
+    0x00000000, 0x000001a8, 0xc438e000, 0x00000000,
+    0x000001a6, 0xc4351000, 0x00000000, 0x002601aa,
+    0xffff0e05, 0xc4322000, 0x00000000, 0x000501ac,
+    0xc434e000, 0x00000000, 0x01ab01ad, 0xc438e000,
+    0x00000000, 0x000001a9, 0xc4351000, 0x00000000,
+    0x018c01af, 0xc4322000, 0x00000000, 0x019801ae,
+    0xc434e000, 0x00000000, 0x01b001b1, 0xc438e300,
+    0x00000000, 0x00000199, 0xc4351000, 0x00000000,
+    0x019b01b3, 0xc4322000, 0x00000000, 0x019d01b2,
+    0xc434e000, 0x00000000, 0x01b401b5, 0x903bb000,
+    0x00000000, 0x0000019f, 0x84322000, 0x00000000,
+    0x003801b7, 0x24345000, 0x00000000, 0x003701b8,
+    0xe4226000, 0x00000000, 0x000001b9, 0xe4351000,
+    0x00000000, 0x002601ba, 0xc43bd000, 0x00000000,
+    0x000001bb, 0x0000b605, 0xc434e000, 0x00000000,
+    0x01bd01bc, 0xc43be000, 0x00000000, 0x000001bb,
+    0xe4369000, 0x00000000, 0x01bf01be, 0x84322100,
+    0x00000000, 0x003801b7, 0x24345000, 0x00000000,
+    0x003701c1, 0xe4226000, 0x00000000, 0x000001c2,
+    0x00013605, 0xe4351000, 0x00000000, 0x01c401c3,
+    0xe434e000, 0x00000000, 0x01c501c0, 0x84322200,
+    0x00000000, 0x003801b7, 0x24345000, 0x00000000,
+    0x003701c7, 0xe4226000, 0x00000000, 0x000001c8,
+    0x00015605, 0xe4351000, 0x00000000, 0x01ca01c9,
+    0xe434e000, 0x00000000, 0x01cb01c6, 0xc43bd000,
+    0x00000000, 0x000001cc, 0x7b000e05, 0xc434e000,
+    0x00000000, 0x01cd01ce, 0x00006894, 0x0000073c,
+    0x00000614, 0x00040001, 0xe438f000, 0x00000000,
+    0x00000034, 0xe4351000, 0x00000000, 0x002601d0,
+    0x903bb000, 0x00000000, 0x000001b6, 0x84322000,
+    0x00000000, 0x003801d2, 0x24345000, 0x00000000,
+    0x003701d3, 0xe4226000, 0x00000000, 0x000001d4,
+    0xe4351000, 0x00000000, 0x01c401d5, 0xe434e000,
+    0x00000000, 0x01d601d1, 0xc438e000, 0x00000000,
+    0x000001d7, 0xe431f000, 0x00000000, 0x01880185,
+    0x00006894, 0x00000760, 0x00000764, 0x00040001,
+    0xe431f000, 0x00000000, 0x018e0185, 0x00006894,
+    0x00000634, 0x00000768, 0x00040001, 0xe431f000,
+    0x00000000, 0x010f0185, 0x00006894, 0x0000063c,
+    0x0000076c, 0x00040001, 0xe431f000, 0x00000000,
+    0x01890185, 0x00006894, 0x00000640, 0x00000770,
+    0x00040001, 0xe431f000, 0x00000000, 0x01a00185,
+    0x00006894, 0x0000062c, 0x00000774, 0x00040001,
+    0xe431f000, 0x00000000, 0x01a10185, 0x00006894,
+    0x00000644, 0x00000778, 0x00040001, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000a, 0x00000e05, 0x24327000,
+    0x00000000, 0x01e20030, 0xfffff605, 0xc431f000,
+    0x00000000, 0x01e40030, 0xc4273000, 0x00000000,
+    0x01e201e3, 0x000001e5, 0xe438f000, 0x00000000,
+    0x0000001e, 0xe431f000, 0x00000000, 0x01e70023,
+    0xe4273000, 0x00000000, 0x002301e3, 0x000001e8,
+    0xe431f000, 0x00000000, 0x01e9000f, 0x24345000,
+    0x00000000, 0x01e60021, 0x00000001, 0x000007ac,
+    0x00000000, 0x00000003, 0x00000000, 0x00000002,
+    0xc431f000, 0x00000000, 0x01e40017, 0x24327000,
+    0x00000000, 0x01ed001a, 0x00000001, 0x000007b8,
+    0x00000000, 0x00000001, 0x00000000, 0x0000002d,
+    0x00009705, 0x00011705, 0x00001405, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x000401f3, 0x00015605,
+    0x00021605, 0x903bb000, 0x00000000, 0x00000003,
+    0xc438e000, 0x00000000, 0x000001f7, 0x00031605,
+    0xc4351000, 0x00000000, 0x01f901f8, 0xc4287000,
+    0x00000000, 0x01e201f4, 0xc434e000, 0x00000000,
+    0x01fa01fb, 0x903bb000, 0x00000000, 0x000001fc,
+    0x00003405, 0x84322000, 0x00000000, 0x01fe01fd,
+    0x24345000, 0x00000000, 0x01f201ff, 0xe4226000,
+    0x00000000, 0x00000200, 0xe4351000, 0x00000000,
+    0x01f50201, 0xc43bd000, 0x00000000, 0x00000202,
+    0x00203605, 0xc434e000, 0x00000000, 0x02040203,
+    0xc43be000, 0x00000000, 0x00000202, 0xe4369000,
+    0x00000000, 0x02060205, 0x84322100, 0x00000000,
+    0x01fe01fd, 0x24345000, 0x00000000, 0x01f20208,
+    0xe4226000, 0x00000000, 0x00000209, 0x0001f605,
+    0xe4351000, 0x00000000, 0x020b020a, 0xe434e000,
+    0x00000000, 0x020c0207, 0x84322200, 0x00000000,
+    0x01fe01fd, 0x24345000, 0x00000000, 0x01f2020e,
+    0xe4226000, 0x00000000, 0x0000020f, 0xe4351000,
+    0x00000000, 0x01f60210, 0xe434e000, 0x00000000,
+    0x0211020d, 0xc43bd000, 0x00000000, 0x00000212,
+    0x18800e05, 0xc434e000, 0x00000000, 0x02140213,
+    0x00006894, 0x00000854, 0x000007a8, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000018, 0xe431f000,
+    0x00000000, 0x01f001ea, 0x00006894, 0x00000858,
+    0x0000085c, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000018, 0xe431f000, 0x00000000, 0x01f101ea,
+    0x00006894, 0x00000860, 0x00000864, 0x00040001,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000, 0x00000001, 0x00000000, 0x0000002d,
+    0x00009705, 0x00011705, 0x00001405, 0xffff0e05,
+    0xc4322000, 0x00000000, 0x00020220, 0x00015605,
+    0x00021605, 0x903bb000, 0x00000000, 0x00000003,
+    0xc438e000, 0x00000000, 0x00000224, 0x00031605,
+    0xc4351000, 0x00000000, 0x02260225, 0xc4287000,
+    0x00000000, 0x01e20221, 0xc434e000, 0x00000000,
+    0x02270228, 0x903bb000, 0x00000000, 0x00000229,
+    0x00003405, 0x84322000, 0x00000000, 0x022b022a,
+    0x24345000, 0x00000000, 0x021f022c, 0xe4226000,
+    0x00000000, 0x0000022d, 0xe4351000, 0x00000000,
+    0x0222022e, 0xc43bd000, 0x00000000, 0x0000022f,
+    0x00203605, 0xc434e000, 0x00000000, 0x02310230,
+    0xc43be000, 0x00000000, 0x0000022f, 0xe4369000,
+    0x00000000, 0x02330232, 0x84322100, 0x00000000,
+    0x022b022a, 0x24345000, 0x00000000, 0x021f0235,
+    0xe4226000, 0x00000000, 0x00000236, 0x0001f605,
+    0xe4351000, 0x00000000, 0x02380237, 0xe434e000,
+    0x00000000, 0x02390234, 0x84322200, 0x00000000,
+    0x022b022a, 0x24345000, 0x00000000, 0x021f023b,
+    0xe4226000, 0x00000000, 0x0000023c, 0xe4351000,
+    0x00000000, 0x0223023d, 0xe434e000, 0x00000000,
+    0x023e023a, 0xc43bd000, 0x00000000, 0x0000023f,
+    0x18800e05, 0xc434e000, 0x00000000, 0x02410240,
+    0x00006894, 0x00000908, 0x000007a8, 0x00040001,
+    0xc438e000, 0x00000000, 0x00000019, 0xe431f000,
+    0x00000000, 0x021d01ea, 0x00006894, 0x0000090c,
+    0x00000910, 0x00040001, 0xc43be000, 0x00000000,
+    0x00000019, 0xe431f000, 0x00000000, 0x021e01ea,
+    0x00006894, 0x00000914, 0x00000918, 0x00040001,
+    0x00000000, 0x00000000,
+};
+   nir_def *args[12] = { dst_base, indirect_base, draw_id_base, indirect_stride, indirect_draw_count, draw_base, max_draw_count, flags, ring_count, gen_addr, end_addr, item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx9_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx9_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx)
+{
+   /*
+    block b0:   // preds:
+    64     %0 = @load_param (param_idx=0)
+    32     %1 = @load_param (param_idx=1)
+    64     %2 = @load_param (param_idx=2)
+    32     %3 = @load_param (param_idx=3)
+    32     %4 = @load_param (param_idx=4)
+    32     %5 = @load_param (param_idx=6)
+    32     %6 = @load_param (param_idx=7)
+    32     %7 = @load_param (param_idx=8)
+    32     %8 = @load_param (param_idx=9)
+    1      %9 = ult %8, %4
+                // succs: b1 b19
+    if %9 {
+        block b1:   // preds: b0
+        32    %10 = load_const (0x00000001)
+        32    %11 = iand %7, %10 (0x1)
+        32    %12 = load_const (0x00000000)
+        1     %13 = ine %11, %12 (0x0)
+        32    %14 = load_const (0x00000002)
+        32    %15 = iand %7, %14 (0x2)
+        1     %16 = ine %15, %12 (0x0)
+        32    %17 = load_const (0x00000004)
+        32    %18 = iand %7, %17 (0x4)
+        1     %19 = ieq %18, %12 (0x0)
+        32    %20 = load_const (0x00000008)
+        32    %21 = iand %7, %20 (0x8)
+        1     %22 = ine %21, %12 (0x0)
+        32    %23 = iadd %3, %8
+        32    %24 = imul %23, %5
+        64    %25 = u2u64 %24
+        32    %26 = imul %8, %1
+        64    %27 = u2u64 %26
+        64    %28 = iadd %2, %25
+        32    %29 = @load_global (%28) (access=none, align_mul=4, align_offset=0)
+        64    %30 = u2u64 %29
+                    // succs: b2 b6
+        if %16 {
+            block b2:   // preds: b1
+            1     %31 = inot %13
+                        // succs: b3 b4
+            if %31 {
+                block b3:   // preds: b2
+                64    %32 = u2u64 %6
+                64    %33 = iadd %0, %27
+                64    %34 = ishl %32, %14 (0x2)
+                64    %35 = iadd %33, %34
+                            @store_global (%29, %35) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b5
+            } else {
+                block b4:   // preds: b2
+                64    %36 = u2u64 %6
+                64    %37 = iadd %0, %27
+                32    %38 = load_const (0x00000003)
+                64    %39 = ishl %36, %38 (0x3)
+                64    %40 = iadd %37, %39
+                            @store_global (%30, %40) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b5
+            }
+            block b5:  // preds: b3 b4, succs: b7
+        } else {
+            block b6:  // preds: b1, succs: b7
+        }
+        block b7:  // preds: b5 b6, succs: b8
+        loop {
+            block b8:   // preds: b7 b17
+            32    %41 = phi b7: %12 (0x0), b17: %75
+            1     %42 = uge %41, %6
+                        // succs: b9 b10
+            if %42 {
+                block b9:// preds: b8
+                break
+                // succs: b18
+            } else {
+                block b10:  // preds: b8, succs: b11
+            }
+            block b11:  // preds: b10
+            32    %43 = ishl %41, %10 (0x1)
+            32    %44 = iadd %10 (0x1), %43
+                        // succs: b12 b13
+            if %19 {
+                block b12:  // preds: b11
+                64    %45 = u2u64 %44
+                32    %46 = load_const (0x00000003)
+                64    %47 = ishl %45, %46 (0x3)
+                64    %48 = iadd %28, %47
+                64    %49 = @load_global (%48) (access=none, align_mul=8, align_offset=0)
+                            // succs: b14
+            } else {
+                block b13:  // preds: b11
+                64    %50 = u2u64 %44
+                32    %51 = load_const (0x00000003)
+                64    %52 = ishl %50, %51 (0x3)
+                64    %53 = iadd %28, %52
+                32x4  %54 = @load_global (%53) (access=none, align_mul=8, align_offset=0)
+                64    %55 = pack_64_2x32 %54.zw
+                64    %56 = pack_64_2x32 %54.xy
+                64    %57 = ineg %56
+                64    %58 = iadd %55, %57
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13
+            64    %59 = phi b12: %49, b13: %58
+            64    %60 = load_const (0x0000000000000000)
+            1     %61 = ieq %29, %12 (0x0)
+            1     %62 = iand %22, %61
+            64    %63 = bcsel %62, %60 (0x0), %59
+            1     %64 = inot %13
+                        // succs: b15 b16
+            if %64 {
+                block b15:  // preds: b14
+                32    %65 = u2u32 %63
+                64    %66 = u2u64 %41
+                64    %67 = iadd %0, %27
+                64    %68 = ishl %66, %14 (0x2)
+                64    %69 = iadd %67, %68
+                            @store_global (%65, %69) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                            // succs: b17
+            } else {
+                block b16:  // preds: b14
+                64    %70 = u2u64 %41
+                64    %71 = iadd %0, %27
+                32    %72 = load_const (0x00000003)
+                64    %73 = ishl %70, %72 (0x3)
+                64    %74 = iadd %71, %73
+                            @store_global (%63, %74) (wrmask=x, access=none, align_mul=8, align_offset=0)
+                            // succs: b17
+            }
+            block b17:  // preds: b15 b16
+            32    %75 = iadd %41, %10 (0x1)
+                        // succs: b8
+        }
+        block b18:  // preds: b9, succs: b20
+    } else {
+        block b19:  // preds: b0, succs: b20
+    }
+    block b20:  // preds: b18 b19, succs: b21
+    block b21:
+   */
+   static const uint32_t impl_0_nir[336] = {
+    0x00000062, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x0000000a, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000a, 0xe4001744,
+    0xc4011744, 0xe4021744, 0xc4031744, 0xc4041744,
+    0xc4061744, 0xc4071744, 0xc4081744, 0xc4091744,
+    0x243a6000, 0x00000000, 0x0006000a, 0x00000001,
+    0x0000002c, 0x00000000, 0x00000005, 0x00000000,
+    0x00000015, 0x00003605, 0xc4322000, 0x00000000,
+    0x000d0009, 0x00000e05, 0x24345000, 0x00000000,
+    0x000f000e, 0x00005605, 0xc4322000, 0x00000000,
+    0x00110009, 0x24345000, 0x00000000, 0x000f0012,
+    0x00009605, 0xc4322000, 0x00000000, 0x00140009,
+    0x24327000, 0x00000000, 0x000f0015, 0x00011605,
+    0xc4322000, 0x00000000, 0x00170009, 0x24345000,
+    0x00000000, 0x000f0018, 0xc431f000, 0x00000000,
+    0x000a0005, 0xc433f000, 0x00000000, 0x0007001a,
+    0xe438f000, 0x00000000, 0x0000001b, 0xc433f000,
+    0x00000000, 0x0003000a, 0xe438f000, 0x00000000,
+    0x0000001d, 0xe431f000, 0x00000000, 0x001c0004,
+    0xc4005354, 0x0000007c, 0x00000400, 0xe438f000,
+    0x00000000, 0x00000020, 0x00000001, 0x0000004c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000001,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x0000008c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001e0002, 0xe4351000,
+    0x00000000, 0x00110025, 0xe431f000, 0x00000000,
+    0x00270026, 0x00006894, 0x00000080, 0x000000a0,
+    0x00040001, 0x00000001, 0x00000000, 0x00000006,
+    0xe438f000, 0x00000000, 0x00000008, 0xe431f000,
+    0x00000000, 0x001e0002, 0x00007605, 0xe4351000,
+    0x00000000, 0x002c002a, 0xe431f000, 0x00000000,
+    0x002d002b, 0x00006894, 0x00000084, 0x000000b8,
+    0x00080001, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0x00000000, 0x00000007, 0x00000000,
+    0x00000002, 0xc4000028, 0x0000000f, 0x00000031,
+    0x0000005e, 0x0000005d, 0x243a0000, 0x00000000,
+    0x00080033, 0x00000001, 0x000000d0, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000002, 0xc4351000, 0x00000000, 0x000d0033,
+    0xc431f000, 0x00000000, 0x0038000d, 0x00000001,
+    0x00000058, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x003c003b,
+    0xe431f000, 0x00000000, 0x003d001f, 0xe4005354,
+    0x000000f8, 0x00000800, 0x00000001, 0x00000000,
+    0x00000009, 0xe438f000, 0x00000000, 0x00000039,
+    0x00007605, 0xe4351000, 0x00000000, 0x00420041,
+    0xe431f000, 0x00000000, 0x0043001f, 0xd0005354,
+    0x00000110, 0x00000800, 0xe4168000, 0x00000000,
+    0x5e000114, 0xe4368000, 0x00000000, 0x00000045,
+    0xe4349000, 0x00000000, 0x00000047, 0xe431f000,
+    0x00000000, 0x00480046, 0x00000000, 0x00000006,
+    0xe4000028, 0x0000003f, 0x0000003a, 0x00000049,
+    0x00000040, 0x00000f05, 0x24327000, 0x00000000,
+    0x000f0020, 0x24322000, 0x00000000, 0x004d0019,
+    0xe4273000, 0x00000000, 0x004c004e, 0x0000004b,
+    0x2434a000, 0x00000000, 0x00000010, 0x00000001,
+    0x00000140, 0x00000000, 0x00000001, 0x00000000,
+    0x00000006, 0xc438e000, 0x00000000, 0x0000004f,
+    0xe438f000, 0x00000000, 0x00000033, 0xe431f000,
+    0x00000000, 0x001e0002, 0xe4351000, 0x00000000,
+    0x00110053, 0xe431f000, 0x00000000, 0x00550054,
+    0x00006894, 0x00000148, 0x00000158, 0x00040001,
+    0x00000001, 0x00000000, 0x00000006, 0xe438f000,
+    0x00000000, 0x00000033, 0xe431f000, 0x00000000,
+    0x001e0002, 0x00007605, 0xe4351000, 0x00000000,
+    0x005a0058, 0xe431f000, 0x00000000, 0x005b0059,
+    0x00006894, 0x0000013c, 0x00000170, 0x00080001,
+    0x00000000, 0x00000001, 0xc431f000, 0x00000000,
+    0x000d0033, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+   nir_def *args[10] = { destination_base, destination_stride, query_data, first_query, num_queries, query_data_offset, query_stride, num_query_items, copy_flags, copy_item_idx };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx9_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx9_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = @load_param (param_idx=3)
+    32     %5 = load_const (0x00000004)
+    32     %6 = load_const (0x00000002)
+    32     %7 = ishl %4, %6 (0x2)
+    64     %8 = u2u64 %7
+    32     %9 = iadd %4, %5 (0x4)
+    1     %10 = ult %3, %9
+                // succs: b1 b11
+    if %10 {
+        block b1:   // preds: b0
+        32    %11 = load_const (0x00000003)
+        32    %12 = iadd %4, %11 (0x3)
+        1     %13 = ult %3, %12
+                    // succs: b2 b9
+        if %13 {
+            block b2:   // preds: b1
+            32    %14 = iadd %4, %6 (0x2)
+            1     %15 = ult %3, %14
+                        // succs: b3 b7
+            if %15 {
+                block b3:   // preds: b2
+                32    %16 = load_const (0x00000001)
+                32    %17 = iadd %4, %16 (0x1)
+                1     %18 = uge %3, %17
+                            // succs: b4 b5
+                if %18 {
+                    block b4:   // preds: b3
+                    64    %19 = iadd %2, %8
+                    32    %20 = @load_global (%19) (access=none, align_mul=4, align_offset=0)
+                    64    %21 = iadd %1, %8
+                                @store_global (%20, %21) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                // succs: b6
+                } else {
+                    block b5:  // preds: b3, succs: b6
+                }
+                block b6:  // preds: b4 b5, succs: b8
+            } else {
+                block b7:   // preds: b2
+                64    %22 = iadd %2, %8
+                32x2  %23 = @load_global (%22) (access=none, align_mul=8, align_offset=0)
+                64    %24 = iadd %1, %8
+                            @store_global (%23, %24) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                            // succs: b8
+            }
+            block b8:  // preds: b6 b7, succs: b10
+        } else {
+            block b9:   // preds: b1
+            64    %25 = iadd %2, %8
+            32x4  %26 = @load_global (%25) (access=none, align_mul=16, align_offset=0)
+            32x4  %27 = vec4 %26.x, %26.y, %26.z, %0
+            64    %28 = iadd %1, %8
+                        @store_global (%27, %28) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                        // succs: b10
+        }
+        block b10:  // preds: b8 b9, succs: b12
+    } else {
+        block b11:  // preds: b0
+        64    %29 = iadd %2, %8
+        32x4  %30 = @load_global (%29) (access=none, align_mul=16, align_offset=0)
+        64    %31 = iadd %1, %8
+                    @store_global (%30, %31) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                    // succs: b12
+    }
+    block b12:  // preds: b10 b11, succs: b13
+    block b13:
+   */
+   static const uint32_t impl_0_nir[168] = {
+    0x0000002e, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000004, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x0000000b, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0xc4031744,
+    0x00009605, 0x00005605, 0xc4351000, 0x00000000,
+    0x00080006, 0xe438f000, 0x00000000, 0x00000009,
+    0xc431f000, 0x00000000, 0x00070006, 0x243a6000,
+    0x00000000, 0x000b0005, 0x00000001, 0x00000030,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00007605, 0xc431f000, 0x00000000, 0x000e0006,
+    0x243a6000, 0x00000000, 0x000f0005, 0x00000001,
+    0x00000040, 0x00000000, 0x00000003, 0x00000000,
+    0x00000002, 0xc431f000, 0x00000000, 0x00080006,
+    0x243a6000, 0x00000000, 0x00120005, 0x00000001,
+    0x0000004c, 0x00000000, 0x00000003, 0x00000000,
+    0x00000003, 0x00003605, 0xc431f000, 0x00000000,
+    0x00150006, 0x243a0000, 0x00000000, 0x00160005,
+    0x00000001, 0x0000005c, 0x00000000, 0x00000001,
+    0x00000000, 0x00000004, 0xe431f000, 0x00000000,
+    0x000a0004, 0xc4005354, 0x00000064, 0x00000400,
+    0xe431f000, 0x00000000, 0x000a0003, 0x00006894,
+    0x00000068, 0x0000006c, 0x00040001, 0x00000001,
+    0x00000000, 0x00000000, 0x00000000, 0x00000000,
+    0x00000001, 0x00000000, 0x00000004, 0xe431f000,
+    0x00000000, 0x000a0004, 0xc8005354, 0x0000007c,
+    0x00000800, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000080, 0x00000084, 0x00080003,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x00000090, 0x00001000, 0xd01d3000,
+    0x00000000, 0xe4000094, 0xe5000094, 0xe6000094,
+    0xe4000008, 0xe431f000, 0x00000000, 0x000a0003,
+    0x00006894, 0x00000098, 0x0000009c, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000004, 0xe431f000, 0x00000000, 0x000a0004,
+    0xd0005354, 0x000000a8, 0x00001000, 0xe431f000,
+    0x00000000, 0x000a0003, 0x00006894, 0x000000ac,
+    0x000000b0, 0x0010000f, 0x00000000, 0x00000000,
+};
+   nir_def *args[4] = { dst_base, src_base, num_dwords, dword_offset };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+void
+gfx9_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+void
+gfx9_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size)
+{
+   /*
+    block b0:   // preds:
+    32     %0 = undefined
+    64     %1 = @load_param (param_idx=0)
+    64     %2 = @load_param (param_idx=1)
+    32     %3 = @load_param (param_idx=2)
+    32     %4 = load_const (0x00000000)
+                // succs: b1
+    loop {
+        block b1:   // preds: b0 b16
+        32     %5 = phi b0: %4 (0x0), b16: %8
+        1      %6 = uge %5, %3
+                    // succs: b2 b3
+        if %6 {
+            block b2:// preds: b1
+            break
+            // succs: b17
+        } else {
+            block b3:  // preds: b1, succs: b4
+        }
+        block b4:   // preds: b3
+        32     %7 = load_const (0x00000010 = 16)
+        32     %8 = iadd %5, %7 (0x10)
+        1      %9 = ult %3, %8
+                    // succs: b5 b15
+        if %9 {
+            block b5:   // preds: b4
+            32    %10 = load_const (0x0000000c = 12)
+            32    %11 = iadd %5, %10 (0xc)
+            1     %12 = ult %3, %11
+                        // succs: b6 b13
+            if %12 {
+                block b6:   // preds: b5
+                32    %13 = load_const (0x00000008)
+                32    %14 = iadd %5, %13 (0x8)
+                1     %15 = ult %3, %14
+                            // succs: b7 b11
+                if %15 {
+                    block b7:   // preds: b6
+                    32    %16 = load_const (0x00000004)
+                    32    %17 = iadd %5, %16 (0x4)
+                    1     %18 = uge %3, %17
+                                // succs: b8 b9
+                    if %18 {
+                        block b8:   // preds: b7
+                        64    %19 = u2u64 %5
+                        64    %20 = iadd %2, %19
+                        32    %21 = @load_global (%20) (access=none, align_mul=4, align_offset=0)
+                        64    %22 = iadd %1, %19
+                                    @store_global (%21, %22) (wrmask=x, access=none, align_mul=4, align_offset=0)
+                                    // succs: b10
+                    } else {
+                        block b9:  // preds: b7, succs: b10
+                    }
+                    block b10:  // preds: b8 b9, succs: b12
+                } else {
+                    block b11:  // preds: b6
+                    64    %23 = u2u64 %5
+                    64    %24 = iadd %2, %23
+                    32x2  %25 = @load_global (%24) (access=none, align_mul=8, align_offset=0)
+                    64    %26 = iadd %1, %23
+                                @store_global (%25, %26) (wrmask=xy, access=none, align_mul=8, align_offset=0)
+                                // succs: b12
+                }
+                block b12:  // preds: b10 b11, succs: b14
+            } else {
+                block b13:  // preds: b5
+                64    %27 = u2u64 %5
+                64    %28 = iadd %2, %27
+                32x4  %29 = @load_global (%28) (access=none, align_mul=16, align_offset=0)
+                64    %30 = iadd %1, %27
+                32x4  %31 = vec4 %29.x, %29.y, %29.z, %0
+                            @store_global (%31, %30) (wrmask=xyz, access=none, align_mul=16, align_offset=0)
+                            // succs: b14
+            }
+            block b14:  // preds: b12 b13, succs: b16
+        } else {
+            block b15:  // preds: b4
+            64    %32 = u2u64 %5
+            64    %33 = iadd %2, %32
+            32x4  %34 = @load_global (%33) (access=none, align_mul=16, align_offset=0)
+            64    %35 = iadd %1, %32
+                        @store_global (%34, %35) (wrmask=xyzw, access=none, align_mul=16, align_offset=0)
+                        // succs: b16
+        }
+        block b16:  // preds: b14 b15, succs: b1
+    }
+    block b17:  // preds: b2, succs: b18
+    block b18:
+   */
+   static const uint32_t impl_0_nir[197] = {
+    0x00000037, 0x00000028, 0x00000000, 0x00000000,
+    0x00000000, 0x00000003, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00004001, 0x00000249,
+    0x00000020, 0x00000000, 0x00002001, 0x00000240,
+    0x00000020, 0x00000000, 0x00000001, 0x00000000,
+    0x00000003, 0x00000000, 0x00000005, 0x00000607,
+    0xe4001744, 0xe4011744, 0xc4021744, 0x00000e05,
+    0x00000002, 0x00000000, 0x00000005, 0x00000000,
+    0x00000002, 0xc4000028, 0x00000006, 0x00000001,
+    0x0000000e, 0x00000035, 0x243a0000, 0x00000000,
+    0x00050008, 0x00000001, 0x00000024, 0x00000000,
+    0x00000001, 0x00000000, 0x00000001, 0x00000026,
+    0x00000001, 0x00000000, 0x00000000, 0x00000000,
+    0x00000003, 0x00021605, 0xc431f000, 0x00000000,
+    0x000d0008, 0x243a6000, 0x00000000, 0x000e0005,
+    0x00000001, 0x0000003c, 0x00000000, 0x00000003,
+    0x00000000, 0x00000003, 0x00019605, 0xc431f000,
+    0x00000000, 0x00110008, 0x243a6000, 0x00000000,
+    0x00120005, 0x00000001, 0x0000004c, 0x00000000,
+    0x00000003, 0x00000000, 0x00000003, 0x00011605,
+    0xc431f000, 0x00000000, 0x00150008, 0x243a6000,
+    0x00000000, 0x00160005, 0x00000001, 0x0000005c,
+    0x00000000, 0x00000003, 0x00000000, 0x00000003,
+    0x00009605, 0xc431f000, 0x00000000, 0x00190008,
+    0x243a0000, 0x00000000, 0x001a0005, 0x00000001,
+    0x0000006c, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x001d0004, 0xc4005354,
+    0x00000078, 0x00000400, 0xe431f000, 0x00000000,
+    0x001d0003, 0x00006894, 0x0000007c, 0x00000080,
+    0x00040001, 0x00000001, 0x00000000, 0x00000000,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00240004, 0xc8005354,
+    0x00000094, 0x00000800, 0xe431f000, 0x00000000,
+    0x00240003, 0x00006894, 0x00000098, 0x0000009c,
+    0x00080003, 0x00000000, 0x00000000, 0x00000001,
+    0x00000000, 0x00000006, 0xe438f000, 0x00000000,
+    0x00000008, 0xe431f000, 0x00000000, 0x002a0004,
+    0xd0005354, 0x000000ac, 0x00001000, 0xe431f000,
+    0x00000000, 0x002a0003, 0xd01d3000, 0x00000000,
+    0xe40000b0, 0xe50000b0, 0xe60000b0, 0xe4000008,
+    0x00006894, 0x000000b8, 0x000000b4, 0x00100007,
+    0x00000000, 0x00000000, 0x00000001, 0x00000000,
+    0x00000005, 0xe438f000, 0x00000000, 0x00000008,
+    0xe431f000, 0x00000000, 0x00310004, 0xd0005354,
+    0x000000c8, 0x00001000, 0xe431f000, 0x00000000,
+    0x00310003, 0x00006894, 0x000000cc, 0x000000d0,
+    0x0010000f, 0x00000000, 0x00000000, 0x00000000,
+    0x00000000,
+};
+   nir_def *args[3] = { dst_ptr, src_ptr, size };
+   nir_call_serialized(b, impl_0_nir, sizeof(impl_0_nir), args);
+}
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
+struct vtn_bindgen_dummy {
+   vtn_bindgen_dummy() {
+      /* Format strings:
+       *
+       */
+const uint32_t printf_0_blob[1] = {
+    0x00000000,
+};
+      u_printf_singleton_init_or_ref();
+      u_printf_singleton_add_serialized((const void*)printf_0_blob, sizeof(printf_0_blob));
+   }
+
+   ~vtn_bindgen_dummy() {
+      u_printf_singleton_decref();
+   }
+};
+
+static vtn_bindgen_dummy vtn_bindgen_dummy_instance;
diff --git a/src/intel/shaders/intel_gfx90_shaders_binding.h b/src/intel/shaders/intel_gfx90_shaders_binding.h
new file mode 100644
index 00000000000..10a6fe8a0e0
--- /dev/null
+++ b/src/intel/shaders/intel_gfx90_shaders_binding.h
@@ -0,0 +1,50 @@
+/*
+ * Copyright Mesa3D Contributors
+ * SPDX-License-Identifier: MIT
+ *
+ * Autogenerated file, do not edit
+ */
+
+#pragma once
+
+#include "compiler/nir/nir.h"
+#include "compiler/nir/nir_builder.h"
+
+#include "util/u_printf.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+void
+gfx9_write_3DSTATE_VERTEX_BUFFERS(nir_builder *b, nir_def *dst_ptr, nir_def *buffer_count);
+
+void
+gfx9_write_VERTEX_BUFFER_STATE(nir_builder *b, nir_def *dst_ptr, nir_def *mocs, nir_def *buffer_idx, nir_def *address, nir_def *size, nir_def *stride);
+
+void
+gfx9_write_3DPRIMITIVE(nir_builder *b, nir_def *dst_ptr, nir_def *is_predicated, nir_def *is_indexed, nir_def *uses_tbimr, nir_def *vertex_count_per_instance, nir_def *start_vertex_location, nir_def *instance_count, nir_def *start_instance_location, nir_def *base_vertex_location);
+
+void
+gfx9_write_MI_BATCH_BUFFER_START(nir_builder *b, nir_def *dst_ptr, nir_def *addr);
+
+void
+gfx9_write_draw(nir_builder *b, nir_def *dst_ptr, nir_def *indirect_ptr, nir_def *draw_id_ptr, nir_def *draw_id, nir_def *instance_multiplier, nir_def *is_indexed, nir_def *is_predicated, nir_def *uses_tbimr, nir_def *uses_base, nir_def *uses_drawid, nir_def *mocs);
+
+void
+gfx9_libanv_write_draw(nir_builder *b, nir_def *dst_base, nir_def *wa_insts_ptr, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *_draw_count, nir_def *draw_base, nir_def *instance_multiplier, nir_def *max_draw_count, nir_def *flags, nir_def *mocs, nir_def *_3dprim_size_B, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx9_libiris_write_draw(nir_builder *b, nir_def *dst_base, nir_def *indirect_base, nir_def *draw_id_base, nir_def *indirect_stride, nir_def *indirect_draw_count, nir_def *draw_base, nir_def *max_draw_count, nir_def *flags, nir_def *ring_count, nir_def *gen_addr, nir_def *end_addr, nir_def *item_idx);
+
+void
+gfx9_libanv_query_copy(nir_builder *b, nir_def *destination_base, nir_def *destination_stride, nir_def *query_data, nir_def *first_query, nir_def *num_queries, nir_def *query_data_offset, nir_def *query_stride, nir_def *num_query_items, nir_def *copy_flags, nir_def *copy_item_idx);
+
+void
+gfx9_libanv_memcpy(nir_builder *b, nir_def *dst_base, nir_def *src_base, nir_def *num_dwords, nir_def *dword_offset);
+
+void
+gfx9_copy_data(nir_builder *b, nir_def *dst_ptr, nir_def *src_ptr, nir_def *size);
+
+#ifdef __cplusplus
+} /* extern C */
+#endif
diff --git a/src/intel/shaders/meson.build b/src/intel/shaders/meson.build
index fbd1accb7e8..ca07f771d8c 100644
--- a/src/intel/shaders/meson.build
+++ b/src/intel/shaders/meson.build
@@ -38,34 +38,9 @@ intel_shaders_gens = [ [ 80,   8],
 intel_shaders = []
 intel_shaders_headers = []
 foreach gen : intel_shaders_gens
-  intel_shaders_spv = custom_target(
-    input : intel_shader_files,
-    output : 'intel_gfx@0@_shaders.spv'.format(gen[0]),
-    command : [
-      prog_mesa_clc,
-      intel_shader_files, '-o', '@OUTPUT@', '--depfile', '@DEPFILE@', '--',
-      '-DGFX_VERx10=@0@'.format(gen[0]),
-      '-I' + join_paths(meson.current_source_dir(), '.'),
-      '-I' + join_paths(dir_source_root, 'src/compiler/libcl'),
-      '-I' + join_paths(dir_source_root, 'src'),
-      '-I' + join_paths(dir_source_root, 'src/intel'),
-      '-I' + join_paths(meson.project_build_root(), 'src/intel'),
-      '-I' + join_paths(dir_source_root, 'src/intel/genxml'),
-      cl_args,
-    ],
-    depends : [gen_cl_xml_pack, intel_dev_wa_src],
-    depfile : 'intel_gfx@0@_shaders.spv.d'.format(gen[0]),
-  )
-
-  _intel_shaders = custom_target(
-    input : intel_shaders_spv,
-    output : ['intel_gfx@0@_shaders_binding.cpp'.format(gen[0]),
-              'intel_gfx@0@_shaders_binding.h'.format(gen[0])],
-    command : [prog_vtn_bindgen2, intel_shaders_spv, '@OUTPUT0@', '@OUTPUT1@'],
-  )
-
-  intel_shaders += _intel_shaders
-  intel_shaders_headers += _intel_shaders[1]
+  intel_shaders += 'intel_gfx@0@_shaders_binding.cpp'.format(gen[0])
+  intel_shaders += 'intel_gfx@0@_shaders_binding.h'.format(gen[0])
+  intel_shaders_headers = 'intel_gfx@0@_shaders_binding.h'.format(gen[0])
 endforeach
 
 libintel_shaders = static_library(
